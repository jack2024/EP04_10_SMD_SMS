CCS PCH C Compiler, Version 5.091, 5967               10-¡.Â.-21 11:04

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_10 - Delay - SP - SMD -SMS\ESPAN-04_test_faultDelayTime.lst

               ROM used:   30938 bytes (47%)
                           Largest free fragment is 34594
               RAM used:   2898 (74%) at main() level
                           2914 (75%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   70CA
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.0
00056:  GOTO   0060
0005A:  BTFSC  F9E.0
0005C:  GOTO   0564
00060:  BTFSS  F9D.1
00062:  GOTO   006C
00066:  BTFSC  F9E.1
00068:  GOTO   056A
0006C:  BTFSS  F9D.5
0006E:  GOTO   0078
00072:  BTFSC  F9E.5
00074:  GOTO   0554
00078:  MOVFF  0E,00
0007C:  MOVFF  0F,01
00080:  MOVFF  10,02
00084:  MOVFF  11,03
00088:  MOVFF  0C,FE9
0008C:  MOVFF  07,FEA
00090:  BSF    07.7
00092:  MOVFF  08,FE1
00096:  MOVFF  09,FE2
0009A:  MOVFF  0A,FD9
0009E:  MOVFF  0B,FDA
000A2:  MOVFF  12,FF3
000A6:  MOVFF  13,FF4
000AA:  MOVFF  14,FFA
000AE:  MOVFF  15,FF5
000B2:  MOVFF  16,FF6
000B6:  MOVFF  17,FF7
000BA:  MOVF   04,W
000BC:  MOVFF  06,FE0
000C0:  MOVFF  05,FD8
000C4:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000C6:  CLRF   FF7
000C8:  ADDLW  D6
000CA:  MOVWF  FF6
000CC:  MOVLW  00
000CE:  ADDWFC FF7,F
000D0:  TBLRD*+
000D2:  MOVF   FF5,W
000D4:  RETURN 0
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 01,C0
000E0:  DATA 80,41
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 00,C1
000EC:  DATA 81,40
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 01,C0
000F4:  DATA 80,41
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 00,C1
00100:  DATA 81,40
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 01,C0
00110:  DATA 80,41
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 00,C1
00120:  DATA 81,40
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 01,C0
0012C:  DATA 80,41
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 00,C1
00134:  DATA 81,40
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 01,C0
00140:  DATA 80,41
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 00,C1
0014C:  DATA 81,40
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 01,C0
00154:  DATA 80,41
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 00,C1
00160:  DATA 81,40
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 01,C0
0016C:  DATA 80,41
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 00,C1
00174:  DATA 81,40
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 01,C0
00180:  DATA 80,41
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 00,C1
00190:  DATA 81,40
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 01,C0
001A0:  DATA 80,41
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 00,C1
001AC:  DATA 81,40
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 01,C0
001B4:  DATA 80,41
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 00,C1
001C0:  DATA 81,40
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  DATA 01,C0
001CC:  DATA 80,41
001CE:  DATA 01,C0
001D0:  DATA 80,41
001D2:  DATA 00,C1
001D4:  DATA 81,40
001D6:  CLRF   FF7
001D8:  ADDLW  E6
001DA:  MOVWF  FF6
001DC:  MOVLW  01
001DE:  ADDWFC FF7,F
001E0:  TBLRD*+
001E2:  MOVF   FF5,W
001E4:  RETURN 0
001E6:  DATA 00,C0
001E8:  DATA C1,01
001EA:  DATA C3,03
001EC:  DATA 02,C2
001EE:  DATA C6,06
001F0:  DATA 07,C7
001F2:  DATA 05,C5
001F4:  DATA C4,04
001F6:  DATA CC,0C
001F8:  DATA 0D,CD
001FA:  DATA 0F,CF
001FC:  DATA CE,0E
001FE:  DATA 0A,CA
00200:  DATA CB,0B
00202:  DATA C9,09
00204:  DATA 08,C8
00206:  DATA D8,18
00208:  DATA 19,D9
0020A:  DATA 1B,DB
0020C:  DATA DA,1A
0020E:  DATA 1E,DE
00210:  DATA DF,1F
00212:  DATA DD,1D
00214:  DATA 1C,DC
00216:  DATA 14,D4
00218:  DATA D5,15
0021A:  DATA D7,17
0021C:  DATA 16,D6
0021E:  DATA D2,12
00220:  DATA 13,D3
00222:  DATA 11,D1
00224:  DATA D0,10
00226:  DATA F0,30
00228:  DATA 31,F1
0022A:  DATA 33,F3
0022C:  DATA F2,32
0022E:  DATA 36,F6
00230:  DATA F7,37
00232:  DATA F5,35
00234:  DATA 34,F4
00236:  DATA 3C,FC
00238:  DATA FD,3D
0023A:  DATA FF,3F
0023C:  DATA 3E,FE
0023E:  DATA FA,3A
00240:  DATA 3B,FB
00242:  DATA 39,F9
00244:  DATA F8,38
00246:  DATA 28,E8
00248:  DATA E9,29
0024A:  DATA EB,2B
0024C:  DATA 2A,EA
0024E:  DATA EE,2E
00250:  DATA 2F,EF
00252:  DATA 2D,ED
00254:  DATA EC,2C
00256:  DATA E4,24
00258:  DATA 25,E5
0025A:  DATA 27,E7
0025C:  DATA E6,26
0025E:  DATA 22,E2
00260:  DATA E3,23
00262:  DATA E1,21
00264:  DATA 20,E0
00266:  DATA A0,60
00268:  DATA 61,A1
0026A:  DATA 63,A3
0026C:  DATA A2,62
0026E:  DATA 66,A6
00270:  DATA A7,67
00272:  DATA A5,65
00274:  DATA 64,A4
00276:  DATA 6C,AC
00278:  DATA AD,6D
0027A:  DATA AF,6F
0027C:  DATA 6E,AE
0027E:  DATA AA,6A
00280:  DATA 6B,AB
00282:  DATA 69,A9
00284:  DATA A8,68
00286:  DATA 78,B8
00288:  DATA B9,79
0028A:  DATA BB,7B
0028C:  DATA 7A,BA
0028E:  DATA BE,7E
00290:  DATA 7F,BF
00292:  DATA 7D,BD
00294:  DATA BC,7C
00296:  DATA B4,74
00298:  DATA 75,B5
0029A:  DATA 77,B7
0029C:  DATA B6,76
0029E:  DATA 72,B2
002A0:  DATA B3,73
002A2:  DATA B1,71
002A4:  DATA 70,B0
002A6:  DATA 50,90
002A8:  DATA 91,51
002AA:  DATA 93,53
002AC:  DATA 52,92
002AE:  DATA 96,56
002B0:  DATA 57,97
002B2:  DATA 55,95
002B4:  DATA 94,54
002B6:  DATA 9C,5C
002B8:  DATA 5D,9D
002BA:  DATA 5F,9F
002BC:  DATA 9E,5E
002BE:  DATA 5A,9A
002C0:  DATA 9B,5B
002C2:  DATA 99,59
002C4:  DATA 58,98
002C6:  DATA 88,48
002C8:  DATA 49,89
002CA:  DATA 4B,8B
002CC:  DATA 8A,4A
002CE:  DATA 4E,8E
002D0:  DATA 8F,4F
002D2:  DATA 8D,4D
002D4:  DATA 4C,8C
002D6:  DATA 44,84
002D8:  DATA 85,45
002DA:  DATA 87,47
002DC:  DATA 46,86
002DE:  DATA 82,42
002E0:  DATA 43,83
002E2:  DATA 41,81
002E4:  DATA 80,40
*
005FC:  DATA 41,54
005FE:  DATA 2B,43
00600:  DATA 4D,47
00602:  DATA 46,3D
00604:  DATA 31,00
00606:  DATA 41,54
00608:  DATA 2B,43
0060A:  DATA 4D,47
0060C:  DATA 53,3D
0060E:  DATA 22,00
00610:  DATA 41,54
00612:  DATA 2B,43
00614:  DATA 4D,47
00616:  DATA 46,3D
00618:  DATA 31,00
0061A:  DATA 41,54
0061C:  DATA 2B,43
0061E:  DATA 4D,47
00620:  DATA 53,3D
00622:  DATA 22,00
00624:  DATA 41,54
00626:  DATA 2B,43
00628:  DATA 4D,47
0062A:  DATA 46,3D
0062C:  DATA 31,00
0062E:  DATA 41,54
00630:  DATA 2B,43
00632:  DATA 4D,47
00634:  DATA 53,3D
00636:  DATA 22,00
00638:  DATA 41,54
0063A:  DATA 2B,43
0063C:  DATA 4D,47
0063E:  DATA 46,3D
00640:  DATA 31,00
00642:  DATA 41,54
00644:  DATA 2B,43
00646:  DATA 4D,47
00648:  DATA 53,3D
0064A:  DATA 22,00
0064C:  DATA 41,54
0064E:  DATA 2B,43
00650:  DATA 4D,47
00652:  DATA 46,3D
00654:  DATA 31,00
00656:  DATA 41,54
00658:  DATA 2B,43
0065A:  DATA 4D,47
0065C:  DATA 53,3D
0065E:  DATA 22,00
00660:  DATA 41,54
00662:  DATA 2B,43
00664:  DATA 4D,47
00666:  DATA 46,3D
00668:  DATA 31,00
0066A:  DATA 41,54
0066C:  DATA 2B,43
0066E:  DATA 4D,47
00670:  DATA 53,3D
00672:  DATA 22,00
00674:  DATA 41,54
00676:  DATA 2B,43
00678:  DATA 4D,47
0067A:  DATA 46,3D
0067C:  DATA 31,00
0067E:  DATA 41,54
00680:  DATA 2B,43
00682:  DATA 4D,47
00684:  DATA 53,3D
00686:  DATA 22,00
00688:  DATA 41,54
0068A:  DATA 2B,43
0068C:  DATA 4D,47
0068E:  DATA 46,3D
00690:  DATA 31,00
00692:  DATA 41,54
00694:  DATA 2B,43
00696:  DATA 4D,47
00698:  DATA 53,3D
0069A:  DATA 22,00
0069C:  DATA 41,54
0069E:  DATA 2B,43
006A0:  DATA 4D,47
006A2:  DATA 46,3D
006A4:  DATA 31,00
006A6:  DATA 41,54
006A8:  DATA 2B,43
006AA:  DATA 4D,47
006AC:  DATA 53,3D
006AE:  DATA 22,00
006B0:  DATA 41,54
006B2:  DATA 2B,43
006B4:  DATA 4D,47
006B6:  DATA 46,3D
006B8:  DATA 31,00
006BA:  DATA 41,54
006BC:  DATA 2B,43
006BE:  DATA 4D,47
006C0:  DATA 53,3D
006C2:  DATA 22,00
006C4:  DATA 41,54
006C6:  DATA 2B,43
006C8:  DATA 4D,47
006CA:  DATA 46,3D
006CC:  DATA 31,00
006CE:  DATA 41,54
006D0:  DATA 2B,43
006D2:  DATA 4D,47
006D4:  DATA 53,3D
006D6:  DATA 22,00
006D8:  DATA 41,54
006DA:  DATA 2B,43
006DC:  DATA 4D,47
006DE:  DATA 46,3D
006E0:  DATA 31,00
006E2:  DATA 41,54
006E4:  DATA 2B,43
006E6:  DATA 4D,47
006E8:  DATA 53,3D
006EA:  DATA 22,00
006EC:  DATA 41,54
006EE:  DATA 2B,43
006F0:  DATA 4D,47
006F2:  DATA 46,3D
006F4:  DATA 31,00
006F6:  DATA 41,54
006F8:  DATA 2B,43
006FA:  DATA 4D,47
006FC:  DATA 53,3D
006FE:  DATA 22,00
00700:  DATA 41,54
00702:  DATA 2B,43
00704:  DATA 4D,47
00706:  DATA 46,3D
00708:  DATA 31,00
0070A:  DATA 41,54
0070C:  DATA 2B,43
0070E:  DATA 4D,47
00710:  DATA 53,3D
00712:  DATA 22,00
00714:  DATA 41,54
00716:  DATA 2B,43
00718:  DATA 4D,47
0071A:  DATA 46,3D
0071C:  DATA 31,00
0071E:  DATA 41,54
00720:  DATA 2B,43
00722:  DATA 4D,47
00724:  DATA 53,3D
00726:  DATA 22,00
00728:  DATA 41,54
0072A:  DATA 2B,43
0072C:  DATA 4D,47
0072E:  DATA 46,3D
00730:  DATA 31,00
00732:  DATA 41,54
00734:  DATA 2B,43
00736:  DATA 4D,47
00738:  DATA 53,3D
0073A:  DATA 22,00
0073C:  DATA 41,54
0073E:  DATA 2B,43
00740:  DATA 4D,47
00742:  DATA 46,3D
00744:  DATA 31,00
00746:  DATA 41,54
00748:  DATA 2B,43
0074A:  DATA 4D,47
0074C:  DATA 53,3D
0074E:  DATA 22,00
00750:  DATA 41,54
00752:  DATA 2B,43
00754:  DATA 4D,47
00756:  DATA 46,3D
00758:  DATA 31,00
0075A:  DATA 41,54
0075C:  DATA 2B,43
0075E:  DATA 4D,47
00760:  DATA 53,3D
00762:  DATA 22,00
00764:  DATA 41,54
00766:  DATA 2B,43
00768:  DATA 4D,47
0076A:  DATA 46,3D
0076C:  DATA 31,00
0076E:  DATA 41,54
00770:  DATA 2B,43
00772:  DATA 4D,47
00774:  DATA 53,3D
00776:  DATA 22,00
00778:  DATA 41,54
0077A:  DATA 2B,43
0077C:  DATA 4D,47
0077E:  DATA 46,3D
00780:  DATA 31,00
00782:  DATA 41,54
00784:  DATA 2B,43
00786:  DATA 4D,47
00788:  DATA 53,3D
0078A:  DATA 22,00
0078C:  DATA 41,54
0078E:  DATA 2B,43
00790:  DATA 4D,47
00792:  DATA 53,3D
00794:  DATA 22,00
00796:  DATA 41,54
00798:  DATA 2B,43
0079A:  DATA 4D,47
0079C:  DATA 53,3D
0079E:  DATA 22,00
007A0:  DATA 41,54
007A2:  DATA 2B,43
007A4:  DATA 4D,47
007A6:  DATA 53,3D
007A8:  DATA 22,00
007AA:  DATA 41,54
007AC:  DATA 2B,43
007AE:  DATA 4D,47
007B0:  DATA 53,3D
007B2:  DATA 22,00
007B4:  DATA 41,54
007B6:  DATA 2B,43
007B8:  DATA 4D,47
007BA:  DATA 53,3D
007BC:  DATA 22,00
007BE:  DATA 41,54
007C0:  DATA 2B,43
007C2:  DATA 4D,47
007C4:  DATA 53,3D
007C6:  DATA 22,00
007C8:  DATA 41,54
007CA:  DATA 2B,43
007CC:  DATA 4D,47
007CE:  DATA 53,3D
007D0:  DATA 22,00
007D2:  DATA 41,54
007D4:  DATA 2B,43
007D6:  DATA 4D,47
007D8:  DATA 53,3D
007DA:  DATA 22,00
007DC:  DATA 41,54
007DE:  DATA 2B,43
007E0:  DATA 4D,47
007E2:  DATA 53,3D
007E4:  DATA 22,00
007E6:  DATA 41,54
007E8:  DATA 2B,43
007EA:  DATA 4D,47
007EC:  DATA 53,3D
007EE:  DATA 22,00
007F0:  DATA 41,54
007F2:  DATA 2B,43
007F4:  DATA 4D,47
007F6:  DATA 46,3D
007F8:  DATA 31,00
*
017E0:  MOVLB  B
017E2:  MOVF   x52,W
017E4:  ANDLW  07
017E6:  MOVWF  00
017E8:  RRCF   x52,W
017EA:  MOVWF  01
017EC:  RRCF   01,F
017EE:  RRCF   01,F
017F0:  MOVLW  1F
017F2:  ANDWF  01,F
017F4:  MOVF   01,W
017F6:  ADDWF  x53,W
017F8:  MOVWF  FE9
017FA:  MOVLW  00
017FC:  ADDWFC x54,W
017FE:  MOVWF  FEA
01800:  MOVFF  FEF,01
01804:  INCF   00,F
01806:  BRA    180A
01808:  RRCF   01,F
0180A:  DECFSZ 00,F
0180C:  BRA    1808
0180E:  MOVLW  01
01810:  ANDWF  01,F
01812:  MOVLB  0
01814:  RETURN 0
01816:  MOVLB  B
01818:  MOVF   x53,W
0181A:  MULWF  x55
0181C:  MOVFF  FF3,01
01820:  MOVFF  FF4,00
01824:  MULWF  x56
01826:  MOVF   FF3,W
01828:  ADDWF  00,F
0182A:  MOVF   x54,W
0182C:  MULWF  x55
0182E:  MOVF   FF3,W
01830:  ADDWFC 00,W
01832:  MOVWF  02
01834:  MOVLB  0
01836:  RETURN 0
01838:  MOVLB  B
0183A:  MOVF   x52,W
0183C:  ANDLW  07
0183E:  MOVWF  00
01840:  RRCF   x52,W
01842:  MOVWF  01
01844:  RRCF   01,F
01846:  RRCF   01,F
01848:  MOVLW  1F
0184A:  ANDWF  01,F
0184C:  MOVF   01,W
0184E:  ADDWF  x54,W
01850:  MOVWF  FE9
01852:  MOVLW  00
01854:  ADDWFC x55,W
01856:  MOVWF  FEA
01858:  CLRF   01
0185A:  INCF   01,F
0185C:  INCF   00,F
0185E:  BRA    1862
01860:  RLCF   01,F
01862:  DECFSZ 00,F
01864:  BRA    1860
01866:  MOVF   x53,F
01868:  BZ    1870
0186A:  MOVF   01,W
0186C:  IORWF  FEF,F
0186E:  BRA    1876
01870:  COMF   01,F
01872:  MOVF   01,W
01874:  ANDWF  FEF,F
01876:  MOVLB  0
01878:  RETURN 0
*
02088:  ADDWF  FE8,W
0208A:  CLRF   FF7
0208C:  RLCF   FF7,F
0208E:  ADDLW  A3
02090:  MOVWF  FF6
02092:  MOVLW  20
02094:  ADDWFC FF7,F
02096:  TBLRD*-
02098:  MOVF   FF5,W
0209A:  MOVWF  FFA
0209C:  TBLRD*
0209E:  MOVF   FF5,W
020A0:  MOVWF  FF9
020A2:  DATA 8C,1B
020A4:  DATA 94,1B
020A6:  DATA 9C,1B
020A8:  DATA A4,1B
020AA:  DATA AC,1B
020AC:  DATA B4,1B
020AE:  DATA BC,1B
020B0:  DATA C4,1B
020B2:  DATA CC,1B
020B4:  DATA D4,1B
020B6:  ADDWF  FE8,W
020B8:  CLRF   FF7
020BA:  RLCF   FF7,F
020BC:  ADDLW  D1
020BE:  MOVWF  FF6
020C0:  MOVLW  20
020C2:  ADDWFC FF7,F
020C4:  TBLRD*-
020C6:  MOVF   FF5,W
020C8:  MOVWF  FFA
020CA:  TBLRD*
020CC:  MOVF   FF5,W
020CE:  MOVWF  FF9
020D0:  DATA BC,1C
020D2:  DATA C4,1C
020D4:  DATA CC,1C
020D6:  DATA D4,1C
020D8:  DATA DC,1C
020DA:  DATA E4,1C
020DC:  DATA EC,1C
020DE:  DATA F4,1C
020E0:  DATA FC,1C
020E2:  DATA 04,1D
020E4:  ADDWF  FE8,W
020E6:  CLRF   FF7
020E8:  RLCF   FF7,F
020EA:  ADDLW  FF
020EC:  MOVWF  FF6
020EE:  MOVLW  20
020F0:  ADDWFC FF7,F
020F2:  TBLRD*-
020F4:  MOVF   FF5,W
020F6:  MOVWF  FFA
020F8:  TBLRD*
020FA:  MOVF   FF5,W
020FC:  MOVWF  FF9
020FE:  DATA 20,1E
02100:  DATA 28,1E
02102:  DATA 30,1E
02104:  DATA 38,1E
02106:  DATA 40,1E
02108:  DATA 48,1E
0210A:  DATA 50,1E
0210C:  DATA 58,1E
0210E:  DATA 60,1E
02110:  DATA 68,1E
02112:  ADDWF  FE8,W
02114:  CLRF   FF7
02116:  RLCF   FF7,F
02118:  ADDLW  2D
0211A:  MOVWF  FF6
0211C:  MOVLW  21
0211E:  ADDWFC FF7,F
02120:  TBLRD*-
02122:  MOVF   FF5,W
02124:  MOVWF  FFA
02126:  TBLRD*
02128:  MOVF   FF5,W
0212A:  MOVWF  FF9
0212C:  DATA 4E,1F
0212E:  DATA 56,1F
02130:  DATA 5E,1F
02132:  DATA 66,1F
02134:  DATA 6E,1F
02136:  DATA 76,1F
02138:  DATA 7E,1F
0213A:  DATA 86,1F
0213C:  DATA 8E,1F
0213E:  DATA 96,1F
*
023E8:  TBLRD*+
023EA:  MOVF   FF5,F
023EC:  BZ    2406
023EE:  MOVFF  FF6,B56
023F2:  MOVFF  FF7,B57
023F6:  MOVFF  FF5,B58
023FA:  RCALL  23A2
023FC:  MOVFF  B56,FF6
02400:  MOVFF  B57,FF7
02404:  BRA    23E8
02406:  RETURN 0
*
0479E:  MOVF   FEF,F
047A0:  BZ    47C2
047A2:  MOVFF  FEA,B57
047A6:  MOVFF  FE9,B56
047AA:  MOVFF  FEF,B58
047AE:  CALL   23A2
047B2:  MOVFF  B57,FEA
047B6:  MOVFF  B56,FE9
047BA:  INCF   FE9,F
047BC:  BTFSC  FD8.2
047BE:  INCF   FEA,F
047C0:  BRA    479E
047C2:  RETURN 0
*
07882:  ADDWF  FE8,W
07884:  CLRF   FF7
07886:  RLCF   FF7,F
07888:  ADDLW  9D
0788A:  MOVWF  FF6
0788C:  MOVLW  78
0788E:  ADDWFC FF7,F
07890:  TBLRD*-
07892:  MOVF   FF5,W
07894:  MOVWF  FFA
07896:  TBLRD*
07898:  MOVF   FF5,W
0789A:  MOVWF  FF9
0789C:  DATA BA,75
0789E:  DATA C2,75
078A0:  DATA CA,75
078A2:  DATA D2,75
078A4:  DATA DA,75
078A6:  DATA E2,75
078A8:  DATA EA,75
078AA:  DATA F2,75
078AC:  DATA FA,75
078AE:  DATA 02,76
078B0:  ADDWF  FE8,W
078B2:  CLRF   FF7
078B4:  RLCF   FF7,F
078B6:  ADDLW  CB
078B8:  MOVWF  FF6
078BA:  MOVLW  78
078BC:  ADDWFC FF7,F
078BE:  TBLRD*-
078C0:  MOVF   FF5,W
078C2:  MOVWF  FFA
078C4:  TBLRD*
078C6:  MOVF   FF5,W
078C8:  MOVWF  FF9
078CA:  DATA 22,76
078CC:  DATA 2A,76
078CE:  DATA 32,76
078D0:  DATA 3A,76
078D2:  DATA 42,76
078D4:  DATA 4A,76
078D6:  DATA 52,76
078D8:  DATA 5A,76
078DA:  DATA 62,76
078DC:  DATA 6A,76
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
007FA:  MOVLW  0B
007FC:  MOVWF  FEA
007FE:  MOVLW  57
00800:  MOVWF  FE9
00802:  MOVF   FEF,W
00804:  BZ    0828
00806:  MOVLW  05
00808:  MOVWF  01
0080A:  MOVLW  BF
0080C:  MOVWF  00
0080E:  CLRWDT
00810:  DECFSZ 00,F
00812:  BRA    080E
00814:  DECFSZ 01,F
00816:  BRA    080A
00818:  MOVLW  2E
0081A:  MOVWF  00
0081C:  DECFSZ 00,F
0081E:  BRA    081C
00820:  NOP   
00822:  CLRWDT
00824:  DECFSZ FEF,F
00826:  BRA    0806
00828:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
0085C:  BCF    F92.5
0085E:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
00860:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
00862:  MOVLB  B
00864:  CLRF   x50
00866:  MOVLW  0A
00868:  MOVWF  x51
0086A:  MOVLW  AA
0086C:  MOVWF  x52
0086E:  MOVLB  0
00870:  RCALL  082A
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
00872:  MOVLW  02
00874:  MOVLB  B
00876:  MOVWF  x50
00878:  MOVLW  0A
0087A:  MOVWF  x51
0087C:  MOVLW  AA
0087E:  MOVWF  x52
00880:  MOVLB  0
00882:  RCALL  082A
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
00884:  MOVLW  04
00886:  MOVLB  B
00888:  MOVWF  x50
0088A:  MOVLW  0A
0088C:  MOVWF  x51
0088E:  MOVLW  AA
00890:  MOVWF  x52
00892:  MOVLB  0
00894:  RCALL  082A
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
00896:  MOVLW  06
00898:  MOVLB  B
0089A:  MOVWF  x50
0089C:  MOVLW  0A
0089E:  MOVWF  x51
008A0:  MOVLW  AA
008A2:  MOVWF  x52
008A4:  MOVLB  0
008A6:  RCALL  082A
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
008A8:  MOVLW  08
008AA:  MOVLB  B
008AC:  MOVWF  x50
008AE:  MOVLW  0A
008B0:  MOVWF  x51
008B2:  MOVLW  AA
008B4:  MOVWF  x52
008B6:  MOVLB  0
008B8:  RCALL  082A
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
008BA:  MOVLW  0A
008BC:  MOVLB  B
008BE:  MOVWF  x50
008C0:  MOVWF  x51
008C2:  MOVLW  AA
008C4:  MOVWF  x52
008C6:  MOVLB  0
008C8:  RCALL  082A
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
008CA:  MOVLW  0C
008CC:  MOVLB  B
008CE:  MOVWF  x50
008D0:  MOVLW  0A
008D2:  MOVWF  x51
008D4:  MOVLW  AA
008D6:  MOVWF  x52
008D8:  MOVLB  0
008DA:  RCALL  082A
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
008DC:  MOVLW  0E
008DE:  MOVLB  B
008E0:  MOVWF  x50
008E2:  MOVLW  0A
008E4:  MOVWF  x51
008E6:  MOVLW  AA
008E8:  MOVWF  x52
008EA:  MOVLB  0
008EC:  RCALL  082A
....................    #endif
008EE:  GOTO   71AE (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
0082A:  BCF    F92.5
0082C:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
0082E:  MOVLB  B
00830:  MOVF   x50,W
00832:  IORLW  40
00834:  MOVWF  x53
00836:  MOVF   FC9,W
00838:  MOVFF  B53,FC9
0083C:  RRCF   FC7,W
0083E:  BNC   083C
....................    #endif
....................    
....................    spi_write(reg);
00840:  MOVF   FC9,W
00842:  MOVFF  B51,FC9
00846:  RRCF   FC7,W
00848:  BNC   0846
....................    spi_write(data);
0084A:  MOVF   FC9,W
0084C:  MOVFF  B52,FC9
00850:  RRCF   FC7,W
00852:  BNC   0850
....................    
....................    output_high(IO_CS_PIN);
00854:  BCF    F92.5
00856:  BSF    F89.5
00858:  MOVLB  0
0085A:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01770:  BCF    F92.5
01772:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
01774:  MOVLB  B
01776:  MOVF   x51,W
01778:  IORLW  41
0177A:  MOVWF  x54
0177C:  MOVF   FC9,W
0177E:  MOVFF  B54,FC9
01782:  RRCF   FC7,W
01784:  BNC   1782
....................    #endif
....................    
....................    spi_write(reg);
01786:  MOVF   FC9,W
01788:  MOVFF  B52,FC9
0178C:  RRCF   FC7,W
0178E:  BNC   178C
....................    retVal = spi_read(0);
01790:  MOVF   FC9,W
01792:  CLRF   FC9
01794:  RRCF   FC7,W
01796:  BNC   1794
01798:  MOVFF  FC9,B53
....................    
....................    output_high(IO_CS_PIN);
0179C:  BCF    F92.5
0179E:  BSF    F89.5
....................    
....................    return retVal;
017A0:  MOVFF  B53,01
017A4:  MOVLB  0
017A6:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
02140:  MOVFF  B4E,B50
02144:  MOVLW  0A
02146:  MOVLB  B
02148:  MOVWF  x51
0214A:  MOVFF  B4F,B52
0214E:  MOVLB  0
02150:  CALL   082A
....................    #endif
02154:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02156:  MOVFF  B4E,B50
0215A:  MOVLW  1A
0215C:  MOVLB  B
0215E:  MOVWF  x51
02160:  MOVFF  B4F,B52
02164:  MOVLB  0
02166:  CALL   082A
....................    #endif
0216A:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
017A8:  MOVFF  B4F,B51
017AC:  MOVLW  09
017AE:  MOVLB  B
017B0:  MOVWF  x52
017B2:  MOVLB  0
017B4:  RCALL  1770
017B6:  MOVFF  01,B50
....................    #endif
....................    
....................    return retVal;
017BA:  MOVLB  B
017BC:  MOVFF  B50,01
017C0:  MOVLB  0
017C2:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
017C4:  MOVFF  B4F,B51
017C8:  MOVLW  19
017CA:  MOVLB  B
017CC:  MOVWF  x52
017CE:  MOVLB  0
017D0:  RCALL  1770
017D2:  MOVFF  01,B50
....................    #endif
....................    
....................    return retVal;
017D6:  MOVLB  B
017D8:  MOVFF  B50,01
017DC:  MOVLB  0
017DE:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
008F2:  MOVFF  B4E,B50
008F6:  MOVLB  B
008F8:  CLRF   x51
008FA:  MOVFF  B4F,B52
008FE:  MOVLB  0
00900:  RCALL  082A
....................    #endif
00902:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00904:  MOVFF  B4E,B50
00908:  MOVLW  10
0090A:  MOVLB  B
0090C:  MOVWF  x51
0090E:  MOVFF  B4F,B52
00912:  MOVLB  0
00914:  RCALL  082A
....................    #endif
00916:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
0245E:  BTFSS  F9E.4
02460:  BRA    245E
02462:  MOVWF  FAD
02464:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
023A2:  BCF    F93.0
023A4:  BCF    F8A.0
023A6:  MOVLW  08
023A8:  MOVWF  01
023AA:  BRA    23AC
023AC:  NOP   
023AE:  BSF    01.7
023B0:  BRA    23D2
023B2:  BCF    01.7
023B4:  MOVLB  B
023B6:  RRCF   x58,F
023B8:  MOVLB  0
023BA:  BTFSC  FD8.0
023BC:  BSF    F8A.0
023BE:  BTFSS  FD8.0
023C0:  BCF    F8A.0
023C2:  BSF    01.6
023C4:  BRA    23D2
023C6:  BCF    01.6
023C8:  DECFSZ 01,F
023CA:  BRA    23B4
023CC:  BRA    23CE
023CE:  NOP   
023D0:  BSF    F8A.0
023D2:  MOVLW  84
023D4:  MOVWF  FE9
023D6:  DECFSZ FE9,F
023D8:  BRA    23D6
023DA:  BRA    23DC
023DC:  NOP   
023DE:  BTFSC  01.7
023E0:  BRA    23B2
023E2:  BTFSC  01.6
023E4:  BRA    23C6
023E6:  RETURN 0
.................... 
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... int8 Green1_8 ;
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned int16 RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[256];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... unsigned char index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    //int1 B11,B12,B13,B14,B15,B16,B17,B18,B19,B20;
....................    //int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
.................... struct Bit64 Inputt,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void StoreReleaseFault()
*
0187A:  MOVLB  B
0187C:  CLRF   x4F
.................... {
....................    Signed int8 i=0;
....................    for(i=0;i<=10;i++)
0187E:  CLRF   x4F
01880:  BTFSC  x4F.7
01882:  BRA    188A
01884:  MOVF   x4F,W
01886:  SUBLW  0A
01888:  BNC   18D0
....................    {
....................       FaultAgo[i] = FaultNow[i];
0188A:  CLRF   03
0188C:  MOVF   x4F,W
0188E:  MOVWF  00
01890:  BTFSC  FE8.7
01892:  DECF   03,F
01894:  MOVWF  x50
01896:  MOVFF  03,B51
0189A:  CLRF   03
0189C:  MOVF   x4F,W
0189E:  MOVWF  00
018A0:  BTFSC  FE8.7
018A2:  DECF   03,F
018A4:  MOVWF  x52
018A6:  MOVLW  0A
018A8:  MOVWF  x54
018AA:  MOVLW  ED
018AC:  MOVWF  x53
018AE:  MOVLB  0
018B0:  RCALL  17E0
018B2:  MOVFF  B50,B52
018B6:  MOVLB  B
018B8:  CLRF   x53
018BA:  BTFSC  01.0
018BC:  INCF   x53,F
018BE:  MOVLW  0A
018C0:  MOVWF  x55
018C2:  MOVLW  EA
018C4:  MOVWF  x54
018C6:  MOVLB  0
018C8:  RCALL  1838
018CA:  MOVLB  B
018CC:  INCF   x4F,F
018CE:  BRA    1880
....................    }
018D0:  MOVLB  0
018D2:  GOTO   1FC8 (RETURN)
.................... }
.................... 
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02408:  MOVLB  5
0240A:  SETF   x70
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
0240C:  SETF   x6F
.................... 
....................    for(i = 0;i < usDataLen;i++)
0240E:  MOVLB  B
02410:  CLRF   x5D
02412:  MOVF   x5B,W
02414:  SUBWF  x5D,W
02416:  BC    245A
....................    {
....................       restart_wdt();
02418:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
0241A:  MOVF   x5D,W
0241C:  ADDWF  x59,W
0241E:  MOVWF  FE9
02420:  MOVLW  00
02422:  ADDWFC x5A,W
02424:  MOVWF  FEA
02426:  MOVF   FEF,W
02428:  MOVLB  5
0242A:  XORWF  x70,W
0242C:  MOVLB  B
0242E:  MOVWF  x5C
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
02430:  CLRF   03
02432:  MOVF   x5C,W
02434:  MOVLB  0
02436:  CALL   00C6
0243A:  MOVWF  01
0243C:  MOVLB  5
0243E:  MOVF   x6F,W
02440:  XORWF  01,W
02442:  MOVWF  x70
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02444:  CLRF   03
02446:  MOVLB  B
02448:  MOVF   x5C,W
0244A:  MOVLB  0
0244C:  CALL   01D6
02450:  MOVFF  FE8,56F
02454:  MOVLB  B
02456:  INCF   x5D,F
02458:  BRA    2412
....................    }
0245A:  MOVLB  0
0245C:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... void Driver595()
*
06FB8:  MOVLB  B
06FBA:  CLRF   x4E
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
06FBC:  CLRWDT
....................    
....................     data_out = (~Input19_20);
06FBE:  MOVFF  4D,B4F
06FC2:  COMF   x4F,F
....................     for(j=7;j>=0;j--)
06FC4:  MOVLW  07
06FC6:  MOVWF  x4E
06FC8:  BTFSC  x4E.7
06FCA:  BRA    6FFC
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
06FCC:  MOVFF  B4F,00
06FD0:  MOVF   x4E,W
06FD2:  MOVWF  01
06FD4:  BZ    6FDE
06FD6:  BCF    FD8.0
06FD8:  RRCF   00,F
06FDA:  DECFSZ 01,F
06FDC:  BRA    6FD6
06FDE:  BTFSC  00.0
06FE0:  BRA    6FE6
06FE2:  BCF    F8A.2
06FE4:  BRA    6FE8
06FE6:  BSF    F8A.2
06FE8:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
06FEA:  BCF    F93.1
06FEC:  BSF    F8A.1
....................      delay_us(1);
06FEE:  CLRWDT
06FF0:  BRA    6FF2
06FF2:  NOP   
....................      output_low(EXP_OUT_CLOCK);
06FF4:  BCF    F93.1
06FF6:  BCF    F8A.1
06FF8:  DECF   x4E,F
06FFA:  BRA    6FC8
....................     }
....................     
....................     data_out = (~Input11_18);
06FFC:  MOVFF  4C,B4F
07000:  COMF   x4F,F
....................     for(j=7;j>=0;j--)
07002:  MOVLW  07
07004:  MOVWF  x4E
07006:  BTFSC  x4E.7
07008:  BRA    703A
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
0700A:  MOVFF  B4F,00
0700E:  MOVF   x4E,W
07010:  MOVWF  01
07012:  BZ    701C
07014:  BCF    FD8.0
07016:  RRCF   00,F
07018:  DECFSZ 01,F
0701A:  BRA    7014
0701C:  BTFSC  00.0
0701E:  BRA    7024
07020:  BCF    F8A.2
07022:  BRA    7026
07024:  BSF    F8A.2
07026:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
07028:  BCF    F93.1
0702A:  BSF    F8A.1
....................      delay_us(1);
0702C:  CLRWDT
0702E:  BRA    7030
07030:  NOP   
....................      output_low(EXP_OUT_CLOCK);
07032:  BCF    F93.1
07034:  BCF    F8A.1
07036:  DECF   x4E,F
07038:  BRA    7006
....................     }
....................     
....................     data_out = (~Input9_10);
0703A:  MOVFF  4B,B4F
0703E:  COMF   x4F,F
....................     for(j=7;j>=0;j--)
07040:  MOVLW  07
07042:  MOVWF  x4E
07044:  BTFSC  x4E.7
07046:  BRA    7078
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
07048:  MOVFF  B4F,00
0704C:  MOVF   x4E,W
0704E:  MOVWF  01
07050:  BZ    705A
07052:  BCF    FD8.0
07054:  RRCF   00,F
07056:  DECFSZ 01,F
07058:  BRA    7052
0705A:  BTFSC  00.0
0705C:  BRA    7062
0705E:  BCF    F8A.2
07060:  BRA    7064
07062:  BSF    F8A.2
07064:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
07066:  BCF    F93.1
07068:  BSF    F8A.1
....................      delay_us(1);
0706A:  CLRWDT
0706C:  BRA    706E
0706E:  NOP   
....................      output_low(EXP_OUT_CLOCK);
07070:  BCF    F93.1
07072:  BCF    F8A.1
07074:  DECF   x4E,F
07076:  BRA    7044
....................     }
....................     
....................     data_out = (~Input1_8);
07078:  MOVFF  4A,B4F
0707C:  COMF   x4F,F
....................     for(j=7;j>=0;j--)
0707E:  MOVLW  07
07080:  MOVWF  x4E
07082:  BTFSC  x4E.7
07084:  BRA    70B6
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
07086:  MOVFF  B4F,00
0708A:  MOVF   x4E,W
0708C:  MOVWF  01
0708E:  BZ    7098
07090:  BCF    FD8.0
07092:  RRCF   00,F
07094:  DECFSZ 01,F
07096:  BRA    7090
07098:  BTFSC  00.0
0709A:  BRA    70A0
0709C:  BCF    F8A.2
0709E:  BRA    70A2
070A0:  BSF    F8A.2
070A2:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
070A4:  BCF    F93.1
070A6:  BSF    F8A.1
....................      delay_us(1);
070A8:  CLRWDT
070AA:  BRA    70AC
070AC:  NOP   
....................      output_low(EXP_OUT_CLOCK);
070AE:  BCF    F93.1
070B0:  BCF    F8A.1
070B2:  DECF   x4E,F
070B4:  BRA    7082
....................     }
....................  // } 
....................    output_high(EXP_OUT_ENABLE);
070B6:  BCF    F93.0
070B8:  BSF    F8A.0
....................    delay_us(1);
070BA:  CLRWDT
070BC:  BRA    70BE
070BE:  NOP   
....................    output_low(EXP_OUT_ENABLE);
070C0:  BCF    F93.0
070C2:  BCF    F8A.0
070C4:  MOVLB  0
070C6:  GOTO   7784 (RETURN)
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
02466:  CLRF   1E
....................    Input9_16_Send = 0x00;
02468:  CLRF   1F
....................    
....................    
....................    Ack1_8_Send = 0x00;
0246A:  CLRF   26
....................    Ack9_16_Send = 0x00;
0246C:  CLRF   27
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
0246E:  MOVLB  A
02470:  BTFSC  xDC.0
02472:  BRA    247C
02474:  BTFSC  xCE.0
02476:  BRA    247C
....................       AckSend.B1 = 1;
02478:  BSF    xE2.0
0247A:  BRA    247E
....................    else
....................       AckSend.B1 = 0;
0247C:  BCF    xE2.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
0247E:  BTFSC  xDC.1
02480:  BRA    248A
02482:  BTFSC  xCE.1
02484:  BRA    248A
....................       AckSend.B2 = 1;
02486:  BSF    xE2.1
02488:  BRA    248C
....................    else
....................       AckSend.B2 = 0;
0248A:  BCF    xE2.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
0248C:  BTFSC  xDC.2
0248E:  BRA    2498
02490:  BTFSC  xCE.2
02492:  BRA    2498
....................       AckSend.B3 = 1;
02494:  BSF    xE2.2
02496:  BRA    249A
....................    else
....................       AckSend.B3 = 0;
02498:  BCF    xE2.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
0249A:  BTFSC  xDC.3
0249C:  BRA    24A6
0249E:  BTFSC  xCE.3
024A0:  BRA    24A6
....................       AckSend.B4 = 1;
024A2:  BSF    xE2.3
024A4:  BRA    24A8
....................    else
....................       AckSend.B4 = 0;
024A6:  BCF    xE2.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
024A8:  BTFSC  xDC.4
024AA:  BRA    24B4
024AC:  BTFSC  xCE.4
024AE:  BRA    24B4
....................       AckSend.B5 = 1;
024B0:  BSF    xE2.4
024B2:  BRA    24B6
....................    else
....................       AckSend.B5 = 0;
024B4:  BCF    xE2.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
024B6:  BTFSC  xDC.5
024B8:  BRA    24C2
024BA:  BTFSC  xCE.5
024BC:  BRA    24C2
....................       AckSend.B6 = 1;
024BE:  BSF    xE2.5
024C0:  BRA    24C4
....................    else
....................       AckSend.B6 = 0;
024C2:  BCF    xE2.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
024C4:  BTFSC  xDC.6
024C6:  BRA    24D0
024C8:  BTFSC  xCE.6
024CA:  BRA    24D0
....................       AckSend.B7 = 1;
024CC:  BSF    xE2.6
024CE:  BRA    24D2
....................    else
....................       AckSend.B7 = 0;
024D0:  BCF    xE2.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
024D2:  BTFSC  xDC.7
024D4:  BRA    24DE
024D6:  BTFSC  xCE.7
024D8:  BRA    24DE
....................       AckSend.B8 = 1;
024DA:  BSF    xE2.7
024DC:  BRA    24E0
....................    else
....................       AckSend.B8 = 0;
024DE:  BCF    xE2.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
024E0:  BTFSC  xDD.0
024E2:  BRA    24EC
024E4:  BTFSC  xCF.0
024E6:  BRA    24EC
....................       AckSend.B9 = 1;
024E8:  BSF    xE3.0
024EA:  BRA    24EE
....................    else
....................       AckSend.B9 = 0;
024EC:  BCF    xE3.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
024EE:  BTFSC  xDD.1
024F0:  BRA    24FA
024F2:  BTFSC  xCF.1
024F4:  BRA    24FA
....................       AckSend.B10 = 1;
024F6:  BSF    xE3.1
024F8:  BRA    24FC
....................    else
....................       AckSend.B10 = 0;
024FA:  BCF    xE3.1
.................... 
.................... 
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
024FC:  MOVLW  00
024FE:  BTFSC  xE2.7
02500:  MOVLW  01
02502:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02504:  BCF    FD8.0
02506:  RLCF   26,W
02508:  MOVLB  B
0250A:  MOVWF  x58
0250C:  MOVLW  00
0250E:  MOVLB  A
02510:  BTFSC  xE2.6
02512:  MOVLW  01
02514:  MOVLB  B
02516:  IORWF  x58,W
02518:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
0251A:  BCF    FD8.0
0251C:  RLCF   26,W
0251E:  MOVWF  x58
02520:  MOVLW  00
02522:  MOVLB  A
02524:  BTFSC  xE2.5
02526:  MOVLW  01
02528:  MOVLB  B
0252A:  IORWF  x58,W
0252C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
0252E:  BCF    FD8.0
02530:  RLCF   26,W
02532:  MOVWF  x58
02534:  MOVLW  00
02536:  MOVLB  A
02538:  BTFSC  xE2.4
0253A:  MOVLW  01
0253C:  MOVLB  B
0253E:  IORWF  x58,W
02540:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
02542:  BCF    FD8.0
02544:  RLCF   26,W
02546:  MOVWF  x58
02548:  MOVLW  00
0254A:  MOVLB  A
0254C:  BTFSC  xE2.3
0254E:  MOVLW  01
02550:  MOVLB  B
02552:  IORWF  x58,W
02554:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
02556:  BCF    FD8.0
02558:  RLCF   26,W
0255A:  MOVWF  x58
0255C:  MOVLW  00
0255E:  MOVLB  A
02560:  BTFSC  xE2.2
02562:  MOVLW  01
02564:  MOVLB  B
02566:  IORWF  x58,W
02568:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
0256A:  BCF    FD8.0
0256C:  RLCF   26,W
0256E:  MOVWF  x58
02570:  MOVLW  00
02572:  MOVLB  A
02574:  BTFSC  xE2.1
02576:  MOVLW  01
02578:  MOVLB  B
0257A:  IORWF  x58,W
0257C:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
0257E:  BCF    FD8.0
02580:  RLCF   26,W
02582:  MOVWF  x58
02584:  MOVLW  00
02586:  MOVLB  A
02588:  BTFSC  xE2.0
0258A:  MOVLW  01
0258C:  MOVLB  B
0258E:  IORWF  x58,W
02590:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B10;
02592:  MOVLW  00
02594:  MOVLB  A
02596:  BTFSC  xE3.1
02598:  MOVLW  01
0259A:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
0259C:  BCF    FD8.0
0259E:  RLCF   27,W
025A0:  MOVLB  B
025A2:  MOVWF  x58
025A4:  MOVLW  00
025A6:  MOVLB  A
025A8:  BTFSC  xE3.0
025AA:  MOVLW  01
025AC:  MOVLB  B
025AE:  IORWF  x58,W
025B0:  MOVWF  27
....................   
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
025B2:  MOVLW  00
025B4:  MOVLB  A
025B6:  BTFSC  xDC.7
025B8:  MOVLW  01
025BA:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
025BC:  BCF    FD8.0
025BE:  RLCF   1E,W
025C0:  MOVLB  B
025C2:  MOVWF  x58
025C4:  MOVLW  00
025C6:  MOVLB  A
025C8:  BTFSC  xDC.6
025CA:  MOVLW  01
025CC:  MOVLB  B
025CE:  IORWF  x58,W
025D0:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
025D2:  BCF    FD8.0
025D4:  RLCF   1E,W
025D6:  MOVWF  x58
025D8:  MOVLW  00
025DA:  MOVLB  A
025DC:  BTFSC  xDC.5
025DE:  MOVLW  01
025E0:  MOVLB  B
025E2:  IORWF  x58,W
025E4:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
025E6:  BCF    FD8.0
025E8:  RLCF   1E,W
025EA:  MOVWF  x58
025EC:  MOVLW  00
025EE:  MOVLB  A
025F0:  BTFSC  xDC.4
025F2:  MOVLW  01
025F4:  MOVLB  B
025F6:  IORWF  x58,W
025F8:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
025FA:  BCF    FD8.0
025FC:  RLCF   1E,W
025FE:  MOVWF  x58
02600:  MOVLW  00
02602:  MOVLB  A
02604:  BTFSC  xDC.3
02606:  MOVLW  01
02608:  MOVLB  B
0260A:  IORWF  x58,W
0260C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0260E:  BCF    FD8.0
02610:  RLCF   1E,W
02612:  MOVWF  x58
02614:  MOVLW  00
02616:  MOVLB  A
02618:  BTFSC  xDC.2
0261A:  MOVLW  01
0261C:  MOVLB  B
0261E:  IORWF  x58,W
02620:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
02622:  BCF    FD8.0
02624:  RLCF   1E,W
02626:  MOVWF  x58
02628:  MOVLW  00
0262A:  MOVLB  A
0262C:  BTFSC  xDC.1
0262E:  MOVLW  01
02630:  MOVLB  B
02632:  IORWF  x58,W
02634:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
02636:  BCF    FD8.0
02638:  RLCF   1E,W
0263A:  MOVWF  x58
0263C:  MOVLW  00
0263E:  MOVLB  A
02640:  BTFSC  xDC.0
02642:  MOVLW  01
02644:  MOVLB  B
02646:  IORWF  x58,W
02648:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B10;
0264A:  MOVLW  00
0264C:  MOVLB  A
0264E:  BTFSC  xDD.1
02650:  MOVLW  01
02652:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
02654:  BCF    FD8.0
02656:  RLCF   1F,W
02658:  MOVLB  B
0265A:  MOVWF  x58
0265C:  MOVLW  00
0265E:  MOVLB  A
02660:  BTFSC  xDD.0
02662:  MOVLW  01
02664:  MOVLB  B
02666:  IORWF  x58,W
02668:  MOVWF  1F
0266A:  MOVLB  0
0266C:  GOTO   2DD4 (RETURN)
.................... 
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    static int8 count_bytecount =0;
....................    restart_wdt();
*
002E6:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002E8:  MOVF   x63,W
002EA:  SUBWF  x6B,W
002EC:  BNZ   031C
....................    {
....................      RxD_DataLen = 0x00 ;
002EE:  CLRF   x6E
002F0:  CLRF   x6D
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002F2:  MOVLW  6F
002F4:  ADDWF  x6D,W
002F6:  MOVWF  FE9
002F8:  MOVLW  01
002FA:  ADDWFC x6E,W
002FC:  MOVWF  FEA
002FE:  MOVFF  2E,FEF
....................      restart_wdt();
00302:  CLRWDT
....................      RxD_DataLen ++ ;
00304:  INCF   x6D,F
00306:  BTFSC  FD8.2
00308:  INCF   x6E,F
....................      sequence = addr_sq;
0030A:  MOVLW  10
0030C:  MOVWF  x6B
....................      count_bytecount =0; // bytecount = 2 Byte //jj10092564
0030E:  MOVLB  B
00310:  CLRF   x47
....................      
....................      T_timeout = 0x14; //200ms
00312:  MOVLW  14
00314:  MOVLB  9
00316:  MOVWF  x7A
....................    }
00318:  BRA    054E
0031A:  MOVLB  0
....................    else if(sequence == addr_sq)
0031C:  MOVF   x6B,W
0031E:  SUBLW  10
00320:  BNZ   03B2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
00322:  MOVLW  6F
00324:  ADDWF  x6D,W
00326:  MOVWF  FE9
00328:  MOVLW  01
0032A:  ADDWFC x6E,W
0032C:  MOVWF  FEA
0032E:  MOVFF  2E,FEF
....................       restart_wdt();
00332:  CLRWDT
....................       RxD_DataLen ++ ;
00334:  INCF   x6D,F
00336:  BTFSC  FD8.2
00338:  INCF   x6E,F
.................... 
....................        if(RxD_Buff[1] < 0x17)   //Function Code Must be less than 0x20
0033A:  MOVLB  1
0033C:  MOVF   x70,W
0033E:  SUBLW  16
00340:  BNC   0350
....................        {
....................            sequence = code_sq;
00342:  MOVFF  64,6B
....................            T_timeout = 0x14; //200ms
00346:  MOVLW  14
00348:  MOVLB  9
0034A:  MOVWF  x7A
....................        }
0034C:  BRA    03AE
0034E:  MOVLB  1
....................        else if(RxD_Buff[1] == 0x20)   /////Read Setting//////
00350:  MOVF   x70,W
00352:  SUBLW  20
00354:  BNZ   0364
....................        {
....................           sequence = ubyte_lo_sq;
00356:  MOVFF  67,6B
....................           T_timeout = 0x14; //200ms
0035A:  MOVLW  14
0035C:  MOVLB  9
0035E:  MOVWF  x7A
....................        }
00360:  BRA    03AE
00362:  MOVLB  1
....................        else if(RxD_Buff[1] == 0x21)   /////Write setting/////
00364:  MOVF   x70,W
00366:  SUBLW  21
00368:  BNZ   0378
....................        { 
....................           sequence = byte_count_sq ;
0036A:  MOVFF  69,6B
....................           T_timeout = 0x14; //200ms
0036E:  MOVLW  14
00370:  MOVLB  9
00372:  MOVWF  x7A
....................        }
00374:  BRA    03AE
00376:  MOVLB  1
....................        //   SMS     
....................        else if(RxD_Buff[1] == 0x22)   /////SMS setting/////
00378:  MOVF   x70,W
0037A:  SUBLW  22
0037C:  BNZ   0396
....................        {
....................           if(count_bytecount ==0){ // bytecount first Byte
0037E:  MOVLB  B
00380:  MOVF   x47,F
00382:  BNZ   0388
....................             count_bytecount++;
00384:  INCF   x47,F
....................            }
00386:  BRA    038C
....................            else{ // bytecount Second Byte
....................             sequence = byte_count_sq ;
00388:  MOVFF  69,6B
....................            }
....................           T_timeout = 0x14; //200ms
0038C:  MOVLW  14
0038E:  MOVLB  9
00390:  MOVWF  x7A
....................        }
00392:  BRA    03AE
00394:  MOVLB  1
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
00396:  MOVLB  0
00398:  CLRF   x6E
0039A:  CLRF   x6D
....................           sequence = end_sq;
0039C:  MOVFF  63,6B
....................           T_timeout = 0x00; 
003A0:  MOVLB  9
003A2:  CLRF   x7A
....................           output_bit(P485ctrl,0);
003A4:  BCF    F8A.3
003A6:  BCF    F93.3
....................           count_bytecount =0; // bytecount = 2 Byte //jj10092564
003A8:  MOVLB  B
003AA:  CLRF   x47
003AC:  MOVLB  9
....................        }
....................    }
003AE:  BRA    054E
003B0:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003B2:  MOVF   x69,W
003B4:  SUBWF  x6B,W
003B6:  BNZ   041A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003B8:  MOVLW  6F
003BA:  ADDWF  x6D,W
003BC:  MOVWF  FE9
003BE:  MOVLW  01
003C0:  ADDWFC x6E,W
003C2:  MOVWF  FEA
003C4:  MOVFF  2E,FEF
....................       restart_wdt();
003C8:  CLRWDT
....................       RxD_DataLen ++ ;
003CA:  INCF   x6D,F
003CC:  BTFSC  FD8.2
003CE:  INCF   x6E,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
003D0:  MOVLB  1
003D2:  MOVF   x70,W
003D4:  SUBLW  22
003D6:  BNZ   03E8
....................       {
....................          index = (RxD_Buff[2]*100) + RxD_Buff[3];
003D8:  MOVF   x71,W
003DA:  MULLW  64
003DC:  MOVF   FF3,W
003DE:  ADDWF  x72,W
003E0:  MOVLB  9
003E2:  MOVWF  x7B
....................       }
003E4:  BRA    040E
003E6:  MOVLB  1
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
003E8:  MOVLW  01
003EA:  MOVLB  0
003EC:  SUBWF  x6D,W
003EE:  MOVLB  B
003F0:  MOVWF  x60
003F2:  MOVLW  00
003F4:  MOVLB  0
003F6:  SUBWFB x6E,W
003F8:  MOVLB  B
003FA:  MOVWF  x61
003FC:  MOVLW  6F
003FE:  ADDWF  x60,W
00400:  MOVWF  FE9
00402:  MOVLW  01
00404:  ADDWFC x61,W
00406:  MOVWF  FEA
00408:  MOVFF  FEF,97B
0040C:  MOVLB  9
....................       }
....................       
....................       T_timeout = 0x14; //200ms
0040E:  MOVLW  14
00410:  MOVWF  x7A
....................       sequence = data_sq ;
00412:  MOVFF  6A,6B
....................    }
00416:  BRA    054E
00418:  MOVLB  0
....................    else if(sequence == data_sq)
0041A:  MOVF   x6A,W
0041C:  SUBWF  x6B,W
0041E:  BNZ   044C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00420:  MOVLW  6F
00422:  ADDWF  x6D,W
00424:  MOVWF  FE9
00426:  MOVLW  01
00428:  ADDWFC x6E,W
0042A:  MOVWF  FEA
0042C:  MOVFF  2E,FEF
....................       restart_wdt();
00430:  CLRWDT
....................       RxD_DataLen ++ ;
00432:  INCF   x6D,F
00434:  BTFSC  FD8.2
00436:  INCF   x6E,F
....................       index -- ;                     //Data Byte Count
00438:  MOVLB  9
0043A:  DECF   x7B,F
....................       if(index == 0x00)
0043C:  MOVF   x7B,F
0043E:  BNZ   0444
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
00440:  MOVFF  67,6B
....................       }
....................       T_timeout = 0x14; //200ms
00444:  MOVLW  14
00446:  MOVWF  x7A
....................    }
00448:  BRA    054E
0044A:  MOVLB  0
....................    else if(sequence == code_sq)
0044C:  MOVF   x64,W
0044E:  SUBWF  x6B,W
00450:  BNZ   0478
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00452:  MOVLW  6F
00454:  ADDWF  x6D,W
00456:  MOVWF  FE9
00458:  MOVLW  01
0045A:  ADDWFC x6E,W
0045C:  MOVWF  FEA
0045E:  MOVFF  2E,FEF
....................       restart_wdt();
00462:  CLRWDT
....................       RxD_DataLen ++ ;
00464:  INCF   x6D,F
00466:  BTFSC  FD8.2
00468:  INCF   x6E,F
....................       sequence = start_addr_hi_sq;
0046A:  MOVFF  65,6B
....................       T_timeout = 0x14; //200ms
0046E:  MOVLW  14
00470:  MOVLB  9
00472:  MOVWF  x7A
.................... 
....................    }
00474:  BRA    054E
00476:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
00478:  MOVF   x65,W
0047A:  SUBWF  x6B,W
0047C:  BNZ   04A4
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
0047E:  MOVLW  6F
00480:  ADDWF  x6D,W
00482:  MOVWF  FE9
00484:  MOVLW  01
00486:  ADDWFC x6E,W
00488:  MOVWF  FEA
0048A:  MOVFF  2E,FEF
....................       restart_wdt();
0048E:  CLRWDT
....................       RxD_DataLen ++ ;
00490:  INCF   x6D,F
00492:  BTFSC  FD8.2
00494:  INCF   x6E,F
....................       sequence = start_addr_lo_sq;
00496:  MOVFF  66,6B
....................       T_timeout = 0x14; //200ms
0049A:  MOVLW  14
0049C:  MOVLB  9
0049E:  MOVWF  x7A
....................    }
004A0:  BRA    054E
004A2:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004A4:  MOVF   x66,W
004A6:  SUBWF  x6B,W
004A8:  BNZ   04D0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004AA:  MOVLW  6F
004AC:  ADDWF  x6D,W
004AE:  MOVWF  FE9
004B0:  MOVLW  01
004B2:  ADDWFC x6E,W
004B4:  MOVWF  FEA
004B6:  MOVFF  2E,FEF
....................       restart_wdt();
004BA:  CLRWDT
....................       RxD_DataLen ++ ;
004BC:  INCF   x6D,F
004BE:  BTFSC  FD8.2
004C0:  INCF   x6E,F
....................       sequence = ubyte_hi_sq;
004C2:  MOVLW  15
004C4:  MOVWF  x6B
....................       T_timeout = 0x14; //200ms
004C6:  MOVLW  14
004C8:  MOVLB  9
004CA:  MOVWF  x7A
....................    }
004CC:  BRA    054E
004CE:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
004D0:  MOVF   x6B,W
004D2:  SUBLW  15
004D4:  BNZ   04FC
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
004D6:  MOVLW  6F
004D8:  ADDWF  x6D,W
004DA:  MOVWF  FE9
004DC:  MOVLW  01
004DE:  ADDWFC x6E,W
004E0:  MOVWF  FEA
004E2:  MOVFF  2E,FEF
....................       restart_wdt();
004E6:  CLRWDT
....................       RxD_DataLen ++ ;
004E8:  INCF   x6D,F
004EA:  BTFSC  FD8.2
004EC:  INCF   x6E,F
....................       sequence = ubyte_lo_sq;
004EE:  MOVFF  67,6B
....................       T_timeout = 0x14; //200ms
004F2:  MOVLW  14
004F4:  MOVLB  9
004F6:  MOVWF  x7A
....................    }
004F8:  BRA    054E
004FA:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
004FC:  MOVF   x67,W
004FE:  SUBWF  x6B,W
00500:  BNZ   0528
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00502:  MOVLW  6F
00504:  ADDWF  x6D,W
00506:  MOVWF  FE9
00508:  MOVLW  01
0050A:  ADDWFC x6E,W
0050C:  MOVWF  FEA
0050E:  MOVFF  2E,FEF
....................       restart_wdt();
00512:  CLRWDT
....................       RxD_DataLen ++ ;
00514:  INCF   x6D,F
00516:  BTFSC  FD8.2
00518:  INCF   x6E,F
....................       sequence = crc_hi_sq;
0051A:  MOVFF  68,6B
....................       T_timeout = 0x14; //200ms
0051E:  MOVLW  14
00520:  MOVLB  9
00522:  MOVWF  x7A
....................    }
00524:  BRA    054E
00526:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00528:  MOVF   x68,W
0052A:  SUBWF  x6B,W
0052C:  BNZ   054E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
0052E:  MOVLW  6F
00530:  ADDWF  x6D,W
00532:  MOVWF  FE9
00534:  MOVLW  01
00536:  ADDWFC x6E,W
00538:  MOVWF  FEA
0053A:  MOVFF  2E,FEF
....................       restart_wdt();
0053E:  CLRWDT
....................       sequence = end_sq;
00540:  MOVFF  63,6B
....................       T_timeout = 0x00;
00544:  MOVLB  9
00546:  CLRF   x7A
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
00548:  BSF    30.5
....................       output_bit(P485ctrl,0);
0054A:  BCF    F8A.3
0054C:  BCF    F93.3
0054E:  MOVLB  0
....................    }
00550:  GOTO   055E (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
02670:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
02672:  MOVLW  01
02674:  SUBWF  x6D,W
02676:  MOVLB  B
02678:  MOVWF  x57
0267A:  MOVLW  00
0267C:  MOVLB  0
0267E:  SUBWFB x6E,W
02680:  MOVLB  B
02682:  MOVWF  x58
02684:  MOVLW  01
02686:  MOVWF  x5A
02688:  MOVLW  6F
0268A:  MOVWF  x59
0268C:  MOVFF  B57,B5B
02690:  MOVLB  0
02692:  RCALL  2408
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
02694:  MOVLW  01
02696:  SUBWF  x6D,W
02698:  MOVLB  B
0269A:  MOVWF  x57
0269C:  MOVLW  00
0269E:  MOVLB  0
026A0:  SUBWFB x6E,W
026A2:  MOVLB  B
026A4:  MOVWF  x58
026A6:  MOVLW  6F
026A8:  ADDWF  x57,W
026AA:  MOVWF  FE9
026AC:  MOVLW  01
026AE:  ADDWFC x58,W
026B0:  MOVWF  FEA
026B2:  MOVF   FEF,W
026B4:  MOVLB  5
026B6:  SUBWF  x70,W
026B8:  BTFSS  FD8.2
026BA:  GOTO   4460
026BE:  MOVLW  6F
026C0:  MOVLB  0
026C2:  ADDWF  x6D,W
026C4:  MOVWF  FE9
026C6:  MOVLW  01
026C8:  ADDWFC x6E,W
026CA:  MOVWF  FEA
026CC:  MOVF   FEF,W
026CE:  MOVLB  5
026D0:  SUBWF  x6F,W
026D2:  BTFSS  FD8.2
026D4:  GOTO   4460
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
026D8:  MOVLB  1
026DA:  MOVF   x6F,W
026DC:  SUBLW  AA
026DE:  BTFSS  FD8.2
026E0:  BRA    299E
026E2:  MOVF   x70,W
026E4:  SUBLW  20
026E6:  BTFSS  FD8.2
026E8:  BRA    299E
....................       {
....................          TxD_Buff[0] = Address ;         //Address
026EA:  MOVFF  6C,6F
....................          TxD_Buff[1] = 0x20 ;            //function code
026EE:  MOVLW  20
026F0:  MOVLB  0
026F2:  MOVWF  x70
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
026F4:  MOVLW  1C
026F6:  MOVWF  x71
....................          TxD_Buff[3] = InputType1_8 ;    //1
026F8:  MOVFF  3B,72
....................          TxD_Buff[4] = InputType9_16 ;  //2
026FC:  MOVFF  3C,73
....................          TxD_Buff[5] = InputType17_24 ;//3
02700:  MOVFF  3D,74
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
02704:  MOVFF  3E,75
....................          TxD_Buff[7] = FaultType9_16 ; //5
02708:  MOVFF  3F,76
....................          TxD_Buff[8] = FaultType17_24 ;   //6
0270C:  MOVFF  40,77
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
02710:  MOVFF  41,78
....................          TxD_Buff[10] = OutputType9_16 ;  //8
02714:  MOVFF  42,79
....................          TxD_Buff[11] = OutputType17_24 ; //9
02718:  MOVFF  43,7A
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
0271C:  MOVFF  44,7B
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
02720:  MOVFF  45,7C
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
02724:  MOVFF  46,7D
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
02728:  MOVFF  47,7E
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
0272C:  MOVFF  48,7F
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
02730:  MOVFF  49,80
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
02734:  MOVFF  FF2,B57
02738:  BCF    FF2.7
0273A:  CLRF   FAA
0273C:  MOVLW  10
0273E:  MOVWF  FA9
02740:  BCF    FA6.6
02742:  BCF    FA6.7
02744:  BSF    FA6.0
02746:  MOVF   FA8,W
02748:  MOVLB  B
0274A:  BTFSC  x57.7
0274C:  BSF    FF2.7
0274E:  MOVLB  0
02750:  MOVWF  x81
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
02752:  MOVFF  FF2,B57
02756:  BCF    FF2.7
02758:  CLRF   FAA
0275A:  MOVLW  11
0275C:  MOVWF  FA9
0275E:  BCF    FA6.6
02760:  BCF    FA6.7
02762:  BSF    FA6.0
02764:  MOVF   FA8,W
02766:  MOVLB  B
02768:  BTFSC  x57.7
0276A:  BSF    FF2.7
0276C:  MOVLB  0
0276E:  MOVWF  x82
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
02770:  MOVFF  FF2,B57
02774:  BCF    FF2.7
02776:  CLRF   FAA
02778:  MOVLW  12
0277A:  MOVWF  FA9
0277C:  BCF    FA6.6
0277E:  BCF    FA6.7
02780:  BSF    FA6.0
02782:  MOVF   FA8,W
02784:  MOVLB  B
02786:  BTFSC  x57.7
02788:  BSF    FF2.7
0278A:  MOVLB  0
0278C:  MOVWF  x83
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
0278E:  MOVFF  FF2,B57
02792:  BCF    FF2.7
02794:  CLRF   FAA
02796:  MOVLW  13
02798:  MOVWF  FA9
0279A:  BCF    FA6.6
0279C:  BCF    FA6.7
0279E:  BSF    FA6.0
027A0:  MOVF   FA8,W
027A2:  MOVLB  B
027A4:  BTFSC  x57.7
027A6:  BSF    FF2.7
027A8:  MOVLB  0
027AA:  MOVWF  x84
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
027AC:  MOVFF  FF2,B57
027B0:  BCF    FF2.7
027B2:  CLRF   FAA
027B4:  MOVLW  14
027B6:  MOVWF  FA9
027B8:  BCF    FA6.6
027BA:  BCF    FA6.7
027BC:  BSF    FA6.0
027BE:  MOVF   FA8,W
027C0:  MOVLB  B
027C2:  BTFSC  x57.7
027C4:  BSF    FF2.7
027C6:  MOVLB  0
027C8:  MOVWF  x85
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
027CA:  MOVFF  FF2,B57
027CE:  BCF    FF2.7
027D0:  CLRF   FAA
027D2:  MOVLW  15
027D4:  MOVWF  FA9
027D6:  BCF    FA6.6
027D8:  BCF    FA6.7
027DA:  BSF    FA6.0
027DC:  MOVF   FA8,W
027DE:  MOVLB  B
027E0:  BTFSC  x57.7
027E2:  BSF    FF2.7
027E4:  MOVLB  0
027E6:  MOVWF  x86
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
027E8:  MOVFF  FF2,B57
027EC:  BCF    FF2.7
027EE:  CLRF   FAA
027F0:  MOVLW  16
027F2:  MOVWF  FA9
027F4:  BCF    FA6.6
027F6:  BCF    FA6.7
027F8:  BSF    FA6.0
027FA:  MOVF   FA8,W
027FC:  MOVLB  B
027FE:  BTFSC  x57.7
02800:  BSF    FF2.7
02802:  MOVLB  0
02804:  MOVWF  x87
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
02806:  MOVFF  FF2,B57
0280A:  BCF    FF2.7
0280C:  CLRF   FAA
0280E:  MOVLW  17
02810:  MOVWF  FA9
02812:  BCF    FA6.6
02814:  BCF    FA6.7
02816:  BSF    FA6.0
02818:  MOVF   FA8,W
0281A:  MOVLB  B
0281C:  BTFSC  x57.7
0281E:  BSF    FF2.7
02820:  MOVLB  0
02822:  MOVWF  x88
....................        
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
02824:  MOVFF  5E,89
....................          TxD_Buff[27] = AutoAckTime ;        //25
02828:  MOVFF  5F,8A
....................          TxD_Buff[28] = FlashingRate ;       //26
0282C:  MOVFF  60,8B
....................          TxD_Buff[29] = NoOfPoint ;          //27
02830:  MOVFF  61,8C
....................          TxD_Buff[30] = FaultDelayTime ;    //28
02834:  MOVLW  1A
02836:  MOVWF  x8D
....................          TxD_Buff[31] = Address ;            //29
02838:  MOVFF  6C,8E
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
0283C:  MOVFF  B1C,8F
....................          TxD_Buff[33] = FaultDelayTime[2] ;
02840:  MOVFF  B1E,90
....................          TxD_Buff[34] = FaultDelayTime[3] ;
02844:  MOVFF  B20,91
....................          TxD_Buff[35] = FaultDelayTime[4] ;
02848:  MOVFF  B22,92
....................          TxD_Buff[36] = FaultDelayTime[5] ;
0284C:  MOVFF  B24,93
....................          TxD_Buff[37] = FaultDelayTime[6] ;
02850:  MOVFF  B26,94
....................          TxD_Buff[38] = FaultDelayTime[7] ;
02854:  MOVFF  B28,95
....................          TxD_Buff[39] = FaultDelayTime[8] ;
02858:  MOVFF  B2A,96
....................          TxD_Buff[40] = FaultDelayTime[9] ;
0285C:  MOVFF  B2C,97
....................          TxD_Buff[41] = FaultDelayTime[10] ;
02860:  MOVFF  B2E,98
....................          TxD_Buff[42] = FaultDelayTime[11] ;
02864:  MOVFF  B30,99
....................          TxD_Buff[43] = FaultDelayTime[12] ;
02868:  MOVFF  B32,9A
....................          TxD_Buff[44] = FaultDelayTime[13] ;
0286C:  MOVFF  B34,9B
....................          TxD_Buff[45] = FaultDelayTime[14] ;
02870:  MOVFF  B36,9C
....................          TxD_Buff[46] = FaultDelayTime[15] ;
02874:  MOVFF  B38,9D
....................          TxD_Buff[47] = FaultDelayTime[16] ;
02878:  MOVFF  B3A,9E
....................          TxD_Buff[48] = FaultDelayTime[17] ;
0287C:  MOVFF  B3C,9F
....................          TxD_Buff[49] = FaultDelayTime[18] ;
02880:  MOVFF  B3E,A0
....................          TxD_Buff[50] = FaultDelayTime[19] ;
02884:  MOVFF  B40,A1
....................          TxD_Buff[51] = FaultDelayTime[20] ;
02888:  MOVFF  B42,A2
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
0288C:  MOVLB  B
0288E:  CLRF   x5A
02890:  MOVLW  6F
02892:  MOVWF  x59
02894:  MOVLW  34
02896:  MOVWF  x5B
02898:  MOVLB  0
0289A:  RCALL  2408
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
0289C:  MOVFF  570,A3
....................          TxD_Buff[53] = CRC_Lo ;
028A0:  MOVFF  56F,A4
.................... 
....................          output_bit(P485ctrl,1);
028A4:  BSF    F8A.3
028A6:  BCF    F93.3
....................          delay_ms(10);
028A8:  MOVLW  0A
028AA:  MOVLB  B
028AC:  MOVWF  x57
028AE:  MOVLB  0
028B0:  CALL   07FA
.................... 
....................          putc(Txd_Buff[0]);
028B4:  MOVF   x6F,W
028B6:  RCALL  245E
....................          putc(Txd_Buff[1]);
028B8:  MOVF   x70,W
028BA:  RCALL  245E
....................          putc(Txd_Buff[2]);
028BC:  MOVF   x71,W
028BE:  RCALL  245E
....................          putc(Txd_Buff[3]);
028C0:  MOVF   x72,W
028C2:  RCALL  245E
....................          putc(Txd_Buff[4]);
028C4:  MOVF   x73,W
028C6:  RCALL  245E
....................          putc(Txd_Buff[5]);
028C8:  MOVF   x74,W
028CA:  RCALL  245E
....................          putc(Txd_Buff[6]);
028CC:  MOVF   x75,W
028CE:  RCALL  245E
....................          putc(Txd_Buff[7]);
028D0:  MOVF   x76,W
028D2:  RCALL  245E
....................          putc(Txd_Buff[8]);
028D4:  MOVF   x77,W
028D6:  RCALL  245E
....................          putc(Txd_Buff[9]);
028D8:  MOVF   x78,W
028DA:  RCALL  245E
....................          putc(Txd_Buff[10]);
028DC:  MOVF   x79,W
028DE:  RCALL  245E
....................          putc(Txd_Buff[11]);
028E0:  MOVF   x7A,W
028E2:  RCALL  245E
....................          putc(Txd_Buff[12]);
028E4:  MOVF   x7B,W
028E6:  RCALL  245E
....................          putc(Txd_Buff[13]);
028E8:  MOVF   x7C,W
028EA:  RCALL  245E
....................          putc(Txd_Buff[14]);
028EC:  MOVF   x7D,W
028EE:  RCALL  245E
....................          putc(Txd_Buff[15]);
028F0:  MOVF   x7E,W
028F2:  RCALL  245E
....................          putc(Txd_Buff[16]);
028F4:  MOVF   x7F,W
028F6:  RCALL  245E
....................          putc(Txd_Buff[17]);
028F8:  MOVF   x80,W
028FA:  RCALL  245E
....................          putc(Txd_Buff[18]);
028FC:  MOVF   x81,W
028FE:  RCALL  245E
....................          putc(Txd_Buff[19]);
02900:  MOVF   x82,W
02902:  RCALL  245E
....................          putc(Txd_Buff[20]);
02904:  MOVF   x83,W
02906:  RCALL  245E
....................          putc(Txd_Buff[21]);
02908:  MOVF   x84,W
0290A:  RCALL  245E
....................          putc(Txd_Buff[22]);
0290C:  MOVF   x85,W
0290E:  RCALL  245E
....................          putc(Txd_Buff[23]);
02910:  MOVF   x86,W
02912:  RCALL  245E
....................          putc(Txd_Buff[24]);
02914:  MOVF   x87,W
02916:  RCALL  245E
....................          putc(Txd_Buff[25]);
02918:  MOVF   x88,W
0291A:  RCALL  245E
....................          putc(Txd_Buff[26]);
0291C:  MOVF   x89,W
0291E:  RCALL  245E
....................          putc(Txd_Buff[27]);
02920:  MOVF   x8A,W
02922:  RCALL  245E
....................          putc(Txd_Buff[28]);
02924:  MOVF   x8B,W
02926:  RCALL  245E
....................          putc(Txd_Buff[29]);
02928:  MOVF   x8C,W
0292A:  RCALL  245E
....................          putc(Txd_Buff[30]);
0292C:  MOVF   x8D,W
0292E:  RCALL  245E
....................          putc(Txd_Buff[31]);
02930:  MOVF   x8E,W
02932:  RCALL  245E
....................          
....................          putc(Txd_Buff[32]);
02934:  MOVF   x8F,W
02936:  RCALL  245E
....................          putc(Txd_Buff[33]);
02938:  MOVF   x90,W
0293A:  RCALL  245E
....................          putc(Txd_Buff[34]);
0293C:  MOVF   x91,W
0293E:  RCALL  245E
....................          putc(Txd_Buff[35]);
02940:  MOVF   x92,W
02942:  RCALL  245E
....................          putc(Txd_Buff[36]);
02944:  MOVF   x93,W
02946:  RCALL  245E
....................          putc(Txd_Buff[37]);
02948:  MOVF   x94,W
0294A:  RCALL  245E
....................          putc(Txd_Buff[38]);
0294C:  MOVF   x95,W
0294E:  RCALL  245E
....................          putc(Txd_Buff[39]);
02950:  MOVF   x96,W
02952:  RCALL  245E
....................          putc(Txd_Buff[40]);
02954:  MOVF   x97,W
02956:  RCALL  245E
....................          putc(Txd_Buff[41]);
02958:  MOVF   x98,W
0295A:  RCALL  245E
....................          
....................          putc(Txd_Buff[42]);
0295C:  MOVF   x99,W
0295E:  RCALL  245E
....................          putc(Txd_Buff[43]);
02960:  MOVF   x9A,W
02962:  RCALL  245E
....................          putc(Txd_Buff[44]);
02964:  MOVF   x9B,W
02966:  RCALL  245E
....................          putc(Txd_Buff[45]);
02968:  MOVF   x9C,W
0296A:  RCALL  245E
....................          putc(Txd_Buff[46]);
0296C:  MOVF   x9D,W
0296E:  RCALL  245E
....................          putc(Txd_Buff[47]);
02970:  MOVF   x9E,W
02972:  RCALL  245E
....................          putc(Txd_Buff[48]);
02974:  MOVF   x9F,W
02976:  RCALL  245E
....................          putc(Txd_Buff[49]);
02978:  MOVF   xA0,W
0297A:  RCALL  245E
....................          putc(Txd_Buff[50]);
0297C:  MOVF   xA1,W
0297E:  RCALL  245E
....................          putc(Txd_Buff[51]);
02980:  MOVF   xA2,W
02982:  RCALL  245E
....................          
....................          putc(Txd_Buff[52]);
02984:  MOVF   xA3,W
02986:  RCALL  245E
....................          putc(Txd_Buff[53]);
02988:  MOVF   xA4,W
0298A:  RCALL  245E
....................        
....................          delay_ms(3);
0298C:  MOVLW  03
0298E:  MOVLB  B
02990:  MOVWF  x57
02992:  MOVLB  0
02994:  CALL   07FA
....................          output_bit(P485ctrl,0);
02998:  BCF    F8A.3
0299A:  BCF    F93.3
0299C:  MOVLB  1
....................          
....................       }
....................    
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
0299E:  MOVLB  0
029A0:  MOVF   x6C,W
029A2:  MOVLB  1
029A4:  SUBWF  x6F,W
029A6:  BTFSS  FD8.2
029A8:  GOTO   4456
....................       {
....................       
....................          if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
029AC:  DECFSZ x70,W
029AE:  BRA    2DC6
....................          {
....................                //Do Read Coil
....................                Start_Address = RxD_Buff[2] ;
029B0:  MOVLB  5
029B2:  CLRF   x74
029B4:  MOVFF  171,573
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
029B8:  MOVFF  573,574
029BC:  MOVLB  B
029BE:  CLRF   x57
029C0:  MOVF   x57,W
029C2:  MOVLB  1
029C4:  IORWF  x72,W
029C6:  MOVLB  5
029C8:  MOVWF  x73
029CA:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
029CC:  CLRF   x76
029CE:  MOVFF  173,575
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
029D2:  MOVFF  575,576
029D6:  MOVLB  B
029D8:  CLRF   x57
029DA:  MOVF   x57,W
029DC:  MOVLB  1
029DE:  IORWF  x74,W
029E0:  MOVLB  5
029E2:  MOVWF  x75
029E4:  MOVLB  5
....................    
....................                if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
029E6:  MOVF   x74,F
029E8:  BTFSS  FD8.2
029EA:  BRA    2D54
029EC:  MOVF   x73,W
029EE:  SUBLW  0F
029F0:  BTFSS  FD8.0
029F2:  BRA    2D54
029F4:  MOVF   x75,W
029F6:  ADDWF  x73,W
029F8:  MOVLB  B
029FA:  MOVWF  x57
029FC:  MOVLB  5
029FE:  MOVF   x76,W
02A00:  ADDWFC x74,W
02A02:  MOVLB  B
02A04:  MOVWF  x58
02A06:  MOVF   x58,F
02A08:  BTFSC  FD8.2
02A0A:  BRA    2A10
02A0C:  MOVLB  5
02A0E:  BRA    2D54
02A10:  MOVF   x57,W
02A12:  SUBLW  10
02A14:  BTFSC  FD8.0
02A16:  BRA    2A1C
02A18:  MOVLB  5
02A1A:  BRA    2D54
....................                {
....................                   if(No_PointCount < 9) Data_ByteCount = 0x01 ;
02A1C:  MOVLB  5
02A1E:  MOVF   x76,F
02A20:  BNZ   2A2E
02A22:  MOVF   x75,W
02A24:  SUBLW  08
02A26:  BNC   2A2E
02A28:  MOVLW  01
02A2A:  MOVWF  x77
02A2C:  BRA    2A52
....................                   else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
02A2E:  MOVF   x76,F
02A30:  BNZ   2A3E
02A32:  MOVF   x75,W
02A34:  SUBLW  10
02A36:  BNC   2A3E
02A38:  MOVLW  02
02A3A:  MOVWF  x77
02A3C:  BRA    2A52
....................                   else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
02A3E:  MOVF   x76,F
02A40:  BNZ   2A4E
02A42:  MOVF   x75,W
02A44:  SUBLW  18
02A46:  BNC   2A4E
02A48:  MOVLW  03
02A4A:  MOVWF  x77
02A4C:  BRA    2A52
....................                   else   Data_ByteCount = 0x01 ; //----Jack
02A4E:  MOVLW  01
02A50:  MOVWF  x77
....................    
....................                   if(Data_ByteCount == 0x01)
02A52:  DECFSZ x77,W
02A54:  BRA    2B8C
....................                   {
....................    
....................                      if(Start_Address < 0x09)
02A56:  MOVF   x74,F
02A58:  BNZ   2A74
02A5A:  MOVF   x73,W
02A5C:  SUBLW  08
02A5E:  BNC   2A74
....................                      {
....................                         //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                         //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                         //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                          Data_Buff[0] = Input1_8 >> Start_Address ;
02A60:  MOVFF  4A,578
02A64:  MOVF   x73,W
02A66:  MOVWF  01
02A68:  BZ    2A72
02A6A:  BCF    FD8.0
02A6C:  RRCF   x78,F
02A6E:  DECFSZ 01,F
02A70:  BRA    2A6A
....................                          //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                          //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                      }
02A72:  BRA    2AA8
....................                      else if(Start_Address > 0x08 && Start_Address < 0x10)
02A74:  MOVF   x74,F
02A76:  BNZ   2A7E
02A78:  MOVF   x73,W
02A7A:  SUBLW  08
02A7C:  BC    2AA8
02A7E:  MOVF   x74,F
02A80:  BNZ   2AA8
02A82:  MOVF   x73,W
02A84:  SUBLW  0F
02A86:  BNC   2AA8
....................                      {
....................                         //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                         Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
02A88:  MOVLW  08
02A8A:  SUBWF  x73,W
02A8C:  MOVWF  00
02A8E:  MOVLW  00
02A90:  SUBWFB x74,W
02A92:  MOVWF  03
02A94:  MOVFF  00,01
02A98:  MOVFF  32,578
02A9C:  MOVF   01,F
02A9E:  BZ    2AA8
02AA0:  BCF    FD8.0
02AA2:  RRCF   x78,F
02AA4:  DECFSZ 01,F
02AA6:  BRA    2AA0
....................                      }
....................    
....................    
....................                      if(No_PointCount == 0x08)
02AA8:  MOVF   x75,W
02AAA:  SUBLW  08
02AAC:  BNZ   2AB4
02AAE:  MOVF   x76,F
02AB0:  BNZ   2AB4
....................                      {
....................                         Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                      }
02AB2:  BRA    2B1E
....................                      else if(No_PointCount == 0x07)
02AB4:  MOVF   x75,W
02AB6:  SUBLW  07
02AB8:  BNZ   2AC2
02ABA:  MOVF   x76,F
02ABC:  BNZ   2AC2
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
02ABE:  BCF    x78.7
....................                      }
02AC0:  BRA    2B1E
....................                      else if(No_PointCount == 0x06)
02AC2:  MOVF   x75,W
02AC4:  SUBLW  06
02AC6:  BNZ   2AD2
02AC8:  MOVF   x76,F
02ACA:  BNZ   2AD2
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
02ACC:  MOVLW  3F
02ACE:  ANDWF  x78,F
....................                      }
02AD0:  BRA    2B1E
....................                      else if(No_PointCount == 0x05)
02AD2:  MOVF   x75,W
02AD4:  SUBLW  05
02AD6:  BNZ   2AE2
02AD8:  MOVF   x76,F
02ADA:  BNZ   2AE2
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
02ADC:  MOVLW  1F
02ADE:  ANDWF  x78,F
....................                      }
02AE0:  BRA    2B1E
....................                      else if(No_PointCount == 0x04)
02AE2:  MOVF   x75,W
02AE4:  SUBLW  04
02AE6:  BNZ   2AF2
02AE8:  MOVF   x76,F
02AEA:  BNZ   2AF2
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
02AEC:  MOVLW  0F
02AEE:  ANDWF  x78,F
....................                      }
02AF0:  BRA    2B1E
....................                      else if(No_PointCount == 0x03)
02AF2:  MOVF   x75,W
02AF4:  SUBLW  03
02AF6:  BNZ   2B02
02AF8:  MOVF   x76,F
02AFA:  BNZ   2B02
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
02AFC:  MOVLW  07
02AFE:  ANDWF  x78,F
....................                      }
02B00:  BRA    2B1E
....................                      else if(No_PointCount == 0x02)
02B02:  MOVF   x75,W
02B04:  SUBLW  02
02B06:  BNZ   2B12
02B08:  MOVF   x76,F
02B0A:  BNZ   2B12
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
02B0C:  MOVLW  03
02B0E:  ANDWF  x78,F
....................                      }
02B10:  BRA    2B1E
....................                      else if(No_PointCount == 0x01)
02B12:  DECFSZ x75,W
02B14:  BRA    2B1E
02B16:  MOVF   x76,F
02B18:  BNZ   2B1E
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
02B1A:  MOVLW  01
02B1C:  ANDWF  x78,F
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
02B1E:  MOVFF  6C,6F
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
02B22:  MOVLW  01
02B24:  MOVLB  0
02B26:  MOVWF  x70
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02B28:  MOVFF  577,71
....................                      TxD_Buff[3] = Data_Buff[0] ;   //Data
02B2C:  MOVFF  578,72
....................    
....................                      CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
02B30:  MOVLB  B
02B32:  CLRF   x5A
02B34:  MOVLW  6F
02B36:  MOVWF  x59
02B38:  MOVLW  04
02B3A:  MOVWF  x5B
02B3C:  MOVLB  0
02B3E:  RCALL  2408
....................    
....................                      TxD_Buff[4] = CRC_Hi ;
02B40:  MOVFF  570,73
....................                      TxD_Buff[5] = CRC_Lo ;
02B44:  MOVFF  56F,74
.................... 
....................                      output_bit(P485ctrl,1);
02B48:  BSF    F8A.3
02B4A:  BCF    F93.3
....................                      restart_wdt();
02B4C:  CLRWDT
....................                      delay_ms(4);
02B4E:  MOVLW  04
02B50:  MOVLB  B
02B52:  MOVWF  x57
02B54:  MOVLB  0
02B56:  CALL   07FA
....................                      restart_wdt();
02B5A:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
02B5C:  MOVF   x6F,W
02B5E:  RCALL  245E
....................                      putc(TxD_Buff[1]) ;               //Function Code
02B60:  MOVF   x70,W
02B62:  RCALL  245E
....................                      putc(TxD_Buff[2]) ;               //Byte Count
02B64:  MOVF   x71,W
02B66:  RCALL  245E
....................                      putc(TxD_Buff[3]) ;
02B68:  MOVF   x72,W
02B6A:  RCALL  245E
....................                      putc(TxD_Buff[4]) ;
02B6C:  MOVF   x73,W
02B6E:  RCALL  245E
....................                      putc(TxD_Buff[5]) ;
02B70:  MOVF   x74,W
02B72:  RCALL  245E
....................                   
....................                      restart_wdt();
02B74:  CLRWDT
....................                      delay_ms(3);
02B76:  MOVLW  03
02B78:  MOVLB  B
02B7A:  MOVWF  x57
02B7C:  MOVLB  0
02B7E:  CALL   07FA
....................                      restart_wdt();
02B82:  CLRWDT
....................                      output_bit(P485ctrl,0);
02B84:  BCF    F8A.3
02B86:  BCF    F93.3
....................                  
....................                   }
02B88:  BRA    2D50
02B8A:  MOVLB  5
....................                   else if(Data_ByteCount == 0x02)
02B8C:  MOVF   x77,W
02B8E:  SUBLW  02
02B90:  BTFSS  FD8.2
02B92:  BRA    2D52
....................                   {
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
02B94:  MOVFF  4A,578
02B98:  MOVF   x73,W
02B9A:  MOVWF  01
02B9C:  BZ    2BA6
02B9E:  BCF    FD8.0
02BA0:  RRCF   x78,F
02BA2:  DECFSZ 01,F
02BA4:  BRA    2B9E
....................                      Data_Buff[1] = Input9_10 ;// >> Start_Address ;
02BA6:  MOVFF  4B,579
....................    
....................    
....................                      if((No_PointCount - 0x07) == 0x08)
02BAA:  MOVLW  07
02BAC:  SUBWF  x75,W
02BAE:  MOVLB  B
02BB0:  MOVWF  x57
02BB2:  MOVLW  00
02BB4:  MOVLB  5
02BB6:  SUBWFB x76,W
02BB8:  MOVLB  B
02BBA:  MOVWF  x58
02BBC:  MOVF   x57,W
02BBE:  SUBLW  08
02BC0:  BNZ   2BC8
02BC2:  MOVF   x58,F
02BC4:  BNZ   2BC8
....................                      {
....................                         Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                      }
02BC6:  BRA    2CCE
....................                      else if((No_PointCount - 0x07) == 0x07)
02BC8:  MOVLW  07
02BCA:  MOVLB  5
02BCC:  SUBWF  x75,W
02BCE:  MOVLB  B
02BD0:  MOVWF  x57
02BD2:  MOVLW  00
02BD4:  MOVLB  5
02BD6:  SUBWFB x76,W
02BD8:  MOVLB  B
02BDA:  MOVWF  x58
02BDC:  MOVF   x57,W
02BDE:  SUBLW  07
02BE0:  BNZ   2BEC
02BE2:  MOVF   x58,F
02BE4:  BNZ   2BEC
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
02BE6:  MOVLB  5
02BE8:  BCF    x79.7
....................                      }
02BEA:  BRA    2CCC
....................                      else if((No_PointCount - 0x07) == 0x06)
02BEC:  MOVLW  07
02BEE:  MOVLB  5
02BF0:  SUBWF  x75,W
02BF2:  MOVLB  B
02BF4:  MOVWF  x57
02BF6:  MOVLW  00
02BF8:  MOVLB  5
02BFA:  SUBWFB x76,W
02BFC:  MOVLB  B
02BFE:  MOVWF  x58
02C00:  MOVF   x57,W
02C02:  SUBLW  06
02C04:  BNZ   2C12
02C06:  MOVF   x58,F
02C08:  BNZ   2C12
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
02C0A:  MOVLW  3F
02C0C:  MOVLB  5
02C0E:  ANDWF  x79,F
....................                      }
02C10:  BRA    2CCC
....................                      else if((No_PointCount - 0x07) == 0x05)
02C12:  MOVLW  07
02C14:  MOVLB  5
02C16:  SUBWF  x75,W
02C18:  MOVLB  B
02C1A:  MOVWF  x57
02C1C:  MOVLW  00
02C1E:  MOVLB  5
02C20:  SUBWFB x76,W
02C22:  MOVLB  B
02C24:  MOVWF  x58
02C26:  MOVF   x57,W
02C28:  SUBLW  05
02C2A:  BNZ   2C38
02C2C:  MOVF   x58,F
02C2E:  BNZ   2C38
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
02C30:  MOVLW  1F
02C32:  MOVLB  5
02C34:  ANDWF  x79,F
....................                      }
02C36:  BRA    2CCC
....................                      else if((No_PointCount - 0x07) == 0x04)
02C38:  MOVLW  07
02C3A:  MOVLB  5
02C3C:  SUBWF  x75,W
02C3E:  MOVLB  B
02C40:  MOVWF  x57
02C42:  MOVLW  00
02C44:  MOVLB  5
02C46:  SUBWFB x76,W
02C48:  MOVLB  B
02C4A:  MOVWF  x58
02C4C:  MOVF   x57,W
02C4E:  SUBLW  04
02C50:  BNZ   2C5E
02C52:  MOVF   x58,F
02C54:  BNZ   2C5E
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
02C56:  MOVLW  0F
02C58:  MOVLB  5
02C5A:  ANDWF  x79,F
....................                      }
02C5C:  BRA    2CCC
....................                      else if((No_PointCount - 0x07) == 0x03)
02C5E:  MOVLW  07
02C60:  MOVLB  5
02C62:  SUBWF  x75,W
02C64:  MOVLB  B
02C66:  MOVWF  x57
02C68:  MOVLW  00
02C6A:  MOVLB  5
02C6C:  SUBWFB x76,W
02C6E:  MOVLB  B
02C70:  MOVWF  x58
02C72:  MOVF   x57,W
02C74:  SUBLW  03
02C76:  BNZ   2C84
02C78:  MOVF   x58,F
02C7A:  BNZ   2C84
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
02C7C:  MOVLW  07
02C7E:  MOVLB  5
02C80:  ANDWF  x79,F
....................                      }
02C82:  BRA    2CCC
....................                      else if((No_PointCount - 0x07) == 0x02)
02C84:  MOVLW  07
02C86:  MOVLB  5
02C88:  SUBWF  x75,W
02C8A:  MOVLB  B
02C8C:  MOVWF  x57
02C8E:  MOVLW  00
02C90:  MOVLB  5
02C92:  SUBWFB x76,W
02C94:  MOVLB  B
02C96:  MOVWF  x58
02C98:  MOVF   x57,W
02C9A:  SUBLW  02
02C9C:  BNZ   2CAA
02C9E:  MOVF   x58,F
02CA0:  BNZ   2CAA
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
02CA2:  MOVLW  03
02CA4:  MOVLB  5
02CA6:  ANDWF  x79,F
....................                      }
02CA8:  BRA    2CCC
....................                      else if((No_PointCount - 0x07) == 0x01)
02CAA:  MOVLW  07
02CAC:  MOVLB  5
02CAE:  SUBWF  x75,W
02CB0:  MOVLB  B
02CB2:  MOVWF  x57
02CB4:  MOVLW  00
02CB6:  MOVLB  5
02CB8:  SUBWFB x76,W
02CBA:  MOVLB  B
02CBC:  MOVWF  x58
02CBE:  DECFSZ x57,W
02CC0:  BRA    2CCE
02CC2:  MOVF   x58,F
02CC4:  BNZ   2CCE
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
02CC6:  MOVLW  01
02CC8:  MOVLB  5
02CCA:  ANDWF  x79,F
02CCC:  MOVLB  B
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
02CCE:  MOVFF  6C,6F
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
02CD2:  MOVLW  01
02CD4:  MOVLB  0
02CD6:  MOVWF  x70
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02CD8:  MOVFF  577,71
....................                      TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02CDC:  MOVFF  578,72
....................                      TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02CE0:  MOVFF  579,73
....................    
....................                      CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02CE4:  MOVLB  B
02CE6:  CLRF   x5A
02CE8:  MOVLW  6F
02CEA:  MOVWF  x59
02CEC:  MOVLW  05
02CEE:  MOVWF  x5B
02CF0:  MOVLB  0
02CF2:  CALL   2408
....................    
....................                      TxD_Buff[5] = CRC_Hi ;
02CF6:  MOVFF  570,74
....................                      TxD_Buff[6] = CRC_Lo ;
02CFA:  MOVFF  56F,75
.................... 
....................                      output_bit(P485ctrl,1);
02CFE:  BSF    F8A.3
02D00:  BCF    F93.3
....................                      restart_wdt();
02D02:  CLRWDT
....................                      delay_ms(4);
02D04:  MOVLW  04
02D06:  MOVLB  B
02D08:  MOVWF  x57
02D0A:  MOVLB  0
02D0C:  CALL   07FA
....................                      restart_wdt();
02D10:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
02D12:  MOVF   x6F,W
02D14:  CALL   245E
....................                      putc(TxD_Buff[1]) ;               //Function Code
02D18:  MOVF   x70,W
02D1A:  CALL   245E
....................                      putc(TxD_Buff[2]) ;               //Byte Count
02D1E:  MOVF   x71,W
02D20:  CALL   245E
....................                      putc(TxD_Buff[3]) ;
02D24:  MOVF   x72,W
02D26:  CALL   245E
....................                      putc(TxD_Buff[4]) ;
02D2A:  MOVF   x73,W
02D2C:  CALL   245E
....................                      putc(TxD_Buff[5]) ;
02D30:  MOVF   x74,W
02D32:  CALL   245E
....................                      putc(TxD_Buff[6]) ;
02D36:  MOVF   x75,W
02D38:  CALL   245E
....................    
....................                      restart_wdt();
02D3C:  CLRWDT
....................                      delay_ms(3);
02D3E:  MOVLW  03
02D40:  MOVLB  B
02D42:  MOVWF  x57
02D44:  MOVLB  0
02D46:  CALL   07FA
....................                      restart_wdt();
02D4A:  CLRWDT
....................                      output_bit(P485ctrl,0);
02D4C:  BCF    F8A.3
02D4E:  BCF    F93.3
02D50:  MOVLB  5
....................                  
....................                   }
....................                }
02D52:  BRA    2DC4
....................                else
....................                {
....................                   //invalid parameter
....................                   TxD_Buff[0] = Address ;         //Address
02D54:  MOVFF  6C,6F
....................                   TxD_Buff[1] = 0x81 ;         //Function Code
02D58:  MOVLW  81
02D5A:  MOVLB  0
02D5C:  MOVWF  x70
....................                   TxD_Buff[2] = 0x02 ;         //illegal data address
02D5E:  MOVLW  02
02D60:  MOVWF  x71
....................    
....................                   CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02D62:  MOVLB  B
02D64:  CLRF   x5A
02D66:  MOVLW  6F
02D68:  MOVWF  x59
02D6A:  MOVLW  03
02D6C:  MOVWF  x5B
02D6E:  MOVLB  0
02D70:  CALL   2408
....................    
....................                   TxD_Buff[3] = CRC_Hi ;
02D74:  MOVFF  570,72
....................                   TxD_Buff[4] = CRC_Lo ;
02D78:  MOVFF  56F,73
.................... 
....................                   output_bit(P485ctrl,1);
02D7C:  BSF    F8A.3
02D7E:  BCF    F93.3
....................                   restart_wdt();
02D80:  CLRWDT
....................                   delay_ms(4);
02D82:  MOVLW  04
02D84:  MOVLB  B
02D86:  MOVWF  x57
02D88:  MOVLB  0
02D8A:  CALL   07FA
....................                   restart_wdt();
02D8E:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
02D90:  MOVF   x6F,W
02D92:  CALL   245E
....................                   putc(TxD_Buff[1]) ;               //Function Code
02D96:  MOVF   x70,W
02D98:  CALL   245E
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02D9C:  MOVF   x71,W
02D9E:  CALL   245E
....................                   putc(TxD_Buff[3]) ;
02DA2:  MOVF   x72,W
02DA4:  CALL   245E
....................                   putc(TxD_Buff[4]) ;
02DA8:  MOVF   x73,W
02DAA:  CALL   245E
....................    
....................                   restart_wdt();
02DAE:  CLRWDT
....................                   delay_ms(3);
02DB0:  MOVLW  03
02DB2:  MOVLB  B
02DB4:  MOVWF  x57
02DB6:  MOVLB  0
02DB8:  CALL   07FA
....................                   restart_wdt();
02DBC:  CLRWDT
....................                   output_bit(P485ctrl,0);
02DBE:  BCF    F8A.3
02DC0:  BCF    F93.3
02DC2:  MOVLB  5
02DC4:  MOVLB  1
....................                   
....................                }
....................             }
.................... 
.................... 
....................               /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02DC6:  MOVF   x70,W
02DC8:  SUBLW  07
02DCA:  BTFSS  FD8.2
02DCC:  BRA    2F30
....................       {
....................          alarmtosend();
02DCE:  MOVLB  0
02DD0:  GOTO   2466
....................          
....................          disable_interrupts(INT_TIMER2);
02DD4:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02DD6:  MOVFF  1E,578
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02DDA:  MOVFF  1F,579
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02DDE:  MOVFF  20,57A
....................             Data_Buff[3] = Input25_32_Send ;
02DE2:  MOVFF  21,57B
....................             Data_Buff[4] = Input33_40_Send ;
02DE6:  MOVFF  22,57C
....................             Data_Buff[5] = Input41_48_Send ;
02DEA:  MOVFF  23,57D
....................             Data_Buff[6] = Input49_56_Send ;
02DEE:  MOVFF  24,57E
....................             Data_Buff[7] = Input57_64_Send ;
02DF2:  MOVFF  25,57F
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02DF6:  MOVFF  26,580
....................             Data_Buff[9] = Ack9_16_Send ;
02DFA:  MOVFF  27,581
....................             Data_Buff[10] = Ack17_24_Send ;
02DFE:  MOVFF  28,582
....................             Data_Buff[11] = Ack25_32_Send ;
02E02:  MOVFF  29,583
....................             Data_Buff[12] = Ack33_40_Send ;
02E06:  MOVFF  2A,584
....................             Data_Buff[13] = Ack41_48_Send ;
02E0A:  MOVFF  2B,585
....................             Data_Buff[14] = Ack49_56_Send ;
02E0E:  MOVFF  2C,586
....................             Data_Buff[15] = Ack57_64_Send ;
02E12:  MOVFF  2D,587
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02E16:  MOVFF  6C,6F
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02E1A:  MOVLW  07
02E1C:  MOVWF  x70
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02E1E:  MOVLW  10
02E20:  MOVLB  5
02E22:  MOVWF  x77
02E24:  MOVFF  577,71
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02E28:  MOVFF  578,72
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02E2C:  MOVFF  579,73
....................             TxD_Buff[5] = Data_Buff[2] ;  
02E30:  MOVFF  57A,74
....................             TxD_Buff[6] = Data_Buff[3] ;
02E34:  MOVFF  57B,75
....................             TxD_Buff[7] = Data_Buff[4] ;
02E38:  MOVFF  57C,76
....................             TxD_Buff[8] = Data_Buff[5] ;
02E3C:  MOVFF  57D,77
....................             TxD_Buff[9] = Data_Buff[6] ;
02E40:  MOVFF  57E,78
....................             TxD_Buff[10] = Data_Buff[7] ;
02E44:  MOVFF  57F,79
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02E48:  MOVFF  580,7A
....................            TxD_Buff[12] = Data_Buff[9] ;
02E4C:  MOVFF  581,7B
....................            TxD_Buff[13] = Data_Buff[10] ;
02E50:  MOVFF  582,7C
....................            TxD_Buff[14] = Data_Buff[11] ;
02E54:  MOVFF  583,7D
....................            TxD_Buff[15] = Data_Buff[12] ;
02E58:  MOVFF  584,7E
....................            TxD_Buff[16] = Data_Buff[13] ;
02E5C:  MOVFF  585,7F
....................            TxD_Buff[17] = Data_Buff[14] ;
02E60:  MOVFF  586,80
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02E64:  MOVFF  587,81
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02E68:  MOVLB  B
02E6A:  CLRF   x5A
02E6C:  MOVLW  6F
02E6E:  MOVWF  x59
02E70:  MOVLW  13
02E72:  MOVWF  x5B
02E74:  MOVLB  0
02E76:  CALL   2408
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
02E7A:  MOVFF  570,82
....................           TxD_Buff[20] = CRC_Lo ;
02E7E:  MOVFF  56F,83
.................... 
....................         
....................          output_bit(P485ctrl,1);
02E82:  BSF    F8A.3
02E84:  BCF    F93.3
....................          restart_wdt();
02E86:  CLRWDT
....................          delay_ms(4);
02E88:  MOVLW  04
02E8A:  MOVLB  B
02E8C:  MOVWF  x57
02E8E:  MOVLB  0
02E90:  CALL   07FA
....................          restart_wdt();
02E94:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
02E96:  MOVF   x6F,W
02E98:  CALL   245E
....................          putc(TxD_Buff[1]) ;               //Function Code
02E9C:  MOVF   x70,W
02E9E:  CALL   245E
....................          putc(TxD_Buff[2]) ;               //Byte Count
02EA2:  MOVF   x71,W
02EA4:  CALL   245E
....................          putc(TxD_Buff[3]) ;
02EA8:  MOVF   x72,W
02EAA:  CALL   245E
....................          putc(TxD_Buff[4]) ;
02EAE:  MOVF   x73,W
02EB0:  CALL   245E
....................          putc(TxD_Buff[5]) ;
02EB4:  MOVF   x74,W
02EB6:  CALL   245E
....................          putc(TxD_Buff[6]) ;
02EBA:  MOVF   x75,W
02EBC:  CALL   245E
....................          putc(TxD_Buff[7]) ;
02EC0:  MOVF   x76,W
02EC2:  CALL   245E
....................          putc(TxD_Buff[8]) ;
02EC6:  MOVF   x77,W
02EC8:  CALL   245E
....................          putc(TxD_Buff[9]) ;
02ECC:  MOVF   x78,W
02ECE:  CALL   245E
....................          putc(TxD_Buff[10]) ;
02ED2:  MOVF   x79,W
02ED4:  CALL   245E
....................          putc(TxD_Buff[11]) ;
02ED8:  MOVF   x7A,W
02EDA:  CALL   245E
....................          putc(TxD_Buff[12]) ;
02EDE:  MOVF   x7B,W
02EE0:  CALL   245E
....................          putc(TxD_Buff[13]) ;
02EE4:  MOVF   x7C,W
02EE6:  CALL   245E
....................          putc(TxD_Buff[14]) ;
02EEA:  MOVF   x7D,W
02EEC:  CALL   245E
....................          putc(TxD_Buff[15]) ;
02EF0:  MOVF   x7E,W
02EF2:  CALL   245E
....................          putc(TxD_Buff[16]) ;
02EF6:  MOVF   x7F,W
02EF8:  CALL   245E
....................          putc(TxD_Buff[17]) ;
02EFC:  MOVF   x80,W
02EFE:  CALL   245E
....................          putc(TxD_Buff[18]) ;
02F02:  MOVF   x81,W
02F04:  CALL   245E
....................          putc(TxD_Buff[19]) ;
02F08:  MOVF   x82,W
02F0A:  CALL   245E
....................          putc(TxD_Buff[20]) ;
02F0E:  MOVF   x83,W
02F10:  CALL   245E
.................... 
....................          restart_wdt();
02F14:  CLRWDT
....................          delay_ms(3);
02F16:  MOVLW  03
02F18:  MOVLB  B
02F1A:  MOVWF  x57
02F1C:  MOVLB  0
02F1E:  CALL   07FA
....................          restart_wdt();
02F22:  CLRWDT
....................          output_bit(P485ctrl,0);
02F24:  BCF    F8A.3
02F26:  BCF    F93.3
....................            
....................         
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
02F28:  BSF    F9D.1
....................      
....................        }
02F2A:  GOTO   43C2
02F2E:  MOVLB  1
....................      
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
02F30:  MOVF   x70,W
02F32:  SUBLW  21
02F34:  BTFSS  FD8.2
02F36:  GOTO   389E
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
02F3A:  MOVF   FF2,W
02F3C:  MOVWF  00
02F3E:  BCF    FF2.7
02F40:  CLRF   FAA
02F42:  CLRF   FA9
02F44:  MOVLW  0F
02F46:  MOVWF  FA8
02F48:  BCF    FA6.6
02F4A:  BCF    FA6.7
02F4C:  BSF    FA6.2
02F4E:  MOVLB  F
02F50:  MOVLW  55
02F52:  MOVWF  FA7
02F54:  MOVLW  AA
02F56:  MOVWF  FA7
02F58:  BSF    FA6.1
02F5A:  BTFSC  FA6.1
02F5C:  BRA    2F5A
02F5E:  BCF    FA6.2
02F60:  MOVF   00,W
02F62:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Input Type
02F64:  MOVFF  FF2,00
02F68:  BCF    FF2.7
02F6A:  CLRF   FAA
02F6C:  MOVLW  01
02F6E:  MOVWF  FA9
02F70:  MOVFF  172,FA8
02F74:  BCF    FA6.6
02F76:  BCF    FA6.7
02F78:  BSF    FA6.2
02F7A:  MOVLW  55
02F7C:  MOVWF  FA7
02F7E:  MOVLW  AA
02F80:  MOVWF  FA7
02F82:  BSF    FA6.1
02F84:  BTFSC  FA6.1
02F86:  BRA    2F84
02F88:  BCF    FA6.2
02F8A:  MOVF   00,W
02F8C:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
02F8E:  MOVFF  FF2,00
02F92:  BCF    FF2.7
02F94:  CLRF   FAA
02F96:  MOVLW  02
02F98:  MOVWF  FA9
02F9A:  MOVFF  173,FA8
02F9E:  BCF    FA6.6
02FA0:  BCF    FA6.7
02FA2:  BSF    FA6.2
02FA4:  MOVLW  55
02FA6:  MOVWF  FA7
02FA8:  MOVLW  AA
02FAA:  MOVWF  FA7
02FAC:  BSF    FA6.1
02FAE:  BTFSC  FA6.1
02FB0:  BRA    2FAE
02FB2:  BCF    FA6.2
02FB4:  MOVF   00,W
02FB6:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
02FB8:  MOVFF  FF2,00
02FBC:  BCF    FF2.7
02FBE:  CLRF   FAA
02FC0:  MOVLW  03
02FC2:  MOVWF  FA9
02FC4:  MOVFF  174,FA8
02FC8:  BCF    FA6.6
02FCA:  BCF    FA6.7
02FCC:  BSF    FA6.2
02FCE:  MOVLW  55
02FD0:  MOVWF  FA7
02FD2:  MOVLW  AA
02FD4:  MOVWF  FA7
02FD6:  BSF    FA6.1
02FD8:  BTFSC  FA6.1
02FDA:  BRA    2FD8
02FDC:  BCF    FA6.2
02FDE:  MOVF   00,W
02FE0:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
02FE2:  MOVFF  FF2,00
02FE6:  BCF    FF2.7
02FE8:  CLRF   FAA
02FEA:  MOVLW  04
02FEC:  MOVWF  FA9
02FEE:  MOVFF  175,FA8
02FF2:  BCF    FA6.6
02FF4:  BCF    FA6.7
02FF6:  BSF    FA6.2
02FF8:  MOVLW  55
02FFA:  MOVWF  FA7
02FFC:  MOVLW  AA
02FFE:  MOVWF  FA7
03000:  BSF    FA6.1
03002:  BTFSC  FA6.1
03004:  BRA    3002
03006:  BCF    FA6.2
03008:  MOVF   00,W
0300A:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
0300C:  MOVFF  FF2,00
03010:  BCF    FF2.7
03012:  CLRF   FAA
03014:  MOVLW  05
03016:  MOVWF  FA9
03018:  MOVFF  176,FA8
0301C:  BCF    FA6.6
0301E:  BCF    FA6.7
03020:  BSF    FA6.2
03022:  MOVLW  55
03024:  MOVWF  FA7
03026:  MOVLW  AA
03028:  MOVWF  FA7
0302A:  BSF    FA6.1
0302C:  BTFSC  FA6.1
0302E:  BRA    302C
03030:  BCF    FA6.2
03032:  MOVF   00,W
03034:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
03036:  MOVFF  FF2,00
0303A:  BCF    FF2.7
0303C:  CLRF   FAA
0303E:  MOVLW  06
03040:  MOVWF  FA9
03042:  MOVFF  177,FA8
03046:  BCF    FA6.6
03048:  BCF    FA6.7
0304A:  BSF    FA6.2
0304C:  MOVLW  55
0304E:  MOVWF  FA7
03050:  MOVLW  AA
03052:  MOVWF  FA7
03054:  BSF    FA6.1
03056:  BTFSC  FA6.1
03058:  BRA    3056
0305A:  BCF    FA6.2
0305C:  MOVF   00,W
0305E:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
03060:  MOVFF  FF2,00
03064:  BCF    FF2.7
03066:  CLRF   FAA
03068:  MOVLW  07
0306A:  MOVWF  FA9
0306C:  MOVFF  178,FA8
03070:  BCF    FA6.6
03072:  BCF    FA6.7
03074:  BSF    FA6.2
03076:  MOVLW  55
03078:  MOVWF  FA7
0307A:  MOVLW  AA
0307C:  MOVWF  FA7
0307E:  BSF    FA6.1
03080:  BTFSC  FA6.1
03082:  BRA    3080
03084:  BCF    FA6.2
03086:  MOVF   00,W
03088:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
0308A:  MOVFF  FF2,00
0308E:  BCF    FF2.7
03090:  CLRF   FAA
03092:  MOVLW  08
03094:  MOVWF  FA9
03096:  MOVFF  179,FA8
0309A:  BCF    FA6.6
0309C:  BCF    FA6.7
0309E:  BSF    FA6.2
030A0:  MOVLW  55
030A2:  MOVWF  FA7
030A4:  MOVLW  AA
030A6:  MOVWF  FA7
030A8:  BSF    FA6.1
030AA:  BTFSC  FA6.1
030AC:  BRA    30AA
030AE:  BCF    FA6.2
030B0:  MOVF   00,W
030B2:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
030B4:  MOVFF  FF2,00
030B8:  BCF    FF2.7
030BA:  CLRF   FAA
030BC:  MOVLW  09
030BE:  MOVWF  FA9
030C0:  MOVFF  17A,FA8
030C4:  BCF    FA6.6
030C6:  BCF    FA6.7
030C8:  BSF    FA6.2
030CA:  MOVLW  55
030CC:  MOVWF  FA7
030CE:  MOVLW  AA
030D0:  MOVWF  FA7
030D2:  BSF    FA6.1
030D4:  BTFSC  FA6.1
030D6:  BRA    30D4
030D8:  BCF    FA6.2
030DA:  MOVF   00,W
030DC:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
030DE:  MOVFF  FF2,00
030E2:  BCF    FF2.7
030E4:  CLRF   FAA
030E6:  MOVLW  0A
030E8:  MOVWF  FA9
030EA:  MOVFF  17B,FA8
030EE:  BCF    FA6.6
030F0:  BCF    FA6.7
030F2:  BSF    FA6.2
030F4:  MOVLW  55
030F6:  MOVWF  FA7
030F8:  MOVLW  AA
030FA:  MOVWF  FA7
030FC:  BSF    FA6.1
030FE:  BTFSC  FA6.1
03100:  BRA    30FE
03102:  BCF    FA6.2
03104:  MOVF   00,W
03106:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
03108:  MOVFF  FF2,00
0310C:  BCF    FF2.7
0310E:  CLRF   FAA
03110:  MOVLW  0B
03112:  MOVWF  FA9
03114:  MOVFF  17C,FA8
03118:  BCF    FA6.6
0311A:  BCF    FA6.7
0311C:  BSF    FA6.2
0311E:  MOVLW  55
03120:  MOVWF  FA7
03122:  MOVLW  AA
03124:  MOVWF  FA7
03126:  BSF    FA6.1
03128:  BTFSC  FA6.1
0312A:  BRA    3128
0312C:  BCF    FA6.2
0312E:  MOVF   00,W
03130:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
03132:  MOVFF  FF2,00
03136:  BCF    FF2.7
03138:  CLRF   FAA
0313A:  MOVLW  0C
0313C:  MOVWF  FA9
0313E:  MOVFF  17D,FA8
03142:  BCF    FA6.6
03144:  BCF    FA6.7
03146:  BSF    FA6.2
03148:  MOVLW  55
0314A:  MOVWF  FA7
0314C:  MOVLW  AA
0314E:  MOVWF  FA7
03150:  BSF    FA6.1
03152:  BTFSC  FA6.1
03154:  BRA    3152
03156:  BCF    FA6.2
03158:  MOVF   00,W
0315A:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
0315C:  MOVFF  FF2,00
03160:  BCF    FF2.7
03162:  CLRF   FAA
03164:  MOVLW  0D
03166:  MOVWF  FA9
03168:  MOVFF  17E,FA8
0316C:  BCF    FA6.6
0316E:  BCF    FA6.7
03170:  BSF    FA6.2
03172:  MOVLW  55
03174:  MOVWF  FA7
03176:  MOVLW  AA
03178:  MOVWF  FA7
0317A:  BSF    FA6.1
0317C:  BTFSC  FA6.1
0317E:  BRA    317C
03180:  BCF    FA6.2
03182:  MOVF   00,W
03184:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
03186:  MOVFF  FF2,00
0318A:  BCF    FF2.7
0318C:  CLRF   FAA
0318E:  MOVLW  0E
03190:  MOVWF  FA9
03192:  MOVFF  17F,FA8
03196:  BCF    FA6.6
03198:  BCF    FA6.7
0319A:  BSF    FA6.2
0319C:  MOVLW  55
0319E:  MOVWF  FA7
031A0:  MOVLW  AA
031A2:  MOVWF  FA7
031A4:  BSF    FA6.1
031A6:  BTFSC  FA6.1
031A8:  BRA    31A6
031AA:  BCF    FA6.2
031AC:  MOVF   00,W
031AE:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
031B0:  MOVFF  FF2,00
031B4:  BCF    FF2.7
031B6:  CLRF   FAA
031B8:  MOVLW  0F
031BA:  MOVWF  FA9
031BC:  MOVFF  180,FA8
031C0:  BCF    FA6.6
031C2:  BCF    FA6.7
031C4:  BSF    FA6.2
031C6:  MOVLW  55
031C8:  MOVWF  FA7
031CA:  MOVLW  AA
031CC:  MOVWF  FA7
031CE:  BSF    FA6.1
031D0:  BTFSC  FA6.1
031D2:  BRA    31D0
031D4:  BCF    FA6.2
031D6:  MOVF   00,W
031D8:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
031DA:  MOVFF  FF2,00
031DE:  BCF    FF2.7
031E0:  CLRF   FAA
031E2:  MOVLW  10
031E4:  MOVWF  FA9
031E6:  MOVFF  181,FA8
031EA:  BCF    FA6.6
031EC:  BCF    FA6.7
031EE:  BSF    FA6.2
031F0:  MOVLW  55
031F2:  MOVWF  FA7
031F4:  MOVLW  AA
031F6:  MOVWF  FA7
031F8:  BSF    FA6.1
031FA:  BTFSC  FA6.1
031FC:  BRA    31FA
031FE:  BCF    FA6.2
03200:  MOVF   00,W
03202:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
03204:  MOVFF  FF2,00
03208:  BCF    FF2.7
0320A:  CLRF   FAA
0320C:  MOVLW  11
0320E:  MOVWF  FA9
03210:  MOVFF  182,FA8
03214:  BCF    FA6.6
03216:  BCF    FA6.7
03218:  BSF    FA6.2
0321A:  MOVLW  55
0321C:  MOVWF  FA7
0321E:  MOVLW  AA
03220:  MOVWF  FA7
03222:  BSF    FA6.1
03224:  BTFSC  FA6.1
03226:  BRA    3224
03228:  BCF    FA6.2
0322A:  MOVF   00,W
0322C:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
0322E:  MOVFF  FF2,00
03232:  BCF    FF2.7
03234:  CLRF   FAA
03236:  MOVLW  12
03238:  MOVWF  FA9
0323A:  MOVFF  183,FA8
0323E:  BCF    FA6.6
03240:  BCF    FA6.7
03242:  BSF    FA6.2
03244:  MOVLW  55
03246:  MOVWF  FA7
03248:  MOVLW  AA
0324A:  MOVWF  FA7
0324C:  BSF    FA6.1
0324E:  BTFSC  FA6.1
03250:  BRA    324E
03252:  BCF    FA6.2
03254:  MOVF   00,W
03256:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
03258:  MOVFF  FF2,00
0325C:  BCF    FF2.7
0325E:  CLRF   FAA
03260:  MOVLW  13
03262:  MOVWF  FA9
03264:  MOVFF  184,FA8
03268:  BCF    FA6.6
0326A:  BCF    FA6.7
0326C:  BSF    FA6.2
0326E:  MOVLW  55
03270:  MOVWF  FA7
03272:  MOVLW  AA
03274:  MOVWF  FA7
03276:  BSF    FA6.1
03278:  BTFSC  FA6.1
0327A:  BRA    3278
0327C:  BCF    FA6.2
0327E:  MOVF   00,W
03280:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
03282:  MOVFF  FF2,00
03286:  BCF    FF2.7
03288:  CLRF   FAA
0328A:  MOVLW  14
0328C:  MOVWF  FA9
0328E:  MOVFF  185,FA8
03292:  BCF    FA6.6
03294:  BCF    FA6.7
03296:  BSF    FA6.2
03298:  MOVLW  55
0329A:  MOVWF  FA7
0329C:  MOVLW  AA
0329E:  MOVWF  FA7
032A0:  BSF    FA6.1
032A2:  BTFSC  FA6.1
032A4:  BRA    32A2
032A6:  BCF    FA6.2
032A8:  MOVF   00,W
032AA:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
032AC:  MOVFF  FF2,00
032B0:  BCF    FF2.7
032B2:  CLRF   FAA
032B4:  MOVLW  15
032B6:  MOVWF  FA9
032B8:  MOVFF  186,FA8
032BC:  BCF    FA6.6
032BE:  BCF    FA6.7
032C0:  BSF    FA6.2
032C2:  MOVLW  55
032C4:  MOVWF  FA7
032C6:  MOVLW  AA
032C8:  MOVWF  FA7
032CA:  BSF    FA6.1
032CC:  BTFSC  FA6.1
032CE:  BRA    32CC
032D0:  BCF    FA6.2
032D2:  MOVF   00,W
032D4:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
032D6:  MOVFF  FF2,00
032DA:  BCF    FF2.7
032DC:  CLRF   FAA
032DE:  MOVLW  16
032E0:  MOVWF  FA9
032E2:  MOVFF  187,FA8
032E6:  BCF    FA6.6
032E8:  BCF    FA6.7
032EA:  BSF    FA6.2
032EC:  MOVLW  55
032EE:  MOVWF  FA7
032F0:  MOVLW  AA
032F2:  MOVWF  FA7
032F4:  BSF    FA6.1
032F6:  BTFSC  FA6.1
032F8:  BRA    32F6
032FA:  BCF    FA6.2
032FC:  MOVF   00,W
032FE:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
03300:  MOVFF  FF2,00
03304:  BCF    FF2.7
03306:  CLRF   FAA
03308:  MOVLW  17
0330A:  MOVWF  FA9
0330C:  MOVFF  188,FA8
03310:  BCF    FA6.6
03312:  BCF    FA6.7
03314:  BSF    FA6.2
03316:  MOVLW  55
03318:  MOVWF  FA7
0331A:  MOVLW  AA
0331C:  MOVWF  FA7
0331E:  BSF    FA6.1
03320:  BTFSC  FA6.1
03322:  BRA    3320
03324:  BCF    FA6.2
03326:  MOVF   00,W
03328:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
0332A:  MOVFF  FF2,00
0332E:  BCF    FF2.7
03330:  CLRF   FAA
03332:  MOVLW  18
03334:  MOVWF  FA9
03336:  MOVFF  189,FA8
0333A:  BCF    FA6.6
0333C:  BCF    FA6.7
0333E:  BSF    FA6.2
03340:  MOVLW  55
03342:  MOVWF  FA7
03344:  MOVLW  AA
03346:  MOVWF  FA7
03348:  BSF    FA6.1
0334A:  BTFSC  FA6.1
0334C:  BRA    334A
0334E:  BCF    FA6.2
03350:  MOVF   00,W
03352:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
03354:  MOVFF  FF2,00
03358:  BCF    FF2.7
0335A:  CLRF   FAA
0335C:  MOVLW  19
0335E:  MOVWF  FA9
03360:  MOVFF  18A,FA8
03364:  BCF    FA6.6
03366:  BCF    FA6.7
03368:  BSF    FA6.2
0336A:  MOVLW  55
0336C:  MOVWF  FA7
0336E:  MOVLW  AA
03370:  MOVWF  FA7
03372:  BSF    FA6.1
03374:  BTFSC  FA6.1
03376:  BRA    3374
03378:  BCF    FA6.2
0337A:  MOVF   00,W
0337C:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
0337E:  MOVFF  FF2,00
03382:  BCF    FF2.7
03384:  CLRF   FAA
03386:  MOVLW  1A
03388:  MOVWF  FA9
0338A:  MOVFF  18B,FA8
0338E:  BCF    FA6.6
03390:  BCF    FA6.7
03392:  BSF    FA6.2
03394:  MOVLW  55
03396:  MOVWF  FA7
03398:  MOVLW  AA
0339A:  MOVWF  FA7
0339C:  BSF    FA6.1
0339E:  BTFSC  FA6.1
033A0:  BRA    339E
033A2:  BCF    FA6.2
033A4:  MOVF   00,W
033A6:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
033A8:  MOVFF  FF2,00
033AC:  BCF    FF2.7
033AE:  CLRF   FAA
033B0:  MOVLW  1B
033B2:  MOVWF  FA9
033B4:  MOVFF  18C,FA8
033B8:  BCF    FA6.6
033BA:  BCF    FA6.7
033BC:  BSF    FA6.2
033BE:  MOVLW  55
033C0:  MOVWF  FA7
033C2:  MOVLW  AA
033C4:  MOVWF  FA7
033C6:  BSF    FA6.1
033C8:  BTFSC  FA6.1
033CA:  BRA    33C8
033CC:  BCF    FA6.2
033CE:  MOVF   00,W
033D0:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //FaultDelayTime
033D2:  MOVFF  FF2,00
033D6:  BCF    FF2.7
033D8:  CLRF   FAA
033DA:  MOVLW  1C
033DC:  MOVWF  FA9
033DE:  MOVFF  18D,FA8
033E2:  BCF    FA6.6
033E4:  BCF    FA6.7
033E6:  BSF    FA6.2
033E8:  MOVLW  55
033EA:  MOVWF  FA7
033EC:  MOVLW  AA
033EE:  MOVWF  FA7
033F0:  BSF    FA6.1
033F2:  BTFSC  FA6.1
033F4:  BRA    33F2
033F6:  BCF    FA6.2
033F8:  MOVF   00,W
033FA:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
033FC:  MOVFF  FF2,00
03400:  BCF    FF2.7
03402:  CLRF   FAA
03404:  MOVLW  1D
03406:  MOVWF  FA9
03408:  MOVFF  18E,FA8
0340C:  BCF    FA6.6
0340E:  BCF    FA6.7
03410:  BSF    FA6.2
03412:  MOVLW  55
03414:  MOVWF  FA7
03416:  MOVLW  AA
03418:  MOVWF  FA7
0341A:  BSF    FA6.1
0341C:  BTFSC  FA6.1
0341E:  BRA    341C
03420:  BCF    FA6.2
03422:  MOVF   00,W
03424:  IORWF  FF2,F
....................    
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Fault Delay Time 1
03426:  MOVFF  FF2,00
0342A:  BCF    FF2.7
0342C:  CLRF   FAA
0342E:  MOVLW  1E
03430:  MOVWF  FA9
03432:  MOVFF  18F,FA8
03436:  BCF    FA6.6
03438:  BCF    FA6.7
0343A:  BSF    FA6.2
0343C:  MOVLW  55
0343E:  MOVWF  FA7
03440:  MOVLW  AA
03442:  MOVWF  FA7
03444:  BSF    FA6.1
03446:  BTFSC  FA6.1
03448:  BRA    3446
0344A:  BCF    FA6.2
0344C:  MOVF   00,W
0344E:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Fault Delay Time 2
03450:  MOVFF  FF2,00
03454:  BCF    FF2.7
03456:  CLRF   FAA
03458:  MOVLW  1F
0345A:  MOVWF  FA9
0345C:  MOVFF  190,FA8
03460:  BCF    FA6.6
03462:  BCF    FA6.7
03464:  BSF    FA6.2
03466:  MOVLW  55
03468:  MOVWF  FA7
0346A:  MOVLW  AA
0346C:  MOVWF  FA7
0346E:  BSF    FA6.1
03470:  BTFSC  FA6.1
03472:  BRA    3470
03474:  BCF    FA6.2
03476:  MOVF   00,W
03478:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Fault Delay Time 3
0347A:  MOVFF  FF2,00
0347E:  BCF    FF2.7
03480:  CLRF   FAA
03482:  MOVLW  20
03484:  MOVWF  FA9
03486:  MOVFF  191,FA8
0348A:  BCF    FA6.6
0348C:  BCF    FA6.7
0348E:  BSF    FA6.2
03490:  MOVLW  55
03492:  MOVWF  FA7
03494:  MOVLW  AA
03496:  MOVWF  FA7
03498:  BSF    FA6.1
0349A:  BTFSC  FA6.1
0349C:  BRA    349A
0349E:  BCF    FA6.2
034A0:  MOVF   00,W
034A2:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Fault Delay Time 4
034A4:  MOVFF  FF2,00
034A8:  BCF    FF2.7
034AA:  CLRF   FAA
034AC:  MOVLW  21
034AE:  MOVWF  FA9
034B0:  MOVFF  192,FA8
034B4:  BCF    FA6.6
034B6:  BCF    FA6.7
034B8:  BSF    FA6.2
034BA:  MOVLW  55
034BC:  MOVWF  FA7
034BE:  MOVLW  AA
034C0:  MOVWF  FA7
034C2:  BSF    FA6.1
034C4:  BTFSC  FA6.1
034C6:  BRA    34C4
034C8:  BCF    FA6.2
034CA:  MOVF   00,W
034CC:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Fault Delay Time 5
034CE:  MOVFF  FF2,00
034D2:  BCF    FF2.7
034D4:  CLRF   FAA
034D6:  MOVLW  22
034D8:  MOVWF  FA9
034DA:  MOVFF  193,FA8
034DE:  BCF    FA6.6
034E0:  BCF    FA6.7
034E2:  BSF    FA6.2
034E4:  MOVLW  55
034E6:  MOVWF  FA7
034E8:  MOVLW  AA
034EA:  MOVWF  FA7
034EC:  BSF    FA6.1
034EE:  BTFSC  FA6.1
034F0:  BRA    34EE
034F2:  BCF    FA6.2
034F4:  MOVF   00,W
034F6:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Fault Delay Time6
034F8:  MOVFF  FF2,00
034FC:  BCF    FF2.7
034FE:  CLRF   FAA
03500:  MOVLW  23
03502:  MOVWF  FA9
03504:  MOVFF  194,FA8
03508:  BCF    FA6.6
0350A:  BCF    FA6.7
0350C:  BSF    FA6.2
0350E:  MOVLW  55
03510:  MOVWF  FA7
03512:  MOVLW  AA
03514:  MOVWF  FA7
03516:  BSF    FA6.1
03518:  BTFSC  FA6.1
0351A:  BRA    3518
0351C:  BCF    FA6.2
0351E:  MOVF   00,W
03520:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Fault Delay Time7
03522:  MOVFF  FF2,00
03526:  BCF    FF2.7
03528:  CLRF   FAA
0352A:  MOVLW  24
0352C:  MOVWF  FA9
0352E:  MOVFF  195,FA8
03532:  BCF    FA6.6
03534:  BCF    FA6.7
03536:  BSF    FA6.2
03538:  MOVLW  55
0353A:  MOVWF  FA7
0353C:  MOVLW  AA
0353E:  MOVWF  FA7
03540:  BSF    FA6.1
03542:  BTFSC  FA6.1
03544:  BRA    3542
03546:  BCF    FA6.2
03548:  MOVF   00,W
0354A:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Fault Delay Time8
0354C:  MOVFF  FF2,00
03550:  BCF    FF2.7
03552:  CLRF   FAA
03554:  MOVLW  25
03556:  MOVWF  FA9
03558:  MOVFF  196,FA8
0355C:  BCF    FA6.6
0355E:  BCF    FA6.7
03560:  BSF    FA6.2
03562:  MOVLW  55
03564:  MOVWF  FA7
03566:  MOVLW  AA
03568:  MOVWF  FA7
0356A:  BSF    FA6.1
0356C:  BTFSC  FA6.1
0356E:  BRA    356C
03570:  BCF    FA6.2
03572:  MOVF   00,W
03574:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Fault Delay Time9
03576:  MOVFF  FF2,00
0357A:  BCF    FF2.7
0357C:  CLRF   FAA
0357E:  MOVLW  26
03580:  MOVWF  FA9
03582:  MOVFF  197,FA8
03586:  BCF    FA6.6
03588:  BCF    FA6.7
0358A:  BSF    FA6.2
0358C:  MOVLW  55
0358E:  MOVWF  FA7
03590:  MOVLW  AA
03592:  MOVWF  FA7
03594:  BSF    FA6.1
03596:  BTFSC  FA6.1
03598:  BRA    3596
0359A:  BCF    FA6.2
0359C:  MOVF   00,W
0359E:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Fault Delay Time10
035A0:  MOVFF  FF2,00
035A4:  BCF    FF2.7
035A6:  CLRF   FAA
035A8:  MOVLW  27
035AA:  MOVWF  FA9
035AC:  MOVFF  198,FA8
035B0:  BCF    FA6.6
035B2:  BCF    FA6.7
035B4:  BSF    FA6.2
035B6:  MOVLW  55
035B8:  MOVWF  FA7
035BA:  MOVLW  AA
035BC:  MOVWF  FA7
035BE:  BSF    FA6.1
035C0:  BTFSC  FA6.1
035C2:  BRA    35C0
035C4:  BCF    FA6.2
035C6:  MOVF   00,W
035C8:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Fault Delay Time11
035CA:  MOVFF  FF2,00
035CE:  BCF    FF2.7
035D0:  CLRF   FAA
035D2:  MOVLW  28
035D4:  MOVWF  FA9
035D6:  MOVFF  199,FA8
035DA:  BCF    FA6.6
035DC:  BCF    FA6.7
035DE:  BSF    FA6.2
035E0:  MOVLW  55
035E2:  MOVWF  FA7
035E4:  MOVLW  AA
035E6:  MOVWF  FA7
035E8:  BSF    FA6.1
035EA:  BTFSC  FA6.1
035EC:  BRA    35EA
035EE:  BCF    FA6.2
035F0:  MOVF   00,W
035F2:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Fault Delay Time12
035F4:  MOVFF  FF2,00
035F8:  BCF    FF2.7
035FA:  CLRF   FAA
035FC:  MOVLW  29
035FE:  MOVWF  FA9
03600:  MOVFF  19A,FA8
03604:  BCF    FA6.6
03606:  BCF    FA6.7
03608:  BSF    FA6.2
0360A:  MOVLW  55
0360C:  MOVWF  FA7
0360E:  MOVLW  AA
03610:  MOVWF  FA7
03612:  BSF    FA6.1
03614:  BTFSC  FA6.1
03616:  BRA    3614
03618:  BCF    FA6.2
0361A:  MOVF   00,W
0361C:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Fault Delay Time13
0361E:  MOVFF  FF2,00
03622:  BCF    FF2.7
03624:  CLRF   FAA
03626:  MOVLW  2A
03628:  MOVWF  FA9
0362A:  MOVFF  19B,FA8
0362E:  BCF    FA6.6
03630:  BCF    FA6.7
03632:  BSF    FA6.2
03634:  MOVLW  55
03636:  MOVWF  FA7
03638:  MOVLW  AA
0363A:  MOVWF  FA7
0363C:  BSF    FA6.1
0363E:  BTFSC  FA6.1
03640:  BRA    363E
03642:  BCF    FA6.2
03644:  MOVF   00,W
03646:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Fault Delay Time14
03648:  MOVFF  FF2,00
0364C:  BCF    FF2.7
0364E:  CLRF   FAA
03650:  MOVLW  2B
03652:  MOVWF  FA9
03654:  MOVFF  19C,FA8
03658:  BCF    FA6.6
0365A:  BCF    FA6.7
0365C:  BSF    FA6.2
0365E:  MOVLW  55
03660:  MOVWF  FA7
03662:  MOVLW  AA
03664:  MOVWF  FA7
03666:  BSF    FA6.1
03668:  BTFSC  FA6.1
0366A:  BRA    3668
0366C:  BCF    FA6.2
0366E:  MOVF   00,W
03670:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Fault Delay Time15
03672:  MOVFF  FF2,00
03676:  BCF    FF2.7
03678:  CLRF   FAA
0367A:  MOVLW  2C
0367C:  MOVWF  FA9
0367E:  MOVFF  19D,FA8
03682:  BCF    FA6.6
03684:  BCF    FA6.7
03686:  BSF    FA6.2
03688:  MOVLW  55
0368A:  MOVWF  FA7
0368C:  MOVLW  AA
0368E:  MOVWF  FA7
03690:  BSF    FA6.1
03692:  BTFSC  FA6.1
03694:  BRA    3692
03696:  BCF    FA6.2
03698:  MOVF   00,W
0369A:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Fault Delay Time16
0369C:  MOVFF  FF2,00
036A0:  BCF    FF2.7
036A2:  CLRF   FAA
036A4:  MOVLW  2D
036A6:  MOVWF  FA9
036A8:  MOVFF  19E,FA8
036AC:  BCF    FA6.6
036AE:  BCF    FA6.7
036B0:  BSF    FA6.2
036B2:  MOVLW  55
036B4:  MOVWF  FA7
036B6:  MOVLW  AA
036B8:  MOVWF  FA7
036BA:  BSF    FA6.1
036BC:  BTFSC  FA6.1
036BE:  BRA    36BC
036C0:  BCF    FA6.2
036C2:  MOVF   00,W
036C4:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Fault Delay Time17
036C6:  MOVFF  FF2,00
036CA:  BCF    FF2.7
036CC:  CLRF   FAA
036CE:  MOVLW  2E
036D0:  MOVWF  FA9
036D2:  MOVFF  19F,FA8
036D6:  BCF    FA6.6
036D8:  BCF    FA6.7
036DA:  BSF    FA6.2
036DC:  MOVLW  55
036DE:  MOVWF  FA7
036E0:  MOVLW  AA
036E2:  MOVWF  FA7
036E4:  BSF    FA6.1
036E6:  BTFSC  FA6.1
036E8:  BRA    36E6
036EA:  BCF    FA6.2
036EC:  MOVF   00,W
036EE:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Fault Delay Time18
036F0:  MOVFF  FF2,00
036F4:  BCF    FF2.7
036F6:  CLRF   FAA
036F8:  MOVLW  2F
036FA:  MOVWF  FA9
036FC:  MOVFF  1A0,FA8
03700:  BCF    FA6.6
03702:  BCF    FA6.7
03704:  BSF    FA6.2
03706:  MOVLW  55
03708:  MOVWF  FA7
0370A:  MOVLW  AA
0370C:  MOVWF  FA7
0370E:  BSF    FA6.1
03710:  BTFSC  FA6.1
03712:  BRA    3710
03714:  BCF    FA6.2
03716:  MOVF   00,W
03718:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Fault Delay Time19
0371A:  MOVFF  FF2,00
0371E:  BCF    FF2.7
03720:  CLRF   FAA
03722:  MOVLW  30
03724:  MOVWF  FA9
03726:  MOVFF  1A1,FA8
0372A:  BCF    FA6.6
0372C:  BCF    FA6.7
0372E:  BSF    FA6.2
03730:  MOVLW  55
03732:  MOVWF  FA7
03734:  MOVLW  AA
03736:  MOVWF  FA7
03738:  BSF    FA6.1
0373A:  BTFSC  FA6.1
0373C:  BRA    373A
0373E:  BCF    FA6.2
03740:  MOVF   00,W
03742:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Fault Delay Time20
03744:  MOVFF  FF2,00
03748:  BCF    FF2.7
0374A:  CLRF   FAA
0374C:  MOVLW  31
0374E:  MOVWF  FA9
03750:  MOVFF  1A2,FA8
03754:  BCF    FA6.6
03756:  BCF    FA6.7
03758:  BSF    FA6.2
0375A:  MOVLW  55
0375C:  MOVWF  FA7
0375E:  MOVLW  AA
03760:  MOVWF  FA7
03762:  BSF    FA6.1
03764:  BTFSC  FA6.1
03766:  BRA    3764
03768:  BCF    FA6.2
0376A:  MOVF   00,W
0376C:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
0376E:  MOVLB  B
03770:  CLRF   x4F
03772:  CLRF   x4E
....................             for(; ; a++)
....................             {
....................                restart_wdt();
03774:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
03776:  MOVLW  A3
03778:  ADDWF  x4E,W
0377A:  MOVWF  FE9
0377C:  MOVLW  01
0377E:  ADDWFC x4F,W
03780:  MOVWF  FEA
03782:  MOVFF  FEF,B50
....................                if((phonenum == 0x0D) || (a > 15))
03786:  MOVF   x50,W
03788:  SUBLW  0D
0378A:  BZ    3796
0378C:  MOVF   x4F,F
0378E:  BNZ   3796
03790:  MOVF   x4E,W
03792:  SUBLW  0F
03794:  BC    37E4
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
03796:  MOVLW  7D
03798:  ADDWF  x4E,W
0379A:  MOVWF  FE9
0379C:  MOVLW  09
0379E:  ADDWFC x4F,W
037A0:  MOVWF  FEA
037A2:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
037A4:  MOVLW  32
037A6:  ADDWF  x4E,W
037A8:  MOVWF  x57
037AA:  MOVLW  00
037AC:  ADDWFC x4F,W
037AE:  MOVWF  x58
037B0:  MOVF   FF2,W
037B2:  MOVWF  00
037B4:  BCF    FF2.7
037B6:  MOVFF  B58,FAA
037BA:  MOVFF  B57,FA9
037BE:  MOVFF  B50,FA8
037C2:  BCF    FA6.6
037C4:  BCF    FA6.7
037C6:  BSF    FA6.2
037C8:  MOVLB  F
037CA:  MOVLW  55
037CC:  MOVWF  FA7
037CE:  MOVLW  AA
037D0:  MOVWF  FA7
037D2:  BSF    FA6.1
037D4:  BTFSC  FA6.1
037D6:  BRA    37D4
037D8:  BCF    FA6.2
037DA:  MOVF   00,W
037DC:  IORWF  FF2,F
....................                   break;
037DE:  BRA    383A
....................                }
037E0:  BRA    382E
037E2:  MOVLB  B
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
037E4:  MOVLW  7D
037E6:  ADDWF  x4E,W
037E8:  MOVWF  FE9
037EA:  MOVLW  09
037EC:  ADDWFC x4F,W
037EE:  MOVWF  FEA
037F0:  MOVFF  B50,FEF
....................                   write_eeprom(0x32+a,phonenum);
037F4:  MOVLW  32
037F6:  ADDWF  x4E,W
037F8:  MOVWF  x57
037FA:  MOVLW  00
037FC:  ADDWFC x4F,W
037FE:  MOVWF  x58
03800:  MOVF   FF2,W
03802:  MOVWF  00
03804:  BCF    FF2.7
03806:  MOVFF  B58,FAA
0380A:  MOVFF  B57,FA9
0380E:  MOVFF  B50,FA8
03812:  BCF    FA6.6
03814:  BCF    FA6.7
03816:  BSF    FA6.2
03818:  MOVLB  F
0381A:  MOVLW  55
0381C:  MOVWF  FA7
0381E:  MOVLW  AA
03820:  MOVWF  FA7
03822:  BSF    FA6.1
03824:  BTFSC  FA6.1
03826:  BRA    3824
03828:  BCF    FA6.2
0382A:  MOVF   00,W
0382C:  IORWF  FF2,F
....................                }
0382E:  MOVLB  B
03830:  INCF   x4E,F
03832:  BTFSC  FD8.2
03834:  INCF   x4F,F
03836:  BRA    3774
03838:  MOVLB  F
....................             }
....................          
....................             TxD_Buff[0] = Address ;         //Address
0383A:  MOVFF  6C,6F
....................             TxD_Buff[1] = 0x21 ;            //return function code
0383E:  MOVLW  21
03840:  MOVLB  0
03842:  MOVWF  x70
....................    
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
03844:  MOVLB  B
03846:  CLRF   x5A
03848:  MOVLW  6F
0384A:  MOVWF  x59
0384C:  MOVLW  02
0384E:  MOVWF  x5B
03850:  MOVLB  0
03852:  CALL   2408
....................    
....................             TxD_Buff[2] = CRC_Hi ;
03856:  MOVFF  570,71
....................             TxD_Buff[3] = CRC_Lo ;
0385A:  MOVFF  56F,72
....................    
....................             output_bit(P485ctrl,1);
0385E:  BSF    F8A.3
03860:  BCF    F93.3
....................             delay_ms(10);
03862:  MOVLW  0A
03864:  MOVLB  B
03866:  MOVWF  x57
03868:  MOVLB  0
0386A:  CALL   07FA
....................    
....................             putc(Txd_Buff[0]);
0386E:  MOVF   x6F,W
03870:  CALL   245E
....................             putc(Txd_Buff[1]);
03874:  MOVF   x70,W
03876:  CALL   245E
....................             putc(Txd_Buff[2]);
0387A:  MOVF   x71,W
0387C:  CALL   245E
....................             putc(Txd_Buff[3]);
03880:  MOVF   x72,W
03882:  CALL   245E
....................    
....................             delay_ms(3);
03886:  MOVLW  03
03888:  MOVLB  B
0388A:  MOVWF  x57
0388C:  MOVLB  0
0388E:  CALL   07FA
....................             output_bit(P485ctrl,0);           
03892:  BCF    F8A.3
03894:  BCF    F93.3
....................             
....................             reset_cpu();
03896:  RESET
....................             //Read_Config(); //jj
....................          }
03898:  GOTO   43C2
0389C:  MOVLB  1
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
0389E:  MOVF   x70,W
038A0:  SUBLW  22
038A2:  BTFSS  FD8.2
038A4:  GOTO   43C4
....................          {
....................             //SMS_Massage
....................             int16  i =3,j=0,k=0;
038A8:  MOVLB  B
038AA:  CLRF   x52
038AC:  MOVLW  03
038AE:  MOVWF  x51
038B0:  CLRF   x54
038B2:  CLRF   x53
038B4:  CLRF   x56
038B6:  CLRF   x55
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
038B8:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
038BA:  MOVLW  6F
038BC:  ADDWF  x51,W
038BE:  MOVWF  FE9
038C0:  MOVLW  01
038C2:  ADDWFC x52,W
038C4:  MOVWF  FEA
038C6:  MOVF   FEF,W
038C8:  SUBLW  0D
038CA:  BZ    38D6
038CC:  MOVF   x54,F
038CE:  BNZ   38D6
038D0:  MOVF   x53,W
038D2:  SUBLW  29
038D4:  BC    3926
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
038D6:  MOVLW  5D
038D8:  ADDWF  x51,W
038DA:  MOVWF  x57
038DC:  MOVLW  00
038DE:  ADDWFC x52,W
038E0:  MOVWF  x58
038E2:  MOVLW  6F
038E4:  ADDWF  x51,W
038E6:  MOVWF  FE9
038E8:  MOVLW  01
038EA:  ADDWFC x52,W
038EC:  MOVWF  FEA
038EE:  MOVFF  FEF,B59
038F2:  MOVF   FF2,W
038F4:  MOVWF  00
038F6:  BCF    FF2.7
038F8:  MOVFF  B58,FAA
038FC:  MOVFF  B57,FA9
03900:  MOVFF  B59,FA8
03904:  BCF    FA6.6
03906:  BCF    FA6.7
03908:  BSF    FA6.2
0390A:  MOVLB  F
0390C:  MOVLW  55
0390E:  MOVWF  FA7
03910:  MOVLW  AA
03912:  MOVWF  FA7
03914:  BSF    FA6.1
03916:  BTFSC  FA6.1
03918:  BRA    3916
0391A:  BCF    FA6.2
0391C:  MOVF   00,W
0391E:  IORWF  FF2,F
....................                   break;
03920:  BRA    39B0
....................                }
03922:  BRA    3998
03924:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage1[j] = RxD_Buff[i];
03926:  MOVLW  8C
03928:  ADDWF  x53,W
0392A:  MOVWF  01
0392C:  MOVLW  09
0392E:  ADDWFC x54,W
03930:  MOVWF  03
03932:  MOVLW  6F
03934:  ADDWF  x51,W
03936:  MOVWF  FE9
03938:  MOVLW  01
0393A:  ADDWFC x52,W
0393C:  MOVWF  FEA
0393E:  MOVFF  FEF,B59
03942:  MOVFF  03,FEA
03946:  MOVFF  01,FE9
0394A:  MOVFF  B59,FEF
....................                   
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0394E:  MOVLW  5D
03950:  ADDWF  x51,W
03952:  MOVWF  x57
03954:  MOVLW  00
03956:  ADDWFC x52,W
03958:  MOVWF  x58
0395A:  MOVLW  6F
0395C:  ADDWF  x51,W
0395E:  MOVWF  FE9
03960:  MOVLW  01
03962:  ADDWFC x52,W
03964:  MOVWF  FEA
03966:  MOVFF  FEF,B59
0396A:  MOVF   FF2,W
0396C:  MOVWF  00
0396E:  BCF    FF2.7
03970:  MOVFF  B58,FAA
03974:  MOVFF  B57,FA9
03978:  MOVFF  B59,FA8
0397C:  BCF    FA6.6
0397E:  BCF    FA6.7
03980:  BSF    FA6.2
03982:  MOVLB  F
03984:  MOVLW  55
03986:  MOVWF  FA7
03988:  MOVLW  AA
0398A:  MOVWF  FA7
0398C:  BSF    FA6.1
0398E:  BTFSC  FA6.1
03990:  BRA    398E
03992:  BCF    FA6.2
03994:  MOVF   00,W
03996:  IORWF  FF2,F
....................                }
03998:  MOVLB  B
0399A:  MOVFF  B52,03
0399E:  MOVF   x51,W
039A0:  INCF   x51,F
039A2:  BTFSC  FD8.2
039A4:  INCF   x52,F
039A6:  INCF   x53,F
039A8:  BTFSC  FD8.2
039AA:  INCF   x54,F
039AC:  BRA    38B8
039AE:  MOVLB  F
....................             }
....................             SMS_Massage1[j] = '\0' ; // end string
039B0:  MOVLW  8C
039B2:  MOVLB  B
039B4:  ADDWF  x53,W
039B6:  MOVWF  FE9
039B8:  MOVLW  09
039BA:  ADDWFC x54,W
039BC:  MOVWF  FEA
039BE:  CLRF   FEF
....................             
....................             j=0;
039C0:  CLRF   x54
039C2:  CLRF   x53
....................             i++;
039C4:  INCF   x51,F
039C6:  BTFSC  FD8.2
039C8:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
039CA:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
039CC:  MOVLW  6F
039CE:  ADDWF  x51,W
039D0:  MOVWF  FE9
039D2:  MOVLW  01
039D4:  ADDWFC x52,W
039D6:  MOVWF  FEA
039D8:  MOVF   FEF,W
039DA:  SUBLW  0D
039DC:  BZ    39E8
039DE:  MOVF   x54,F
039E0:  BNZ   39E8
039E2:  MOVF   x53,W
039E4:  SUBLW  29
039E6:  BC    3A38
....................                {  
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
039E8:  MOVLW  5D
039EA:  ADDWF  x51,W
039EC:  MOVWF  x57
039EE:  MOVLW  00
039F0:  ADDWFC x52,W
039F2:  MOVWF  x58
039F4:  MOVLW  6F
039F6:  ADDWF  x51,W
039F8:  MOVWF  FE9
039FA:  MOVLW  01
039FC:  ADDWFC x52,W
039FE:  MOVWF  FEA
03A00:  MOVFF  FEF,B59
03A04:  MOVF   FF2,W
03A06:  MOVWF  00
03A08:  BCF    FF2.7
03A0A:  MOVFF  B58,FAA
03A0E:  MOVFF  B57,FA9
03A12:  MOVFF  B59,FA8
03A16:  BCF    FA6.6
03A18:  BCF    FA6.7
03A1A:  BSF    FA6.2
03A1C:  MOVLB  F
03A1E:  MOVLW  55
03A20:  MOVWF  FA7
03A22:  MOVLW  AA
03A24:  MOVWF  FA7
03A26:  BSF    FA6.1
03A28:  BTFSC  FA6.1
03A2A:  BRA    3A28
03A2C:  BCF    FA6.2
03A2E:  MOVF   00,W
03A30:  IORWF  FF2,F
....................                   break;
03A32:  BRA    3AC2
....................                }
03A34:  BRA    3AAA
03A36:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage2[j] = RxD_Buff[i];
03A38:  MOVLW  AC
03A3A:  ADDWF  x53,W
03A3C:  MOVWF  01
03A3E:  MOVLW  09
03A40:  ADDWFC x54,W
03A42:  MOVWF  03
03A44:  MOVLW  6F
03A46:  ADDWF  x51,W
03A48:  MOVWF  FE9
03A4A:  MOVLW  01
03A4C:  ADDWFC x52,W
03A4E:  MOVWF  FEA
03A50:  MOVFF  FEF,B59
03A54:  MOVFF  03,FEA
03A58:  MOVFF  01,FE9
03A5C:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03A60:  MOVLW  5D
03A62:  ADDWF  x51,W
03A64:  MOVWF  x57
03A66:  MOVLW  00
03A68:  ADDWFC x52,W
03A6A:  MOVWF  x58
03A6C:  MOVLW  6F
03A6E:  ADDWF  x51,W
03A70:  MOVWF  FE9
03A72:  MOVLW  01
03A74:  ADDWFC x52,W
03A76:  MOVWF  FEA
03A78:  MOVFF  FEF,B59
03A7C:  MOVF   FF2,W
03A7E:  MOVWF  00
03A80:  BCF    FF2.7
03A82:  MOVFF  B58,FAA
03A86:  MOVFF  B57,FA9
03A8A:  MOVFF  B59,FA8
03A8E:  BCF    FA6.6
03A90:  BCF    FA6.7
03A92:  BSF    FA6.2
03A94:  MOVLB  F
03A96:  MOVLW  55
03A98:  MOVWF  FA7
03A9A:  MOVLW  AA
03A9C:  MOVWF  FA7
03A9E:  BSF    FA6.1
03AA0:  BTFSC  FA6.1
03AA2:  BRA    3AA0
03AA4:  BCF    FA6.2
03AA6:  MOVF   00,W
03AA8:  IORWF  FF2,F
....................                }
03AAA:  MOVLB  B
03AAC:  MOVFF  B52,03
03AB0:  MOVF   x51,W
03AB2:  INCF   x51,F
03AB4:  BTFSC  FD8.2
03AB6:  INCF   x52,F
03AB8:  INCF   x53,F
03ABA:  BTFSC  FD8.2
03ABC:  INCF   x54,F
03ABE:  BRA    39CA
03AC0:  MOVLB  F
....................             }
....................             SMS_Massage2[j] = '\0' ; // end string
03AC2:  MOVLW  AC
03AC4:  MOVLB  B
03AC6:  ADDWF  x53,W
03AC8:  MOVWF  FE9
03ACA:  MOVLW  09
03ACC:  ADDWFC x54,W
03ACE:  MOVWF  FEA
03AD0:  CLRF   FEF
....................             
....................             j=0;
03AD2:  CLRF   x54
03AD4:  CLRF   x53
....................             i++;
03AD6:  INCF   x51,F
03AD8:  BTFSC  FD8.2
03ADA:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03ADC:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03ADE:  MOVLW  6F
03AE0:  ADDWF  x51,W
03AE2:  MOVWF  FE9
03AE4:  MOVLW  01
03AE6:  ADDWFC x52,W
03AE8:  MOVWF  FEA
03AEA:  MOVF   FEF,W
03AEC:  SUBLW  0D
03AEE:  BZ    3AFA
03AF0:  MOVF   x54,F
03AF2:  BNZ   3AFA
03AF4:  MOVF   x53,W
03AF6:  SUBLW  29
03AF8:  BC    3B4A
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03AFA:  MOVLW  5D
03AFC:  ADDWF  x51,W
03AFE:  MOVWF  x57
03B00:  MOVLW  00
03B02:  ADDWFC x52,W
03B04:  MOVWF  x58
03B06:  MOVLW  6F
03B08:  ADDWF  x51,W
03B0A:  MOVWF  FE9
03B0C:  MOVLW  01
03B0E:  ADDWFC x52,W
03B10:  MOVWF  FEA
03B12:  MOVFF  FEF,B59
03B16:  MOVF   FF2,W
03B18:  MOVWF  00
03B1A:  BCF    FF2.7
03B1C:  MOVFF  B58,FAA
03B20:  MOVFF  B57,FA9
03B24:  MOVFF  B59,FA8
03B28:  BCF    FA6.6
03B2A:  BCF    FA6.7
03B2C:  BSF    FA6.2
03B2E:  MOVLB  F
03B30:  MOVLW  55
03B32:  MOVWF  FA7
03B34:  MOVLW  AA
03B36:  MOVWF  FA7
03B38:  BSF    FA6.1
03B3A:  BTFSC  FA6.1
03B3C:  BRA    3B3A
03B3E:  BCF    FA6.2
03B40:  MOVF   00,W
03B42:  IORWF  FF2,F
....................                   break;
03B44:  BRA    3BD4
....................                }
03B46:  BRA    3BBC
03B48:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage3[j] = RxD_Buff[i];
03B4A:  MOVLW  CC
03B4C:  ADDWF  x53,W
03B4E:  MOVWF  01
03B50:  MOVLW  09
03B52:  ADDWFC x54,W
03B54:  MOVWF  03
03B56:  MOVLW  6F
03B58:  ADDWF  x51,W
03B5A:  MOVWF  FE9
03B5C:  MOVLW  01
03B5E:  ADDWFC x52,W
03B60:  MOVWF  FEA
03B62:  MOVFF  FEF,B59
03B66:  MOVFF  03,FEA
03B6A:  MOVFF  01,FE9
03B6E:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B72:  MOVLW  5D
03B74:  ADDWF  x51,W
03B76:  MOVWF  x57
03B78:  MOVLW  00
03B7A:  ADDWFC x52,W
03B7C:  MOVWF  x58
03B7E:  MOVLW  6F
03B80:  ADDWF  x51,W
03B82:  MOVWF  FE9
03B84:  MOVLW  01
03B86:  ADDWFC x52,W
03B88:  MOVWF  FEA
03B8A:  MOVFF  FEF,B59
03B8E:  MOVF   FF2,W
03B90:  MOVWF  00
03B92:  BCF    FF2.7
03B94:  MOVFF  B58,FAA
03B98:  MOVFF  B57,FA9
03B9C:  MOVFF  B59,FA8
03BA0:  BCF    FA6.6
03BA2:  BCF    FA6.7
03BA4:  BSF    FA6.2
03BA6:  MOVLB  F
03BA8:  MOVLW  55
03BAA:  MOVWF  FA7
03BAC:  MOVLW  AA
03BAE:  MOVWF  FA7
03BB0:  BSF    FA6.1
03BB2:  BTFSC  FA6.1
03BB4:  BRA    3BB2
03BB6:  BCF    FA6.2
03BB8:  MOVF   00,W
03BBA:  IORWF  FF2,F
....................                }
03BBC:  MOVLB  B
03BBE:  MOVFF  B52,03
03BC2:  MOVF   x51,W
03BC4:  INCF   x51,F
03BC6:  BTFSC  FD8.2
03BC8:  INCF   x52,F
03BCA:  INCF   x53,F
03BCC:  BTFSC  FD8.2
03BCE:  INCF   x54,F
03BD0:  BRA    3ADC
03BD2:  MOVLB  F
....................             }
....................             SMS_Massage3[j] = '\0' ; // end string
03BD4:  MOVLW  CC
03BD6:  MOVLB  B
03BD8:  ADDWF  x53,W
03BDA:  MOVWF  FE9
03BDC:  MOVLW  09
03BDE:  ADDWFC x54,W
03BE0:  MOVWF  FEA
03BE2:  CLRF   FEF
....................             
....................             j=0;
03BE4:  CLRF   x54
03BE6:  CLRF   x53
....................             i++;
03BE8:  INCF   x51,F
03BEA:  BTFSC  FD8.2
03BEC:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03BEE:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03BF0:  MOVLW  6F
03BF2:  ADDWF  x51,W
03BF4:  MOVWF  FE9
03BF6:  MOVLW  01
03BF8:  ADDWFC x52,W
03BFA:  MOVWF  FEA
03BFC:  MOVF   FEF,W
03BFE:  SUBLW  0D
03C00:  BZ    3C0C
03C02:  MOVF   x54,F
03C04:  BNZ   3C0C
03C06:  MOVF   x53,W
03C08:  SUBLW  29
03C0A:  BC    3C5C
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C0C:  MOVLW  5D
03C0E:  ADDWF  x51,W
03C10:  MOVWF  x57
03C12:  MOVLW  00
03C14:  ADDWFC x52,W
03C16:  MOVWF  x58
03C18:  MOVLW  6F
03C1A:  ADDWF  x51,W
03C1C:  MOVWF  FE9
03C1E:  MOVLW  01
03C20:  ADDWFC x52,W
03C22:  MOVWF  FEA
03C24:  MOVFF  FEF,B59
03C28:  MOVF   FF2,W
03C2A:  MOVWF  00
03C2C:  BCF    FF2.7
03C2E:  MOVFF  B58,FAA
03C32:  MOVFF  B57,FA9
03C36:  MOVFF  B59,FA8
03C3A:  BCF    FA6.6
03C3C:  BCF    FA6.7
03C3E:  BSF    FA6.2
03C40:  MOVLB  F
03C42:  MOVLW  55
03C44:  MOVWF  FA7
03C46:  MOVLW  AA
03C48:  MOVWF  FA7
03C4A:  BSF    FA6.1
03C4C:  BTFSC  FA6.1
03C4E:  BRA    3C4C
03C50:  BCF    FA6.2
03C52:  MOVF   00,W
03C54:  IORWF  FF2,F
....................                   break;
03C56:  BRA    3CE6
....................                }
03C58:  BRA    3CCE
03C5A:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage4[j] = RxD_Buff[i];
03C5C:  MOVLW  EC
03C5E:  ADDWF  x53,W
03C60:  MOVWF  01
03C62:  MOVLW  09
03C64:  ADDWFC x54,W
03C66:  MOVWF  03
03C68:  MOVLW  6F
03C6A:  ADDWF  x51,W
03C6C:  MOVWF  FE9
03C6E:  MOVLW  01
03C70:  ADDWFC x52,W
03C72:  MOVWF  FEA
03C74:  MOVFF  FEF,B59
03C78:  MOVFF  03,FEA
03C7C:  MOVFF  01,FE9
03C80:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C84:  MOVLW  5D
03C86:  ADDWF  x51,W
03C88:  MOVWF  x57
03C8A:  MOVLW  00
03C8C:  ADDWFC x52,W
03C8E:  MOVWF  x58
03C90:  MOVLW  6F
03C92:  ADDWF  x51,W
03C94:  MOVWF  FE9
03C96:  MOVLW  01
03C98:  ADDWFC x52,W
03C9A:  MOVWF  FEA
03C9C:  MOVFF  FEF,B59
03CA0:  MOVF   FF2,W
03CA2:  MOVWF  00
03CA4:  BCF    FF2.7
03CA6:  MOVFF  B58,FAA
03CAA:  MOVFF  B57,FA9
03CAE:  MOVFF  B59,FA8
03CB2:  BCF    FA6.6
03CB4:  BCF    FA6.7
03CB6:  BSF    FA6.2
03CB8:  MOVLB  F
03CBA:  MOVLW  55
03CBC:  MOVWF  FA7
03CBE:  MOVLW  AA
03CC0:  MOVWF  FA7
03CC2:  BSF    FA6.1
03CC4:  BTFSC  FA6.1
03CC6:  BRA    3CC4
03CC8:  BCF    FA6.2
03CCA:  MOVF   00,W
03CCC:  IORWF  FF2,F
....................                }
03CCE:  MOVLB  B
03CD0:  MOVFF  B52,03
03CD4:  MOVF   x51,W
03CD6:  INCF   x51,F
03CD8:  BTFSC  FD8.2
03CDA:  INCF   x52,F
03CDC:  INCF   x53,F
03CDE:  BTFSC  FD8.2
03CE0:  INCF   x54,F
03CE2:  BRA    3BEE
03CE4:  MOVLB  F
....................             }
....................             SMS_Massage4[j] = '\0' ; // end string
03CE6:  MOVLW  EC
03CE8:  MOVLB  B
03CEA:  ADDWF  x53,W
03CEC:  MOVWF  FE9
03CEE:  MOVLW  09
03CF0:  ADDWFC x54,W
03CF2:  MOVWF  FEA
03CF4:  CLRF   FEF
....................             
....................             j=0;
03CF6:  CLRF   x54
03CF8:  CLRF   x53
....................             i++;
03CFA:  INCF   x51,F
03CFC:  BTFSC  FD8.2
03CFE:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03D00:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03D02:  MOVLW  6F
03D04:  ADDWF  x51,W
03D06:  MOVWF  FE9
03D08:  MOVLW  01
03D0A:  ADDWFC x52,W
03D0C:  MOVWF  FEA
03D0E:  MOVF   FEF,W
03D10:  SUBLW  0D
03D12:  BZ    3D1E
03D14:  MOVF   x54,F
03D16:  BNZ   3D1E
03D18:  MOVF   x53,W
03D1A:  SUBLW  29
03D1C:  BC    3D6E
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D1E:  MOVLW  5D
03D20:  ADDWF  x51,W
03D22:  MOVWF  x57
03D24:  MOVLW  00
03D26:  ADDWFC x52,W
03D28:  MOVWF  x58
03D2A:  MOVLW  6F
03D2C:  ADDWF  x51,W
03D2E:  MOVWF  FE9
03D30:  MOVLW  01
03D32:  ADDWFC x52,W
03D34:  MOVWF  FEA
03D36:  MOVFF  FEF,B59
03D3A:  MOVF   FF2,W
03D3C:  MOVWF  00
03D3E:  BCF    FF2.7
03D40:  MOVFF  B58,FAA
03D44:  MOVFF  B57,FA9
03D48:  MOVFF  B59,FA8
03D4C:  BCF    FA6.6
03D4E:  BCF    FA6.7
03D50:  BSF    FA6.2
03D52:  MOVLB  F
03D54:  MOVLW  55
03D56:  MOVWF  FA7
03D58:  MOVLW  AA
03D5A:  MOVWF  FA7
03D5C:  BSF    FA6.1
03D5E:  BTFSC  FA6.1
03D60:  BRA    3D5E
03D62:  BCF    FA6.2
03D64:  MOVF   00,W
03D66:  IORWF  FF2,F
....................                   break;
03D68:  BRA    3DF8
....................                }
03D6A:  BRA    3DE0
03D6C:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage5[j] = RxD_Buff[i];
03D6E:  MOVLW  0C
03D70:  ADDWF  x53,W
03D72:  MOVWF  01
03D74:  MOVLW  0A
03D76:  ADDWFC x54,W
03D78:  MOVWF  03
03D7A:  MOVLW  6F
03D7C:  ADDWF  x51,W
03D7E:  MOVWF  FE9
03D80:  MOVLW  01
03D82:  ADDWFC x52,W
03D84:  MOVWF  FEA
03D86:  MOVFF  FEF,B59
03D8A:  MOVFF  03,FEA
03D8E:  MOVFF  01,FE9
03D92:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D96:  MOVLW  5D
03D98:  ADDWF  x51,W
03D9A:  MOVWF  x57
03D9C:  MOVLW  00
03D9E:  ADDWFC x52,W
03DA0:  MOVWF  x58
03DA2:  MOVLW  6F
03DA4:  ADDWF  x51,W
03DA6:  MOVWF  FE9
03DA8:  MOVLW  01
03DAA:  ADDWFC x52,W
03DAC:  MOVWF  FEA
03DAE:  MOVFF  FEF,B59
03DB2:  MOVF   FF2,W
03DB4:  MOVWF  00
03DB6:  BCF    FF2.7
03DB8:  MOVFF  B58,FAA
03DBC:  MOVFF  B57,FA9
03DC0:  MOVFF  B59,FA8
03DC4:  BCF    FA6.6
03DC6:  BCF    FA6.7
03DC8:  BSF    FA6.2
03DCA:  MOVLB  F
03DCC:  MOVLW  55
03DCE:  MOVWF  FA7
03DD0:  MOVLW  AA
03DD2:  MOVWF  FA7
03DD4:  BSF    FA6.1
03DD6:  BTFSC  FA6.1
03DD8:  BRA    3DD6
03DDA:  BCF    FA6.2
03DDC:  MOVF   00,W
03DDE:  IORWF  FF2,F
....................                }
03DE0:  MOVLB  B
03DE2:  MOVFF  B52,03
03DE6:  MOVF   x51,W
03DE8:  INCF   x51,F
03DEA:  BTFSC  FD8.2
03DEC:  INCF   x52,F
03DEE:  INCF   x53,F
03DF0:  BTFSC  FD8.2
03DF2:  INCF   x54,F
03DF4:  BRA    3D00
03DF6:  MOVLB  F
....................             }
....................             SMS_Massage5[j] = '\0' ; // end string
03DF8:  MOVLW  0C
03DFA:  MOVLB  B
03DFC:  ADDWF  x53,W
03DFE:  MOVWF  FE9
03E00:  MOVLW  0A
03E02:  ADDWFC x54,W
03E04:  MOVWF  FEA
03E06:  CLRF   FEF
....................             
....................             j=0;
03E08:  CLRF   x54
03E0A:  CLRF   x53
....................             i++;
03E0C:  INCF   x51,F
03E0E:  BTFSC  FD8.2
03E10:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03E12:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03E14:  MOVLW  6F
03E16:  ADDWF  x51,W
03E18:  MOVWF  FE9
03E1A:  MOVLW  01
03E1C:  ADDWFC x52,W
03E1E:  MOVWF  FEA
03E20:  MOVF   FEF,W
03E22:  SUBLW  0D
03E24:  BZ    3E30
03E26:  MOVF   x54,F
03E28:  BNZ   3E30
03E2A:  MOVF   x53,W
03E2C:  SUBLW  29
03E2E:  BC    3E80
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03E30:  MOVLW  5D
03E32:  ADDWF  x51,W
03E34:  MOVWF  x57
03E36:  MOVLW  00
03E38:  ADDWFC x52,W
03E3A:  MOVWF  x58
03E3C:  MOVLW  6F
03E3E:  ADDWF  x51,W
03E40:  MOVWF  FE9
03E42:  MOVLW  01
03E44:  ADDWFC x52,W
03E46:  MOVWF  FEA
03E48:  MOVFF  FEF,B59
03E4C:  MOVF   FF2,W
03E4E:  MOVWF  00
03E50:  BCF    FF2.7
03E52:  MOVFF  B58,FAA
03E56:  MOVFF  B57,FA9
03E5A:  MOVFF  B59,FA8
03E5E:  BCF    FA6.6
03E60:  BCF    FA6.7
03E62:  BSF    FA6.2
03E64:  MOVLB  F
03E66:  MOVLW  55
03E68:  MOVWF  FA7
03E6A:  MOVLW  AA
03E6C:  MOVWF  FA7
03E6E:  BSF    FA6.1
03E70:  BTFSC  FA6.1
03E72:  BRA    3E70
03E74:  BCF    FA6.2
03E76:  MOVF   00,W
03E78:  IORWF  FF2,F
....................                   break;
03E7A:  BRA    3F0E
....................                }
03E7C:  BRA    3EF6
03E7E:  MOVLB  B
....................                else
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03E80:  MOVLW  5D
03E82:  ADDWF  x51,W
03E84:  MOVWF  x57
03E86:  MOVLW  00
03E88:  ADDWFC x52,W
03E8A:  MOVWF  x58
03E8C:  MOVLW  6F
03E8E:  ADDWF  x51,W
03E90:  MOVWF  FE9
03E92:  MOVLW  01
03E94:  ADDWFC x52,W
03E96:  MOVWF  FEA
03E98:  MOVFF  FEF,B59
03E9C:  MOVF   FF2,W
03E9E:  MOVWF  00
03EA0:  BCF    FF2.7
03EA2:  MOVFF  B58,FAA
03EA6:  MOVFF  B57,FA9
03EAA:  MOVFF  B59,FA8
03EAE:  BCF    FA6.6
03EB0:  BCF    FA6.7
03EB2:  BSF    FA6.2
03EB4:  MOVLB  F
03EB6:  MOVLW  55
03EB8:  MOVWF  FA7
03EBA:  MOVLW  AA
03EBC:  MOVWF  FA7
03EBE:  BSF    FA6.1
03EC0:  BTFSC  FA6.1
03EC2:  BRA    3EC0
03EC4:  BCF    FA6.2
03EC6:  MOVF   00,W
03EC8:  IORWF  FF2,F
....................                   SMS_Massage6[j] = RxD_Buff[i];
03ECA:  MOVLW  2C
03ECC:  MOVLB  B
03ECE:  ADDWF  x53,W
03ED0:  MOVWF  01
03ED2:  MOVLW  0A
03ED4:  ADDWFC x54,W
03ED6:  MOVWF  03
03ED8:  MOVLW  6F
03EDA:  ADDWF  x51,W
03EDC:  MOVWF  FE9
03EDE:  MOVLW  01
03EE0:  ADDWFC x52,W
03EE2:  MOVWF  FEA
03EE4:  MOVFF  FEF,B59
03EE8:  MOVFF  03,FEA
03EEC:  MOVFF  01,FE9
03EF0:  MOVFF  B59,FEF
03EF4:  MOVLB  F
....................                }
03EF6:  MOVLB  B
03EF8:  MOVFF  B52,03
03EFC:  MOVF   x51,W
03EFE:  INCF   x51,F
03F00:  BTFSC  FD8.2
03F02:  INCF   x52,F
03F04:  INCF   x53,F
03F06:  BTFSC  FD8.2
03F08:  INCF   x54,F
03F0A:  BRA    3E12
03F0C:  MOVLB  F
....................             }
....................             SMS_Massage6[j] = '\0' ; // end string
03F0E:  MOVLW  2C
03F10:  MOVLB  B
03F12:  ADDWF  x53,W
03F14:  MOVWF  FE9
03F16:  MOVLW  0A
03F18:  ADDWFC x54,W
03F1A:  MOVWF  FEA
03F1C:  CLRF   FEF
....................             
....................             j=0;
03F1E:  CLRF   x54
03F20:  CLRF   x53
....................             i++;
03F22:  INCF   x51,F
03F24:  BTFSC  FD8.2
03F26:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03F28:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03F2A:  MOVLW  6F
03F2C:  ADDWF  x51,W
03F2E:  MOVWF  FE9
03F30:  MOVLW  01
03F32:  ADDWFC x52,W
03F34:  MOVWF  FEA
03F36:  MOVF   FEF,W
03F38:  SUBLW  0D
03F3A:  BZ    3F46
03F3C:  MOVF   x54,F
03F3E:  BNZ   3F46
03F40:  MOVF   x53,W
03F42:  SUBLW  29
03F44:  BC    3F96
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03F46:  MOVLW  5D
03F48:  ADDWF  x51,W
03F4A:  MOVWF  x57
03F4C:  MOVLW  00
03F4E:  ADDWFC x52,W
03F50:  MOVWF  x58
03F52:  MOVLW  6F
03F54:  ADDWF  x51,W
03F56:  MOVWF  FE9
03F58:  MOVLW  01
03F5A:  ADDWFC x52,W
03F5C:  MOVWF  FEA
03F5E:  MOVFF  FEF,B59
03F62:  MOVF   FF2,W
03F64:  MOVWF  00
03F66:  BCF    FF2.7
03F68:  MOVFF  B58,FAA
03F6C:  MOVFF  B57,FA9
03F70:  MOVFF  B59,FA8
03F74:  BCF    FA6.6
03F76:  BCF    FA6.7
03F78:  BSF    FA6.2
03F7A:  MOVLB  F
03F7C:  MOVLW  55
03F7E:  MOVWF  FA7
03F80:  MOVLW  AA
03F82:  MOVWF  FA7
03F84:  BSF    FA6.1
03F86:  BTFSC  FA6.1
03F88:  BRA    3F86
03F8A:  BCF    FA6.2
03F8C:  MOVF   00,W
03F8E:  IORWF  FF2,F
....................                   break;
03F90:  BRA    4020
....................                }
03F92:  BRA    4008
03F94:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage7[j] = RxD_Buff[i];
03F96:  MOVLW  4C
03F98:  ADDWF  x53,W
03F9A:  MOVWF  01
03F9C:  MOVLW  0A
03F9E:  ADDWFC x54,W
03FA0:  MOVWF  03
03FA2:  MOVLW  6F
03FA4:  ADDWF  x51,W
03FA6:  MOVWF  FE9
03FA8:  MOVLW  01
03FAA:  ADDWFC x52,W
03FAC:  MOVWF  FEA
03FAE:  MOVFF  FEF,B59
03FB2:  MOVFF  03,FEA
03FB6:  MOVFF  01,FE9
03FBA:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03FBE:  MOVLW  5D
03FC0:  ADDWF  x51,W
03FC2:  MOVWF  x57
03FC4:  MOVLW  00
03FC6:  ADDWFC x52,W
03FC8:  MOVWF  x58
03FCA:  MOVLW  6F
03FCC:  ADDWF  x51,W
03FCE:  MOVWF  FE9
03FD0:  MOVLW  01
03FD2:  ADDWFC x52,W
03FD4:  MOVWF  FEA
03FD6:  MOVFF  FEF,B59
03FDA:  MOVF   FF2,W
03FDC:  MOVWF  00
03FDE:  BCF    FF2.7
03FE0:  MOVFF  B58,FAA
03FE4:  MOVFF  B57,FA9
03FE8:  MOVFF  B59,FA8
03FEC:  BCF    FA6.6
03FEE:  BCF    FA6.7
03FF0:  BSF    FA6.2
03FF2:  MOVLB  F
03FF4:  MOVLW  55
03FF6:  MOVWF  FA7
03FF8:  MOVLW  AA
03FFA:  MOVWF  FA7
03FFC:  BSF    FA6.1
03FFE:  BTFSC  FA6.1
04000:  BRA    3FFE
04002:  BCF    FA6.2
04004:  MOVF   00,W
04006:  IORWF  FF2,F
....................                }
04008:  MOVLB  B
0400A:  MOVFF  B52,03
0400E:  MOVF   x51,W
04010:  INCF   x51,F
04012:  BTFSC  FD8.2
04014:  INCF   x52,F
04016:  INCF   x53,F
04018:  BTFSC  FD8.2
0401A:  INCF   x54,F
0401C:  BRA    3F28
0401E:  MOVLB  F
....................             }
....................             SMS_Massage7[j] = '\0' ; // end string
04020:  MOVLW  4C
04022:  MOVLB  B
04024:  ADDWF  x53,W
04026:  MOVWF  FE9
04028:  MOVLW  0A
0402A:  ADDWFC x54,W
0402C:  MOVWF  FEA
0402E:  CLRF   FEF
....................             
....................             j=0;
04030:  CLRF   x54
04032:  CLRF   x53
....................             i++;
04034:  INCF   x51,F
04036:  BTFSC  FD8.2
04038:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0403A:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
0403C:  MOVLW  6F
0403E:  ADDWF  x51,W
04040:  MOVWF  FE9
04042:  MOVLW  01
04044:  ADDWFC x52,W
04046:  MOVWF  FEA
04048:  MOVF   FEF,W
0404A:  SUBLW  0D
0404C:  BZ    4058
0404E:  MOVF   x54,F
04050:  BNZ   4058
04052:  MOVF   x53,W
04054:  SUBLW  29
04056:  BC    40A8
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04058:  MOVLW  5D
0405A:  ADDWF  x51,W
0405C:  MOVWF  x57
0405E:  MOVLW  00
04060:  ADDWFC x52,W
04062:  MOVWF  x58
04064:  MOVLW  6F
04066:  ADDWF  x51,W
04068:  MOVWF  FE9
0406A:  MOVLW  01
0406C:  ADDWFC x52,W
0406E:  MOVWF  FEA
04070:  MOVFF  FEF,B59
04074:  MOVF   FF2,W
04076:  MOVWF  00
04078:  BCF    FF2.7
0407A:  MOVFF  B58,FAA
0407E:  MOVFF  B57,FA9
04082:  MOVFF  B59,FA8
04086:  BCF    FA6.6
04088:  BCF    FA6.7
0408A:  BSF    FA6.2
0408C:  MOVLB  F
0408E:  MOVLW  55
04090:  MOVWF  FA7
04092:  MOVLW  AA
04094:  MOVWF  FA7
04096:  BSF    FA6.1
04098:  BTFSC  FA6.1
0409A:  BRA    4098
0409C:  BCF    FA6.2
0409E:  MOVF   00,W
040A0:  IORWF  FF2,F
....................                   break;
040A2:  BRA    4132
....................                }
040A4:  BRA    411A
040A6:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage8[j] = RxD_Buff[i];
040A8:  MOVLW  6C
040AA:  ADDWF  x53,W
040AC:  MOVWF  01
040AE:  MOVLW  0A
040B0:  ADDWFC x54,W
040B2:  MOVWF  03
040B4:  MOVLW  6F
040B6:  ADDWF  x51,W
040B8:  MOVWF  FE9
040BA:  MOVLW  01
040BC:  ADDWFC x52,W
040BE:  MOVWF  FEA
040C0:  MOVFF  FEF,B59
040C4:  MOVFF  03,FEA
040C8:  MOVFF  01,FE9
040CC:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
040D0:  MOVLW  5D
040D2:  ADDWF  x51,W
040D4:  MOVWF  x57
040D6:  MOVLW  00
040D8:  ADDWFC x52,W
040DA:  MOVWF  x58
040DC:  MOVLW  6F
040DE:  ADDWF  x51,W
040E0:  MOVWF  FE9
040E2:  MOVLW  01
040E4:  ADDWFC x52,W
040E6:  MOVWF  FEA
040E8:  MOVFF  FEF,B59
040EC:  MOVF   FF2,W
040EE:  MOVWF  00
040F0:  BCF    FF2.7
040F2:  MOVFF  B58,FAA
040F6:  MOVFF  B57,FA9
040FA:  MOVFF  B59,FA8
040FE:  BCF    FA6.6
04100:  BCF    FA6.7
04102:  BSF    FA6.2
04104:  MOVLB  F
04106:  MOVLW  55
04108:  MOVWF  FA7
0410A:  MOVLW  AA
0410C:  MOVWF  FA7
0410E:  BSF    FA6.1
04110:  BTFSC  FA6.1
04112:  BRA    4110
04114:  BCF    FA6.2
04116:  MOVF   00,W
04118:  IORWF  FF2,F
....................                }
0411A:  MOVLB  B
0411C:  MOVFF  B52,03
04120:  MOVF   x51,W
04122:  INCF   x51,F
04124:  BTFSC  FD8.2
04126:  INCF   x52,F
04128:  INCF   x53,F
0412A:  BTFSC  FD8.2
0412C:  INCF   x54,F
0412E:  BRA    403A
04130:  MOVLB  F
....................             }
....................             SMS_Massage8[j] = '\0' ; // end string
04132:  MOVLW  6C
04134:  MOVLB  B
04136:  ADDWF  x53,W
04138:  MOVWF  FE9
0413A:  MOVLW  0A
0413C:  ADDWFC x54,W
0413E:  MOVWF  FEA
04140:  CLRF   FEF
....................             
....................             /////////////////////////////////////////////
....................             j=0;
04142:  CLRF   x54
04144:  CLRF   x53
....................             i++;
04146:  INCF   x51,F
04148:  BTFSC  FD8.2
0414A:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0414C:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
0414E:  MOVLW  6F
04150:  ADDWF  x51,W
04152:  MOVWF  FE9
04154:  MOVLW  01
04156:  ADDWFC x52,W
04158:  MOVWF  FEA
0415A:  MOVF   FEF,W
0415C:  SUBLW  0D
0415E:  BZ    416A
04160:  MOVF   x54,F
04162:  BNZ   416A
04164:  MOVF   x53,W
04166:  SUBLW  29
04168:  BC    41BA
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0416A:  MOVLW  5D
0416C:  ADDWF  x51,W
0416E:  MOVWF  x57
04170:  MOVLW  00
04172:  ADDWFC x52,W
04174:  MOVWF  x58
04176:  MOVLW  6F
04178:  ADDWF  x51,W
0417A:  MOVWF  FE9
0417C:  MOVLW  01
0417E:  ADDWFC x52,W
04180:  MOVWF  FEA
04182:  MOVFF  FEF,B59
04186:  MOVF   FF2,W
04188:  MOVWF  00
0418A:  BCF    FF2.7
0418C:  MOVFF  B58,FAA
04190:  MOVFF  B57,FA9
04194:  MOVFF  B59,FA8
04198:  BCF    FA6.6
0419A:  BCF    FA6.7
0419C:  BSF    FA6.2
0419E:  MOVLB  F
041A0:  MOVLW  55
041A2:  MOVWF  FA7
041A4:  MOVLW  AA
041A6:  MOVWF  FA7
041A8:  BSF    FA6.1
041AA:  BTFSC  FA6.1
041AC:  BRA    41AA
041AE:  BCF    FA6.2
041B0:  MOVF   00,W
041B2:  IORWF  FF2,F
....................                   break;
041B4:  BRA    4244
....................                }
041B6:  BRA    422C
041B8:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage9[j] = RxD_Buff[i];
041BA:  MOVLW  8C
041BC:  ADDWF  x53,W
041BE:  MOVWF  01
041C0:  MOVLW  0A
041C2:  ADDWFC x54,W
041C4:  MOVWF  03
041C6:  MOVLW  6F
041C8:  ADDWF  x51,W
041CA:  MOVWF  FE9
041CC:  MOVLW  01
041CE:  ADDWFC x52,W
041D0:  MOVWF  FEA
041D2:  MOVFF  FEF,B59
041D6:  MOVFF  03,FEA
041DA:  MOVFF  01,FE9
041DE:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
041E2:  MOVLW  5D
041E4:  ADDWF  x51,W
041E6:  MOVWF  x57
041E8:  MOVLW  00
041EA:  ADDWFC x52,W
041EC:  MOVWF  x58
041EE:  MOVLW  6F
041F0:  ADDWF  x51,W
041F2:  MOVWF  FE9
041F4:  MOVLW  01
041F6:  ADDWFC x52,W
041F8:  MOVWF  FEA
041FA:  MOVFF  FEF,B59
041FE:  MOVF   FF2,W
04200:  MOVWF  00
04202:  BCF    FF2.7
04204:  MOVFF  B58,FAA
04208:  MOVFF  B57,FA9
0420C:  MOVFF  B59,FA8
04210:  BCF    FA6.6
04212:  BCF    FA6.7
04214:  BSF    FA6.2
04216:  MOVLB  F
04218:  MOVLW  55
0421A:  MOVWF  FA7
0421C:  MOVLW  AA
0421E:  MOVWF  FA7
04220:  BSF    FA6.1
04222:  BTFSC  FA6.1
04224:  BRA    4222
04226:  BCF    FA6.2
04228:  MOVF   00,W
0422A:  IORWF  FF2,F
....................                }
0422C:  MOVLB  B
0422E:  MOVFF  B52,03
04232:  MOVF   x51,W
04234:  INCF   x51,F
04236:  BTFSC  FD8.2
04238:  INCF   x52,F
0423A:  INCF   x53,F
0423C:  BTFSC  FD8.2
0423E:  INCF   x54,F
04240:  BRA    414C
04242:  MOVLB  F
....................             }
....................             SMS_Massage9[j] = '\0' ; // end string
04244:  MOVLW  8C
04246:  MOVLB  B
04248:  ADDWF  x53,W
0424A:  MOVWF  FE9
0424C:  MOVLW  0A
0424E:  ADDWFC x54,W
04250:  MOVWF  FEA
04252:  CLRF   FEF
....................             j=0;
04254:  CLRF   x54
04256:  CLRF   x53
....................             i++;
04258:  INCF   x51,F
0425A:  BTFSC  FD8.2
0425C:  INCF   x52,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0425E:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
04260:  MOVLW  6F
04262:  ADDWF  x51,W
04264:  MOVWF  FE9
04266:  MOVLW  01
04268:  ADDWFC x52,W
0426A:  MOVWF  FEA
0426C:  MOVF   FEF,W
0426E:  SUBLW  0D
04270:  BZ    427C
04272:  MOVF   x54,F
04274:  BNZ   427C
04276:  MOVF   x53,W
04278:  SUBLW  29
0427A:  BC    42CC
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0427C:  MOVLW  5D
0427E:  ADDWF  x51,W
04280:  MOVWF  x57
04282:  MOVLW  00
04284:  ADDWFC x52,W
04286:  MOVWF  x58
04288:  MOVLW  6F
0428A:  ADDWF  x51,W
0428C:  MOVWF  FE9
0428E:  MOVLW  01
04290:  ADDWFC x52,W
04292:  MOVWF  FEA
04294:  MOVFF  FEF,B59
04298:  MOVF   FF2,W
0429A:  MOVWF  00
0429C:  BCF    FF2.7
0429E:  MOVFF  B58,FAA
042A2:  MOVFF  B57,FA9
042A6:  MOVFF  B59,FA8
042AA:  BCF    FA6.6
042AC:  BCF    FA6.7
042AE:  BSF    FA6.2
042B0:  MOVLB  F
042B2:  MOVLW  55
042B4:  MOVWF  FA7
042B6:  MOVLW  AA
042B8:  MOVWF  FA7
042BA:  BSF    FA6.1
042BC:  BTFSC  FA6.1
042BE:  BRA    42BC
042C0:  BCF    FA6.2
042C2:  MOVF   00,W
042C4:  IORWF  FF2,F
....................                   break;
042C6:  BRA    4356
....................                }
042C8:  BRA    433E
042CA:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage10[j] = RxD_Buff[i];
042CC:  MOVLW  AC
042CE:  ADDWF  x53,W
042D0:  MOVWF  01
042D2:  MOVLW  0A
042D4:  ADDWFC x54,W
042D6:  MOVWF  03
042D8:  MOVLW  6F
042DA:  ADDWF  x51,W
042DC:  MOVWF  FE9
042DE:  MOVLW  01
042E0:  ADDWFC x52,W
042E2:  MOVWF  FEA
042E4:  MOVFF  FEF,B59
042E8:  MOVFF  03,FEA
042EC:  MOVFF  01,FE9
042F0:  MOVFF  B59,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
042F4:  MOVLW  5D
042F6:  ADDWF  x51,W
042F8:  MOVWF  x57
042FA:  MOVLW  00
042FC:  ADDWFC x52,W
042FE:  MOVWF  x58
04300:  MOVLW  6F
04302:  ADDWF  x51,W
04304:  MOVWF  FE9
04306:  MOVLW  01
04308:  ADDWFC x52,W
0430A:  MOVWF  FEA
0430C:  MOVFF  FEF,B59
04310:  MOVF   FF2,W
04312:  MOVWF  00
04314:  BCF    FF2.7
04316:  MOVFF  B58,FAA
0431A:  MOVFF  B57,FA9
0431E:  MOVFF  B59,FA8
04322:  BCF    FA6.6
04324:  BCF    FA6.7
04326:  BSF    FA6.2
04328:  MOVLB  F
0432A:  MOVLW  55
0432C:  MOVWF  FA7
0432E:  MOVLW  AA
04330:  MOVWF  FA7
04332:  BSF    FA6.1
04334:  BTFSC  FA6.1
04336:  BRA    4334
04338:  BCF    FA6.2
0433A:  MOVF   00,W
0433C:  IORWF  FF2,F
....................                }
0433E:  MOVLB  B
04340:  MOVFF  B52,03
04344:  MOVF   x51,W
04346:  INCF   x51,F
04348:  BTFSC  FD8.2
0434A:  INCF   x52,F
0434C:  INCF   x53,F
0434E:  BTFSC  FD8.2
04350:  INCF   x54,F
04352:  BRA    425E
04354:  MOVLB  F
....................             }
....................             SMS_Massage10[j] = '\0' ; // end string
04356:  MOVLW  AC
04358:  MOVLB  B
0435A:  ADDWF  x53,W
0435C:  MOVWF  FE9
0435E:  MOVLW  0A
04360:  ADDWFC x54,W
04362:  MOVWF  FEA
04364:  CLRF   FEF
....................             
....................          
....................             TxD_Buff[0] = Address ;         //Address
04366:  MOVFF  6C,6F
....................             TxD_Buff[1] = 0x21 ;            //return function code
0436A:  MOVLW  21
0436C:  MOVLB  0
0436E:  MOVWF  x70
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
04370:  MOVLB  B
04372:  CLRF   x5A
04374:  MOVLW  6F
04376:  MOVWF  x59
04378:  MOVLW  02
0437A:  MOVWF  x5B
0437C:  MOVLB  0
0437E:  CALL   2408
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
04382:  MOVFF  570,71
....................             TxD_Buff[3] = CRC_Lo ;
04386:  MOVFF  56F,72
.................... 
....................             output_bit(P485ctrl,1);
0438A:  BSF    F8A.3
0438C:  BCF    F93.3
....................             delay_ms(10);
0438E:  MOVLW  0A
04390:  MOVLB  B
04392:  MOVWF  x57
04394:  MOVLB  0
04396:  CALL   07FA
.................... 
....................             putc(Txd_Buff[0]);
0439A:  MOVF   x6F,W
0439C:  CALL   245E
....................             putc(Txd_Buff[1]);
043A0:  MOVF   x70,W
043A2:  CALL   245E
....................             putc(Txd_Buff[2]);
043A6:  MOVF   x71,W
043A8:  CALL   245E
....................             putc(Txd_Buff[3]);
043AC:  MOVF   x72,W
043AE:  CALL   245E
.................... 
....................             delay_ms(3);
043B2:  MOVLW  03
043B4:  MOVLB  B
043B6:  MOVWF  x57
043B8:  MOVLB  0
043BA:  CALL   07FA
....................             output_bit(P485ctrl,0);
043BE:  BCF    F8A.3
043C0:  BCF    F93.3
043C2:  MOVLB  1
....................          }
....................          /////////////////////////////////////////////////////////////////////////////////////
....................          
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
043C4:  MOVF   x70,W
043C6:  SUBLW  03
043C8:  BNZ   4456
....................          {
.................... 
....................             Data_Buff[0] = Input9_10;// dummy data
043CA:  MOVFF  4B,578
....................             Data_Buff[1] = Input1_8;
043CE:  MOVFF  4A,579
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
043D2:  MOVFF  6C,6F
....................             TxD_Buff[1] = 0x03 ;           //Function Code
043D6:  MOVLW  03
043D8:  MOVLB  0
043DA:  MOVWF  x70
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
043DC:  MOVLW  02
043DE:  MOVWF  x71
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
043E0:  MOVFF  578,72
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
043E4:  MOVFF  579,73
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
043E8:  MOVLB  B
043EA:  CLRF   x5A
043EC:  MOVLW  6F
043EE:  MOVWF  x59
043F0:  MOVLW  05
043F2:  MOVWF  x5B
043F4:  MOVLB  0
043F6:  CALL   2408
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
043FA:  MOVFF  570,74
....................             TxD_Buff[6] = CRC_Lo ;
043FE:  MOVFF  56F,75
.................... 
....................             output_bit(P485ctrl,1);
04402:  BSF    F8A.3
04404:  BCF    F93.3
....................             restart_wdt();
04406:  CLRWDT
....................             delay_ms(4);
04408:  MOVLW  04
0440A:  MOVLB  B
0440C:  MOVWF  x57
0440E:  MOVLB  0
04410:  CALL   07FA
....................             restart_wdt();
04414:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
04416:  MOVF   x6F,W
04418:  CALL   245E
....................             putc(TxD_Buff[1]) ;               //Function Code
0441C:  MOVF   x70,W
0441E:  CALL   245E
....................             putc(TxD_Buff[2]) ;               //Byte Count
04422:  MOVF   x71,W
04424:  CALL   245E
....................             putc(TxD_Buff[3]) ;
04428:  MOVF   x72,W
0442A:  CALL   245E
....................             putc(TxD_Buff[4]) ;
0442E:  MOVF   x73,W
04430:  CALL   245E
....................             putc(TxD_Buff[5]) ;
04434:  MOVF   x74,W
04436:  CALL   245E
....................             putc(TxD_Buff[6]) ;
0443A:  MOVF   x75,W
0443C:  CALL   245E
....................             
....................             restart_wdt();
04440:  CLRWDT
....................             delay_ms(3);
04442:  MOVLW  03
04444:  MOVLB  B
04446:  MOVWF  x57
04448:  MOVLB  0
0444A:  CALL   07FA
....................             restart_wdt();
0444E:  CLRWDT
....................             output_bit(P485ctrl,0);
04450:  BCF    F8A.3
04452:  BCF    F93.3
04454:  MOVLB  1
....................          }
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
04456:  MOVLW  01
04458:  MOVLB  5
0445A:  MOVWF  x72
0445C:  MOVLW  F4
0445E:  MOVWF  x71
....................    }
.................... 
....................    recieve_completed = 0 ;
04460:  BCF    30.5
....................    sequence = end_sq ;
04462:  MOVFF  63,6B
....................    T_timeout = 0x00;
04466:  MOVLB  9
04468:  CLRF   x7A
....................    RxD_DataLen = 0x00 ;
0446A:  MOVLB  0
0446C:  CLRF   x6E
0446E:  CLRF   x6D
....................    output_bit(P485ctrl,0);
04470:  BCF    F8A.3
04472:  BCF    F93.3
04474:  GOTO   7760 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................     ///////////////////////--Edit--///////////////////
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
*
018D6:  MOVLB  B
018D8:  CLRF   x4F
018DA:  MOVLB  0
018DC:  RCALL  17A8
018DE:  MOVFF  01,978
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
018E2:  BTFSS  1A.4
018E4:  BRA    18EC
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
018E6:  MOVLB  9
018E8:  COMF   x78,F
018EA:  MOVLB  0
....................       }
....................       
....................       FaultNow[11] = MCP23s17_Ip_dat;
018EC:  MOVLB  A
018EE:  BCF    xEE.3
018F0:  MOVLB  9
018F2:  BTFSS  x78.0
018F4:  BRA    18FC
018F6:  MOVLB  A
018F8:  BSF    xEE.3
018FA:  MOVLB  9
....................       FaultNow[12] = MCP23s17_Ip_dat >> 1;
018FC:  BCF    FD8.0
018FE:  RRCF   x78,W
01900:  MOVLB  A
01902:  BCF    xEE.4
01904:  BTFSC  FE8.0
01906:  BSF    xEE.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 2;
01908:  MOVLB  9
0190A:  RRCF   x78,W
0190C:  MOVWF  00
0190E:  RRCF   00,F
01910:  MOVLW  3F
01912:  ANDWF  00,F
01914:  MOVLB  A
01916:  BCF    xEE.5
01918:  BTFSC  00.0
0191A:  BSF    xEE.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 3;
0191C:  MOVLB  9
0191E:  RRCF   x78,W
01920:  MOVWF  00
01922:  RRCF   00,F
01924:  RRCF   00,F
01926:  MOVLW  1F
01928:  ANDWF  00,F
0192A:  MOVLB  A
0192C:  BCF    xEE.6
0192E:  BTFSC  00.0
01930:  BSF    xEE.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 4;
01932:  MOVLB  9
01934:  SWAPF  x78,W
01936:  MOVWF  00
01938:  MOVLW  0F
0193A:  ANDWF  00,F
0193C:  MOVLB  A
0193E:  BCF    xEE.7
01940:  BTFSC  00.0
01942:  BSF    xEE.7
....................       FaultNow[16] = MCP23s17_Ip_dat >> 5;
01944:  MOVLB  9
01946:  SWAPF  x78,W
01948:  MOVWF  00
0194A:  RRCF   00,F
0194C:  MOVLW  07
0194E:  ANDWF  00,F
01950:  MOVLB  A
01952:  BCF    xEF.0
01954:  BTFSC  00.0
01956:  BSF    xEF.0
....................       FaultNow[17] = MCP23s17_Ip_dat >> 6;
01958:  MOVLB  9
0195A:  SWAPF  x78,W
0195C:  MOVWF  00
0195E:  RRCF   00,F
01960:  RRCF   00,F
01962:  MOVLW  03
01964:  ANDWF  00,F
01966:  MOVLB  A
01968:  BCF    xEF.1
0196A:  BTFSC  00.0
0196C:  BSF    xEF.1
....................       FaultNow[18] = MCP23s17_Ip_dat >> 7;
0196E:  CLRF   00
01970:  MOVLB  9
01972:  BTFSC  x78.7
01974:  BSF    00.0
01976:  MOVLB  A
01978:  BCF    xEF.2
0197A:  BTFSC  00.0
0197C:  BSF    xEF.2
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
0197E:  MOVLB  B
01980:  CLRF   x4F
01982:  MOVLB  0
01984:  RCALL  17C4
01986:  MOVFF  01,978
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0198A:  BTFSS  1A.4
0198C:  BRA    1994
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0198E:  MOVLB  9
01990:  COMF   x78,F
01992:  MOVLB  0
....................       }
....................       
....................       FaultNow[19] = MCP23s17_Ip_dat;
01994:  MOVLB  A
01996:  BCF    xEF.3
01998:  MOVLB  9
0199A:  BTFSS  x78.0
0199C:  BRA    19A4
0199E:  MOVLB  A
019A0:  BSF    xEF.3
019A2:  MOVLB  9
....................       FaultNow[20] = MCP23s17_Ip_dat >> 1;
019A4:  BCF    FD8.0
019A6:  RRCF   x78,W
019A8:  MOVLB  A
019AA:  BCF    xEF.4
019AC:  BTFSC  FE8.0
019AE:  BSF    xEF.4
....................       
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
019B0:  MOVLW  02
019B2:  MOVLB  B
019B4:  MOVWF  x4F
019B6:  MOVLB  0
019B8:  RCALL  17A8
019BA:  MOVFF  01,978
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
019BE:  BTFSS  1A.4
019C0:  BRA    19C8
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
019C2:  MOVLB  9
019C4:  COMF   x78,F
019C6:  MOVLB  0
....................          
....................       }
....................       
....................       FaultNow[1] = MCP23s17_Ip_dat;
019C8:  MOVLB  A
019CA:  BCF    xED.1
019CC:  MOVLB  9
019CE:  BTFSS  x78.0
019D0:  BRA    19D8
019D2:  MOVLB  A
019D4:  BSF    xED.1
019D6:  MOVLB  9
....................       FaultNow[2] = MCP23s17_Ip_dat >> 1;
019D8:  BCF    FD8.0
019DA:  RRCF   x78,W
019DC:  MOVLB  A
019DE:  BCF    xED.2
019E0:  BTFSC  FE8.0
019E2:  BSF    xED.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 2;
019E4:  MOVLB  9
019E6:  RRCF   x78,W
019E8:  MOVWF  00
019EA:  RRCF   00,F
019EC:  MOVLW  3F
019EE:  ANDWF  00,F
019F0:  MOVLB  A
019F2:  BCF    xED.3
019F4:  BTFSC  00.0
019F6:  BSF    xED.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 3;
019F8:  MOVLB  9
019FA:  RRCF   x78,W
019FC:  MOVWF  00
019FE:  RRCF   00,F
01A00:  RRCF   00,F
01A02:  MOVLW  1F
01A04:  ANDWF  00,F
01A06:  MOVLB  A
01A08:  BCF    xED.4
01A0A:  BTFSC  00.0
01A0C:  BSF    xED.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 4;
01A0E:  MOVLB  9
01A10:  SWAPF  x78,W
01A12:  MOVWF  00
01A14:  MOVLW  0F
01A16:  ANDWF  00,F
01A18:  MOVLB  A
01A1A:  BCF    xED.5
01A1C:  BTFSC  00.0
01A1E:  BSF    xED.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 5;
01A20:  MOVLB  9
01A22:  SWAPF  x78,W
01A24:  MOVWF  00
01A26:  RRCF   00,F
01A28:  MOVLW  07
01A2A:  ANDWF  00,F
01A2C:  MOVLB  A
01A2E:  BCF    xED.6
01A30:  BTFSC  00.0
01A32:  BSF    xED.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 6;
01A34:  MOVLB  9
01A36:  SWAPF  x78,W
01A38:  MOVWF  00
01A3A:  RRCF   00,F
01A3C:  RRCF   00,F
01A3E:  MOVLW  03
01A40:  ANDWF  00,F
01A42:  MOVLB  A
01A44:  BCF    xED.7
01A46:  BTFSC  00.0
01A48:  BSF    xED.7
....................       FaultNow[8] = MCP23s17_Ip_dat >> 7;
01A4A:  CLRF   00
01A4C:  MOVLB  9
01A4E:  BTFSC  x78.7
01A50:  BSF    00.0
01A52:  MOVLB  A
01A54:  BCF    xEE.0
01A56:  BTFSC  00.0
01A58:  BSF    xEE.0
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01A5A:  MOVLW  02
01A5C:  MOVLB  B
01A5E:  MOVWF  x4F
01A60:  MOVLB  0
01A62:  RCALL  17C4
01A64:  MOVFF  01,978
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01A68:  BTFSS  1A.4
01A6A:  BRA    1A72
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01A6C:  MOVLB  9
01A6E:  COMF   x78,F
01A70:  MOVLB  0
....................       }
....................       
....................       FaultNow[9] = MCP23s17_Ip_dat;
01A72:  MOVLB  A
01A74:  BCF    xEE.1
01A76:  MOVLB  9
01A78:  BTFSS  x78.0
01A7A:  BRA    1A82
01A7C:  MOVLB  A
01A7E:  BSF    xEE.1
01A80:  MOVLB  9
....................       FaultNow[10] = MCP23s17_Ip_dat >> 1;
01A82:  BCF    FD8.0
01A84:  RRCF   x78,W
01A86:  MOVLB  A
01A88:  BCF    xEE.2
01A8A:  BTFSC  FE8.0
01A8C:  BSF    xEE.2
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=10; i++)
01A8E:  MOVLW  01
01A90:  MOVLB  B
01A92:  MOVWF  x4E
01A94:  MOVF   x4E,W
01A96:  SUBLW  0A
01A98:  BTFSS  FD8.0
01A9A:  BRA    1FC4
....................       {
....................          if(FaultNCNO[i] ==NO)
01A9C:  MOVFF  B4E,B52
01AA0:  MOVLW  0B
01AA2:  MOVWF  x54
01AA4:  MOVLW  44
01AA6:  MOVWF  x53
01AA8:  MOVLB  0
01AAA:  RCALL  17E0
01AAC:  MOVF   01,W
01AAE:  ANDLW  01
01AB0:  SUBLW  01
01AB2:  BTFSS  FD8.2
01AB4:  BRA    1D2C
....................          {
....................              if(FaultNow[i]==0)
01AB6:  MOVFF  B4E,B52
01ABA:  MOVLW  0A
01ABC:  MOVLB  B
01ABE:  MOVWF  x54
01AC0:  MOVLW  ED
01AC2:  MOVWF  x53
01AC4:  MOVLB  0
01AC6:  RCALL  17E0
01AC8:  MOVF   01,W
01ACA:  ANDLW  01
01ACC:  BTFSS  FD8.2
01ACE:  BRA    1BFE
....................              {   
....................                if(FaultAgo[i]==0)
01AD0:  MOVFF  B4E,B52
01AD4:  MOVLW  0A
01AD6:  MOVLB  B
01AD8:  MOVWF  x54
01ADA:  MOVLW  EA
01ADC:  MOVWF  x53
01ADE:  MOVLB  0
01AE0:  RCALL  17E0
01AE2:  MOVF   01,W
01AE4:  ANDLW  01
01AE6:  BTFSS  FD8.2
01AE8:  BRA    1BE2
....................                {
....................                    ReleaseTime[i]++;
01AEA:  BCF    FD8.0
01AEC:  MOVLB  B
01AEE:  RLCF   x4E,W
01AF0:  CLRF   03
01AF2:  ADDLW  F0
01AF4:  MOVWF  FE9
01AF6:  MOVLW  0A
01AF8:  ADDWFC 03,W
01AFA:  MOVWF  FEA
01AFC:  MOVLW  01
01AFE:  ADDWF  FEE,F
01B00:  BNC   1B04
01B02:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01B04:  BCF    FD8.0
01B06:  RLCF   x4E,W
01B08:  CLRF   03
01B0A:  ADDLW  F0
01B0C:  MOVWF  FE9
01B0E:  MOVLW  0A
01B10:  ADDWFC 03,W
01B12:  MOVWF  FEA
01B14:  MOVFF  FEC,B50
01B18:  MOVF   FED,F
01B1A:  MOVFF  FEF,B4F
01B1E:  BCF    FD8.0
01B20:  RLCF   x4E,W
01B22:  CLRF   03
01B24:  ADDLW  1A
01B26:  MOVWF  FE9
01B28:  MOVLW  0B
01B2A:  ADDWFC 03,W
01B2C:  MOVWF  FEA
01B2E:  MOVFF  FEC,B54
01B32:  MOVF   FED,F
01B34:  MOVFF  FEF,B53
01B38:  CLRF   x56
01B3A:  MOVLW  4B
01B3C:  MOVWF  x55
01B3E:  MOVLB  0
01B40:  RCALL  1816
01B42:  MOVFF  02,B52
01B46:  MOVFF  01,B51
01B4A:  MOVLW  0F
01B4C:  MOVLB  B
01B4E:  ADDWF  01,W
01B50:  MOVWF  01
01B52:  MOVLW  00
01B54:  ADDWFC 02,W
01B56:  MOVWF  03
01B58:  MOVF   03,W
01B5A:  SUBWF  x50,W
01B5C:  BNC   1BDE
01B5E:  BNZ   1B66
01B60:  MOVF   01,W
01B62:  SUBWF  x4F,W
01B64:  BNC   1BDE
....................                    {   
....................                      ReleaseTime[i] = 0;
01B66:  BCF    FD8.0
01B68:  RLCF   x4E,W
01B6A:  CLRF   03
01B6C:  ADDLW  F0
01B6E:  MOVWF  FE9
01B70:  MOVLW  0A
01B72:  ADDWFC 03,W
01B74:  MOVWF  FEA
01B76:  CLRF   FEC
01B78:  MOVF   FED,F
01B7A:  CLRF   FEF
....................                      switch(i)
01B7C:  MOVLW  01
01B7E:  SUBWF  x4E,W
01B80:  ADDLW  F6
01B82:  BC    1BDE
01B84:  ADDLW  0A
01B86:  MOVLB  0
01B88:  GOTO   2088
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01B8C:  MOVLB  A
01B8E:  BCF    xCC.0
....................                         break;
01B90:  MOVLB  B
01B92:  BRA    1BDE
....................                         case 2:
....................                            Inputt.B2 = 0; 
01B94:  MOVLB  A
01B96:  BCF    xCC.1
....................                         break;
01B98:  MOVLB  B
01B9A:  BRA    1BDE
....................                         case 3:
....................                            Inputt.B3 = 0; 
01B9C:  MOVLB  A
01B9E:  BCF    xCC.2
....................                         break;
01BA0:  MOVLB  B
01BA2:  BRA    1BDE
....................                         case 4:
....................                            Inputt.B4 = 0; 
01BA4:  MOVLB  A
01BA6:  BCF    xCC.3
....................                         break;
01BA8:  MOVLB  B
01BAA:  BRA    1BDE
....................                         case 5:
....................                            Inputt.B5 = 0; 
01BAC:  MOVLB  A
01BAE:  BCF    xCC.4
....................                         break;
01BB0:  MOVLB  B
01BB2:  BRA    1BDE
....................                         case 6:
....................                            Inputt.B6 = 0; 
01BB4:  MOVLB  A
01BB6:  BCF    xCC.5
....................                         break;
01BB8:  MOVLB  B
01BBA:  BRA    1BDE
....................                         case 7:
....................                            Inputt.B7 = 0; 
01BBC:  MOVLB  A
01BBE:  BCF    xCC.6
....................                          break;
01BC0:  MOVLB  B
01BC2:  BRA    1BDE
....................                          case 8:
....................                            Inputt.B8 = 0; 
01BC4:  MOVLB  A
01BC6:  BCF    xCC.7
....................                         break;
01BC8:  MOVLB  B
01BCA:  BRA    1BDE
....................                         case 9:
....................                            Inputt.B9 = 0; 
01BCC:  MOVLB  A
01BCE:  BCF    xCD.0
....................                         break;
01BD0:  MOVLB  B
01BD2:  BRA    1BDE
....................                         case 10:
....................                            Inputt.B10 = 0; 
01BD4:  MOVLB  A
01BD6:  BCF    xCD.1
....................                         break;
01BD8:  MOVLB  B
01BDA:  BRA    1BDE
01BDC:  MOVLB  B
....................         
....................                      }                 
....................                    }
....................                }
01BDE:  BRA    1BFA
01BE0:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01BE2:  BCF    FD8.0
01BE4:  MOVLB  B
01BE6:  RLCF   x4E,W
01BE8:  CLRF   03
01BEA:  ADDLW  F0
01BEC:  MOVWF  FE9
01BEE:  MOVLW  0A
01BF0:  ADDWFC 03,W
01BF2:  MOVWF  FEA
01BF4:  CLRF   FEC
01BF6:  MOVF   FED,F
01BF8:  CLRF   FEF
....................                }
....................              }
01BFA:  BRA    1D2A
01BFC:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
01BFE:  MOVFF  B4E,B52
01C02:  MOVLW  0A
01C04:  MOVLB  B
01C06:  MOVWF  x54
01C08:  MOVLW  EA
01C0A:  MOVWF  x53
01C0C:  MOVLB  0
01C0E:  RCALL  17E0
01C10:  MOVF   01,W
01C12:  ANDLW  01
01C14:  SUBLW  01
01C16:  BTFSS  FD8.2
01C18:  BRA    1D12
....................                {
....................                    ReleaseTime[i]++;
01C1A:  BCF    FD8.0
01C1C:  MOVLB  B
01C1E:  RLCF   x4E,W
01C20:  CLRF   03
01C22:  ADDLW  F0
01C24:  MOVWF  FE9
01C26:  MOVLW  0A
01C28:  ADDWFC 03,W
01C2A:  MOVWF  FEA
01C2C:  MOVLW  01
01C2E:  ADDWF  FEE,F
01C30:  BNC   1C34
01C32:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01C34:  BCF    FD8.0
01C36:  RLCF   x4E,W
01C38:  CLRF   03
01C3A:  ADDLW  F0
01C3C:  MOVWF  FE9
01C3E:  MOVLW  0A
01C40:  ADDWFC 03,W
01C42:  MOVWF  FEA
01C44:  MOVFF  FEC,B50
01C48:  MOVF   FED,F
01C4A:  MOVFF  FEF,B4F
01C4E:  BCF    FD8.0
01C50:  RLCF   x4E,W
01C52:  CLRF   03
01C54:  ADDLW  1A
01C56:  MOVWF  FE9
01C58:  MOVLW  0B
01C5A:  ADDWFC 03,W
01C5C:  MOVWF  FEA
01C5E:  MOVFF  FEC,B54
01C62:  MOVF   FED,F
01C64:  MOVFF  FEF,B53
01C68:  CLRF   x56
01C6A:  MOVLW  4B
01C6C:  MOVWF  x55
01C6E:  MOVLB  0
01C70:  RCALL  1816
01C72:  MOVFF  02,B52
01C76:  MOVFF  01,B51
01C7A:  MOVLW  0F
01C7C:  MOVLB  B
01C7E:  ADDWF  01,W
01C80:  MOVWF  01
01C82:  MOVLW  00
01C84:  ADDWFC 02,W
01C86:  MOVWF  03
01C88:  MOVF   03,W
01C8A:  SUBWF  x50,W
01C8C:  BNC   1D0E
01C8E:  BNZ   1C96
01C90:  MOVF   01,W
01C92:  SUBWF  x4F,W
01C94:  BNC   1D0E
....................                    {   
....................                      ReleaseTime[i] = 1;
01C96:  BCF    FD8.0
01C98:  RLCF   x4E,W
01C9A:  CLRF   03
01C9C:  ADDLW  F0
01C9E:  MOVWF  FE9
01CA0:  MOVLW  0A
01CA2:  ADDWFC 03,W
01CA4:  MOVWF  FEA
01CA6:  CLRF   FEC
01CA8:  MOVF   FED,F
01CAA:  MOVLW  01
01CAC:  MOVWF  FEF
....................                      switch(i)
01CAE:  SUBWF  x4E,W
01CB0:  ADDLW  F6
01CB2:  BC    1D0E
01CB4:  ADDLW  0A
01CB6:  MOVLB  0
01CB8:  GOTO   20B6
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01CBC:  MOVLB  A
01CBE:  BSF    xCC.0
....................                         break;
01CC0:  MOVLB  B
01CC2:  BRA    1D0E
....................                         case 2:
....................                            Inputt.B2 = 1; 
01CC4:  MOVLB  A
01CC6:  BSF    xCC.1
....................                         break;
01CC8:  MOVLB  B
01CCA:  BRA    1D0E
....................                         case 3:
....................                            Inputt.B3 = 1; 
01CCC:  MOVLB  A
01CCE:  BSF    xCC.2
....................                         break;
01CD0:  MOVLB  B
01CD2:  BRA    1D0E
....................                         case 4:
....................                            Inputt.B4 = 1; 
01CD4:  MOVLB  A
01CD6:  BSF    xCC.3
....................                         break;
01CD8:  MOVLB  B
01CDA:  BRA    1D0E
....................                         case 5:
....................                            Inputt.B5 = 1; 
01CDC:  MOVLB  A
01CDE:  BSF    xCC.4
....................                         break;
01CE0:  MOVLB  B
01CE2:  BRA    1D0E
....................                         case 6:
....................                            Inputt.B6 = 1; 
01CE4:  MOVLB  A
01CE6:  BSF    xCC.5
....................                         break;
01CE8:  MOVLB  B
01CEA:  BRA    1D0E
....................                         case 7:
....................                            Inputt.B7 = 1; 
01CEC:  MOVLB  A
01CEE:  BSF    xCC.6
....................                          break;
01CF0:  MOVLB  B
01CF2:  BRA    1D0E
....................                          case 8:
....................                            Inputt.B8 = 1; 
01CF4:  MOVLB  A
01CF6:  BSF    xCC.7
....................                         break;
01CF8:  MOVLB  B
01CFA:  BRA    1D0E
....................                         case 9:
....................                            Inputt.B9 = 1; 
01CFC:  MOVLB  A
01CFE:  BSF    xCD.0
....................                         break;
01D00:  MOVLB  B
01D02:  BRA    1D0E
....................                         case 10:
....................                            Inputt.B10 = 1; 
01D04:  MOVLB  A
01D06:  BSF    xCD.1
....................                         break;
01D08:  MOVLB  B
01D0A:  BRA    1D0E
01D0C:  MOVLB  B
....................          
....................                      }                 
....................                    }
....................                }
01D0E:  BRA    1D2A
01D10:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01D12:  BCF    FD8.0
01D14:  MOVLB  B
01D16:  RLCF   x4E,W
01D18:  CLRF   03
01D1A:  ADDLW  F0
01D1C:  MOVWF  FE9
01D1E:  MOVLW  0A
01D20:  ADDWFC 03,W
01D22:  MOVWF  FEA
01D24:  CLRF   FEC
01D26:  MOVF   FED,F
01D28:  CLRF   FEF
....................                }
.................... 
....................              }
....................           }
01D2A:  BRA    1FBC
....................           else if(FaultNCNO[i] ==NC)
01D2C:  MOVFF  B4E,B52
01D30:  MOVLW  0B
01D32:  MOVLB  B
01D34:  MOVWF  x54
01D36:  MOVLW  44
01D38:  MOVWF  x53
01D3A:  MOVLB  0
01D3C:  RCALL  17E0
01D3E:  MOVF   01,W
01D40:  ANDLW  01
01D42:  BTFSS  FD8.2
01D44:  BRA    1FBE
....................           {
....................              if(FaultNow[i]==1)
01D46:  MOVFF  B4E,B52
01D4A:  MOVLW  0A
01D4C:  MOVLB  B
01D4E:  MOVWF  x54
01D50:  MOVLW  ED
01D52:  MOVWF  x53
01D54:  MOVLB  0
01D56:  RCALL  17E0
01D58:  MOVF   01,W
01D5A:  ANDLW  01
01D5C:  SUBLW  01
01D5E:  BTFSS  FD8.2
01D60:  BRA    1E92
....................              {
....................                if(FaultAgo[i]==1)
01D62:  MOVFF  B4E,B52
01D66:  MOVLW  0A
01D68:  MOVLB  B
01D6A:  MOVWF  x54
01D6C:  MOVLW  EA
01D6E:  MOVWF  x53
01D70:  MOVLB  0
01D72:  RCALL  17E0
01D74:  MOVF   01,W
01D76:  ANDLW  01
01D78:  SUBLW  01
01D7A:  BTFSS  FD8.2
01D7C:  BRA    1E76
....................                {
....................                    ReleaseTime[i]++;
01D7E:  BCF    FD8.0
01D80:  MOVLB  B
01D82:  RLCF   x4E,W
01D84:  CLRF   03
01D86:  ADDLW  F0
01D88:  MOVWF  FE9
01D8A:  MOVLW  0A
01D8C:  ADDWFC 03,W
01D8E:  MOVWF  FEA
01D90:  MOVLW  01
01D92:  ADDWF  FEE,F
01D94:  BNC   1D98
01D96:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01D98:  BCF    FD8.0
01D9A:  RLCF   x4E,W
01D9C:  CLRF   03
01D9E:  ADDLW  F0
01DA0:  MOVWF  FE9
01DA2:  MOVLW  0A
01DA4:  ADDWFC 03,W
01DA6:  MOVWF  FEA
01DA8:  MOVFF  FEC,B50
01DAC:  MOVF   FED,F
01DAE:  MOVFF  FEF,B4F
01DB2:  BCF    FD8.0
01DB4:  RLCF   x4E,W
01DB6:  CLRF   03
01DB8:  ADDLW  1A
01DBA:  MOVWF  FE9
01DBC:  MOVLW  0B
01DBE:  ADDWFC 03,W
01DC0:  MOVWF  FEA
01DC2:  MOVFF  FEC,B54
01DC6:  MOVF   FED,F
01DC8:  MOVFF  FEF,B53
01DCC:  CLRF   x56
01DCE:  MOVLW  4B
01DD0:  MOVWF  x55
01DD2:  MOVLB  0
01DD4:  RCALL  1816
01DD6:  MOVFF  02,B52
01DDA:  MOVFF  01,B51
01DDE:  MOVLW  0F
01DE0:  MOVLB  B
01DE2:  ADDWF  01,W
01DE4:  MOVWF  01
01DE6:  MOVLW  00
01DE8:  ADDWFC 02,W
01DEA:  MOVWF  03
01DEC:  MOVF   03,W
01DEE:  SUBWF  x50,W
01DF0:  BNC   1E72
01DF2:  BNZ   1DFA
01DF4:  MOVF   01,W
01DF6:  SUBWF  x4F,W
01DF8:  BNC   1E72
....................                    {   
....................                      ReleaseTime[i] = 0;
01DFA:  BCF    FD8.0
01DFC:  RLCF   x4E,W
01DFE:  CLRF   03
01E00:  ADDLW  F0
01E02:  MOVWF  FE9
01E04:  MOVLW  0A
01E06:  ADDWFC 03,W
01E08:  MOVWF  FEA
01E0A:  CLRF   FEC
01E0C:  MOVF   FED,F
01E0E:  CLRF   FEF
....................                      switch(i)
01E10:  MOVLW  01
01E12:  SUBWF  x4E,W
01E14:  ADDLW  F6
01E16:  BC    1E72
01E18:  ADDLW  0A
01E1A:  MOVLB  0
01E1C:  GOTO   20E4
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01E20:  MOVLB  A
01E22:  BSF    xCC.0
....................                         break;
01E24:  MOVLB  B
01E26:  BRA    1E72
....................                         case 2:
....................                            Inputt.B2 = 1; 
01E28:  MOVLB  A
01E2A:  BSF    xCC.1
....................                         break;
01E2C:  MOVLB  B
01E2E:  BRA    1E72
....................                         case 3:
....................                            Inputt.B3 = 1; 
01E30:  MOVLB  A
01E32:  BSF    xCC.2
....................                         break;
01E34:  MOVLB  B
01E36:  BRA    1E72
....................                         case 4:
....................                            Inputt.B4 = 1; 
01E38:  MOVLB  A
01E3A:  BSF    xCC.3
....................                         break;
01E3C:  MOVLB  B
01E3E:  BRA    1E72
....................                         case 5:
....................                            Inputt.B5 = 1; 
01E40:  MOVLB  A
01E42:  BSF    xCC.4
....................                         break;
01E44:  MOVLB  B
01E46:  BRA    1E72
....................                         case 6:
....................                            Inputt.B6 = 1; 
01E48:  MOVLB  A
01E4A:  BSF    xCC.5
....................                         break;
01E4C:  MOVLB  B
01E4E:  BRA    1E72
....................                         case 7:
....................                            Inputt.B7 = 1; 
01E50:  MOVLB  A
01E52:  BSF    xCC.6
....................                          break;
01E54:  MOVLB  B
01E56:  BRA    1E72
....................                          case 8:
....................                            Inputt.B8 = 1; 
01E58:  MOVLB  A
01E5A:  BSF    xCC.7
....................                         break;
01E5C:  MOVLB  B
01E5E:  BRA    1E72
....................                         case 9:
....................                            Inputt.B9 = 1; 
01E60:  MOVLB  A
01E62:  BSF    xCD.0
....................                         break;
01E64:  MOVLB  B
01E66:  BRA    1E72
....................                         case 10:
....................                            Inputt.B10 = 1; 
01E68:  MOVLB  A
01E6A:  BSF    xCD.1
....................                         break;
01E6C:  MOVLB  B
01E6E:  BRA    1E72
01E70:  MOVLB  B
....................                                          
....................                      }                 
....................                   }
....................                }
01E72:  BRA    1E8E
01E74:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01E76:  BCF    FD8.0
01E78:  MOVLB  B
01E7A:  RLCF   x4E,W
01E7C:  CLRF   03
01E7E:  ADDLW  F0
01E80:  MOVWF  FE9
01E82:  MOVLW  0A
01E84:  ADDWFC 03,W
01E86:  MOVWF  FEA
01E88:  CLRF   FEC
01E8A:  MOVF   FED,F
01E8C:  CLRF   FEF
....................                }
....................              }
01E8E:  BRA    1FBC
01E90:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
01E92:  MOVFF  B4E,B52
01E96:  MOVLW  0A
01E98:  MOVLB  B
01E9A:  MOVWF  x54
01E9C:  MOVLW  EA
01E9E:  MOVWF  x53
01EA0:  MOVLB  0
01EA2:  RCALL  17E0
01EA4:  MOVF   01,W
01EA6:  ANDLW  01
01EA8:  BTFSS  FD8.2
01EAA:  BRA    1FA4
....................                {
....................                    ReleaseTime[i]++;
01EAC:  BCF    FD8.0
01EAE:  MOVLB  B
01EB0:  RLCF   x4E,W
01EB2:  CLRF   03
01EB4:  ADDLW  F0
01EB6:  MOVWF  FE9
01EB8:  MOVLW  0A
01EBA:  ADDWFC 03,W
01EBC:  MOVWF  FEA
01EBE:  MOVLW  01
01EC0:  ADDWF  FEE,F
01EC2:  BNC   1EC6
01EC4:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01EC6:  BCF    FD8.0
01EC8:  RLCF   x4E,W
01ECA:  CLRF   03
01ECC:  ADDLW  F0
01ECE:  MOVWF  FE9
01ED0:  MOVLW  0A
01ED2:  ADDWFC 03,W
01ED4:  MOVWF  FEA
01ED6:  MOVFF  FEC,B50
01EDA:  MOVF   FED,F
01EDC:  MOVFF  FEF,B4F
01EE0:  BCF    FD8.0
01EE2:  RLCF   x4E,W
01EE4:  CLRF   03
01EE6:  ADDLW  1A
01EE8:  MOVWF  FE9
01EEA:  MOVLW  0B
01EEC:  ADDWFC 03,W
01EEE:  MOVWF  FEA
01EF0:  MOVFF  FEC,B54
01EF4:  MOVF   FED,F
01EF6:  MOVFF  FEF,B53
01EFA:  CLRF   x56
01EFC:  MOVLW  4B
01EFE:  MOVWF  x55
01F00:  MOVLB  0
01F02:  RCALL  1816
01F04:  MOVFF  02,B52
01F08:  MOVFF  01,B51
01F0C:  MOVLW  0F
01F0E:  MOVLB  B
01F10:  ADDWF  01,W
01F12:  MOVWF  01
01F14:  MOVLW  00
01F16:  ADDWFC 02,W
01F18:  MOVWF  03
01F1A:  MOVF   03,W
01F1C:  SUBWF  x50,W
01F1E:  BNC   1FA0
01F20:  BNZ   1F28
01F22:  MOVF   01,W
01F24:  SUBWF  x4F,W
01F26:  BNC   1FA0
....................                    {   
....................                      ReleaseTime[i] = 0;
01F28:  BCF    FD8.0
01F2A:  RLCF   x4E,W
01F2C:  CLRF   03
01F2E:  ADDLW  F0
01F30:  MOVWF  FE9
01F32:  MOVLW  0A
01F34:  ADDWFC 03,W
01F36:  MOVWF  FEA
01F38:  CLRF   FEC
01F3A:  MOVF   FED,F
01F3C:  CLRF   FEF
....................                      switch(i)
01F3E:  MOVLW  01
01F40:  SUBWF  x4E,W
01F42:  ADDLW  F6
01F44:  BC    1FA0
01F46:  ADDLW  0A
01F48:  MOVLB  0
01F4A:  GOTO   2112
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01F4E:  MOVLB  A
01F50:  BCF    xCC.0
....................                         break;
01F52:  MOVLB  B
01F54:  BRA    1FA0
....................                         case 2:
....................                            Inputt.B2 = 0; 
01F56:  MOVLB  A
01F58:  BCF    xCC.1
....................                         break;
01F5A:  MOVLB  B
01F5C:  BRA    1FA0
....................                         case 3:
....................                            Inputt.B3 = 0; 
01F5E:  MOVLB  A
01F60:  BCF    xCC.2
....................                         break;
01F62:  MOVLB  B
01F64:  BRA    1FA0
....................                         case 4:
....................                            Inputt.B4 = 0; 
01F66:  MOVLB  A
01F68:  BCF    xCC.3
....................                         break;
01F6A:  MOVLB  B
01F6C:  BRA    1FA0
....................                         case 5:
....................                            Inputt.B5 = 0; 
01F6E:  MOVLB  A
01F70:  BCF    xCC.4
....................                         break;
01F72:  MOVLB  B
01F74:  BRA    1FA0
....................                         case 6:
....................                            Inputt.B6 = 0; 
01F76:  MOVLB  A
01F78:  BCF    xCC.5
....................                         break;
01F7A:  MOVLB  B
01F7C:  BRA    1FA0
....................                         case 7:
....................                            Inputt.B7 = 0; 
01F7E:  MOVLB  A
01F80:  BCF    xCC.6
....................                          break;
01F82:  MOVLB  B
01F84:  BRA    1FA0
....................                          case 8:
....................                            Inputt.B8 = 0; 
01F86:  MOVLB  A
01F88:  BCF    xCC.7
....................                         break;
01F8A:  MOVLB  B
01F8C:  BRA    1FA0
....................                         case 9:
....................                            Inputt.B9 = 0; 
01F8E:  MOVLB  A
01F90:  BCF    xCD.0
....................                         break;
01F92:  MOVLB  B
01F94:  BRA    1FA0
....................                         case 10:
....................                            Inputt.B10 = 0; 
01F96:  MOVLB  A
01F98:  BCF    xCD.1
....................                         break;
01F9A:  MOVLB  B
01F9C:  BRA    1FA0
01F9E:  MOVLB  B
....................          
....................                      }                 
....................                    }
....................                }
01FA0:  BRA    1FBC
01FA2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01FA4:  BCF    FD8.0
01FA6:  MOVLB  B
01FA8:  RLCF   x4E,W
01FAA:  CLRF   03
01FAC:  ADDLW  F0
01FAE:  MOVWF  FE9
01FB0:  MOVLW  0A
01FB2:  ADDWFC 03,W
01FB4:  MOVWF  FEA
01FB6:  CLRF   FEC
01FB8:  MOVF   FED,F
01FBA:  CLRF   FEF
01FBC:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
01FBE:  MOVLB  B
01FC0:  INCF   x4E,F
01FC2:  BRA    1A94
....................       }
....................         
....................       StoreReleaseFault();
01FC4:  MOVLB  0
01FC6:  BRA    187A
....................    
....................       Input1_8 = 0x00;
01FC8:  CLRF   4A
....................       Input1_8 = Input1_8 | ~Inputt.B8;
01FCA:  MOVLW  00
01FCC:  MOVLB  A
01FCE:  BTFSS  xCC.7
01FD0:  MOVLW  01
01FD2:  IORWF  4A,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
01FD4:  BCF    FD8.0
01FD6:  RLCF   4A,W
01FD8:  MOVLB  B
01FDA:  MOVWF  x4F
01FDC:  MOVLW  00
01FDE:  MOVLB  A
01FE0:  BTFSS  xCC.6
01FE2:  MOVLW  01
01FE4:  MOVLB  B
01FE6:  IORWF  x4F,W
01FE8:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
01FEA:  BCF    FD8.0
01FEC:  RLCF   4A,W
01FEE:  MOVWF  x4F
01FF0:  MOVLW  00
01FF2:  MOVLB  A
01FF4:  BTFSS  xCC.5
01FF6:  MOVLW  01
01FF8:  MOVLB  B
01FFA:  IORWF  x4F,W
01FFC:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
01FFE:  BCF    FD8.0
02000:  RLCF   4A,W
02002:  MOVWF  x4F
02004:  MOVLW  00
02006:  MOVLB  A
02008:  BTFSS  xCC.4
0200A:  MOVLW  01
0200C:  MOVLB  B
0200E:  IORWF  x4F,W
02010:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
02012:  BCF    FD8.0
02014:  RLCF   4A,W
02016:  MOVWF  x4F
02018:  MOVLW  00
0201A:  MOVLB  A
0201C:  BTFSS  xCC.3
0201E:  MOVLW  01
02020:  MOVLB  B
02022:  IORWF  x4F,W
02024:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
02026:  BCF    FD8.0
02028:  RLCF   4A,W
0202A:  MOVWF  x4F
0202C:  MOVLW  00
0202E:  MOVLB  A
02030:  BTFSS  xCC.2
02032:  MOVLW  01
02034:  MOVLB  B
02036:  IORWF  x4F,W
02038:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
0203A:  BCF    FD8.0
0203C:  RLCF   4A,W
0203E:  MOVWF  x4F
02040:  MOVLW  00
02042:  MOVLB  A
02044:  BTFSS  xCC.1
02046:  MOVLW  01
02048:  MOVLB  B
0204A:  IORWF  x4F,W
0204C:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
0204E:  BCF    FD8.0
02050:  RLCF   4A,W
02052:  MOVWF  x4F
02054:  MOVLW  00
02056:  MOVLB  A
02058:  BTFSS  xCC.0
0205A:  MOVLW  01
0205C:  MOVLB  B
0205E:  IORWF  x4F,W
02060:  MOVWF  4A
....................     
....................    
.................... 
....................       Input9_10 = 0x00;
02062:  CLRF   4B
....................       Input9_10 = Input9_10 | ~Inputt.B10;
02064:  MOVLW  00
02066:  MOVLB  A
02068:  BTFSS  xCD.1
0206A:  MOVLW  01
0206C:  IORWF  4B,F
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
0206E:  BCF    FD8.0
02070:  RLCF   4B,W
02072:  MOVLB  B
02074:  MOVWF  x4F
02076:  MOVLW  00
02078:  MOVLB  A
0207A:  BTFSS  xCD.0
0207C:  MOVLW  01
0207E:  MOVLB  B
02080:  IORWF  x4F,W
02082:  MOVWF  4B
02084:  MOVLB  0
02086:  RETURN 0
....................       
....................   
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
00918:  MOVFF  FF2,B58
0091C:  BCF    FF2.7
0091E:  CLRF   FAA
00920:  MOVLW  01
00922:  MOVWF  FA9
00924:  BCF    FA6.6
00926:  BCF    FA6.7
00928:  BSF    FA6.0
0092A:  MOVF   FA8,W
0092C:  MOVLB  B
0092E:  BTFSC  x58.7
00930:  BSF    FF2.7
00932:  MOVWF  3A
....................    InputType1_8 = EEpDat;
00934:  MOVFF  3A,3B
.................... 
....................    InputType.B1 = EEpDat;
00938:  MOVLB  A
0093A:  BCF    xD0.0
0093C:  BTFSC  3A.0
0093E:  BSF    xD0.0
....................    InputType.B2 = EEpDat >> 1;
00940:  BCF    FD8.0
00942:  RRCF   3A,W
00944:  BCF    xD0.1
00946:  BTFSC  FE8.0
00948:  BSF    xD0.1
....................    InputType.B3 = EEpDat >> 2;
0094A:  RRCF   3A,W
0094C:  MOVWF  00
0094E:  RRCF   00,F
00950:  MOVLW  3F
00952:  ANDWF  00,F
00954:  BCF    xD0.2
00956:  BTFSC  00.0
00958:  BSF    xD0.2
....................    InputType.B4 = EEpDat >> 3;
0095A:  RRCF   3A,W
0095C:  MOVWF  00
0095E:  RRCF   00,F
00960:  RRCF   00,F
00962:  MOVLW  1F
00964:  ANDWF  00,F
00966:  BCF    xD0.3
00968:  BTFSC  00.0
0096A:  BSF    xD0.3
....................    InputType.B5 = EEpDat >> 4;
0096C:  SWAPF  3A,W
0096E:  MOVWF  00
00970:  MOVLW  0F
00972:  ANDWF  00,F
00974:  BCF    xD0.4
00976:  BTFSC  00.0
00978:  BSF    xD0.4
....................    InputType.B6 = EEpDat >> 5;
0097A:  SWAPF  3A,W
0097C:  MOVWF  00
0097E:  RRCF   00,F
00980:  MOVLW  07
00982:  ANDWF  00,F
00984:  BCF    xD0.5
00986:  BTFSC  00.0
00988:  BSF    xD0.5
....................    InputType.B7 = EEpDat >> 6;
0098A:  SWAPF  3A,W
0098C:  MOVWF  00
0098E:  RRCF   00,F
00990:  RRCF   00,F
00992:  MOVLW  03
00994:  ANDWF  00,F
00996:  BCF    xD0.6
00998:  BTFSC  00.0
0099A:  BSF    xD0.6
....................    InputType.B8 = EEpDat >> 7;
0099C:  CLRF   00
0099E:  BTFSC  3A.7
009A0:  BSF    00.0
009A2:  BCF    xD0.7
009A4:  BTFSC  00.0
009A6:  BSF    xD0.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
009A8:  MOVFF  FF2,B58
009AC:  BCF    FF2.7
009AE:  CLRF   FAA
009B0:  MOVLW  02
009B2:  MOVWF  FA9
009B4:  BCF    FA6.6
009B6:  BCF    FA6.7
009B8:  BSF    FA6.0
009BA:  MOVF   FA8,W
009BC:  MOVLB  B
009BE:  BTFSC  x58.7
009C0:  BSF    FF2.7
009C2:  MOVWF  3A
....................    InputType9_16 = EEpDat;
009C4:  MOVFF  3A,3C
.................... 
....................    InputType.B9 = EEpDat;
009C8:  MOVLB  A
009CA:  BCF    xD1.0
009CC:  BTFSC  3A.0
009CE:  BSF    xD1.0
....................    InputType.B10 = EEpDat >> 1;
009D0:  BCF    FD8.0
009D2:  RRCF   3A,W
009D4:  BCF    xD1.1
009D6:  BTFSC  FE8.0
009D8:  BSF    xD1.1
....................    
....................    FaultNCNO[1] = InputType.B1;
009DA:  MOVLB  B
009DC:  BCF    x44.1
009DE:  MOVLB  A
009E0:  BTFSS  xD0.0
009E2:  BRA    09EA
009E4:  MOVLB  B
009E6:  BSF    x44.1
009E8:  MOVLB  A
....................    FaultNCNO[2] = InputType.B2;
009EA:  MOVLB  B
009EC:  BCF    x44.2
009EE:  MOVLB  A
009F0:  BTFSS  xD0.1
009F2:  BRA    09FA
009F4:  MOVLB  B
009F6:  BSF    x44.2
009F8:  MOVLB  A
....................    FaultNCNO[3] = InputType.B3;
009FA:  MOVLB  B
009FC:  BCF    x44.3
009FE:  MOVLB  A
00A00:  BTFSS  xD0.2
00A02:  BRA    0A0A
00A04:  MOVLB  B
00A06:  BSF    x44.3
00A08:  MOVLB  A
....................    FaultNCNO[4] = InputType.B4;
00A0A:  MOVLB  B
00A0C:  BCF    x44.4
00A0E:  MOVLB  A
00A10:  BTFSS  xD0.3
00A12:  BRA    0A1A
00A14:  MOVLB  B
00A16:  BSF    x44.4
00A18:  MOVLB  A
....................    FaultNCNO[5] = InputType.B5;
00A1A:  MOVLB  B
00A1C:  BCF    x44.5
00A1E:  MOVLB  A
00A20:  BTFSS  xD0.4
00A22:  BRA    0A2A
00A24:  MOVLB  B
00A26:  BSF    x44.5
00A28:  MOVLB  A
....................    FaultNCNO[6] = InputType.B6;
00A2A:  MOVLB  B
00A2C:  BCF    x44.6
00A2E:  MOVLB  A
00A30:  BTFSS  xD0.5
00A32:  BRA    0A3A
00A34:  MOVLB  B
00A36:  BSF    x44.6
00A38:  MOVLB  A
....................    FaultNCNO[7] = InputType.B7;
00A3A:  MOVLB  B
00A3C:  BCF    x44.7
00A3E:  MOVLB  A
00A40:  BTFSS  xD0.6
00A42:  BRA    0A4A
00A44:  MOVLB  B
00A46:  BSF    x44.7
00A48:  MOVLB  A
....................    FaultNCNO[8] = InputType.B8;
00A4A:  MOVLB  B
00A4C:  BCF    x45.0
00A4E:  MOVLB  A
00A50:  BTFSS  xD0.7
00A52:  BRA    0A5A
00A54:  MOVLB  B
00A56:  BSF    x45.0
00A58:  MOVLB  A
....................    FaultNCNO[9] = InputType.B9;
00A5A:  MOVLB  B
00A5C:  BCF    x45.1
00A5E:  MOVLB  A
00A60:  BTFSS  xD1.0
00A62:  BRA    0A6A
00A64:  MOVLB  B
00A66:  BSF    x45.1
00A68:  MOVLB  A
....................    FaultNCNO[10] = InputType.B10;
00A6A:  MOVLB  B
00A6C:  BCF    x45.2
00A6E:  MOVLB  A
00A70:  BTFSS  xD1.1
00A72:  BRA    0A7A
00A74:  MOVLB  B
00A76:  BSF    x45.2
00A78:  MOVLB  A
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00A7A:  MOVFF  FF2,B58
00A7E:  BCF    FF2.7
00A80:  CLRF   FAA
00A82:  MOVLW  04
00A84:  MOVWF  FA9
00A86:  BCF    FA6.6
00A88:  BCF    FA6.7
00A8A:  BSF    FA6.0
00A8C:  MOVF   FA8,W
00A8E:  MOVLB  B
00A90:  BTFSC  x58.7
00A92:  BSF    FF2.7
00A94:  MOVWF  3A
....................    FaultType1_8 = EEpDat;
00A96:  MOVFF  3A,3E
.................... 
....................    FaultType.B1 = EEpDat;
00A9A:  MOVLB  A
00A9C:  BCF    xD2.0
00A9E:  BTFSC  3A.0
00AA0:  BSF    xD2.0
....................    FaultType.B2 = EEpDat >> 1;
00AA2:  BCF    FD8.0
00AA4:  RRCF   3A,W
00AA6:  BCF    xD2.1
00AA8:  BTFSC  FE8.0
00AAA:  BSF    xD2.1
....................    FaultType.B3 = EEpDat >> 2;
00AAC:  RRCF   3A,W
00AAE:  MOVWF  00
00AB0:  RRCF   00,F
00AB2:  MOVLW  3F
00AB4:  ANDWF  00,F
00AB6:  BCF    xD2.2
00AB8:  BTFSC  00.0
00ABA:  BSF    xD2.2
....................    FaultType.B4 = EEpDat >> 3;
00ABC:  RRCF   3A,W
00ABE:  MOVWF  00
00AC0:  RRCF   00,F
00AC2:  RRCF   00,F
00AC4:  MOVLW  1F
00AC6:  ANDWF  00,F
00AC8:  BCF    xD2.3
00ACA:  BTFSC  00.0
00ACC:  BSF    xD2.3
....................    FaultType.B5 = EEpDat >> 4;
00ACE:  SWAPF  3A,W
00AD0:  MOVWF  00
00AD2:  MOVLW  0F
00AD4:  ANDWF  00,F
00AD6:  BCF    xD2.4
00AD8:  BTFSC  00.0
00ADA:  BSF    xD2.4
....................    FaultType.B6 = EEpDat >> 5;
00ADC:  SWAPF  3A,W
00ADE:  MOVWF  00
00AE0:  RRCF   00,F
00AE2:  MOVLW  07
00AE4:  ANDWF  00,F
00AE6:  BCF    xD2.5
00AE8:  BTFSC  00.0
00AEA:  BSF    xD2.5
....................    FaultType.B7 = EEpDat >> 6;
00AEC:  SWAPF  3A,W
00AEE:  MOVWF  00
00AF0:  RRCF   00,F
00AF2:  RRCF   00,F
00AF4:  MOVLW  03
00AF6:  ANDWF  00,F
00AF8:  BCF    xD2.6
00AFA:  BTFSC  00.0
00AFC:  BSF    xD2.6
....................    FaultType.B8 = EEpDat >> 7;
00AFE:  CLRF   00
00B00:  BTFSC  3A.7
00B02:  BSF    00.0
00B04:  BCF    xD2.7
00B06:  BTFSC  00.0
00B08:  BSF    xD2.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00B0A:  MOVFF  FF2,B58
00B0E:  BCF    FF2.7
00B10:  CLRF   FAA
00B12:  MOVLW  05
00B14:  MOVWF  FA9
00B16:  BCF    FA6.6
00B18:  BCF    FA6.7
00B1A:  BSF    FA6.0
00B1C:  MOVF   FA8,W
00B1E:  MOVLB  B
00B20:  BTFSC  x58.7
00B22:  BSF    FF2.7
00B24:  MOVWF  3A
....................    FaultType9_16 = EEpDat;
00B26:  MOVFF  3A,3F
.................... 
....................    FaultType.B9 = EEpDat;
00B2A:  MOVLB  A
00B2C:  BCF    xD3.0
00B2E:  BTFSC  3A.0
00B30:  BSF    xD3.0
....................    FaultType.B10 = EEpDat >> 1;
00B32:  BCF    FD8.0
00B34:  RRCF   3A,W
00B36:  BCF    xD3.1
00B38:  BTFSC  FE8.0
00B3A:  BSF    xD3.1
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00B3C:  MOVFF  FF2,B58
00B40:  BCF    FF2.7
00B42:  CLRF   FAA
00B44:  MOVLW  07
00B46:  MOVWF  FA9
00B48:  BCF    FA6.6
00B4A:  BCF    FA6.7
00B4C:  BSF    FA6.0
00B4E:  MOVF   FA8,W
00B50:  MOVLB  B
00B52:  BTFSC  x58.7
00B54:  BSF    FF2.7
00B56:  MOVWF  3A
....................    OutputType1_8 = EEpDat;
00B58:  MOVFF  3A,41
.................... 
....................    OutputType.B1 = EEpDat;
00B5C:  MOVLB  A
00B5E:  BCF    xD4.0
00B60:  BTFSC  3A.0
00B62:  BSF    xD4.0
....................    OutputType.B2 = EEpDat >> 1;
00B64:  BCF    FD8.0
00B66:  RRCF   3A,W
00B68:  BCF    xD4.1
00B6A:  BTFSC  FE8.0
00B6C:  BSF    xD4.1
....................    OutputType.B3 = EEpDat >> 2;
00B6E:  RRCF   3A,W
00B70:  MOVWF  00
00B72:  RRCF   00,F
00B74:  MOVLW  3F
00B76:  ANDWF  00,F
00B78:  BCF    xD4.2
00B7A:  BTFSC  00.0
00B7C:  BSF    xD4.2
....................    OutputType.B4 = EEpDat >> 3;
00B7E:  RRCF   3A,W
00B80:  MOVWF  00
00B82:  RRCF   00,F
00B84:  RRCF   00,F
00B86:  MOVLW  1F
00B88:  ANDWF  00,F
00B8A:  BCF    xD4.3
00B8C:  BTFSC  00.0
00B8E:  BSF    xD4.3
....................    OutputType.B5 = EEpDat >> 4;
00B90:  SWAPF  3A,W
00B92:  MOVWF  00
00B94:  MOVLW  0F
00B96:  ANDWF  00,F
00B98:  BCF    xD4.4
00B9A:  BTFSC  00.0
00B9C:  BSF    xD4.4
....................    OutputType.B6 = EEpDat >> 5;
00B9E:  SWAPF  3A,W
00BA0:  MOVWF  00
00BA2:  RRCF   00,F
00BA4:  MOVLW  07
00BA6:  ANDWF  00,F
00BA8:  BCF    xD4.5
00BAA:  BTFSC  00.0
00BAC:  BSF    xD4.5
....................    OutputType.B7 = EEpDat >> 6;
00BAE:  SWAPF  3A,W
00BB0:  MOVWF  00
00BB2:  RRCF   00,F
00BB4:  RRCF   00,F
00BB6:  MOVLW  03
00BB8:  ANDWF  00,F
00BBA:  BCF    xD4.6
00BBC:  BTFSC  00.0
00BBE:  BSF    xD4.6
....................    OutputType.B8 = EEpDat >> 7;
00BC0:  CLRF   00
00BC2:  BTFSC  3A.7
00BC4:  BSF    00.0
00BC6:  BCF    xD4.7
00BC8:  BTFSC  00.0
00BCA:  BSF    xD4.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00BCC:  MOVFF  FF2,B58
00BD0:  BCF    FF2.7
00BD2:  CLRF   FAA
00BD4:  MOVLW  08
00BD6:  MOVWF  FA9
00BD8:  BCF    FA6.6
00BDA:  BCF    FA6.7
00BDC:  BSF    FA6.0
00BDE:  MOVF   FA8,W
00BE0:  MOVLB  B
00BE2:  BTFSC  x58.7
00BE4:  BSF    FF2.7
00BE6:  MOVWF  3A
....................    OutputType9_16 = EEpDat;
00BE8:  MOVFF  3A,42
.................... 
....................    OutputType.B9 = EEpDat;
00BEC:  MOVLB  A
00BEE:  BCF    xD5.0
00BF0:  BTFSC  3A.0
00BF2:  BSF    xD5.0
....................    OutputType.B10 = EEpDat >> 1;
00BF4:  BCF    FD8.0
00BF6:  RRCF   3A,W
00BF8:  BCF    xD5.1
00BFA:  BTFSC  FE8.0
00BFC:  BSF    xD5.1
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00BFE:  MOVFF  FF2,B58
00C02:  BCF    FF2.7
00C04:  CLRF   FAA
00C06:  MOVLW  0A
00C08:  MOVWF  FA9
00C0A:  BCF    FA6.6
00C0C:  BCF    FA6.7
00C0E:  BSF    FA6.0
00C10:  MOVF   FA8,W
00C12:  MOVLB  B
00C14:  BTFSC  x58.7
00C16:  BSF    FF2.7
00C18:  MOVWF  3A
....................    OutputBoth1_8 = EEpDat;
00C1A:  MOVFF  3A,44
.................... 
....................    OutputBoth.B1 = EEpDat;
00C1E:  MOVLB  A
00C20:  BCF    xD6.0
00C22:  BTFSC  3A.0
00C24:  BSF    xD6.0
....................    OutputBoth.B2 = EEpDat >> 1;
00C26:  BCF    FD8.0
00C28:  RRCF   3A,W
00C2A:  BCF    xD6.1
00C2C:  BTFSC  FE8.0
00C2E:  BSF    xD6.1
....................    OutputBoth.B3 = EEpDat >> 2;
00C30:  RRCF   3A,W
00C32:  MOVWF  00
00C34:  RRCF   00,F
00C36:  MOVLW  3F
00C38:  ANDWF  00,F
00C3A:  BCF    xD6.2
00C3C:  BTFSC  00.0
00C3E:  BSF    xD6.2
....................    OutputBoth.B4 = EEpDat >> 3;
00C40:  RRCF   3A,W
00C42:  MOVWF  00
00C44:  RRCF   00,F
00C46:  RRCF   00,F
00C48:  MOVLW  1F
00C4A:  ANDWF  00,F
00C4C:  BCF    xD6.3
00C4E:  BTFSC  00.0
00C50:  BSF    xD6.3
....................    OutputBoth.B5 = EEpDat >> 4;
00C52:  SWAPF  3A,W
00C54:  MOVWF  00
00C56:  MOVLW  0F
00C58:  ANDWF  00,F
00C5A:  BCF    xD6.4
00C5C:  BTFSC  00.0
00C5E:  BSF    xD6.4
....................    OutputBoth.B6 = EEpDat >> 5;
00C60:  SWAPF  3A,W
00C62:  MOVWF  00
00C64:  RRCF   00,F
00C66:  MOVLW  07
00C68:  ANDWF  00,F
00C6A:  BCF    xD6.5
00C6C:  BTFSC  00.0
00C6E:  BSF    xD6.5
....................    OutputBoth.B7 = EEpDat >> 6;
00C70:  SWAPF  3A,W
00C72:  MOVWF  00
00C74:  RRCF   00,F
00C76:  RRCF   00,F
00C78:  MOVLW  03
00C7A:  ANDWF  00,F
00C7C:  BCF    xD6.6
00C7E:  BTFSC  00.0
00C80:  BSF    xD6.6
....................    OutputBoth.B8 = EEpDat >> 7;
00C82:  CLRF   00
00C84:  BTFSC  3A.7
00C86:  BSF    00.0
00C88:  BCF    xD6.7
00C8A:  BTFSC  00.0
00C8C:  BSF    xD6.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00C8E:  MOVFF  FF2,B58
00C92:  BCF    FF2.7
00C94:  CLRF   FAA
00C96:  MOVLW  0B
00C98:  MOVWF  FA9
00C9A:  BCF    FA6.6
00C9C:  BCF    FA6.7
00C9E:  BSF    FA6.0
00CA0:  MOVF   FA8,W
00CA2:  MOVLB  B
00CA4:  BTFSC  x58.7
00CA6:  BSF    FF2.7
00CA8:  MOVWF  3A
....................    OutputBoth9_16 = EEpDat;
00CAA:  MOVFF  3A,45
.................... 
....................    OutputBoth.B9 = EEpDat;
00CAE:  MOVLB  A
00CB0:  BCF    xD7.0
00CB2:  BTFSC  3A.0
00CB4:  BSF    xD7.0
....................    OutputBoth.B10 = EEpDat >> 1;
00CB6:  BCF    FD8.0
00CB8:  RRCF   3A,W
00CBA:  BCF    xD7.1
00CBC:  BTFSC  FE8.0
00CBE:  BSF    xD7.1
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00CC0:  MOVFF  FF2,B58
00CC4:  BCF    FF2.7
00CC6:  CLRF   FAA
00CC8:  MOVLW  0D
00CCA:  MOVWF  FA9
00CCC:  BCF    FA6.6
00CCE:  BCF    FA6.7
00CD0:  BSF    FA6.0
00CD2:  MOVF   FA8,W
00CD4:  MOVLB  B
00CD6:  BTFSC  x58.7
00CD8:  BSF    FF2.7
00CDA:  MOVWF  3A
....................    Alarm_Indicator1_8 = EEpDat;
00CDC:  MOVFF  3A,47
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00CE0:  MOVLB  A
00CE2:  BCF    xD8.0
00CE4:  BTFSC  3A.0
00CE6:  BSF    xD8.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00CE8:  BCF    FD8.0
00CEA:  RRCF   3A,W
00CEC:  BCF    xD8.1
00CEE:  BTFSC  FE8.0
00CF0:  BSF    xD8.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00CF2:  RRCF   3A,W
00CF4:  MOVWF  00
00CF6:  RRCF   00,F
00CF8:  MOVLW  3F
00CFA:  ANDWF  00,F
00CFC:  BCF    xD8.2
00CFE:  BTFSC  00.0
00D00:  BSF    xD8.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00D02:  RRCF   3A,W
00D04:  MOVWF  00
00D06:  RRCF   00,F
00D08:  RRCF   00,F
00D0A:  MOVLW  1F
00D0C:  ANDWF  00,F
00D0E:  BCF    xD8.3
00D10:  BTFSC  00.0
00D12:  BSF    xD8.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00D14:  SWAPF  3A,W
00D16:  MOVWF  00
00D18:  MOVLW  0F
00D1A:  ANDWF  00,F
00D1C:  BCF    xD8.4
00D1E:  BTFSC  00.0
00D20:  BSF    xD8.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00D22:  SWAPF  3A,W
00D24:  MOVWF  00
00D26:  RRCF   00,F
00D28:  MOVLW  07
00D2A:  ANDWF  00,F
00D2C:  BCF    xD8.5
00D2E:  BTFSC  00.0
00D30:  BSF    xD8.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00D32:  SWAPF  3A,W
00D34:  MOVWF  00
00D36:  RRCF   00,F
00D38:  RRCF   00,F
00D3A:  MOVLW  03
00D3C:  ANDWF  00,F
00D3E:  BCF    xD8.6
00D40:  BTFSC  00.0
00D42:  BSF    xD8.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00D44:  CLRF   00
00D46:  BTFSC  3A.7
00D48:  BSF    00.0
00D4A:  BCF    xD8.7
00D4C:  BTFSC  00.0
00D4E:  BSF    xD8.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
00D50:  MOVFF  FF2,B58
00D54:  BCF    FF2.7
00D56:  CLRF   FAA
00D58:  MOVLW  0E
00D5A:  MOVWF  FA9
00D5C:  BCF    FA6.6
00D5E:  BCF    FA6.7
00D60:  BSF    FA6.0
00D62:  MOVF   FA8,W
00D64:  MOVLB  B
00D66:  BTFSC  x58.7
00D68:  BSF    FF2.7
00D6A:  MOVWF  3A
....................    Alarm_Indicator9_16 = EEpDat;
00D6C:  MOVFF  3A,48
.................... 
....................    AlarmIndicator.B9 = EEpDat;
00D70:  MOVLB  A
00D72:  BCF    xD9.0
00D74:  BTFSC  3A.0
00D76:  BSF    xD9.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
00D78:  BCF    FD8.0
00D7A:  RRCF   3A,W
00D7C:  BCF    xD9.1
00D7E:  BTFSC  FE8.0
00D80:  BSF    xD9.1
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00D82:  MOVFF  FF2,B58
00D86:  BCF    FF2.7
00D88:  CLRF   FAA
00D8A:  MOVLW  10
00D8C:  MOVWF  FA9
00D8E:  BCF    FA6.6
00D90:  BCF    FA6.7
00D92:  BSF    FA6.0
00D94:  MOVF   FA8,W
00D96:  MOVLB  B
00D98:  BTFSC  x58.7
00D9A:  BSF    FF2.7
00D9C:  MOVWF  3A
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00D9E:  MOVLB  A
00DA0:  BCF    xE4.0
00DA2:  BTFSC  3A.0
00DA4:  BSF    xE4.0
....................    RED_Colour.B2 = EEpDat >> 1;
00DA6:  BCF    FD8.0
00DA8:  RRCF   3A,W
00DAA:  BCF    xE4.1
00DAC:  BTFSC  FE8.0
00DAE:  BSF    xE4.1
....................    RED_Colour.B3 = EEpDat >> 2;
00DB0:  RRCF   3A,W
00DB2:  MOVWF  00
00DB4:  RRCF   00,F
00DB6:  MOVLW  3F
00DB8:  ANDWF  00,F
00DBA:  BCF    xE4.2
00DBC:  BTFSC  00.0
00DBE:  BSF    xE4.2
....................    RED_Colour.B4 = EEpDat >> 3;
00DC0:  RRCF   3A,W
00DC2:  MOVWF  00
00DC4:  RRCF   00,F
00DC6:  RRCF   00,F
00DC8:  MOVLW  1F
00DCA:  ANDWF  00,F
00DCC:  BCF    xE4.3
00DCE:  BTFSC  00.0
00DD0:  BSF    xE4.3
....................    RED_Colour.B5 = EEpDat >> 4;
00DD2:  SWAPF  3A,W
00DD4:  MOVWF  00
00DD6:  MOVLW  0F
00DD8:  ANDWF  00,F
00DDA:  BCF    xE4.4
00DDC:  BTFSC  00.0
00DDE:  BSF    xE4.4
....................    RED_Colour.B6 = EEpDat >> 5;
00DE0:  SWAPF  3A,W
00DE2:  MOVWF  00
00DE4:  RRCF   00,F
00DE6:  MOVLW  07
00DE8:  ANDWF  00,F
00DEA:  BCF    xE4.5
00DEC:  BTFSC  00.0
00DEE:  BSF    xE4.5
....................    RED_Colour.B7 = EEpDat >> 6;
00DF0:  SWAPF  3A,W
00DF2:  MOVWF  00
00DF4:  RRCF   00,F
00DF6:  RRCF   00,F
00DF8:  MOVLW  03
00DFA:  ANDWF  00,F
00DFC:  BCF    xE4.6
00DFE:  BTFSC  00.0
00E00:  BSF    xE4.6
....................    RED_Colour.B8 = EEpDat >> 7;
00E02:  CLRF   00
00E04:  BTFSC  3A.7
00E06:  BSF    00.0
00E08:  BCF    xE4.7
00E0A:  BTFSC  00.0
00E0C:  BSF    xE4.7
....................    
....................    EEpDat = read_eeprom(0x11);
00E0E:  MOVFF  FF2,B58
00E12:  BCF    FF2.7
00E14:  CLRF   FAA
00E16:  MOVLW  11
00E18:  MOVWF  FA9
00E1A:  BCF    FA6.6
00E1C:  BCF    FA6.7
00E1E:  BSF    FA6.0
00E20:  MOVF   FA8,W
00E22:  MOVLB  B
00E24:  BTFSC  x58.7
00E26:  BSF    FF2.7
00E28:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
00E2A:  MOVLB  A
00E2C:  BCF    xE5.0
00E2E:  BTFSC  3A.0
00E30:  BSF    xE5.0
....................    RED_Colour.B10 = EEpDat >> 1;
00E32:  BCF    FD8.0
00E34:  RRCF   3A,W
00E36:  BCF    xE5.1
00E38:  BTFSC  FE8.0
00E3A:  BSF    xE5.1
....................    
....................    EEpDat = read_eeprom(0x14);
00E3C:  MOVFF  FF2,B58
00E40:  BCF    FF2.7
00E42:  CLRF   FAA
00E44:  MOVLW  14
00E46:  MOVWF  FA9
00E48:  BCF    FA6.6
00E4A:  BCF    FA6.7
00E4C:  BSF    FA6.0
00E4E:  MOVF   FA8,W
00E50:  MOVLB  B
00E52:  BTFSC  x58.7
00E54:  BSF    FF2.7
00E56:  MOVWF  3A
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00E58:  MOVLB  A
00E5A:  BCF    xE6.0
00E5C:  BTFSC  3A.0
00E5E:  BSF    xE6.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00E60:  BCF    FD8.0
00E62:  RRCF   3A,W
00E64:  BCF    xE6.1
00E66:  BTFSC  FE8.0
00E68:  BSF    xE6.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00E6A:  RRCF   3A,W
00E6C:  MOVWF  00
00E6E:  RRCF   00,F
00E70:  MOVLW  3F
00E72:  ANDWF  00,F
00E74:  BCF    xE6.2
00E76:  BTFSC  00.0
00E78:  BSF    xE6.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00E7A:  RRCF   3A,W
00E7C:  MOVWF  00
00E7E:  RRCF   00,F
00E80:  RRCF   00,F
00E82:  MOVLW  1F
00E84:  ANDWF  00,F
00E86:  BCF    xE6.3
00E88:  BTFSC  00.0
00E8A:  BSF    xE6.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00E8C:  SWAPF  3A,W
00E8E:  MOVWF  00
00E90:  MOVLW  0F
00E92:  ANDWF  00,F
00E94:  BCF    xE6.4
00E96:  BTFSC  00.0
00E98:  BSF    xE6.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00E9A:  SWAPF  3A,W
00E9C:  MOVWF  00
00E9E:  RRCF   00,F
00EA0:  MOVLW  07
00EA2:  ANDWF  00,F
00EA4:  BCF    xE6.5
00EA6:  BTFSC  00.0
00EA8:  BSF    xE6.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00EAA:  SWAPF  3A,W
00EAC:  MOVWF  00
00EAE:  RRCF   00,F
00EB0:  RRCF   00,F
00EB2:  MOVLW  03
00EB4:  ANDWF  00,F
00EB6:  BCF    xE6.6
00EB8:  BTFSC  00.0
00EBA:  BSF    xE6.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00EBC:  CLRF   00
00EBE:  BTFSC  3A.7
00EC0:  BSF    00.0
00EC2:  BCF    xE6.7
00EC4:  BTFSC  00.0
00EC6:  BSF    xE6.7
....................    
....................    EEpDat = read_eeprom(0x15);
00EC8:  MOVFF  FF2,B58
00ECC:  BCF    FF2.7
00ECE:  CLRF   FAA
00ED0:  MOVLW  15
00ED2:  MOVWF  FA9
00ED4:  BCF    FA6.6
00ED6:  BCF    FA6.7
00ED8:  BSF    FA6.0
00EDA:  MOVF   FA8,W
00EDC:  MOVLB  B
00EDE:  BTFSC  x58.7
00EE0:  BSF    FF2.7
00EE2:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
00EE4:  MOVLB  A
00EE6:  BCF    xE7.0
00EE8:  BTFSC  3A.0
00EEA:  BSF    xE7.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
00EEC:  BCF    FD8.0
00EEE:  RRCF   3A,W
00EF0:  BCF    xE7.1
00EF2:  BTFSC  FE8.0
00EF4:  BSF    xE7.1
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00EF6:  MOVFF  FF2,B58
00EFA:  BCF    FF2.7
00EFC:  CLRF   FAA
00EFE:  MOVLW  18
00F00:  MOVWF  FA9
00F02:  BCF    FA6.6
00F04:  BCF    FA6.7
00F06:  BSF    FA6.0
00F08:  MOVF   FA8,W
00F0A:  MOVLB  B
00F0C:  BTFSC  x58.7
00F0E:  BSF    FF2.7
00F10:  MOVWF  5E
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00F12:  MOVFF  FF2,B58
00F16:  BCF    FF2.7
00F18:  CLRF   FAA
00F1A:  MOVLW  19
00F1C:  MOVWF  FA9
00F1E:  BCF    FA6.6
00F20:  BCF    FA6.7
00F22:  BSF    FA6.0
00F24:  MOVF   FA8,W
00F26:  BTFSC  x58.7
00F28:  BSF    FF2.7
00F2A:  MOVWF  5F
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
00F2C:  MOVFF  FF2,B58
00F30:  BCF    FF2.7
00F32:  CLRF   FAA
00F34:  MOVLW  1A
00F36:  MOVWF  FA9
00F38:  BCF    FA6.6
00F3A:  BCF    FA6.7
00F3C:  BSF    FA6.0
00F3E:  MOVF   FA8,W
00F40:  BTFSC  x58.7
00F42:  BSF    FF2.7
00F44:  MOVLB  0
00F46:  MOVWF  x60
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00F48:  MOVFF  FF2,B58
00F4C:  BCF    FF2.7
00F4E:  CLRF   FAA
00F50:  MOVLW  1B
00F52:  MOVWF  FA9
00F54:  BCF    FA6.6
00F56:  BCF    FA6.7
00F58:  BSF    FA6.0
00F5A:  MOVF   FA8,W
00F5C:  MOVLB  B
00F5E:  BTFSC  x58.7
00F60:  BSF    FF2.7
00F62:  MOVLB  0
00F64:  MOVWF  x61
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
00F66:  MOVFF  FF2,B58
00F6A:  BCF    FF2.7
00F6C:  CLRF   FAA
00F6E:  MOVLW  1C
00F70:  MOVWF  FA9
00F72:  BCF    FA6.6
00F74:  BCF    FA6.7
00F76:  BSF    FA6.0
00F78:  MOVF   FA8,W
00F7A:  MOVLB  B
00F7C:  BTFSC  x58.7
00F7E:  BSF    FF2.7
00F80:  CLRF   x1B
00F82:  MOVWF  x1A
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00F84:  MOVFF  FF2,B58
00F88:  BCF    FF2.7
00F8A:  CLRF   FAA
00F8C:  MOVLW  1D
00F8E:  MOVWF  FA9
00F90:  BCF    FA6.6
00F92:  BCF    FA6.7
00F94:  BSF    FA6.0
00F96:  MOVF   FA8,W
00F98:  BTFSC  x58.7
00F9A:  BSF    FF2.7
00F9C:  MOVLB  0
00F9E:  MOVWF  x6C
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00FA0:  MOVFF  FF2,B58
00FA4:  BCF    FF2.7
00FA6:  CLRF   FAA
00FA8:  MOVLW  1E
00FAA:  MOVWF  FA9
00FAC:  BCF    FA6.6
00FAE:  BCF    FA6.7
00FB0:  BSF    FA6.0
00FB2:  MOVF   FA8,W
00FB4:  MOVLB  B
00FB6:  BTFSC  x58.7
00FB8:  BSF    FF2.7
00FBA:  CLRF   x1D
00FBC:  MOVWF  x1C
....................    FaultDelayTime[2] = read_eeprom(0x1F);
00FBE:  MOVFF  FF2,B58
00FC2:  BCF    FF2.7
00FC4:  CLRF   FAA
00FC6:  MOVLW  1F
00FC8:  MOVWF  FA9
00FCA:  BCF    FA6.6
00FCC:  BCF    FA6.7
00FCE:  BSF    FA6.0
00FD0:  MOVF   FA8,W
00FD2:  BTFSC  x58.7
00FD4:  BSF    FF2.7
00FD6:  CLRF   x1F
00FD8:  MOVWF  x1E
....................    FaultDelayTime[3] = read_eeprom(0x20);
00FDA:  MOVFF  FF2,B58
00FDE:  BCF    FF2.7
00FE0:  CLRF   FAA
00FE2:  MOVLW  20
00FE4:  MOVWF  FA9
00FE6:  BCF    FA6.6
00FE8:  BCF    FA6.7
00FEA:  BSF    FA6.0
00FEC:  MOVF   FA8,W
00FEE:  BTFSC  x58.7
00FF0:  BSF    FF2.7
00FF2:  CLRF   x21
00FF4:  MOVWF  x20
....................    FaultDelayTime[4] = read_eeprom(0x21);
00FF6:  MOVFF  FF2,B58
00FFA:  BCF    FF2.7
00FFC:  CLRF   FAA
00FFE:  MOVLW  21
01000:  MOVWF  FA9
01002:  BCF    FA6.6
01004:  BCF    FA6.7
01006:  BSF    FA6.0
01008:  MOVF   FA8,W
0100A:  BTFSC  x58.7
0100C:  BSF    FF2.7
0100E:  CLRF   x23
01010:  MOVWF  x22
....................    FaultDelayTime[5] = read_eeprom(0x22);
01012:  MOVFF  FF2,B58
01016:  BCF    FF2.7
01018:  CLRF   FAA
0101A:  MOVLW  22
0101C:  MOVWF  FA9
0101E:  BCF    FA6.6
01020:  BCF    FA6.7
01022:  BSF    FA6.0
01024:  MOVF   FA8,W
01026:  BTFSC  x58.7
01028:  BSF    FF2.7
0102A:  CLRF   x25
0102C:  MOVWF  x24
....................    FaultDelayTime[6] = read_eeprom(0x23);
0102E:  MOVFF  FF2,B58
01032:  BCF    FF2.7
01034:  CLRF   FAA
01036:  MOVLW  23
01038:  MOVWF  FA9
0103A:  BCF    FA6.6
0103C:  BCF    FA6.7
0103E:  BSF    FA6.0
01040:  MOVF   FA8,W
01042:  BTFSC  x58.7
01044:  BSF    FF2.7
01046:  CLRF   x27
01048:  MOVWF  x26
....................    FaultDelayTime[7] = read_eeprom(0x24);
0104A:  MOVFF  FF2,B58
0104E:  BCF    FF2.7
01050:  CLRF   FAA
01052:  MOVLW  24
01054:  MOVWF  FA9
01056:  BCF    FA6.6
01058:  BCF    FA6.7
0105A:  BSF    FA6.0
0105C:  MOVF   FA8,W
0105E:  BTFSC  x58.7
01060:  BSF    FF2.7
01062:  CLRF   x29
01064:  MOVWF  x28
....................    FaultDelayTime[8] = read_eeprom(0x25);
01066:  MOVFF  FF2,B58
0106A:  BCF    FF2.7
0106C:  CLRF   FAA
0106E:  MOVLW  25
01070:  MOVWF  FA9
01072:  BCF    FA6.6
01074:  BCF    FA6.7
01076:  BSF    FA6.0
01078:  MOVF   FA8,W
0107A:  BTFSC  x58.7
0107C:  BSF    FF2.7
0107E:  CLRF   x2B
01080:  MOVWF  x2A
....................    FaultDelayTime[9] = read_eeprom(0x26);
01082:  MOVFF  FF2,B58
01086:  BCF    FF2.7
01088:  CLRF   FAA
0108A:  MOVLW  26
0108C:  MOVWF  FA9
0108E:  BCF    FA6.6
01090:  BCF    FA6.7
01092:  BSF    FA6.0
01094:  MOVF   FA8,W
01096:  BTFSC  x58.7
01098:  BSF    FF2.7
0109A:  CLRF   x2D
0109C:  MOVWF  x2C
....................    FaultDelayTime[10] = read_eeprom(0x27);
0109E:  MOVFF  FF2,B58
010A2:  BCF    FF2.7
010A4:  CLRF   FAA
010A6:  MOVLW  27
010A8:  MOVWF  FA9
010AA:  BCF    FA6.6
010AC:  BCF    FA6.7
010AE:  BSF    FA6.0
010B0:  MOVF   FA8,W
010B2:  BTFSC  x58.7
010B4:  BSF    FF2.7
010B6:  CLRF   x2F
010B8:  MOVWF  x2E
....................    FaultDelayTime[11] = read_eeprom(0x28);
010BA:  MOVFF  FF2,B58
010BE:  BCF    FF2.7
010C0:  CLRF   FAA
010C2:  MOVLW  28
010C4:  MOVWF  FA9
010C6:  BCF    FA6.6
010C8:  BCF    FA6.7
010CA:  BSF    FA6.0
010CC:  MOVF   FA8,W
010CE:  BTFSC  x58.7
010D0:  BSF    FF2.7
010D2:  CLRF   x31
010D4:  MOVWF  x30
....................    FaultDelayTime[12] = read_eeprom(0x29);
010D6:  MOVFF  FF2,B58
010DA:  BCF    FF2.7
010DC:  CLRF   FAA
010DE:  MOVLW  29
010E0:  MOVWF  FA9
010E2:  BCF    FA6.6
010E4:  BCF    FA6.7
010E6:  BSF    FA6.0
010E8:  MOVF   FA8,W
010EA:  BTFSC  x58.7
010EC:  BSF    FF2.7
010EE:  CLRF   x33
010F0:  MOVWF  x32
....................    FaultDelayTime[13] = read_eeprom(0x2A);
010F2:  MOVFF  FF2,B58
010F6:  BCF    FF2.7
010F8:  CLRF   FAA
010FA:  MOVLW  2A
010FC:  MOVWF  FA9
010FE:  BCF    FA6.6
01100:  BCF    FA6.7
01102:  BSF    FA6.0
01104:  MOVF   FA8,W
01106:  BTFSC  x58.7
01108:  BSF    FF2.7
0110A:  CLRF   x35
0110C:  MOVWF  x34
....................    FaultDelayTime[14] = read_eeprom(0x2B);
0110E:  MOVFF  FF2,B58
01112:  BCF    FF2.7
01114:  CLRF   FAA
01116:  MOVLW  2B
01118:  MOVWF  FA9
0111A:  BCF    FA6.6
0111C:  BCF    FA6.7
0111E:  BSF    FA6.0
01120:  MOVF   FA8,W
01122:  BTFSC  x58.7
01124:  BSF    FF2.7
01126:  CLRF   x37
01128:  MOVWF  x36
....................    FaultDelayTime[15] = read_eeprom(0x2C);
0112A:  MOVFF  FF2,B58
0112E:  BCF    FF2.7
01130:  CLRF   FAA
01132:  MOVLW  2C
01134:  MOVWF  FA9
01136:  BCF    FA6.6
01138:  BCF    FA6.7
0113A:  BSF    FA6.0
0113C:  MOVF   FA8,W
0113E:  BTFSC  x58.7
01140:  BSF    FF2.7
01142:  CLRF   x39
01144:  MOVWF  x38
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01146:  MOVFF  FF2,B58
0114A:  BCF    FF2.7
0114C:  CLRF   FAA
0114E:  MOVLW  2D
01150:  MOVWF  FA9
01152:  BCF    FA6.6
01154:  BCF    FA6.7
01156:  BSF    FA6.0
01158:  MOVF   FA8,W
0115A:  BTFSC  x58.7
0115C:  BSF    FF2.7
0115E:  CLRF   x3B
01160:  MOVWF  x3A
....................    FaultDelayTime[17] = read_eeprom(0x2E);
01162:  MOVFF  FF2,B58
01166:  BCF    FF2.7
01168:  CLRF   FAA
0116A:  MOVLW  2E
0116C:  MOVWF  FA9
0116E:  BCF    FA6.6
01170:  BCF    FA6.7
01172:  BSF    FA6.0
01174:  MOVF   FA8,W
01176:  BTFSC  x58.7
01178:  BSF    FF2.7
0117A:  CLRF   x3D
0117C:  MOVWF  x3C
....................    FaultDelayTime[18] = read_eeprom(0x2F);
0117E:  MOVFF  FF2,B58
01182:  BCF    FF2.7
01184:  CLRF   FAA
01186:  MOVLW  2F
01188:  MOVWF  FA9
0118A:  BCF    FA6.6
0118C:  BCF    FA6.7
0118E:  BSF    FA6.0
01190:  MOVF   FA8,W
01192:  BTFSC  x58.7
01194:  BSF    FF2.7
01196:  CLRF   x3F
01198:  MOVWF  x3E
....................    FaultDelayTime[19] = read_eeprom(0x30);
0119A:  MOVFF  FF2,B58
0119E:  BCF    FF2.7
011A0:  CLRF   FAA
011A2:  MOVLW  30
011A4:  MOVWF  FA9
011A6:  BCF    FA6.6
011A8:  BCF    FA6.7
011AA:  BSF    FA6.0
011AC:  MOVF   FA8,W
011AE:  BTFSC  x58.7
011B0:  BSF    FF2.7
011B2:  CLRF   x41
011B4:  MOVWF  x40
....................    FaultDelayTime[20] = read_eeprom(0x31);
011B6:  MOVFF  FF2,B58
011BA:  BCF    FF2.7
011BC:  CLRF   FAA
011BE:  MOVLW  31
011C0:  MOVWF  FA9
011C2:  BCF    FA6.6
011C4:  BCF    FA6.7
011C6:  BSF    FA6.0
011C8:  MOVF   FA8,W
011CA:  BTFSC  x58.7
011CC:  BSF    FF2.7
011CE:  CLRF   x43
011D0:  MOVWF  x42
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
011D2:  CLRF   x4E
....................    for(; ; a++)
....................    {
....................       restart_wdt();
011D4:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
011D6:  MOVLW  32
011D8:  ADDWF  x4E,W
011DA:  MOVWF  x58
011DC:  MOVFF  FF2,B59
011E0:  BCF    FF2.7
011E2:  CLRF   FAA
011E4:  MOVFF  B58,FA9
011E8:  BCF    FA6.6
011EA:  BCF    FA6.7
011EC:  BSF    FA6.0
011EE:  MOVF   FA8,W
011F0:  BTFSC  x59.7
011F2:  BSF    FF2.7
011F4:  MOVWF  x4F
....................       if((phonenum == 0x0D) || (a > 15))
011F6:  MOVF   x4F,W
011F8:  SUBLW  0D
011FA:  BZ    1202
011FC:  MOVF   x4E,W
011FE:  SUBLW  0F
01200:  BC    124A
....................       {
....................          sms_phonenumber[a] =  '\0';
01202:  CLRF   03
01204:  MOVF   x4E,W
01206:  ADDLW  7D
01208:  MOVWF  FE9
0120A:  MOVLW  09
0120C:  ADDWFC 03,W
0120E:  MOVWF  FEA
01210:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
01212:  MOVLW  32
01214:  ADDWF  x4E,W
01216:  MOVWF  x58
01218:  MOVF   FF2,W
0121A:  MOVWF  00
0121C:  BCF    FF2.7
0121E:  CLRF   FAA
01220:  MOVFF  B58,FA9
01224:  MOVFF  B4F,FA8
01228:  BCF    FA6.6
0122A:  BCF    FA6.7
0122C:  BSF    FA6.2
0122E:  MOVLB  F
01230:  MOVLW  55
01232:  MOVWF  FA7
01234:  MOVLW  AA
01236:  MOVWF  FA7
01238:  BSF    FA6.1
0123A:  BTFSC  FA6.1
0123C:  BRA    123A
0123E:  BCF    FA6.2
01240:  MOVF   00,W
01242:  IORWF  FF2,F
....................          break;
01244:  BRA    1266
....................       }
01246:  BRA    125E
01248:  MOVLB  B
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
0124A:  CLRF   03
0124C:  MOVF   x4E,W
0124E:  ADDLW  7D
01250:  MOVWF  FE9
01252:  MOVLW  09
01254:  ADDWFC 03,W
01256:  MOVWF  FEA
01258:  MOVFF  B4F,FEF
0125C:  MOVLB  F
....................       }
0125E:  MOVLB  B
01260:  INCF   x4E,F
01262:  BRA    11D4
01264:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
01266:  MOVLB  B
01268:  CLRF   x51
0126A:  MOVLW  03
0126C:  MOVWF  x50
0126E:  CLRF   x53
01270:  CLRF   x52
01272:  CLRF   x55
01274:  CLRF   x54
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01276:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01278:  MOVLW  5D
0127A:  ADDWF  x50,W
0127C:  MOVWF  x58
0127E:  MOVLW  00
01280:  ADDWFC x51,W
01282:  MOVWF  x59
01284:  MOVFF  FF2,B5A
01288:  BCF    FF2.7
0128A:  MOVFF  B59,FAA
0128E:  MOVFF  B58,FA9
01292:  BCF    FA6.6
01294:  BCF    FA6.7
01296:  BSF    FA6.0
01298:  MOVF   FA8,W
0129A:  BTFSC  x5A.7
0129C:  BSF    FF2.7
0129E:  CLRF   x57
012A0:  MOVWF  x56
....................       
....................       if((buff == 0x0D)|| (j>41))
012A2:  MOVF   x56,W
012A4:  SUBLW  0D
012A6:  BNZ   12AC
012A8:  MOVF   x57,F
012AA:  BZ    12B6
012AC:  MOVF   x53,F
012AE:  BNZ   12B6
012B0:  MOVF   x52,W
012B2:  SUBLW  29
012B4:  BC    12C8
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
012B6:  MOVLW  8C
012B8:  ADDWF  x52,W
012BA:  MOVWF  FE9
012BC:  MOVLW  09
012BE:  ADDWFC x53,W
012C0:  MOVWF  FEA
012C2:  CLRF   FEF
....................          break;
012C4:  BRA    12EC
....................       }
012C6:  BRA    12D8
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
012C8:  MOVLW  8C
012CA:  ADDWF  x52,W
012CC:  MOVWF  FE9
012CE:  MOVLW  09
012D0:  ADDWFC x53,W
012D2:  MOVWF  FEA
012D4:  MOVFF  B56,FEF
....................       }
012D8:  MOVFF  B51,03
012DC:  MOVF   x50,W
012DE:  INCF   x50,F
012E0:  BTFSC  FD8.2
012E2:  INCF   x51,F
012E4:  INCF   x52,F
012E6:  BTFSC  FD8.2
012E8:  INCF   x53,F
012EA:  BRA    1276
....................    }
....................    
....................    i++;
012EC:  INCF   x50,F
012EE:  BTFSC  FD8.2
012F0:  INCF   x51,F
....................    j=0;
012F2:  CLRF   x53
012F4:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
012F6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
012F8:  MOVLW  5D
012FA:  ADDWF  x50,W
012FC:  MOVWF  x58
012FE:  MOVLW  00
01300:  ADDWFC x51,W
01302:  MOVWF  x59
01304:  MOVFF  FF2,B5A
01308:  BCF    FF2.7
0130A:  MOVFF  B59,FAA
0130E:  MOVFF  B58,FA9
01312:  BCF    FA6.6
01314:  BCF    FA6.7
01316:  BSF    FA6.0
01318:  MOVF   FA8,W
0131A:  BTFSC  x5A.7
0131C:  BSF    FF2.7
0131E:  CLRF   x57
01320:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01322:  MOVF   x56,W
01324:  SUBLW  0D
01326:  BNZ   132C
01328:  MOVF   x57,F
0132A:  BZ    1336
0132C:  MOVF   x53,F
0132E:  BNZ   1336
01330:  MOVF   x52,W
01332:  SUBLW  29
01334:  BC    1348
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01336:  MOVLW  AC
01338:  ADDWF  x52,W
0133A:  MOVWF  FE9
0133C:  MOVLW  09
0133E:  ADDWFC x53,W
01340:  MOVWF  FEA
01342:  CLRF   FEF
....................          break;
01344:  BRA    136C
....................       }
01346:  BRA    1358
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
01348:  MOVLW  AC
0134A:  ADDWF  x52,W
0134C:  MOVWF  FE9
0134E:  MOVLW  09
01350:  ADDWFC x53,W
01352:  MOVWF  FEA
01354:  MOVFF  B56,FEF
....................          
....................       }
01358:  MOVFF  B51,03
0135C:  MOVF   x50,W
0135E:  INCF   x50,F
01360:  BTFSC  FD8.2
01362:  INCF   x51,F
01364:  INCF   x52,F
01366:  BTFSC  FD8.2
01368:  INCF   x53,F
0136A:  BRA    12F6
....................    }
....................    
....................    i++;
0136C:  INCF   x50,F
0136E:  BTFSC  FD8.2
01370:  INCF   x51,F
....................    j=0;
01372:  CLRF   x53
01374:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01376:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01378:  MOVLW  5D
0137A:  ADDWF  x50,W
0137C:  MOVWF  x58
0137E:  MOVLW  00
01380:  ADDWFC x51,W
01382:  MOVWF  x59
01384:  MOVFF  FF2,B5A
01388:  BCF    FF2.7
0138A:  MOVFF  B59,FAA
0138E:  MOVFF  B58,FA9
01392:  BCF    FA6.6
01394:  BCF    FA6.7
01396:  BSF    FA6.0
01398:  MOVF   FA8,W
0139A:  BTFSC  x5A.7
0139C:  BSF    FF2.7
0139E:  CLRF   x57
013A0:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
013A2:  MOVF   x56,W
013A4:  SUBLW  0D
013A6:  BNZ   13AC
013A8:  MOVF   x57,F
013AA:  BZ    13B6
013AC:  MOVF   x53,F
013AE:  BNZ   13B6
013B0:  MOVF   x52,W
013B2:  SUBLW  29
013B4:  BC    13C8
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
013B6:  MOVLW  CC
013B8:  ADDWF  x52,W
013BA:  MOVWF  FE9
013BC:  MOVLW  09
013BE:  ADDWFC x53,W
013C0:  MOVWF  FEA
013C2:  CLRF   FEF
....................          break;
013C4:  BRA    13EC
....................       }
013C6:  BRA    13D8
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
013C8:  MOVLW  CC
013CA:  ADDWF  x52,W
013CC:  MOVWF  FE9
013CE:  MOVLW  09
013D0:  ADDWFC x53,W
013D2:  MOVWF  FEA
013D4:  MOVFF  B56,FEF
....................          
....................       }
013D8:  MOVFF  B51,03
013DC:  MOVF   x50,W
013DE:  INCF   x50,F
013E0:  BTFSC  FD8.2
013E2:  INCF   x51,F
013E4:  INCF   x52,F
013E6:  BTFSC  FD8.2
013E8:  INCF   x53,F
013EA:  BRA    1376
....................    }
....................    
....................    i++;
013EC:  INCF   x50,F
013EE:  BTFSC  FD8.2
013F0:  INCF   x51,F
....................    j=0;
013F2:  CLRF   x53
013F4:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
013F6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
013F8:  MOVLW  5D
013FA:  ADDWF  x50,W
013FC:  MOVWF  x58
013FE:  MOVLW  00
01400:  ADDWFC x51,W
01402:  MOVWF  x59
01404:  MOVFF  FF2,B5A
01408:  BCF    FF2.7
0140A:  MOVFF  B59,FAA
0140E:  MOVFF  B58,FA9
01412:  BCF    FA6.6
01414:  BCF    FA6.7
01416:  BSF    FA6.0
01418:  MOVF   FA8,W
0141A:  BTFSC  x5A.7
0141C:  BSF    FF2.7
0141E:  CLRF   x57
01420:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01422:  MOVF   x56,W
01424:  SUBLW  0D
01426:  BNZ   142C
01428:  MOVF   x57,F
0142A:  BZ    1436
0142C:  MOVF   x53,F
0142E:  BNZ   1436
01430:  MOVF   x52,W
01432:  SUBLW  29
01434:  BC    1448
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01436:  MOVLW  EC
01438:  ADDWF  x52,W
0143A:  MOVWF  FE9
0143C:  MOVLW  09
0143E:  ADDWFC x53,W
01440:  MOVWF  FEA
01442:  CLRF   FEF
....................          break;
01444:  BRA    146C
....................       }
01446:  BRA    1458
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
01448:  MOVLW  EC
0144A:  ADDWF  x52,W
0144C:  MOVWF  FE9
0144E:  MOVLW  09
01450:  ADDWFC x53,W
01452:  MOVWF  FEA
01454:  MOVFF  B56,FEF
....................          
....................       }
01458:  MOVFF  B51,03
0145C:  MOVF   x50,W
0145E:  INCF   x50,F
01460:  BTFSC  FD8.2
01462:  INCF   x51,F
01464:  INCF   x52,F
01466:  BTFSC  FD8.2
01468:  INCF   x53,F
0146A:  BRA    13F6
....................    }
....................    
....................    i++;
0146C:  INCF   x50,F
0146E:  BTFSC  FD8.2
01470:  INCF   x51,F
....................    j=0;
01472:  CLRF   x53
01474:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01476:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01478:  MOVLW  5D
0147A:  ADDWF  x50,W
0147C:  MOVWF  x58
0147E:  MOVLW  00
01480:  ADDWFC x51,W
01482:  MOVWF  x59
01484:  MOVFF  FF2,B5A
01488:  BCF    FF2.7
0148A:  MOVFF  B59,FAA
0148E:  MOVFF  B58,FA9
01492:  BCF    FA6.6
01494:  BCF    FA6.7
01496:  BSF    FA6.0
01498:  MOVF   FA8,W
0149A:  BTFSC  x5A.7
0149C:  BSF    FF2.7
0149E:  CLRF   x57
014A0:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
014A2:  MOVF   x56,W
014A4:  SUBLW  0D
014A6:  BNZ   14AC
014A8:  MOVF   x57,F
014AA:  BZ    14B6
014AC:  MOVF   x53,F
014AE:  BNZ   14B6
014B0:  MOVF   x52,W
014B2:  SUBLW  29
014B4:  BC    14C8
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
014B6:  MOVLW  0C
014B8:  ADDWF  x52,W
014BA:  MOVWF  FE9
014BC:  MOVLW  0A
014BE:  ADDWFC x53,W
014C0:  MOVWF  FEA
014C2:  CLRF   FEF
....................          break;
014C4:  BRA    14EC
....................       }
014C6:  BRA    14D8
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
014C8:  MOVLW  0C
014CA:  ADDWF  x52,W
014CC:  MOVWF  FE9
014CE:  MOVLW  0A
014D0:  ADDWFC x53,W
014D2:  MOVWF  FEA
014D4:  MOVFF  B56,FEF
....................          
....................       }
014D8:  MOVFF  B51,03
014DC:  MOVF   x50,W
014DE:  INCF   x50,F
014E0:  BTFSC  FD8.2
014E2:  INCF   x51,F
014E4:  INCF   x52,F
014E6:  BTFSC  FD8.2
014E8:  INCF   x53,F
014EA:  BRA    1476
....................    }
....................    
....................    i++;
014EC:  INCF   x50,F
014EE:  BTFSC  FD8.2
014F0:  INCF   x51,F
....................    j=0;
014F2:  CLRF   x53
014F4:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
014F6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
014F8:  MOVLW  5D
014FA:  ADDWF  x50,W
014FC:  MOVWF  x58
014FE:  MOVLW  00
01500:  ADDWFC x51,W
01502:  MOVWF  x59
01504:  MOVFF  FF2,B5A
01508:  BCF    FF2.7
0150A:  MOVFF  B59,FAA
0150E:  MOVFF  B58,FA9
01512:  BCF    FA6.6
01514:  BCF    FA6.7
01516:  BSF    FA6.0
01518:  MOVF   FA8,W
0151A:  BTFSC  x5A.7
0151C:  BSF    FF2.7
0151E:  CLRF   x57
01520:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01522:  MOVF   x56,W
01524:  SUBLW  0D
01526:  BNZ   152C
01528:  MOVF   x57,F
0152A:  BZ    1536
0152C:  MOVF   x53,F
0152E:  BNZ   1536
01530:  MOVF   x52,W
01532:  SUBLW  29
01534:  BC    1548
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01536:  MOVLW  2C
01538:  ADDWF  x52,W
0153A:  MOVWF  FE9
0153C:  MOVLW  0A
0153E:  ADDWFC x53,W
01540:  MOVWF  FEA
01542:  CLRF   FEF
....................          break;
01544:  BRA    156C
....................       }
01546:  BRA    1558
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
01548:  MOVLW  2C
0154A:  ADDWF  x52,W
0154C:  MOVWF  FE9
0154E:  MOVLW  0A
01550:  ADDWFC x53,W
01552:  MOVWF  FEA
01554:  MOVFF  B56,FEF
....................          
....................       }
01558:  MOVFF  B51,03
0155C:  MOVF   x50,W
0155E:  INCF   x50,F
01560:  BTFSC  FD8.2
01562:  INCF   x51,F
01564:  INCF   x52,F
01566:  BTFSC  FD8.2
01568:  INCF   x53,F
0156A:  BRA    14F6
....................    }
....................    
....................    i++;
0156C:  INCF   x50,F
0156E:  BTFSC  FD8.2
01570:  INCF   x51,F
....................    j=0;
01572:  CLRF   x53
01574:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01576:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01578:  MOVLW  5D
0157A:  ADDWF  x50,W
0157C:  MOVWF  x58
0157E:  MOVLW  00
01580:  ADDWFC x51,W
01582:  MOVWF  x59
01584:  MOVFF  FF2,B5A
01588:  BCF    FF2.7
0158A:  MOVFF  B59,FAA
0158E:  MOVFF  B58,FA9
01592:  BCF    FA6.6
01594:  BCF    FA6.7
01596:  BSF    FA6.0
01598:  MOVF   FA8,W
0159A:  BTFSC  x5A.7
0159C:  BSF    FF2.7
0159E:  CLRF   x57
015A0:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
015A2:  MOVF   x56,W
015A4:  SUBLW  0D
015A6:  BNZ   15AC
015A8:  MOVF   x57,F
015AA:  BZ    15B6
015AC:  MOVF   x53,F
015AE:  BNZ   15B6
015B0:  MOVF   x52,W
015B2:  SUBLW  29
015B4:  BC    15C8
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
015B6:  MOVLW  4C
015B8:  ADDWF  x52,W
015BA:  MOVWF  FE9
015BC:  MOVLW  0A
015BE:  ADDWFC x53,W
015C0:  MOVWF  FEA
015C2:  CLRF   FEF
....................          break;
015C4:  BRA    15EC
....................       }
015C6:  BRA    15D8
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
015C8:  MOVLW  4C
015CA:  ADDWF  x52,W
015CC:  MOVWF  FE9
015CE:  MOVLW  0A
015D0:  ADDWFC x53,W
015D2:  MOVWF  FEA
015D4:  MOVFF  B56,FEF
....................          
....................       }
015D8:  MOVFF  B51,03
015DC:  MOVF   x50,W
015DE:  INCF   x50,F
015E0:  BTFSC  FD8.2
015E2:  INCF   x51,F
015E4:  INCF   x52,F
015E6:  BTFSC  FD8.2
015E8:  INCF   x53,F
015EA:  BRA    1576
....................    }
....................    
....................    i++;
015EC:  INCF   x50,F
015EE:  BTFSC  FD8.2
015F0:  INCF   x51,F
....................    j=0;
015F2:  CLRF   x53
015F4:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
015F6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
015F8:  MOVLW  5D
015FA:  ADDWF  x50,W
015FC:  MOVWF  x58
015FE:  MOVLW  00
01600:  ADDWFC x51,W
01602:  MOVWF  x59
01604:  MOVFF  FF2,B5A
01608:  BCF    FF2.7
0160A:  MOVFF  B59,FAA
0160E:  MOVFF  B58,FA9
01612:  BCF    FA6.6
01614:  BCF    FA6.7
01616:  BSF    FA6.0
01618:  MOVF   FA8,W
0161A:  BTFSC  x5A.7
0161C:  BSF    FF2.7
0161E:  CLRF   x57
01620:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01622:  MOVF   x56,W
01624:  SUBLW  0D
01626:  BNZ   162C
01628:  MOVF   x57,F
0162A:  BZ    1636
0162C:  MOVF   x53,F
0162E:  BNZ   1636
01630:  MOVF   x52,W
01632:  SUBLW  29
01634:  BC    1648
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01636:  MOVLW  6C
01638:  ADDWF  x52,W
0163A:  MOVWF  FE9
0163C:  MOVLW  0A
0163E:  ADDWFC x53,W
01640:  MOVWF  FEA
01642:  CLRF   FEF
....................          break;
01644:  BRA    166C
....................       }
01646:  BRA    1658
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
01648:  MOVLW  6C
0164A:  ADDWF  x52,W
0164C:  MOVWF  FE9
0164E:  MOVLW  0A
01650:  ADDWFC x53,W
01652:  MOVWF  FEA
01654:  MOVFF  B56,FEF
....................          
....................       }
01658:  MOVFF  B51,03
0165C:  MOVF   x50,W
0165E:  INCF   x50,F
01660:  BTFSC  FD8.2
01662:  INCF   x51,F
01664:  INCF   x52,F
01666:  BTFSC  FD8.2
01668:  INCF   x53,F
0166A:  BRA    15F6
....................    }
....................    
....................    i++;
0166C:  INCF   x50,F
0166E:  BTFSC  FD8.2
01670:  INCF   x51,F
....................    j=0;
01672:  CLRF   x53
01674:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01676:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01678:  MOVLW  5D
0167A:  ADDWF  x50,W
0167C:  MOVWF  x58
0167E:  MOVLW  00
01680:  ADDWFC x51,W
01682:  MOVWF  x59
01684:  MOVFF  FF2,B5A
01688:  BCF    FF2.7
0168A:  MOVFF  B59,FAA
0168E:  MOVFF  B58,FA9
01692:  BCF    FA6.6
01694:  BCF    FA6.7
01696:  BSF    FA6.0
01698:  MOVF   FA8,W
0169A:  BTFSC  x5A.7
0169C:  BSF    FF2.7
0169E:  CLRF   x57
016A0:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
016A2:  MOVF   x56,W
016A4:  SUBLW  0D
016A6:  BNZ   16AC
016A8:  MOVF   x57,F
016AA:  BZ    16B6
016AC:  MOVF   x53,F
016AE:  BNZ   16B6
016B0:  MOVF   x52,W
016B2:  SUBLW  29
016B4:  BC    16C8
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
016B6:  MOVLW  8C
016B8:  ADDWF  x52,W
016BA:  MOVWF  FE9
016BC:  MOVLW  0A
016BE:  ADDWFC x53,W
016C0:  MOVWF  FEA
016C2:  CLRF   FEF
....................          break;
016C4:  BRA    16EC
....................       }
016C6:  BRA    16D8
....................       else
....................       {
....................          SMS_Massage9[j] = buff;
016C8:  MOVLW  8C
016CA:  ADDWF  x52,W
016CC:  MOVWF  FE9
016CE:  MOVLW  0A
016D0:  ADDWFC x53,W
016D2:  MOVWF  FEA
016D4:  MOVFF  B56,FEF
....................          
....................       }
016D8:  MOVFF  B51,03
016DC:  MOVF   x50,W
016DE:  INCF   x50,F
016E0:  BTFSC  FD8.2
016E2:  INCF   x51,F
016E4:  INCF   x52,F
016E6:  BTFSC  FD8.2
016E8:  INCF   x53,F
016EA:  BRA    1676
....................    }
....................    
....................    i++;
016EC:  INCF   x50,F
016EE:  BTFSC  FD8.2
016F0:  INCF   x51,F
....................    j=0;
016F2:  CLRF   x53
016F4:  CLRF   x52
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
016F6:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
016F8:  MOVLW  5D
016FA:  ADDWF  x50,W
016FC:  MOVWF  x58
016FE:  MOVLW  00
01700:  ADDWFC x51,W
01702:  MOVWF  x59
01704:  MOVFF  FF2,B5A
01708:  BCF    FF2.7
0170A:  MOVFF  B59,FAA
0170E:  MOVFF  B58,FA9
01712:  BCF    FA6.6
01714:  BCF    FA6.7
01716:  BSF    FA6.0
01718:  MOVF   FA8,W
0171A:  BTFSC  x5A.7
0171C:  BSF    FF2.7
0171E:  CLRF   x57
01720:  MOVWF  x56
....................       
....................       if((buff == 0x0D) || (j>41))
01722:  MOVF   x56,W
01724:  SUBLW  0D
01726:  BNZ   172C
01728:  MOVF   x57,F
0172A:  BZ    1736
0172C:  MOVF   x53,F
0172E:  BNZ   1736
01730:  MOVF   x52,W
01732:  SUBLW  29
01734:  BC    1748
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01736:  MOVLW  AC
01738:  ADDWF  x52,W
0173A:  MOVWF  FE9
0173C:  MOVLW  0A
0173E:  ADDWFC x53,W
01740:  MOVWF  FEA
01742:  CLRF   FEF
....................          break;
01744:  BRA    176C
....................       }
01746:  BRA    1758
....................       else
....................       {
....................          SMS_Massage10[j] = buff;
01748:  MOVLW  AC
0174A:  ADDWF  x52,W
0174C:  MOVWF  FE9
0174E:  MOVLW  0A
01750:  ADDWFC x53,W
01752:  MOVWF  FEA
01754:  MOVFF  B56,FEF
....................          
....................       }
01758:  MOVFF  B51,03
0175C:  MOVF   x50,W
0175E:  INCF   x50,F
01760:  BTFSC  FD8.2
01762:  INCF   x51,F
01764:  INCF   x52,F
01766:  BTFSC  FD8.2
01768:  INCF   x53,F
0176A:  BRA    16F6
....................    }
0176C:  MOVLB  0
0176E:  RETURN 0
....................    
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
....................    SBUF = getc();
*
00554:  BTFSS  F9E.5
00556:  BRA    0554
00558:  MOVFF  FAE,2E
....................    checkCommand();
0055C:  BRA    02E6
.................... }
0055E:  BCF    F9E.5
00560:  GOTO   0078
.................... #int_TIMER1
.................... void  TIMER1_isr(void) 
.................... {
....................    //ReadIn_flag =1;
.................... }
.................... 
00564:  BCF    F9E.0
00566:  GOTO   0078
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
0056A:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
0056C:  MOVLB  9
0056E:  MOVF   x7A,F
00570:  BZ    0580
....................    {
....................       T_timeout--;
00572:  DECF   x7A,F
....................       if(T_timeout == 0)
00574:  MOVF   x7A,F
00576:  BNZ   0580
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout 
00578:  MOVFF  63,6B
....................          output_bit(P485ctrl,0);
0057C:  BCF    F8A.3
0057E:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
00580:  MOVF   1C,F
00582:  BZ    059C
....................    {
....................       TimeBase1s--;
00584:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
00586:  MOVF   1C,F
00588:  BNZ   059C
....................       {
....................          if(AutoAckDelayTime != 0x00)
0058A:  MOVF   1D,F
0058C:  BZ    0596
....................          {
....................             AutoAckDelayTime--;
0058E:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
00590:  MOVF   1D,F
00592:  BNZ   0596
....................             {
....................                AutoAckFlag = 1 ;
00594:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
00596:  BSF    30.4
....................          TimeBase1s = 100;
00598:  MOVLW  64
0059A:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
0059C:  MOVF   19,W
0059E:  SUBLW  32
005A0:  BNZ   05CA
....................    {
....................       StatusTime = 0;
005A2:  CLRF   19
....................       if(HearthbeatInd == 0)
005A4:  BTFSC  1A.0
005A6:  BRA    05B0
....................       {
....................          HearthbeatInd = 1;
005A8:  BSF    1A.0
....................          output_bit(Pled,1);
005AA:  BSF    F8A.5
005AC:  BCF    F93.5
....................       }
005AE:  BRA    05B6
....................       else
....................       {
....................          HearthbeatInd = 0;
005B0:  BCF    1A.0
....................          output_bit(Pled,0);
005B2:  BCF    F8A.5
005B4:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
005B6:  BTFSS  1A.6
005B8:  BRA    05C8
....................          {
....................              if(T_test > 0x00) T_test --;
005BA:  MOVF   2F,F
005BC:  BZ    05C0
005BE:  DECF   2F,F
....................              if(T_test == 0x00) Test_fault = 1;
005C0:  MOVF   2F,F
005C2:  BNZ   05C6
005C4:  BSF    1A.5
....................          }
005C6:  BRA    05CA
....................          else
....................          {
....................              //Test = 0;
....................              T_test = 0x00;
005C8:  CLRF   2F
....................          }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
005CA:  MOVF   1B,F
005CC:  BZ    05F4
....................    {
....................       FlashingRateTime--;
005CE:  DECF   1B,F
....................       if(FlashingRateTime == 0)
005D0:  MOVF   1B,F
005D2:  BNZ   05E8
....................       {
....................          outmcp23 = 0xff;  
005D4:  SETF   x7C
....................          if(SyncStatus == 0)
005D6:  BTFSC  30.2
005D8:  BRA    05E4
....................          {
....................             if(FlashingFlag == 1)
005DA:  BTFSS  1A.1
005DC:  BRA    05E2
....................             {
....................                FlashingFlag = 0;
005DE:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
005E0:  BRA    05E4
....................             else
....................             {
....................                FlashingFlag = 1;
005E2:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
005E4:  MOVFF  60,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
005E8:  MOVF   31,F
005EA:  BZ    05F4
....................       {
....................          Synctimer--;
005EC:  DECF   31,F
....................          if(Synctimer == 0x00)
005EE:  MOVF   31,F
005F0:  BNZ   05F4
....................          {
....................             SyncStatus = 0;
005F2:  BCF    30.2
....................          }
....................       }
.................... 
....................    }
....................    
....................    
005F4:  BCF    F9E.1
005F6:  MOVLB  0
005F8:  GOTO   0078
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
04E0C:  MOVLB  A
04E0E:  BTFSS  xD8.0
04E10:  BRA    4F1A
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
04E12:  MOVLW  00
04E14:  BTFSC  xCC.0
04E16:  MOVLW  01
04E18:  MOVLB  B
04E1A:  MOVWF  x57
04E1C:  MOVLW  00
04E1E:  MOVLB  A
04E20:  BTFSC  xD0.0
04E22:  MOVLW  01
04E24:  MOVLB  B
04E26:  XORWF  x57,W
04E28:  SUBLW  01
04E2A:  BNZ   4E32
04E2C:  MOVLB  A
04E2E:  BTFSC  xD2.0
04E30:  BRA    4E38
04E32:  MOVLB  A
04E34:  BTFSS  xDC.0
04E36:  BRA    4F12
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
04E38:  BTFSC  xDA.0
04E3A:  BRA    4F10
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04E3C:  BTFSC  xDC.0
04E3E:  BRA    4E4E
04E40:  MOVF   5E,W
04E42:  SUBLW  0F
04E44:  BNZ   4E4E
....................             {
....................                TimeBase1s = 100 ;            //reload again
04E46:  MOVLW  64
04E48:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04E4A:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
04E4E:  BSF    xDC.0
....................             if(FlashingFlag == 0)                                                                                                                                                                                                                                                                
04E50:  BTFSC  1A.1
04E52:  BRA    4E58
....................             {
....................                Output.B1 = 0;           //Flash output1
04E54:  BCF    xCE.0
....................             }
04E56:  BRA    4E5A
....................             else
....................             {
....................                Output.B1 = 1;
04E58:  BSF    xCE.0
....................             }
.................... 
....................             if (~AutoTestFlag)
04E5A:  BTFSC  1A.4
04E5C:  BRA    4E7A
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
04E5E:  BTFSC  xD6.0
04E60:  BRA    4E6C
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04E62:  BSF    F89.4
04E64:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04E66:  BSF    F89.3
04E68:  BCF    F92.3
....................                }
04E6A:  BRA    4E7A
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
04E6C:  BTFSS  xD4.0
04E6E:  BRA    4E76
04E70:  BSF    F89.4
04E72:  BCF    F92.4
04E74:  BRA    4E7A
....................                   else output_bit(Pbell,1);                          //Bell
04E76:  BSF    F89.3
04E78:  BCF    F92.3
....................                }
....................             }
....................             //////////////////////////////////////////////////////////////////
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04E7A:  BTFSC  xE8.0
04E7C:  BRA    4F10
04E7E:  BTFSC  30.1
04E80:  BRA    4F10
04E82:  BTFSC  xDA.0
04E84:  BRA    4F10
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04E86:  MOVLW  FC
04E88:  MOVWF  FF6
04E8A:  MOVLW  05
04E8C:  MOVWF  FF7
04E8E:  MOVLB  0
04E90:  CALL   23E8
....................                putc('\n',CH2);
04E94:  MOVLW  0A
04E96:  MOVLB  B
04E98:  MOVWF  x58
04E9A:  MOVLB  0
04E9C:  CALL   23A2
....................                delay_ms(10);
04EA0:  MOVLW  0A
04EA2:  MOVLB  B
04EA4:  MOVWF  x57
04EA6:  MOVLB  0
04EA8:  CALL   07FA
....................             
....................                SendSMS.B1 =1;
04EAC:  MOVLB  A
04EAE:  BSF    xE8.0
....................                fprintf(CH2,"AT+CMGS=\"");
04EB0:  MOVLW  06
04EB2:  MOVWF  FF6
04EB4:  MOVLW  06
04EB6:  MOVWF  FF7
04EB8:  MOVLB  0
04EBA:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
04EBE:  MOVLW  09
04EC0:  MOVWF  FEA
04EC2:  MOVLW  7D
04EC4:  MOVWF  FE9
04EC6:  RCALL  479E
....................                
....................                fprintf(CH2,"\"");
04EC8:  MOVLW  22
04ECA:  MOVLB  B
04ECC:  MOVWF  x58
04ECE:  MOVLB  0
04ED0:  CALL   23A2
....................                putc('\n',CH2);
04ED4:  MOVLW  0A
04ED6:  MOVLB  B
04ED8:  MOVWF  x58
04EDA:  MOVLB  0
04EDC:  CALL   23A2
....................                delay_ms(50);
04EE0:  MOVLW  32
04EE2:  MOVLB  B
04EE4:  MOVWF  x57
04EE6:  MOVLB  0
04EE8:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage1);
04EEC:  MOVLW  09
04EEE:  MOVWF  FEA
04EF0:  MOVLW  8C
04EF2:  MOVWF  FE9
04EF4:  RCALL  479E
....................               putc('\n',CH2);
04EF6:  MOVLW  0A
04EF8:  MOVLB  B
04EFA:  MOVWF  x58
04EFC:  MOVLB  0
04EFE:  CALL   23A2
....................               putc(26,CH2);
04F02:  MOVLW  1A
04F04:  MOVLB  B
04F06:  MOVWF  x58
04F08:  MOVLB  0
04F0A:  CALL   23A2
04F0E:  MOVLB  A
....................             }
....................             //////////////////////////////////////////////////////////////////
....................         }
....................       }
04F10:  BRA    4F18
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
04F12:  BTFSS  xD2.0
04F14:  BRA    4F18
04F16:  BCF    xDA.0
....................    }
04F18:  BRA    4FDC
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
04F1A:  MOVLW  00
04F1C:  BTFSC  xCC.0
04F1E:  MOVLW  01
04F20:  MOVLB  B
04F22:  MOVWF  x57
04F24:  MOVLW  00
04F26:  MOVLB  A
04F28:  BTFSC  xD0.0
04F2A:  MOVLW  01
04F2C:  MOVLB  B
04F2E:  XORWF  x57,W
04F30:  SUBLW  01
04F32:  BNZ   4FD4
....................       {
....................          Output.B1 = 0;
04F34:  MOVLB  A
04F36:  BCF    xCE.0
....................          // SMS Sending   
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04F38:  BTFSC  xE8.0
04F3A:  BRA    4FD0
04F3C:  BTFSC  30.1
04F3E:  BRA    4FD0
04F40:  BTFSC  xDA.0
04F42:  BRA    4FD0
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04F44:  MOVLW  10
04F46:  MOVWF  FF6
04F48:  MOVLW  06
04F4A:  MOVWF  FF7
04F4C:  MOVLB  0
04F4E:  CALL   23E8
....................             putc('\n',CH2);
04F52:  MOVLW  0A
04F54:  MOVLB  B
04F56:  MOVWF  x58
04F58:  MOVLB  0
04F5A:  CALL   23A2
....................             delay_ms(10);
04F5E:  MOVLW  0A
04F60:  MOVLB  B
04F62:  MOVWF  x57
04F64:  MOVLB  0
04F66:  CALL   07FA
....................             
....................             SendSMS.B1 =1;
04F6A:  MOVLB  A
04F6C:  BSF    xE8.0
....................             fprintf(CH2,"AT+CMGS=\"");
04F6E:  MOVLW  1A
04F70:  MOVWF  FF6
04F72:  MOVLW  06
04F74:  MOVWF  FF7
04F76:  MOVLB  0
04F78:  CALL   23E8
....................             fprintf(CH2,sms_phonenumber);
04F7C:  MOVLW  09
04F7E:  MOVWF  FEA
04F80:  MOVLW  7D
04F82:  MOVWF  FE9
04F84:  RCALL  479E
....................             
....................             fprintf(CH2,"\"");
04F86:  MOVLW  22
04F88:  MOVLB  B
04F8A:  MOVWF  x58
04F8C:  MOVLB  0
04F8E:  CALL   23A2
....................             putc('\n',CH2);
04F92:  MOVLW  0A
04F94:  MOVLB  B
04F96:  MOVWF  x58
04F98:  MOVLB  0
04F9A:  CALL   23A2
....................             delay_ms(50);
04F9E:  MOVLW  32
04FA0:  MOVLB  B
04FA2:  MOVWF  x57
04FA4:  MOVLB  0
04FA6:  CALL   07FA
....................            
....................            fprintf(CH2,SMS_Massage1);
04FAA:  MOVLW  09
04FAC:  MOVWF  FEA
04FAE:  MOVLW  8C
04FB0:  MOVWF  FE9
04FB2:  CALL   479E
....................            putc('\n',CH2);
04FB6:  MOVLW  0A
04FB8:  MOVLB  B
04FBA:  MOVWF  x58
04FBC:  MOVLB  0
04FBE:  CALL   23A2
....................           putc(26,CH2);
04FC2:  MOVLW  1A
04FC4:  MOVLB  B
04FC6:  MOVWF  x58
04FC8:  MOVLB  0
04FCA:  CALL   23A2
04FCE:  MOVLB  A
....................          }
....................       }
04FD0:  BRA    4FDC
04FD2:  MOVLB  B
....................       else
....................       {
....................          Output.B1 = 1;
04FD4:  MOVLB  A
04FD6:  BSF    xCE.0
....................          
....................          SendSMS.B1 =0;
04FD8:  BCF    xE8.0
....................          functointest_f =0;
04FDA:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
04FDC:  BTFSS  xD8.1
04FDE:  BRA    50EC
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
04FE0:  MOVLW  00
04FE2:  BTFSC  xCC.1
04FE4:  MOVLW  01
04FE6:  MOVLB  B
04FE8:  MOVWF  x57
04FEA:  MOVLW  00
04FEC:  MOVLB  A
04FEE:  BTFSC  xD0.1
04FF0:  MOVLW  01
04FF2:  MOVLB  B
04FF4:  XORWF  x57,W
04FF6:  SUBLW  01
04FF8:  BNZ   5000
04FFA:  MOVLB  A
04FFC:  BTFSC  xD2.1
04FFE:  BRA    5006
05000:  MOVLB  A
05002:  BTFSS  xDC.1
05004:  BRA    50E4
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
05006:  BTFSC  xDA.1
05008:  BRA    50E2
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0500A:  BTFSC  xDC.1
0500C:  BRA    501C
0500E:  MOVF   5E,W
05010:  SUBLW  0F
05012:  BNZ   501C
....................             {
....................                TimeBase1s = 100 ;            //reload again
05014:  MOVLW  64
05016:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05018:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
0501C:  BSF    xDC.1
....................             if(FlashingFlag == 0)
0501E:  BTFSC  1A.1
05020:  BRA    5026
....................             {
....................                Output.B2 = 0;           //Flash output1
05022:  BCF    xCE.1
....................             }
05024:  BRA    5028
....................             else
....................             {
....................                Output.B2 = 1;
05026:  BSF    xCE.1
....................             }
.................... 
....................             if (~AutoTestFlag)
05028:  BTFSC  1A.4
0502A:  BRA    5048
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
0502C:  BTFSC  xD6.1
0502E:  BRA    503A
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05030:  BSF    F89.4
05032:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05034:  BSF    F89.3
05036:  BCF    F92.3
....................                }
05038:  BRA    5048
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
0503A:  BTFSS  xD4.1
0503C:  BRA    5044
0503E:  BSF    F89.4
05040:  BCF    F92.4
05042:  BRA    5048
....................                   else output_bit(Pbell,1);                          //Bell
05044:  BSF    F89.3
05046:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
05048:  BTFSC  xE8.1
0504A:  BRA    50E2
0504C:  BTFSC  30.1
0504E:  BRA    50E2
05050:  BTFSC  xDA.1
05052:  BRA    50E2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05054:  MOVLW  24
05056:  MOVWF  FF6
05058:  MOVLW  06
0505A:  MOVWF  FF7
0505C:  MOVLB  0
0505E:  CALL   23E8
....................                putc('\n',CH2);
05062:  MOVLW  0A
05064:  MOVLB  B
05066:  MOVWF  x58
05068:  MOVLB  0
0506A:  CALL   23A2
....................                delay_ms(10);
0506E:  MOVLW  0A
05070:  MOVLB  B
05072:  MOVWF  x57
05074:  MOVLB  0
05076:  CALL   07FA
....................                 
....................                SendSMS.B2 =1;
0507A:  MOVLB  A
0507C:  BSF    xE8.1
....................                fprintf(CH2,"AT+CMGS=\"");
0507E:  MOVLW  2E
05080:  MOVWF  FF6
05082:  MOVLW  06
05084:  MOVWF  FF7
05086:  MOVLB  0
05088:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
0508C:  MOVLW  09
0508E:  MOVWF  FEA
05090:  MOVLW  7D
05092:  MOVWF  FE9
05094:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
05098:  MOVLW  22
0509A:  MOVLB  B
0509C:  MOVWF  x58
0509E:  MOVLB  0
050A0:  CALL   23A2
....................                putc('\n',CH2);
050A4:  MOVLW  0A
050A6:  MOVLB  B
050A8:  MOVWF  x58
050AA:  MOVLB  0
050AC:  CALL   23A2
....................                delay_ms(50);
050B0:  MOVLW  32
050B2:  MOVLB  B
050B4:  MOVWF  x57
050B6:  MOVLB  0
050B8:  CALL   07FA
....................                
....................               fprintf(CH2,SMS_Massage2);
050BC:  MOVLW  09
050BE:  MOVWF  FEA
050C0:  MOVLW  AC
050C2:  MOVWF  FE9
050C4:  CALL   479E
....................               putc('\n',CH2);
050C8:  MOVLW  0A
050CA:  MOVLB  B
050CC:  MOVWF  x58
050CE:  MOVLB  0
050D0:  CALL   23A2
....................              putc(26,CH2);
050D4:  MOVLW  1A
050D6:  MOVLB  B
050D8:  MOVWF  x58
050DA:  MOVLB  0
050DC:  CALL   23A2
050E0:  MOVLB  A
....................             } 
....................           }
.................... 
....................       }
050E2:  BRA    50EA
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
050E4:  BTFSS  xD2.1
050E6:  BRA    50EA
050E8:  BCF    xDA.1
....................    }
050EA:  BRA    51B0
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
050EC:  MOVLW  00
050EE:  BTFSC  xCC.1
050F0:  MOVLW  01
050F2:  MOVLB  B
050F4:  MOVWF  x57
050F6:  MOVLW  00
050F8:  MOVLB  A
050FA:  BTFSC  xD0.1
050FC:  MOVLW  01
050FE:  MOVLB  B
05100:  XORWF  x57,W
05102:  SUBLW  01
05104:  BNZ   51A8
....................       {
....................          Output.B2 = 0;
05106:  MOVLB  A
05108:  BCF    xCE.1
....................          // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
0510A:  BTFSC  xE8.1
0510C:  BRA    51A4
0510E:  BTFSC  30.1
05110:  BRA    51A4
05112:  BTFSC  xDA.1
05114:  BRA    51A4
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05116:  MOVLW  38
05118:  MOVWF  FF6
0511A:  MOVLW  06
0511C:  MOVWF  FF7
0511E:  MOVLB  0
05120:  CALL   23E8
....................                putc('\n',CH2);
05124:  MOVLW  0A
05126:  MOVLB  B
05128:  MOVWF  x58
0512A:  MOVLB  0
0512C:  CALL   23A2
....................                delay_ms(10);
05130:  MOVLW  0A
05132:  MOVLB  B
05134:  MOVWF  x57
05136:  MOVLB  0
05138:  CALL   07FA
....................                 
....................                SendSMS.B2 =1;
0513C:  MOVLB  A
0513E:  BSF    xE8.1
....................                fprintf(CH2,"AT+CMGS=\"");
05140:  MOVLW  42
05142:  MOVWF  FF6
05144:  MOVLW  06
05146:  MOVWF  FF7
05148:  MOVLB  0
0514A:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
0514E:  MOVLW  09
05150:  MOVWF  FEA
05152:  MOVLW  7D
05154:  MOVWF  FE9
05156:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
0515A:  MOVLW  22
0515C:  MOVLB  B
0515E:  MOVWF  x58
05160:  MOVLB  0
05162:  CALL   23A2
....................                putc('\n',CH2);
05166:  MOVLW  0A
05168:  MOVLB  B
0516A:  MOVWF  x58
0516C:  MOVLB  0
0516E:  CALL   23A2
....................                delay_ms(50);
05172:  MOVLW  32
05174:  MOVLB  B
05176:  MOVWF  x57
05178:  MOVLB  0
0517A:  CALL   07FA
....................                
....................               fprintf(CH2,SMS_Massage2);
0517E:  MOVLW  09
05180:  MOVWF  FEA
05182:  MOVLW  AC
05184:  MOVWF  FE9
05186:  CALL   479E
....................               putc('\n',CH2);
0518A:  MOVLW  0A
0518C:  MOVLB  B
0518E:  MOVWF  x58
05190:  MOVLB  0
05192:  CALL   23A2
....................              putc(26,CH2);
05196:  MOVLW  1A
05198:  MOVLB  B
0519A:  MOVWF  x58
0519C:  MOVLB  0
0519E:  CALL   23A2
051A2:  MOVLB  A
....................             } 
....................       }
051A4:  BRA    51B0
051A6:  MOVLB  B
....................       else
....................       {
....................          Output.B2 = 1;
051A8:  MOVLB  A
051AA:  BSF    xCE.1
....................          SendSMS.B2 =0;
051AC:  BCF    xE8.1
....................          functointest_f =0;
051AE:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
051B0:  BTFSS  xD8.2
051B2:  BRA    52C0
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
051B4:  MOVLW  00
051B6:  BTFSC  xCC.2
051B8:  MOVLW  01
051BA:  MOVLB  B
051BC:  MOVWF  x57
051BE:  MOVLW  00
051C0:  MOVLB  A
051C2:  BTFSC  xD0.2
051C4:  MOVLW  01
051C6:  MOVLB  B
051C8:  XORWF  x57,W
051CA:  SUBLW  01
051CC:  BNZ   51D4
051CE:  MOVLB  A
051D0:  BTFSC  xD2.2
051D2:  BRA    51DA
051D4:  MOVLB  A
051D6:  BTFSS  xDC.2
051D8:  BRA    52B8
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
051DA:  BTFSC  xDA.2
051DC:  BRA    52B6
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
051DE:  BTFSC  xDC.2
051E0:  BRA    51F0
051E2:  MOVF   5E,W
051E4:  SUBLW  0F
051E6:  BNZ   51F0
....................             {
....................                TimeBase1s = 100 ;            //reload again
051E8:  MOVLW  64
051EA:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
051EC:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
051F0:  BSF    xDC.2
....................             if(FlashingFlag == 0)
051F2:  BTFSC  1A.1
051F4:  BRA    51FA
....................             {
....................                Output.B3 = 0;           //Flash output1
051F6:  BCF    xCE.2
....................             }
051F8:  BRA    51FC
....................             else
....................             {
....................                Output.B3 = 1;
051FA:  BSF    xCE.2
....................             }
.................... 
....................             if (~AutoTestFlag)
051FC:  BTFSC  1A.4
051FE:  BRA    521C
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
05200:  BTFSC  xD6.2
05202:  BRA    520E
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05204:  BSF    F89.4
05206:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05208:  BSF    F89.3
0520A:  BCF    F92.3
....................                }
0520C:  BRA    521C
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
0520E:  BTFSS  xD4.2
05210:  BRA    5218
05212:  BSF    F89.4
05214:  BCF    F92.4
05216:  BRA    521C
....................                   else output_bit(Pbell,1);                          //Bell
05218:  BSF    F89.3
0521A:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
0521C:  BTFSC  xE8.2
0521E:  BRA    52B6
05220:  BTFSC  30.1
05222:  BRA    52B6
05224:  BTFSC  xDA.2
05226:  BRA    52B6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05228:  MOVLW  4C
0522A:  MOVWF  FF6
0522C:  MOVLW  06
0522E:  MOVWF  FF7
05230:  MOVLB  0
05232:  CALL   23E8
....................                putc('\n',CH2);
05236:  MOVLW  0A
05238:  MOVLB  B
0523A:  MOVWF  x58
0523C:  MOVLB  0
0523E:  CALL   23A2
....................                delay_ms(10);
05242:  MOVLW  0A
05244:  MOVLB  B
05246:  MOVWF  x57
05248:  MOVLB  0
0524A:  CALL   07FA
....................                
....................                SendSMS.B3 =1;
0524E:  MOVLB  A
05250:  BSF    xE8.2
....................                fprintf(CH2,"AT+CMGS=\"");
05252:  MOVLW  56
05254:  MOVWF  FF6
05256:  MOVLW  06
05258:  MOVWF  FF7
0525A:  MOVLB  0
0525C:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
05260:  MOVLW  09
05262:  MOVWF  FEA
05264:  MOVLW  7D
05266:  MOVWF  FE9
05268:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
0526C:  MOVLW  22
0526E:  MOVLB  B
05270:  MOVWF  x58
05272:  MOVLB  0
05274:  CALL   23A2
....................                putc('\n',CH2);
05278:  MOVLW  0A
0527A:  MOVLB  B
0527C:  MOVWF  x58
0527E:  MOVLB  0
05280:  CALL   23A2
....................                delay_ms(50);
05284:  MOVLW  32
05286:  MOVLB  B
05288:  MOVWF  x57
0528A:  MOVLB  0
0528C:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage3);
05290:  MOVLW  09
05292:  MOVWF  FEA
05294:  MOVLW  CC
05296:  MOVWF  FE9
05298:  CALL   479E
....................               putc('\n',CH2);
0529C:  MOVLW  0A
0529E:  MOVLB  B
052A0:  MOVWF  x58
052A2:  MOVLB  0
052A4:  CALL   23A2
....................              putc(26,CH2);
052A8:  MOVLW  1A
052AA:  MOVLB  B
052AC:  MOVWF  x58
052AE:  MOVLB  0
052B0:  CALL   23A2
052B4:  MOVLB  A
....................             }
....................             
....................             
....................           }
.................... 
....................       }
052B6:  BRA    52BE
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
052B8:  BTFSS  xD2.2
052BA:  BRA    52BE
052BC:  BCF    xDA.2
....................    }
052BE:  BRA    5384
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
052C0:  MOVLW  00
052C2:  BTFSC  xCC.2
052C4:  MOVLW  01
052C6:  MOVLB  B
052C8:  MOVWF  x57
052CA:  MOVLW  00
052CC:  MOVLB  A
052CE:  BTFSC  xD0.2
052D0:  MOVLW  01
052D2:  MOVLB  B
052D4:  XORWF  x57,W
052D6:  SUBLW  01
052D8:  BNZ   537C
....................       {
....................          Output.B3 = 0;
052DA:  MOVLB  A
052DC:  BCF    xCE.2
....................          // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
052DE:  BTFSC  xE8.2
052E0:  BRA    5378
052E2:  BTFSC  30.1
052E4:  BRA    5378
052E6:  BTFSC  xDA.2
052E8:  BRA    5378
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
052EA:  MOVLW  60
052EC:  MOVWF  FF6
052EE:  MOVLW  06
052F0:  MOVWF  FF7
052F2:  MOVLB  0
052F4:  CALL   23E8
....................                putc('\n',CH2);
052F8:  MOVLW  0A
052FA:  MOVLB  B
052FC:  MOVWF  x58
052FE:  MOVLB  0
05300:  CALL   23A2
....................                delay_ms(10);
05304:  MOVLW  0A
05306:  MOVLB  B
05308:  MOVWF  x57
0530A:  MOVLB  0
0530C:  CALL   07FA
....................                
....................                SendSMS.B3 =1;
05310:  MOVLB  A
05312:  BSF    xE8.2
....................                fprintf(CH2,"AT+CMGS=\"");
05314:  MOVLW  6A
05316:  MOVWF  FF6
05318:  MOVLW  06
0531A:  MOVWF  FF7
0531C:  MOVLB  0
0531E:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
05322:  MOVLW  09
05324:  MOVWF  FEA
05326:  MOVLW  7D
05328:  MOVWF  FE9
0532A:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
0532E:  MOVLW  22
05330:  MOVLB  B
05332:  MOVWF  x58
05334:  MOVLB  0
05336:  CALL   23A2
....................                putc('\n',CH2);
0533A:  MOVLW  0A
0533C:  MOVLB  B
0533E:  MOVWF  x58
05340:  MOVLB  0
05342:  CALL   23A2
....................                delay_ms(50);
05346:  MOVLW  32
05348:  MOVLB  B
0534A:  MOVWF  x57
0534C:  MOVLB  0
0534E:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage3);
05352:  MOVLW  09
05354:  MOVWF  FEA
05356:  MOVLW  CC
05358:  MOVWF  FE9
0535A:  CALL   479E
....................               putc('\n',CH2);
0535E:  MOVLW  0A
05360:  MOVLB  B
05362:  MOVWF  x58
05364:  MOVLB  0
05366:  CALL   23A2
....................              putc(26,CH2);
0536A:  MOVLW  1A
0536C:  MOVLB  B
0536E:  MOVWF  x58
05370:  MOVLB  0
05372:  CALL   23A2
05376:  MOVLB  A
....................             }
....................       }
05378:  BRA    5384
0537A:  MOVLB  B
....................       else
....................       {
....................          Output.B3 = 1;
0537C:  MOVLB  A
0537E:  BSF    xCE.2
....................          SendSMS.B5 =0;
05380:  BCF    xE8.4
....................          functointest_f =0;
05382:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
05384:  BTFSS  xD8.3
05386:  BRA    5494
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
05388:  MOVLW  00
0538A:  BTFSC  xCC.3
0538C:  MOVLW  01
0538E:  MOVLB  B
05390:  MOVWF  x57
05392:  MOVLW  00
05394:  MOVLB  A
05396:  BTFSC  xD0.3
05398:  MOVLW  01
0539A:  MOVLB  B
0539C:  XORWF  x57,W
0539E:  SUBLW  01
053A0:  BNZ   53A8
053A2:  MOVLB  A
053A4:  BTFSC  xD2.3
053A6:  BRA    53AE
053A8:  MOVLB  A
053AA:  BTFSS  xDC.3
053AC:  BRA    548C
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
053AE:  BTFSC  xDA.3
053B0:  BRA    548A
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
053B2:  BTFSC  xDC.3
053B4:  BRA    53C4
053B6:  MOVF   5E,W
053B8:  SUBLW  0F
053BA:  BNZ   53C4
....................             {
....................                TimeBase1s = 100 ;            //reload again
053BC:  MOVLW  64
053BE:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
053C0:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
053C4:  BSF    xDC.3
....................             if(FlashingFlag == 0)
053C6:  BTFSC  1A.1
053C8:  BRA    53CE
....................             {
....................                Output.B4 = 0;           //Flash output1
053CA:  BCF    xCE.3
....................             }
053CC:  BRA    53D0
....................             else
....................             {
....................                Output.B4 = 1;
053CE:  BSF    xCE.3
....................             }
.................... 
....................             if (~AutoTestFlag)
053D0:  BTFSC  1A.4
053D2:  BRA    53F0
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
053D4:  BTFSC  xD6.3
053D6:  BRA    53E2
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
053D8:  BSF    F89.4
053DA:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
053DC:  BSF    F89.3
053DE:  BCF    F92.3
....................                }
053E0:  BRA    53F0
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
053E2:  BTFSS  xD4.3
053E4:  BRA    53EC
053E6:  BSF    F89.4
053E8:  BCF    F92.4
053EA:  BRA    53F0
....................                   else output_bit(Pbell,1);                          //Bell
053EC:  BSF    F89.3
053EE:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
053F0:  BTFSC  xE8.3
053F2:  BRA    548A
053F4:  BTFSC  30.1
053F6:  BRA    548A
053F8:  BTFSC  xDA.3
053FA:  BRA    548A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
053FC:  MOVLW  74
053FE:  MOVWF  FF6
05400:  MOVLW  06
05402:  MOVWF  FF7
05404:  MOVLB  0
05406:  CALL   23E8
....................                putc('\n',CH2);
0540A:  MOVLW  0A
0540C:  MOVLB  B
0540E:  MOVWF  x58
05410:  MOVLB  0
05412:  CALL   23A2
....................                delay_ms(10);
05416:  MOVLW  0A
05418:  MOVLB  B
0541A:  MOVWF  x57
0541C:  MOVLB  0
0541E:  CALL   07FA
....................                
....................                SendSMS.B4 =1;
05422:  MOVLB  A
05424:  BSF    xE8.3
....................                fprintf(CH2,"AT+CMGS=\"");
05426:  MOVLW  7E
05428:  MOVWF  FF6
0542A:  MOVLW  06
0542C:  MOVWF  FF7
0542E:  MOVLB  0
05430:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
05434:  MOVLW  09
05436:  MOVWF  FEA
05438:  MOVLW  7D
0543A:  MOVWF  FE9
0543C:  CALL   479E
....................             
....................                fprintf(CH2,"\"");
05440:  MOVLW  22
05442:  MOVLB  B
05444:  MOVWF  x58
05446:  MOVLB  0
05448:  CALL   23A2
....................                putc('\n',CH2);
0544C:  MOVLW  0A
0544E:  MOVLB  B
05450:  MOVWF  x58
05452:  MOVLB  0
05454:  CALL   23A2
....................                delay_ms(50);
05458:  MOVLW  32
0545A:  MOVLB  B
0545C:  MOVWF  x57
0545E:  MOVLB  0
05460:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage4);
05464:  MOVLW  09
05466:  MOVWF  FEA
05468:  MOVLW  EC
0546A:  MOVWF  FE9
0546C:  CALL   479E
....................               putc('\n',CH2);
05470:  MOVLW  0A
05472:  MOVLB  B
05474:  MOVWF  x58
05476:  MOVLB  0
05478:  CALL   23A2
....................              putc(26,CH2);
0547C:  MOVLW  1A
0547E:  MOVLB  B
05480:  MOVWF  x58
05482:  MOVLB  0
05484:  CALL   23A2
05488:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
0548A:  BRA    5492
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
0548C:  BTFSS  xD2.3
0548E:  BRA    5492
05490:  BCF    xDA.3
....................    }
05492:  BRA    5558
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
05494:  MOVLW  00
05496:  BTFSC  xCC.3
05498:  MOVLW  01
0549A:  MOVLB  B
0549C:  MOVWF  x57
0549E:  MOVLW  00
054A0:  MOVLB  A
054A2:  BTFSC  xD0.3
054A4:  MOVLW  01
054A6:  MOVLB  B
054A8:  XORWF  x57,W
054AA:  SUBLW  01
054AC:  BNZ   5550
....................       {
....................          Output.B4 = 0;
054AE:  MOVLB  A
054B0:  BCF    xCE.3
....................          // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
054B2:  BTFSC  xE8.3
054B4:  BRA    554C
054B6:  BTFSC  30.1
054B8:  BRA    554C
054BA:  BTFSC  xDA.3
054BC:  BRA    554C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
054BE:  MOVLW  88
054C0:  MOVWF  FF6
054C2:  MOVLW  06
054C4:  MOVWF  FF7
054C6:  MOVLB  0
054C8:  CALL   23E8
....................                putc('\n',CH2);
054CC:  MOVLW  0A
054CE:  MOVLB  B
054D0:  MOVWF  x58
054D2:  MOVLB  0
054D4:  CALL   23A2
....................                delay_ms(10);
054D8:  MOVLW  0A
054DA:  MOVLB  B
054DC:  MOVWF  x57
054DE:  MOVLB  0
054E0:  CALL   07FA
....................                
....................                SendSMS.B4 =1;
054E4:  MOVLB  A
054E6:  BSF    xE8.3
....................                fprintf(CH2,"AT+CMGS=\"");
054E8:  MOVLW  92
054EA:  MOVWF  FF6
054EC:  MOVLW  06
054EE:  MOVWF  FF7
054F0:  MOVLB  0
054F2:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
054F6:  MOVLW  09
054F8:  MOVWF  FEA
054FA:  MOVLW  7D
054FC:  MOVWF  FE9
054FE:  CALL   479E
....................             
....................                fprintf(CH2,"\"");
05502:  MOVLW  22
05504:  MOVLB  B
05506:  MOVWF  x58
05508:  MOVLB  0
0550A:  CALL   23A2
....................                putc('\n',CH2);
0550E:  MOVLW  0A
05510:  MOVLB  B
05512:  MOVWF  x58
05514:  MOVLB  0
05516:  CALL   23A2
....................                delay_ms(50);
0551A:  MOVLW  32
0551C:  MOVLB  B
0551E:  MOVWF  x57
05520:  MOVLB  0
05522:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage4);
05526:  MOVLW  09
05528:  MOVWF  FEA
0552A:  MOVLW  EC
0552C:  MOVWF  FE9
0552E:  CALL   479E
....................               putc('\n',CH2);
05532:  MOVLW  0A
05534:  MOVLB  B
05536:  MOVWF  x58
05538:  MOVLB  0
0553A:  CALL   23A2
....................              putc(26,CH2);
0553E:  MOVLW  1A
05540:  MOVLB  B
05542:  MOVWF  x58
05544:  MOVLB  0
05546:  CALL   23A2
0554A:  MOVLB  A
....................             }
....................       }
0554C:  BRA    5558
0554E:  MOVLB  B
....................       else
....................       {
....................          Output.B4 = 1;
05550:  MOVLB  A
05552:  BSF    xCE.3
....................          SendSMS.B4 =0;
05554:  BCF    xE8.3
....................          functointest_f =0;
05556:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
05558:  BTFSS  xD8.4
0555A:  BRA    5668
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
0555C:  MOVLW  00
0555E:  BTFSC  xCC.4
05560:  MOVLW  01
05562:  MOVLB  B
05564:  MOVWF  x57
05566:  MOVLW  00
05568:  MOVLB  A
0556A:  BTFSC  xD0.4
0556C:  MOVLW  01
0556E:  MOVLB  B
05570:  XORWF  x57,W
05572:  SUBLW  01
05574:  BNZ   557C
05576:  MOVLB  A
05578:  BTFSC  xD2.4
0557A:  BRA    5582
0557C:  MOVLB  A
0557E:  BTFSS  xDC.4
05580:  BRA    5660
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
05582:  BTFSC  xDA.4
05584:  BRA    565E
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05586:  BTFSC  xDC.4
05588:  BRA    5598
0558A:  MOVF   5E,W
0558C:  SUBLW  0F
0558E:  BNZ   5598
....................             {
....................                TimeBase1s = 100 ;            //reload again
05590:  MOVLW  64
05592:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05594:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
05598:  BSF    xDC.4
....................             if(FlashingFlag == 0)
0559A:  BTFSC  1A.1
0559C:  BRA    55A2
....................             {
....................                Output.B5 = 0;           //Flash output1
0559E:  BCF    xCE.4
....................             }
055A0:  BRA    55A4
....................             else
....................             {
....................                Output.B5 = 1;
055A2:  BSF    xCE.4
....................             }
.................... 
....................             if (~AutoTestFlag)
055A4:  BTFSC  1A.4
055A6:  BRA    55C4
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
055A8:  BTFSC  xD6.4
055AA:  BRA    55B6
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
055AC:  BSF    F89.4
055AE:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
055B0:  BSF    F89.3
055B2:  BCF    F92.3
....................                }
055B4:  BRA    55C4
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
055B6:  BTFSS  xD4.4
055B8:  BRA    55C0
055BA:  BSF    F89.4
055BC:  BCF    F92.4
055BE:  BRA    55C4
....................                   else output_bit(Pbell,1);                          //Bell
055C0:  BSF    F89.3
055C2:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
055C4:  BTFSC  xE8.4
055C6:  BRA    565E
055C8:  BTFSC  30.1
055CA:  BRA    565E
055CC:  BTFSC  xDA.4
055CE:  BRA    565E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
055D0:  MOVLW  9C
055D2:  MOVWF  FF6
055D4:  MOVLW  06
055D6:  MOVWF  FF7
055D8:  MOVLB  0
055DA:  CALL   23E8
....................                putc('\n',CH2);
055DE:  MOVLW  0A
055E0:  MOVLB  B
055E2:  MOVWF  x58
055E4:  MOVLB  0
055E6:  CALL   23A2
....................                delay_ms(10);
055EA:  MOVLW  0A
055EC:  MOVLB  B
055EE:  MOVWF  x57
055F0:  MOVLB  0
055F2:  CALL   07FA
....................                
....................                SendSMS.B5 =1;
055F6:  MOVLB  A
055F8:  BSF    xE8.4
....................                fprintf(CH2,"AT+CMGS=\"");
055FA:  MOVLW  A6
055FC:  MOVWF  FF6
055FE:  MOVLW  06
05600:  MOVWF  FF7
05602:  MOVLB  0
05604:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
05608:  MOVLW  09
0560A:  MOVWF  FEA
0560C:  MOVLW  7D
0560E:  MOVWF  FE9
05610:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
05614:  MOVLW  22
05616:  MOVLB  B
05618:  MOVWF  x58
0561A:  MOVLB  0
0561C:  CALL   23A2
....................                putc('\n',CH2);
05620:  MOVLW  0A
05622:  MOVLB  B
05624:  MOVWF  x58
05626:  MOVLB  0
05628:  CALL   23A2
....................                delay_ms(50);
0562C:  MOVLW  32
0562E:  MOVLB  B
05630:  MOVWF  x57
05632:  MOVLB  0
05634:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage5);
05638:  MOVLW  0A
0563A:  MOVWF  FEA
0563C:  MOVLW  0C
0563E:  MOVWF  FE9
05640:  CALL   479E
....................               putc('\n',CH2);
05644:  MOVLW  0A
05646:  MOVLB  B
05648:  MOVWF  x58
0564A:  MOVLB  0
0564C:  CALL   23A2
....................              putc(26,CH2);
05650:  MOVLW  1A
05652:  MOVLB  B
05654:  MOVWF  x58
05656:  MOVLB  0
05658:  CALL   23A2
0565C:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
0565E:  BRA    5666
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
05660:  BTFSS  xD2.4
05662:  BRA    5666
05664:  BCF    xDA.4
....................    }
05666:  BRA    572C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
05668:  MOVLW  00
0566A:  BTFSC  xCC.4
0566C:  MOVLW  01
0566E:  MOVLB  B
05670:  MOVWF  x57
05672:  MOVLW  00
05674:  MOVLB  A
05676:  BTFSC  xD0.4
05678:  MOVLW  01
0567A:  MOVLB  B
0567C:  XORWF  x57,W
0567E:  SUBLW  01
05680:  BNZ   5724
....................       {
....................          Output.B5 = 0;
05682:  MOVLB  A
05684:  BCF    xCE.4
....................          // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05686:  BTFSC  xE8.4
05688:  BRA    5720
0568A:  BTFSC  30.1
0568C:  BRA    5720
0568E:  BTFSC  xDA.4
05690:  BRA    5720
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05692:  MOVLW  B0
05694:  MOVWF  FF6
05696:  MOVLW  06
05698:  MOVWF  FF7
0569A:  MOVLB  0
0569C:  CALL   23E8
....................                putc('\n',CH2);
056A0:  MOVLW  0A
056A2:  MOVLB  B
056A4:  MOVWF  x58
056A6:  MOVLB  0
056A8:  CALL   23A2
....................                delay_ms(10);
056AC:  MOVLW  0A
056AE:  MOVLB  B
056B0:  MOVWF  x57
056B2:  MOVLB  0
056B4:  CALL   07FA
....................                
....................                SendSMS.B5 =1;
056B8:  MOVLB  A
056BA:  BSF    xE8.4
....................                fprintf(CH2,"AT+CMGS=\"");
056BC:  MOVLW  BA
056BE:  MOVWF  FF6
056C0:  MOVLW  06
056C2:  MOVWF  FF7
056C4:  MOVLB  0
056C6:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
056CA:  MOVLW  09
056CC:  MOVWF  FEA
056CE:  MOVLW  7D
056D0:  MOVWF  FE9
056D2:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
056D6:  MOVLW  22
056D8:  MOVLB  B
056DA:  MOVWF  x58
056DC:  MOVLB  0
056DE:  CALL   23A2
....................                putc('\n',CH2);
056E2:  MOVLW  0A
056E4:  MOVLB  B
056E6:  MOVWF  x58
056E8:  MOVLB  0
056EA:  CALL   23A2
....................                delay_ms(50);
056EE:  MOVLW  32
056F0:  MOVLB  B
056F2:  MOVWF  x57
056F4:  MOVLB  0
056F6:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage5);
056FA:  MOVLW  0A
056FC:  MOVWF  FEA
056FE:  MOVLW  0C
05700:  MOVWF  FE9
05702:  CALL   479E
....................               putc('\n',CH2);
05706:  MOVLW  0A
05708:  MOVLB  B
0570A:  MOVWF  x58
0570C:  MOVLB  0
0570E:  CALL   23A2
....................              putc(26,CH2);
05712:  MOVLW  1A
05714:  MOVLB  B
05716:  MOVWF  x58
05718:  MOVLB  0
0571A:  CALL   23A2
0571E:  MOVLB  A
....................             }
....................       }
05720:  BRA    572C
05722:  MOVLB  B
....................       else
....................       {
....................          Output.B5 = 1;
05724:  MOVLB  A
05726:  BSF    xCE.4
....................          SendSMS.B5 =0;
05728:  BCF    xE8.4
....................          functointest_f =0;
0572A:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
0572C:  BTFSS  xD8.5
0572E:  BRA    583C
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
05730:  MOVLW  00
05732:  BTFSC  xCC.5
05734:  MOVLW  01
05736:  MOVLB  B
05738:  MOVWF  x57
0573A:  MOVLW  00
0573C:  MOVLB  A
0573E:  BTFSC  xD0.5
05740:  MOVLW  01
05742:  MOVLB  B
05744:  XORWF  x57,W
05746:  SUBLW  01
05748:  BNZ   5750
0574A:  MOVLB  A
0574C:  BTFSC  xD2.5
0574E:  BRA    5756
05750:  MOVLB  A
05752:  BTFSS  xDC.5
05754:  BRA    5834
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
05756:  BTFSC  xDA.5
05758:  BRA    5832
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0575A:  BTFSC  xDC.5
0575C:  BRA    576C
0575E:  MOVF   5E,W
05760:  SUBLW  0F
05762:  BNZ   576C
....................             {
....................                TimeBase1s = 100 ;            //reload again
05764:  MOVLW  64
05766:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05768:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
0576C:  BSF    xDC.5
....................             if(FlashingFlag == 0)
0576E:  BTFSC  1A.1
05770:  BRA    5776
....................             {
....................                Output.B6 = 0;           //Flash output1
05772:  BCF    xCE.5
....................             }
05774:  BRA    5778
....................             else
....................             {
....................                Output.B6 = 1;
05776:  BSF    xCE.5
....................             }
.................... 
....................             if (~AutoTestFlag)
05778:  BTFSC  1A.4
0577A:  BRA    5798
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
0577C:  BTFSC  xD6.5
0577E:  BRA    578A
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05780:  BSF    F89.4
05782:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05784:  BSF    F89.3
05786:  BCF    F92.3
....................                }
05788:  BRA    5798
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
0578A:  BTFSS  xD4.5
0578C:  BRA    5794
0578E:  BSF    F89.4
05790:  BCF    F92.4
05792:  BRA    5798
....................                   else output_bit(Pbell,1);                          //Bell
05794:  BSF    F89.3
05796:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
05798:  BTFSC  xE8.5
0579A:  BRA    5832
0579C:  BTFSC  30.1
0579E:  BRA    5832
057A0:  BTFSC  xDA.5
057A2:  BRA    5832
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
057A4:  MOVLW  C4
057A6:  MOVWF  FF6
057A8:  MOVLW  06
057AA:  MOVWF  FF7
057AC:  MOVLB  0
057AE:  CALL   23E8
....................                putc('\n',CH2);
057B2:  MOVLW  0A
057B4:  MOVLB  B
057B6:  MOVWF  x58
057B8:  MOVLB  0
057BA:  CALL   23A2
....................                delay_ms(10);
057BE:  MOVLW  0A
057C0:  MOVLB  B
057C2:  MOVWF  x57
057C4:  MOVLB  0
057C6:  CALL   07FA
....................                
....................                SendSMS.B6 =1;
057CA:  MOVLB  A
057CC:  BSF    xE8.5
....................                fprintf(CH2,"AT+CMGS=\"");
057CE:  MOVLW  CE
057D0:  MOVWF  FF6
057D2:  MOVLW  06
057D4:  MOVWF  FF7
057D6:  MOVLB  0
057D8:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
057DC:  MOVLW  09
057DE:  MOVWF  FEA
057E0:  MOVLW  7D
057E2:  MOVWF  FE9
057E4:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
057E8:  MOVLW  22
057EA:  MOVLB  B
057EC:  MOVWF  x58
057EE:  MOVLB  0
057F0:  CALL   23A2
....................                putc('\n',CH2);
057F4:  MOVLW  0A
057F6:  MOVLB  B
057F8:  MOVWF  x58
057FA:  MOVLB  0
057FC:  CALL   23A2
....................                delay_ms(50);
05800:  MOVLW  32
05802:  MOVLB  B
05804:  MOVWF  x57
05806:  MOVLB  0
05808:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage6);
0580C:  MOVLW  0A
0580E:  MOVWF  FEA
05810:  MOVLW  2C
05812:  MOVWF  FE9
05814:  CALL   479E
....................               putc('\n',CH2);
05818:  MOVLW  0A
0581A:  MOVLB  B
0581C:  MOVWF  x58
0581E:  MOVLB  0
05820:  CALL   23A2
....................              putc(26,CH2);
05824:  MOVLW  1A
05826:  MOVLB  B
05828:  MOVWF  x58
0582A:  MOVLB  0
0582C:  CALL   23A2
05830:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
05832:  BRA    583A
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
05834:  BTFSS  xD2.5
05836:  BRA    583A
05838:  BCF    xDA.5
....................    }
0583A:  BRA    5900
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
0583C:  MOVLW  00
0583E:  BTFSC  xCC.5
05840:  MOVLW  01
05842:  MOVLB  B
05844:  MOVWF  x57
05846:  MOVLW  00
05848:  MOVLB  A
0584A:  BTFSC  xD0.5
0584C:  MOVLW  01
0584E:  MOVLB  B
05850:  XORWF  x57,W
05852:  SUBLW  01
05854:  BNZ   58F8
....................       {
....................          Output.B6 = 0;
05856:  MOVLB  A
05858:  BCF    xCE.5
....................          // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0585A:  BTFSC  xE8.5
0585C:  BRA    58F4
0585E:  BTFSC  30.1
05860:  BRA    58F4
05862:  BTFSC  xDA.5
05864:  BRA    58F4
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05866:  MOVLW  D8
05868:  MOVWF  FF6
0586A:  MOVLW  06
0586C:  MOVWF  FF7
0586E:  MOVLB  0
05870:  CALL   23E8
....................                putc('\n',CH2);
05874:  MOVLW  0A
05876:  MOVLB  B
05878:  MOVWF  x58
0587A:  MOVLB  0
0587C:  CALL   23A2
....................                delay_ms(10);
05880:  MOVLW  0A
05882:  MOVLB  B
05884:  MOVWF  x57
05886:  MOVLB  0
05888:  CALL   07FA
....................                
....................                SendSMS.B6 =1;
0588C:  MOVLB  A
0588E:  BSF    xE8.5
....................                fprintf(CH2,"AT+CMGS=\"");
05890:  MOVLW  E2
05892:  MOVWF  FF6
05894:  MOVLW  06
05896:  MOVWF  FF7
05898:  MOVLB  0
0589A:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
0589E:  MOVLW  09
058A0:  MOVWF  FEA
058A2:  MOVLW  7D
058A4:  MOVWF  FE9
058A6:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
058AA:  MOVLW  22
058AC:  MOVLB  B
058AE:  MOVWF  x58
058B0:  MOVLB  0
058B2:  CALL   23A2
....................                putc('\n',CH2);
058B6:  MOVLW  0A
058B8:  MOVLB  B
058BA:  MOVWF  x58
058BC:  MOVLB  0
058BE:  CALL   23A2
....................                delay_ms(50);
058C2:  MOVLW  32
058C4:  MOVLB  B
058C6:  MOVWF  x57
058C8:  MOVLB  0
058CA:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage6);
058CE:  MOVLW  0A
058D0:  MOVWF  FEA
058D2:  MOVLW  2C
058D4:  MOVWF  FE9
058D6:  CALL   479E
....................               putc('\n',CH2);
058DA:  MOVLW  0A
058DC:  MOVLB  B
058DE:  MOVWF  x58
058E0:  MOVLB  0
058E2:  CALL   23A2
....................              putc(26,CH2);
058E6:  MOVLW  1A
058E8:  MOVLB  B
058EA:  MOVWF  x58
058EC:  MOVLB  0
058EE:  CALL   23A2
058F2:  MOVLB  A
....................             }
....................       }
058F4:  BRA    5900
058F6:  MOVLB  B
....................       else
....................       {
....................          Output.B6 = 1;
058F8:  MOVLB  A
058FA:  BSF    xCE.5
....................          SendSMS.B6 =0;
058FC:  BCF    xE8.5
....................          functointest_f =0;
058FE:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
05900:  BTFSS  xD8.6
05902:  BRA    5A10
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
05904:  MOVLW  00
05906:  BTFSC  xCC.6
05908:  MOVLW  01
0590A:  MOVLB  B
0590C:  MOVWF  x57
0590E:  MOVLW  00
05910:  MOVLB  A
05912:  BTFSC  xD0.6
05914:  MOVLW  01
05916:  MOVLB  B
05918:  XORWF  x57,W
0591A:  SUBLW  01
0591C:  BNZ   5924
0591E:  MOVLB  A
05920:  BTFSC  xD2.6
05922:  BRA    592A
05924:  MOVLB  A
05926:  BTFSS  xDC.6
05928:  BRA    5A08
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
0592A:  BTFSC  xDA.6
0592C:  BRA    5A06
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0592E:  BTFSC  xDC.6
05930:  BRA    5940
05932:  MOVF   5E,W
05934:  SUBLW  0F
05936:  BNZ   5940
....................             {
....................                TimeBase1s = 100 ;            //reload again
05938:  MOVLW  64
0593A:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0593C:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
05940:  BSF    xDC.6
....................             if(FlashingFlag == 0)
05942:  BTFSC  1A.1
05944:  BRA    594A
....................             {
....................                Output.B7 = 0;           //Flash output1
05946:  BCF    xCE.6
....................             }
05948:  BRA    594C
....................             else
....................             {
....................                Output.B7 = 1;
0594A:  BSF    xCE.6
....................             }
.................... 
....................             if (~AutoTestFlag)
0594C:  BTFSC  1A.4
0594E:  BRA    596C
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
05950:  BTFSC  xD6.6
05952:  BRA    595E
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05954:  BSF    F89.4
05956:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05958:  BSF    F89.3
0595A:  BCF    F92.3
....................                }
0595C:  BRA    596C
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
0595E:  BTFSS  xD4.6
05960:  BRA    5968
05962:  BSF    F89.4
05964:  BCF    F92.4
05966:  BRA    596C
....................                   else output_bit(Pbell,1);                          //Bell
05968:  BSF    F89.3
0596A:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0596C:  BTFSC  xE8.6
0596E:  BRA    5A06
05970:  BTFSC  30.1
05972:  BRA    5A06
05974:  BTFSC  xDA.6
05976:  BRA    5A06
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05978:  MOVLW  EC
0597A:  MOVWF  FF6
0597C:  MOVLW  06
0597E:  MOVWF  FF7
05980:  MOVLB  0
05982:  CALL   23E8
....................                putc('\n',CH2);
05986:  MOVLW  0A
05988:  MOVLB  B
0598A:  MOVWF  x58
0598C:  MOVLB  0
0598E:  CALL   23A2
....................                delay_ms(10);
05992:  MOVLW  0A
05994:  MOVLB  B
05996:  MOVWF  x57
05998:  MOVLB  0
0599A:  CALL   07FA
....................                
....................                SendSMS.B7 =1;
0599E:  MOVLB  A
059A0:  BSF    xE8.6
....................                fprintf(CH2,"AT+CMGS=\"");
059A2:  MOVLW  F6
059A4:  MOVWF  FF6
059A6:  MOVLW  06
059A8:  MOVWF  FF7
059AA:  MOVLB  0
059AC:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
059B0:  MOVLW  09
059B2:  MOVWF  FEA
059B4:  MOVLW  7D
059B6:  MOVWF  FE9
059B8:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
059BC:  MOVLW  22
059BE:  MOVLB  B
059C0:  MOVWF  x58
059C2:  MOVLB  0
059C4:  CALL   23A2
....................                putc('\n',CH2);
059C8:  MOVLW  0A
059CA:  MOVLB  B
059CC:  MOVWF  x58
059CE:  MOVLB  0
059D0:  CALL   23A2
....................                delay_ms(50);
059D4:  MOVLW  32
059D6:  MOVLB  B
059D8:  MOVWF  x57
059DA:  MOVLB  0
059DC:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage7);  
059E0:  MOVLW  0A
059E2:  MOVWF  FEA
059E4:  MOVLW  4C
059E6:  MOVWF  FE9
059E8:  CALL   479E
....................               putc('\n',CH2);
059EC:  MOVLW  0A
059EE:  MOVLB  B
059F0:  MOVWF  x58
059F2:  MOVLB  0
059F4:  CALL   23A2
....................              putc(26,CH2);
059F8:  MOVLW  1A
059FA:  MOVLB  B
059FC:  MOVWF  x58
059FE:  MOVLB  0
05A00:  CALL   23A2
05A04:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
05A06:  BRA    5A0E
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
05A08:  BTFSS  xD2.6
05A0A:  BRA    5A0E
05A0C:  BCF    xDA.6
....................    }
05A0E:  BRA    5AD4
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
05A10:  MOVLW  00
05A12:  BTFSC  xCC.6
05A14:  MOVLW  01
05A16:  MOVLB  B
05A18:  MOVWF  x57
05A1A:  MOVLW  00
05A1C:  MOVLB  A
05A1E:  BTFSC  xD0.6
05A20:  MOVLW  01
05A22:  MOVLB  B
05A24:  XORWF  x57,W
05A26:  SUBLW  01
05A28:  BNZ   5ACC
....................       {
....................          Output.B7 = 0;
05A2A:  MOVLB  A
05A2C:  BCF    xCE.6
....................          // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
05A2E:  BTFSC  xE8.6
05A30:  BRA    5AC8
05A32:  BTFSC  30.1
05A34:  BRA    5AC8
05A36:  BTFSC  xDA.6
05A38:  BRA    5AC8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05A3A:  MOVLW  00
05A3C:  MOVWF  FF6
05A3E:  MOVLW  07
05A40:  MOVWF  FF7
05A42:  MOVLB  0
05A44:  CALL   23E8
....................                putc('\n',CH2);
05A48:  MOVLW  0A
05A4A:  MOVLB  B
05A4C:  MOVWF  x58
05A4E:  MOVLB  0
05A50:  CALL   23A2
....................                delay_ms(10);
05A54:  MOVLW  0A
05A56:  MOVLB  B
05A58:  MOVWF  x57
05A5A:  MOVLB  0
05A5C:  CALL   07FA
....................                
....................                SendSMS.B7 =1;
05A60:  MOVLB  A
05A62:  BSF    xE8.6
....................                fprintf(CH2,"AT+CMGS=\"");
05A64:  MOVLW  0A
05A66:  MOVWF  FF6
05A68:  MOVLW  07
05A6A:  MOVWF  FF7
05A6C:  MOVLB  0
05A6E:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
05A72:  MOVLW  09
05A74:  MOVWF  FEA
05A76:  MOVLW  7D
05A78:  MOVWF  FE9
05A7A:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
05A7E:  MOVLW  22
05A80:  MOVLB  B
05A82:  MOVWF  x58
05A84:  MOVLB  0
05A86:  CALL   23A2
....................                putc('\n',CH2);
05A8A:  MOVLW  0A
05A8C:  MOVLB  B
05A8E:  MOVWF  x58
05A90:  MOVLB  0
05A92:  CALL   23A2
....................                delay_ms(50);
05A96:  MOVLW  32
05A98:  MOVLB  B
05A9A:  MOVWF  x57
05A9C:  MOVLB  0
05A9E:  CALL   07FA
....................               
....................               fprintf(CH2,SMS_Massage7);  
05AA2:  MOVLW  0A
05AA4:  MOVWF  FEA
05AA6:  MOVLW  4C
05AA8:  MOVWF  FE9
05AAA:  CALL   479E
....................               putc('\n',CH2);
05AAE:  MOVLW  0A
05AB0:  MOVLB  B
05AB2:  MOVWF  x58
05AB4:  MOVLB  0
05AB6:  CALL   23A2
....................              putc(26,CH2);
05ABA:  MOVLW  1A
05ABC:  MOVLB  B
05ABE:  MOVWF  x58
05AC0:  MOVLB  0
05AC2:  CALL   23A2
05AC6:  MOVLB  A
....................             }
....................       }
05AC8:  BRA    5AD4
05ACA:  MOVLB  B
....................       else
....................       {
....................          Output.B7 = 1;
05ACC:  MOVLB  A
05ACE:  BSF    xCE.6
....................          SendSMS.B7 =0;
05AD0:  BCF    xE8.6
....................          functointest_f =0;
05AD2:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
05AD4:  BTFSS  xD8.7
05AD6:  BRA    5BE4
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
05AD8:  MOVLW  00
05ADA:  BTFSC  xCC.7
05ADC:  MOVLW  01
05ADE:  MOVLB  B
05AE0:  MOVWF  x57
05AE2:  MOVLW  00
05AE4:  MOVLB  A
05AE6:  BTFSC  xD0.7
05AE8:  MOVLW  01
05AEA:  MOVLB  B
05AEC:  XORWF  x57,W
05AEE:  SUBLW  01
05AF0:  BNZ   5AF8
05AF2:  MOVLB  A
05AF4:  BTFSC  xD2.7
05AF6:  BRA    5AFE
05AF8:  MOVLB  A
05AFA:  BTFSS  xDC.7
05AFC:  BRA    5BDC
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
05AFE:  BTFSC  xDA.7
05B00:  BRA    5BDA
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05B02:  BTFSC  xDC.7
05B04:  BRA    5B14
05B06:  MOVF   5E,W
05B08:  SUBLW  0F
05B0A:  BNZ   5B14
....................             {
....................                TimeBase1s = 100 ;            //reload again
05B0C:  MOVLW  64
05B0E:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05B10:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
05B14:  BSF    xDC.7
....................             if(FlashingFlag == 0)
05B16:  BTFSC  1A.1
05B18:  BRA    5B1E
....................             {
....................                Output.B8 = 0;           //Flash output1
05B1A:  BCF    xCE.7
....................             }
05B1C:  BRA    5B20
....................             else
....................             {
....................                Output.B8 = 1;
05B1E:  BSF    xCE.7
....................             }
.................... 
....................             if (~AutoTestFlag)
05B20:  BTFSC  1A.4
05B22:  BRA    5B40
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
05B24:  BTFSC  xD6.7
05B26:  BRA    5B32
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05B28:  BSF    F89.4
05B2A:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05B2C:  BSF    F89.3
05B2E:  BCF    F92.3
....................                }
05B30:  BRA    5B40
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
05B32:  BTFSS  xD4.7
05B34:  BRA    5B3C
05B36:  BSF    F89.4
05B38:  BCF    F92.4
05B3A:  BRA    5B40
....................                   else output_bit(Pbell,1);                          //Bell
05B3C:  BSF    F89.3
05B3E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05B40:  BTFSC  xE8.7
05B42:  BRA    5BDA
05B44:  BTFSC  30.1
05B46:  BRA    5BDA
05B48:  BTFSC  xDA.7
05B4A:  BRA    5BDA
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05B4C:  MOVLW  14
05B4E:  MOVWF  FF6
05B50:  MOVLW  07
05B52:  MOVWF  FF7
05B54:  MOVLB  0
05B56:  CALL   23E8
....................             putc('\n',CH2);
05B5A:  MOVLW  0A
05B5C:  MOVLB  B
05B5E:  MOVWF  x58
05B60:  MOVLB  0
05B62:  CALL   23A2
....................             delay_ms(10);
05B66:  MOVLW  0A
05B68:  MOVLB  B
05B6A:  MOVWF  x57
05B6C:  MOVLB  0
05B6E:  CALL   07FA
....................             
....................             SendSMS.B8 =1;
05B72:  MOVLB  A
05B74:  BSF    xE8.7
....................             fprintf(CH2,"AT+CMGS=\"");
05B76:  MOVLW  1E
05B78:  MOVWF  FF6
05B7A:  MOVLW  07
05B7C:  MOVWF  FF7
05B7E:  MOVLB  0
05B80:  CALL   23E8
....................             fprintf(CH2,sms_phonenumber);
05B84:  MOVLW  09
05B86:  MOVWF  FEA
05B88:  MOVLW  7D
05B8A:  MOVWF  FE9
05B8C:  CALL   479E
....................             
....................             fprintf(CH2,"\"");
05B90:  MOVLW  22
05B92:  MOVLB  B
05B94:  MOVWF  x58
05B96:  MOVLB  0
05B98:  CALL   23A2
....................             putc('\n',CH2);
05B9C:  MOVLW  0A
05B9E:  MOVLB  B
05BA0:  MOVWF  x58
05BA2:  MOVLB  0
05BA4:  CALL   23A2
....................             delay_ms(50);
05BA8:  MOVLW  32
05BAA:  MOVLB  B
05BAC:  MOVWF  x57
05BAE:  MOVLB  0
05BB0:  CALL   07FA
....................            
....................            printf(SMS_Massage8);  
05BB4:  MOVLW  0A
05BB6:  MOVWF  FEA
05BB8:  MOVLW  6C
05BBA:  MOVWF  FE9
05BBC:  CALL   479E
....................            putc('\n',CH2);
05BC0:  MOVLW  0A
05BC2:  MOVLB  B
05BC4:  MOVWF  x58
05BC6:  MOVLB  0
05BC8:  CALL   23A2
....................           putc(26,CH2);
05BCC:  MOVLW  1A
05BCE:  MOVLB  B
05BD0:  MOVWF  x58
05BD2:  MOVLB  0
05BD4:  CALL   23A2
05BD8:  MOVLB  A
....................          }
....................        }
.................... 
....................       }
05BDA:  BRA    5BE2
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
05BDC:  BTFSS  xD2.7
05BDE:  BRA    5BE2
05BE0:  BCF    xDA.7
....................    }
05BE2:  BRA    5CA8
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
05BE4:  MOVLW  00
05BE6:  BTFSC  xCC.7
05BE8:  MOVLW  01
05BEA:  MOVLB  B
05BEC:  MOVWF  x57
05BEE:  MOVLW  00
05BF0:  MOVLB  A
05BF2:  BTFSC  xD0.7
05BF4:  MOVLW  01
05BF6:  MOVLB  B
05BF8:  XORWF  x57,W
05BFA:  SUBLW  01
05BFC:  BNZ   5CA0
....................       {
....................          Output.B8 = 0;
05BFE:  MOVLB  A
05C00:  BCF    xCE.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05C02:  BTFSC  xE8.7
05C04:  BRA    5C9C
05C06:  BTFSC  30.1
05C08:  BRA    5C9C
05C0A:  BTFSC  xDA.7
05C0C:  BRA    5C9C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05C0E:  MOVLW  28
05C10:  MOVWF  FF6
05C12:  MOVLW  07
05C14:  MOVWF  FF7
05C16:  MOVLB  0
05C18:  CALL   23E8
....................             putc('\n',CH2);
05C1C:  MOVLW  0A
05C1E:  MOVLB  B
05C20:  MOVWF  x58
05C22:  MOVLB  0
05C24:  CALL   23A2
....................             delay_ms(10);
05C28:  MOVLW  0A
05C2A:  MOVLB  B
05C2C:  MOVWF  x57
05C2E:  MOVLB  0
05C30:  CALL   07FA
....................             
....................             SendSMS.B8 =1;
05C34:  MOVLB  A
05C36:  BSF    xE8.7
....................             fprintf(CH2,"AT+CMGS=\"");
05C38:  MOVLW  32
05C3A:  MOVWF  FF6
05C3C:  MOVLW  07
05C3E:  MOVWF  FF7
05C40:  MOVLB  0
05C42:  CALL   23E8
....................             fprintf(CH2,sms_phonenumber);
05C46:  MOVLW  09
05C48:  MOVWF  FEA
05C4A:  MOVLW  7D
05C4C:  MOVWF  FE9
05C4E:  CALL   479E
....................             
....................             fprintf(CH2,"\"");
05C52:  MOVLW  22
05C54:  MOVLB  B
05C56:  MOVWF  x58
05C58:  MOVLB  0
05C5A:  CALL   23A2
....................             putc('\n',CH2);
05C5E:  MOVLW  0A
05C60:  MOVLB  B
05C62:  MOVWF  x58
05C64:  MOVLB  0
05C66:  CALL   23A2
....................             delay_ms(50);
05C6A:  MOVLW  32
05C6C:  MOVLB  B
05C6E:  MOVWF  x57
05C70:  MOVLB  0
05C72:  CALL   07FA
....................            
....................            printf(SMS_Massage8);  
05C76:  MOVLW  0A
05C78:  MOVWF  FEA
05C7A:  MOVLW  6C
05C7C:  MOVWF  FE9
05C7E:  CALL   479E
....................            putc('\n',CH2);
05C82:  MOVLW  0A
05C84:  MOVLB  B
05C86:  MOVWF  x58
05C88:  MOVLB  0
05C8A:  CALL   23A2
....................           putc(26,CH2);
05C8E:  MOVLW  1A
05C90:  MOVLB  B
05C92:  MOVWF  x58
05C94:  MOVLB  0
05C96:  CALL   23A2
05C9A:  MOVLB  A
....................          }
....................       }
05C9C:  BRA    5CA8
05C9E:  MOVLB  B
....................       else
....................       {
....................          Output.B8 = 1;
05CA0:  MOVLB  A
05CA2:  BSF    xCE.7
....................          SendSMS.B8 =0;
05CA4:  BCF    xE8.7
....................          functointest_f =0;
05CA6:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
05CA8:  BTFSS  xD9.0
05CAA:  BRA    5DB8
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
05CAC:  MOVLW  00
05CAE:  BTFSC  xCD.0
05CB0:  MOVLW  01
05CB2:  MOVLB  B
05CB4:  MOVWF  x57
05CB6:  MOVLW  00
05CB8:  MOVLB  A
05CBA:  BTFSC  xD1.0
05CBC:  MOVLW  01
05CBE:  MOVLB  B
05CC0:  XORWF  x57,W
05CC2:  SUBLW  01
05CC4:  BNZ   5CCC
05CC6:  MOVLB  A
05CC8:  BTFSC  xD3.0
05CCA:  BRA    5CD2
05CCC:  MOVLB  A
05CCE:  BTFSS  xDD.0
05CD0:  BRA    5DB0
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
05CD2:  BTFSC  xDB.0
05CD4:  BRA    5DAE
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05CD6:  BTFSC  xDD.0
05CD8:  BRA    5CE8
05CDA:  MOVF   5E,W
05CDC:  SUBLW  0F
05CDE:  BNZ   5CE8
....................             {
....................                TimeBase1s = 100 ;            //reload again
05CE0:  MOVLW  64
05CE2:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05CE4:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
05CE8:  BSF    xDD.0
....................             if(FlashingFlag == 0)
05CEA:  BTFSC  1A.1
05CEC:  BRA    5CF2
....................             {
....................                Output.B9 = 0;           //Flash output1
05CEE:  BCF    xCF.0
....................             }
05CF0:  BRA    5CF4
....................             else
....................             {
....................                Output.B9 = 1;
05CF2:  BSF    xCF.0
....................             }
.................... 
....................             if (~AutoTestFlag)
05CF4:  BTFSC  1A.4
05CF6:  BRA    5D14
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
05CF8:  BTFSC  xD7.0
05CFA:  BRA    5D06
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05CFC:  BSF    F89.4
05CFE:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05D00:  BSF    F89.3
05D02:  BCF    F92.3
....................                }
05D04:  BRA    5D14
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
05D06:  BTFSS  xD5.0
05D08:  BRA    5D10
05D0A:  BSF    F89.4
05D0C:  BCF    F92.4
05D0E:  BRA    5D14
....................                   else output_bit(Pbell,1);                          //Bell
05D10:  BSF    F89.3
05D12:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
05D14:  BTFSC  xE9.0
05D16:  BRA    5DAE
05D18:  BTFSC  30.1
05D1A:  BRA    5DAE
05D1C:  BTFSC  xDB.0
05D1E:  BRA    5DAE
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05D20:  MOVLW  3C
05D22:  MOVWF  FF6
05D24:  MOVLW  07
05D26:  MOVWF  FF7
05D28:  MOVLB  0
05D2A:  CALL   23E8
....................                putc('\n',CH2);
05D2E:  MOVLW  0A
05D30:  MOVLB  B
05D32:  MOVWF  x58
05D34:  MOVLB  0
05D36:  CALL   23A2
....................                delay_ms(10);
05D3A:  MOVLW  0A
05D3C:  MOVLB  B
05D3E:  MOVWF  x57
05D40:  MOVLB  0
05D42:  CALL   07FA
....................                
....................                SendSMS.B9 =1;
05D46:  MOVLB  A
05D48:  BSF    xE9.0
....................                fprintf(CH2,"AT+CMGS=\"");
05D4A:  MOVLW  46
05D4C:  MOVWF  FF6
05D4E:  MOVLW  07
05D50:  MOVWF  FF7
05D52:  MOVLB  0
05D54:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
05D58:  MOVLW  09
05D5A:  MOVWF  FEA
05D5C:  MOVLW  7D
05D5E:  MOVWF  FE9
05D60:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
05D64:  MOVLW  22
05D66:  MOVLB  B
05D68:  MOVWF  x58
05D6A:  MOVLB  0
05D6C:  CALL   23A2
....................                putc('\n',CH2);
05D70:  MOVLW  0A
05D72:  MOVLB  B
05D74:  MOVWF  x58
05D76:  MOVLB  0
05D78:  CALL   23A2
....................                delay_ms(50);
05D7C:  MOVLW  32
05D7E:  MOVLB  B
05D80:  MOVWF  x57
05D82:  MOVLB  0
05D84:  CALL   07FA
....................               
....................               printf(SMS_Massage9);  
05D88:  MOVLW  0A
05D8A:  MOVWF  FEA
05D8C:  MOVLW  8C
05D8E:  MOVWF  FE9
05D90:  CALL   479E
....................               putc('\n',CH2);
05D94:  MOVLW  0A
05D96:  MOVLB  B
05D98:  MOVWF  x58
05D9A:  MOVLB  0
05D9C:  CALL   23A2
....................               putc(26,CH2);
05DA0:  MOVLW  1A
05DA2:  MOVLB  B
05DA4:  MOVWF  x58
05DA6:  MOVLB  0
05DA8:  CALL   23A2
05DAC:  MOVLB  A
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
05DAE:  BRA    5DB6
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
05DB0:  BTFSS  xD3.0
05DB2:  BRA    5DB6
05DB4:  BCF    xDB.0
....................    }
05DB6:  BRA    5E7C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
05DB8:  MOVLW  00
05DBA:  BTFSC  xCD.0
05DBC:  MOVLW  01
05DBE:  MOVLB  B
05DC0:  MOVWF  x57
05DC2:  MOVLW  00
05DC4:  MOVLB  A
05DC6:  BTFSC  xD1.0
05DC8:  MOVLW  01
05DCA:  MOVLB  B
05DCC:  XORWF  x57,W
05DCE:  SUBLW  01
05DD0:  BNZ   5E74
....................       {
....................          Output.B9 = 0;
05DD2:  MOVLB  A
05DD4:  BCF    xCF.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
05DD6:  BTFSC  xE9.0
05DD8:  BRA    5E70
05DDA:  BTFSC  30.1
05DDC:  BRA    5E70
05DDE:  BTFSC  xDB.0
05DE0:  BRA    5E70
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05DE2:  MOVLW  50
05DE4:  MOVWF  FF6
05DE6:  MOVLW  07
05DE8:  MOVWF  FF7
05DEA:  MOVLB  0
05DEC:  CALL   23E8
....................             putc('\n',CH2);
05DF0:  MOVLW  0A
05DF2:  MOVLB  B
05DF4:  MOVWF  x58
05DF6:  MOVLB  0
05DF8:  CALL   23A2
....................             delay_ms(10);
05DFC:  MOVLW  0A
05DFE:  MOVLB  B
05E00:  MOVWF  x57
05E02:  MOVLB  0
05E04:  CALL   07FA
....................             
....................             SendSMS.B9 =1;
05E08:  MOVLB  A
05E0A:  BSF    xE9.0
....................             fprintf(CH2,"AT+CMGS=\"");
05E0C:  MOVLW  5A
05E0E:  MOVWF  FF6
05E10:  MOVLW  07
05E12:  MOVWF  FF7
05E14:  MOVLB  0
05E16:  CALL   23E8
....................             fprintf(CH2,sms_phonenumber);
05E1A:  MOVLW  09
05E1C:  MOVWF  FEA
05E1E:  MOVLW  7D
05E20:  MOVWF  FE9
05E22:  CALL   479E
....................             
....................             fprintf(CH2,"\"");
05E26:  MOVLW  22
05E28:  MOVLB  B
05E2A:  MOVWF  x58
05E2C:  MOVLB  0
05E2E:  CALL   23A2
....................             putc('\n',CH2);
05E32:  MOVLW  0A
05E34:  MOVLB  B
05E36:  MOVWF  x58
05E38:  MOVLB  0
05E3A:  CALL   23A2
....................             delay_ms(50);
05E3E:  MOVLW  32
05E40:  MOVLB  B
05E42:  MOVWF  x57
05E44:  MOVLB  0
05E46:  CALL   07FA
....................            
....................            printf(SMS_Massage9);  
05E4A:  MOVLW  0A
05E4C:  MOVWF  FEA
05E4E:  MOVLW  8C
05E50:  MOVWF  FE9
05E52:  CALL   479E
....................            putc('\n',CH2);
05E56:  MOVLW  0A
05E58:  MOVLB  B
05E5A:  MOVWF  x58
05E5C:  MOVLB  0
05E5E:  CALL   23A2
....................            putc(26,CH2);
05E62:  MOVLW  1A
05E64:  MOVLB  B
05E66:  MOVWF  x58
05E68:  MOVLB  0
05E6A:  CALL   23A2
05E6E:  MOVLB  A
....................          }
....................          ///////////////////////////////////
....................       }
05E70:  BRA    5E7C
05E72:  MOVLB  B
....................       else
....................       {
....................          Output.B9 = 1;
05E74:  MOVLB  A
05E76:  BSF    xCF.0
....................          SendSMS.B9 =0;
05E78:  BCF    xE9.0
....................          functointest_f =0;
05E7A:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
05E7C:  BTFSS  xD9.1
05E7E:  BRA    5F8C
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
05E80:  MOVLW  00
05E82:  BTFSC  xCD.1
05E84:  MOVLW  01
05E86:  MOVLB  B
05E88:  MOVWF  x57
05E8A:  MOVLW  00
05E8C:  MOVLB  A
05E8E:  BTFSC  xD1.1
05E90:  MOVLW  01
05E92:  MOVLB  B
05E94:  XORWF  x57,W
05E96:  SUBLW  01
05E98:  BNZ   5EA0
05E9A:  MOVLB  A
05E9C:  BTFSC  xD3.1
05E9E:  BRA    5EA6
05EA0:  MOVLB  A
05EA2:  BTFSS  xDD.1
05EA4:  BRA    5F84
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
05EA6:  BTFSC  xDB.1
05EA8:  BRA    5F82
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05EAA:  BTFSC  xDD.1
05EAC:  BRA    5EBC
05EAE:  MOVF   5E,W
05EB0:  SUBLW  0F
05EB2:  BNZ   5EBC
....................             {
....................                TimeBase1s = 100 ;            //reload again
05EB4:  MOVLW  64
05EB6:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05EB8:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
05EBC:  BSF    xDD.1
....................             if(FlashingFlag == 0)
05EBE:  BTFSC  1A.1
05EC0:  BRA    5EC6
....................             {
....................                Output.B10 = 0;           //Flash output1
05EC2:  BCF    xCF.1
....................             }
05EC4:  BRA    5EC8
....................             else
....................             {
....................                Output.B10 = 1;
05EC6:  BSF    xCF.1
....................             }
.................... 
....................             if (~AutoTestFlag)
05EC8:  BTFSC  1A.4
05ECA:  BRA    5EE8
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
05ECC:  BTFSC  xD7.1
05ECE:  BRA    5EDA
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05ED0:  BSF    F89.4
05ED2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05ED4:  BSF    F89.3
05ED6:  BCF    F92.3
....................                }
05ED8:  BRA    5EE8
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
05EDA:  BTFSS  xD5.1
05EDC:  BRA    5EE4
05EDE:  BSF    F89.4
05EE0:  BCF    F92.4
05EE2:  BRA    5EE8
....................                   else output_bit(Pbell,1);                          //Bell
05EE4:  BSF    F89.3
05EE6:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
05EE8:  BTFSC  xE9.1
05EEA:  BRA    5F82
05EEC:  BTFSC  30.1
05EEE:  BRA    5F82
05EF0:  BTFSC  xDB.1
05EF2:  BRA    5F82
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05EF4:  MOVLW  64
05EF6:  MOVWF  FF6
05EF8:  MOVLW  07
05EFA:  MOVWF  FF7
05EFC:  MOVLB  0
05EFE:  CALL   23E8
....................                putc('\n',CH2);
05F02:  MOVLW  0A
05F04:  MOVLB  B
05F06:  MOVWF  x58
05F08:  MOVLB  0
05F0A:  CALL   23A2
....................                delay_ms(10);
05F0E:  MOVLW  0A
05F10:  MOVLB  B
05F12:  MOVWF  x57
05F14:  MOVLB  0
05F16:  CALL   07FA
....................                
....................                SendSMS.B10 =1;
05F1A:  MOVLB  A
05F1C:  BSF    xE9.1
....................                fprintf(CH2,"AT+CMGS=\"");
05F1E:  MOVLW  6E
05F20:  MOVWF  FF6
05F22:  MOVLW  07
05F24:  MOVWF  FF7
05F26:  MOVLB  0
05F28:  CALL   23E8
....................                fprintf(CH2,sms_phonenumber);
05F2C:  MOVLW  09
05F2E:  MOVWF  FEA
05F30:  MOVLW  7D
05F32:  MOVWF  FE9
05F34:  CALL   479E
....................                
....................                fprintf(CH2,"\"");
05F38:  MOVLW  22
05F3A:  MOVLB  B
05F3C:  MOVWF  x58
05F3E:  MOVLB  0
05F40:  CALL   23A2
....................                putc('\n',CH2);
05F44:  MOVLW  0A
05F46:  MOVLB  B
05F48:  MOVWF  x58
05F4A:  MOVLB  0
05F4C:  CALL   23A2
....................                delay_ms(50);
05F50:  MOVLW  32
05F52:  MOVLB  B
05F54:  MOVWF  x57
05F56:  MOVLB  0
05F58:  CALL   07FA
....................               
....................               printf(SMS_Massage10);  
05F5C:  MOVLW  0A
05F5E:  MOVWF  FEA
05F60:  MOVLW  AC
05F62:  MOVWF  FE9
05F64:  CALL   479E
....................               putc('\n',CH2);
05F68:  MOVLW  0A
05F6A:  MOVLB  B
05F6C:  MOVWF  x58
05F6E:  MOVLB  0
05F70:  CALL   23A2
....................               putc(26,CH2);
05F74:  MOVLW  1A
05F76:  MOVLB  B
05F78:  MOVWF  x58
05F7A:  MOVLB  0
05F7C:  CALL   23A2
05F80:  MOVLB  A
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
05F82:  BRA    5F8A
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
05F84:  BTFSS  xD3.1
05F86:  BRA    5F8A
05F88:  BCF    xDB.1
....................    }
05F8A:  BRA    6050
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
05F8C:  MOVLW  00
05F8E:  BTFSC  xCD.1
05F90:  MOVLW  01
05F92:  MOVLB  B
05F94:  MOVWF  x57
05F96:  MOVLW  00
05F98:  MOVLB  A
05F9A:  BTFSC  xD1.1
05F9C:  MOVLW  01
05F9E:  MOVLB  B
05FA0:  XORWF  x57,W
05FA2:  SUBLW  01
05FA4:  BNZ   6048
....................       {
....................          Output.B10 = 0;
05FA6:  MOVLB  A
05FA8:  BCF    xCF.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
05FAA:  BTFSC  xE9.1
05FAC:  BRA    6044
05FAE:  BTFSC  30.1
05FB0:  BRA    6044
05FB2:  BTFSC  xDB.1
05FB4:  BRA    6044
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05FB6:  MOVLW  78
05FB8:  MOVWF  FF6
05FBA:  MOVLW  07
05FBC:  MOVWF  FF7
05FBE:  MOVLB  0
05FC0:  CALL   23E8
....................             putc('\n',CH2);
05FC4:  MOVLW  0A
05FC6:  MOVLB  B
05FC8:  MOVWF  x58
05FCA:  MOVLB  0
05FCC:  CALL   23A2
....................             delay_ms(10);
05FD0:  MOVLW  0A
05FD2:  MOVLB  B
05FD4:  MOVWF  x57
05FD6:  MOVLB  0
05FD8:  CALL   07FA
....................             
....................             SendSMS.B10 =1;
05FDC:  MOVLB  A
05FDE:  BSF    xE9.1
....................             fprintf(CH2,"AT+CMGS=\"");
05FE0:  MOVLW  82
05FE2:  MOVWF  FF6
05FE4:  MOVLW  07
05FE6:  MOVWF  FF7
05FE8:  MOVLB  0
05FEA:  CALL   23E8
....................             fprintf(CH2,sms_phonenumber);
05FEE:  MOVLW  09
05FF0:  MOVWF  FEA
05FF2:  MOVLW  7D
05FF4:  MOVWF  FE9
05FF6:  CALL   479E
....................             
....................             fprintf(CH2,"\"");
05FFA:  MOVLW  22
05FFC:  MOVLB  B
05FFE:  MOVWF  x58
06000:  MOVLB  0
06002:  CALL   23A2
....................             putc('\n',CH2);
06006:  MOVLW  0A
06008:  MOVLB  B
0600A:  MOVWF  x58
0600C:  MOVLB  0
0600E:  CALL   23A2
....................             delay_ms(50);
06012:  MOVLW  32
06014:  MOVLB  B
06016:  MOVWF  x57
06018:  MOVLB  0
0601A:  CALL   07FA
....................            
....................            printf(SMS_Massage10);  
0601E:  MOVLW  0A
06020:  MOVWF  FEA
06022:  MOVLW  AC
06024:  MOVWF  FE9
06026:  CALL   479E
....................            putc('\n',CH2);
0602A:  MOVLW  0A
0602C:  MOVLB  B
0602E:  MOVWF  x58
06030:  MOVLB  0
06032:  CALL   23A2
....................            putc(26,CH2);
06036:  MOVLW  1A
06038:  MOVLB  B
0603A:  MOVWF  x58
0603C:  MOVLB  0
0603E:  CALL   23A2
06042:  MOVLB  A
....................          }
....................          ///////////////////////////////////
....................       }
06044:  BRA    6050
06046:  MOVLB  B
....................       else
....................       {
....................          Output.B10 = 1;
06048:  MOVLB  A
0604A:  BSF    xCF.1
....................          SendSMS.B10 =0;
0604C:  BCF    xE9.1
....................          functointest_f =0;
0604E:  BCF    30.1
....................       }
....................    }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... ////////////////////////////// AUTO RESET ///////////////////////////////////
.................... /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06050:  MOVLW  00
06052:  BTFSC  xCC.0
06054:  MOVLW  01
06056:  MOVLB  B
06058:  MOVWF  x57
0605A:  MOVLW  00
0605C:  MOVLB  A
0605E:  BTFSC  xD0.0
06060:  MOVLW  01
06062:  MOVLB  B
06064:  XORWF  x57,W
06066:  SUBLW  01
06068:  BNZ   6072
0606A:  MOVLB  A
0606C:  BTFSS  xD2.0
0606E:  BRA    6078
06070:  MOVLB  B
06072:  BTFSS  1A.5
06074:  BRA    613A
06076:  MOVLB  A
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
06078:  BTFSC  xDE.0
0607A:  BRA    608E
0607C:  MOVF   5E,W
0607E:  SUBLW  0F
06080:  BNZ   608E
06082:  BTFSC  xDA.0
06084:  BRA    608E
....................       {
....................             TimeBase1s = 100 ;            //reload again
06086:  MOVLW  64
06088:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0608A:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B1 = 1;
0608E:  BSF    xDE.0
....................       if(Ack.B1 == 0)
06090:  BTFSC  xDA.0
06092:  BRA    60BE
....................       {
....................          if(FlashingFlag == 0)
06094:  BTFSC  1A.1
06096:  BRA    609C
....................          {
....................             Output.B1 = 0;           //Flash output1
06098:  BCF    xCE.0
....................          }
0609A:  BRA    609E
....................          else
....................          {
....................             Output.B1 = 1;
0609C:  BSF    xCE.0
....................          }
....................          if (~AutoTestFlag)
0609E:  BTFSC  1A.4
060A0:  BRA    60BE
....................          {
....................              if(OutputBoth.B1 == 0)        //Both output
060A2:  BTFSC  xD6.0
060A4:  BRA    60B0
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
060A6:  BSF    F89.4
060A8:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
060AA:  BSF    F89.3
060AC:  BCF    F92.3
....................              }
060AE:  BRA    60BE
....................              else
....................              {
....................                if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
060B0:  BTFSS  xD4.0
060B2:  BRA    60BA
060B4:  BSF    F89.4
060B6:  BCF    F92.4
060B8:  BRA    60BE
....................                else output_bit(Pbell,1);                          //Bell
060BA:  BSF    F89.3
060BC:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
060BE:  MOVLW  01
060C0:  MOVLB  B
060C2:  MOVWF  x4A
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
060C4:  MOVLB  A
060C6:  BTFSC  xE8.0
060C8:  BRA    6138
060CA:  BTFSC  30.1
060CC:  BRA    6138
060CE:  BTFSC  xDA.0
060D0:  BRA    6138
....................       {
....................          SendSMS.B1 =1;
060D2:  BSF    xE8.0
....................          fprintf(CH2,"AT+CMGS=\"");
060D4:  MOVLW  8C
060D6:  MOVWF  FF6
060D8:  MOVLW  07
060DA:  MOVWF  FF7
060DC:  MOVLB  0
060DE:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
060E2:  MOVLW  09
060E4:  MOVWF  FEA
060E6:  MOVLW  7D
060E8:  MOVWF  FE9
060EA:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
060EE:  MOVLW  22
060F0:  MOVLB  B
060F2:  MOVWF  x58
060F4:  MOVLB  0
060F6:  CALL   23A2
....................          putc('\n',CH2);
060FA:  MOVLW  0A
060FC:  MOVLB  B
060FE:  MOVWF  x58
06100:  MOVLB  0
06102:  CALL   23A2
....................          delay_ms(50);
06106:  MOVLW  32
06108:  MOVLB  B
0610A:  MOVWF  x57
0610C:  MOVLB  0
0610E:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage1);   
06112:  MOVLW  09
06114:  MOVWF  FEA
06116:  MOVLW  8C
06118:  MOVWF  FE9
0611A:  CALL   479E
....................         putc('\n',CH2);
0611E:  MOVLW  0A
06120:  MOVLB  B
06122:  MOVWF  x58
06124:  MOVLB  0
06126:  CALL   23A2
....................        putc(26,CH2);
0612A:  MOVLW  1A
0612C:  MOVLB  B
0612E:  MOVWF  x58
06130:  MOVLB  0
06132:  CALL   23A2
06136:  MOVLB  A
....................       }
....................    }
06138:  BRA    61CC
....................    else if(FaultType.B1 == 0)
0613A:  MOVLB  A
0613C:  BTFSC  xD2.0
0613E:  BRA    61CC
....................    {
....................       In2.B1 = 0x00;
06140:  BCF    xDE.0
....................       Ack.B1 = 0;
06142:  BCF    xDA.0
....................       Output.B1 = 1;      //Off LED
06144:  BSF    xCE.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
06146:  BCF    xE8.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)       //If Buzzer or Both
06148:  BTFSC  xD4.0
0614A:  BRA    6150
0614C:  BTFSC  xD6.0
0614E:  BRA    6172
06150:  MOVLB  B
06152:  MOVF   x4A,F
06154:  BTFSC  FD8.2
06156:  BRA    615C
06158:  MOVLB  A
0615A:  BRA    6172
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0615C:  MOVLW  01
0615E:  MOVWF  x56
06160:  MOVLB  0
06162:  CALL   47C4
06166:  DECFSZ 01,W
06168:  BRA    616C
0616A:  BRA    6170
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0616C:  BCF    F89.4
0616E:  BCF    F92.4
06170:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)   //If Bell or Both
06172:  BTFSS  xD4.0
06174:  BRA    617A
06176:  BTFSC  xD6.0
06178:  BRA    619C
0617A:  MOVLB  B
0617C:  MOVF   x4A,F
0617E:  BTFSC  FD8.2
06180:  BRA    6186
06182:  MOVLB  A
06184:  BRA    619C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06186:  MOVLW  02
06188:  MOVWF  x56
0618A:  MOVLB  0
0618C:  CALL   47C4
06190:  DECFSZ 01,W
06192:  BRA    6196
06194:  BRA    619A
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06196:  BCF    F89.3
06198:  BCF    F92.3
0619A:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
0619C:  BTFSC  xDE.0
0619E:  BRA    61CC
061A0:  BTFSC  xDE.1
061A2:  BRA    61CC
061A4:  BTFSC  xDE.2
061A6:  BRA    61CC
061A8:  BTFSC  xDE.3
061AA:  BRA    61CC
061AC:  BTFSC  xDE.4
061AE:  BRA    61CC
061B0:  BTFSC  xDE.5
061B2:  BRA    61CC
061B4:  BTFSC  xDE.6
061B6:  BRA    61CC
061B8:  BTFSC  xDE.7
061BA:  BRA    61CC
061BC:  BTFSC  xDF.0
061BE:  BRA    61CC
061C0:  BTFSC  xDF.1
061C2:  BRA    61CC
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
061C4:  BCF    F89.3
061C6:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
061C8:  BCF    F89.4
061CA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
061CC:  MOVLW  00
061CE:  BTFSC  xCC.1
061D0:  MOVLW  01
061D2:  MOVLB  B
061D4:  MOVWF  x57
061D6:  MOVLW  00
061D8:  MOVLB  A
061DA:  BTFSC  xD0.1
061DC:  MOVLW  01
061DE:  MOVLB  B
061E0:  XORWF  x57,W
061E2:  SUBLW  01
061E4:  BNZ   61EE
061E6:  MOVLB  A
061E8:  BTFSS  xD2.1
061EA:  BRA    61F4
061EC:  MOVLB  B
061EE:  BTFSS  1A.5
061F0:  BRA    62B6
061F2:  MOVLB  A
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
061F4:  BTFSC  xDE.1
061F6:  BRA    620A
061F8:  MOVF   5E,W
061FA:  SUBLW  0F
061FC:  BNZ   620A
061FE:  BTFSC  xDA.1
06200:  BRA    620A
....................       {
....................             TimeBase1s = 100 ;            //reload again
06202:  MOVLW  64
06204:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06206:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B2 = 1;
0620A:  BSF    xDE.1
....................       if(Ack.B2 == 0)
0620C:  BTFSC  xDA.1
0620E:  BRA    623A
....................       {
....................          if(FlashingFlag == 0)
06210:  BTFSC  1A.1
06212:  BRA    6218
....................             {
....................                Output.B2 = 0;           //Flash output1
06214:  BCF    xCE.1
....................             }
06216:  BRA    621A
....................             else
....................             {
....................                Output.B2 = 1;
06218:  BSF    xCE.1
....................             }
....................          if (~AutoTestFlag)
0621A:  BTFSC  1A.4
0621C:  BRA    623A
....................          {
....................              if(OutputBoth.B2 == 0)        //Both output
0621E:  BTFSC  xD6.1
06220:  BRA    622C
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06222:  BSF    F89.4
06224:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06226:  BSF    F89.3
06228:  BCF    F92.3
....................              }
0622A:  BRA    623A
....................              else
....................              {
....................                if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
0622C:  BTFSS  xD4.1
0622E:  BRA    6236
06230:  BSF    F89.4
06232:  BCF    F92.4
06234:  BRA    623A
....................                else output_bit(Pbell,1);                          //Bell
06236:  BSF    F89.3
06238:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
0623A:  MOVLW  01
0623C:  MOVLB  B
0623E:  MOVWF  x4A
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
06240:  MOVLB  A
06242:  BTFSC  xE8.1
06244:  BRA    62B4
06246:  BTFSC  30.1
06248:  BRA    62B4
0624A:  BTFSC  xDA.1
0624C:  BRA    62B4
....................       {
....................          SendSMS.B2 =1;
0624E:  BSF    xE8.1
....................          fprintf(CH2,"AT+CMGS=\"");
06250:  MOVLW  96
06252:  MOVWF  FF6
06254:  MOVLW  07
06256:  MOVWF  FF7
06258:  MOVLB  0
0625A:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
0625E:  MOVLW  09
06260:  MOVWF  FEA
06262:  MOVLW  7D
06264:  MOVWF  FE9
06266:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
0626A:  MOVLW  22
0626C:  MOVLB  B
0626E:  MOVWF  x58
06270:  MOVLB  0
06272:  CALL   23A2
....................          putc('\n',CH2);
06276:  MOVLW  0A
06278:  MOVLB  B
0627A:  MOVWF  x58
0627C:  MOVLB  0
0627E:  CALL   23A2
....................          delay_ms(50);
06282:  MOVLW  32
06284:  MOVLB  B
06286:  MOVWF  x57
06288:  MOVLB  0
0628A:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage2); 
0628E:  MOVLW  09
06290:  MOVWF  FEA
06292:  MOVLW  AC
06294:  MOVWF  FE9
06296:  CALL   479E
....................         putc('\n',CH2);
0629A:  MOVLW  0A
0629C:  MOVLB  B
0629E:  MOVWF  x58
062A0:  MOVLB  0
062A2:  CALL   23A2
....................        putc(26,CH2);
062A6:  MOVLW  1A
062A8:  MOVLB  B
062AA:  MOVWF  x58
062AC:  MOVLB  0
062AE:  CALL   23A2
062B2:  MOVLB  A
....................       }
....................    }
062B4:  BRA    6348
....................    else if(FaultType.B2 == 0)
062B6:  MOVLB  A
062B8:  BTFSC  xD2.1
062BA:  BRA    6348
....................    {
....................       In2.B2 = 0x00;
062BC:  BCF    xDE.1
....................       Ack.B2 = 0;
062BE:  BCF    xDA.1
....................       Output.B2 = 1;      //Off LED
062C0:  BSF    xCE.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
062C2:  BCF    xE8.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)       //If Buzzer or Both
062C4:  BTFSC  xD4.1
062C6:  BRA    62CC
062C8:  BTFSC  xD6.1
062CA:  BRA    62EE
062CC:  MOVLB  B
062CE:  MOVF   x4A,F
062D0:  BTFSC  FD8.2
062D2:  BRA    62D8
062D4:  MOVLB  A
062D6:  BRA    62EE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
062D8:  MOVLW  01
062DA:  MOVWF  x56
062DC:  MOVLB  0
062DE:  CALL   47C4
062E2:  DECFSZ 01,W
062E4:  BRA    62E8
062E6:  BRA    62EC
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
062E8:  BCF    F89.4
062EA:  BCF    F92.4
062EC:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)   //If Bell or Both
062EE:  BTFSS  xD4.1
062F0:  BRA    62F6
062F2:  BTFSC  xD6.1
062F4:  BRA    6318
062F6:  MOVLB  B
062F8:  MOVF   x4A,F
062FA:  BTFSC  FD8.2
062FC:  BRA    6302
062FE:  MOVLB  A
06300:  BRA    6318
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06302:  MOVLW  02
06304:  MOVWF  x56
06306:  MOVLB  0
06308:  CALL   47C4
0630C:  DECFSZ 01,W
0630E:  BRA    6312
06310:  BRA    6316
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06312:  BCF    F89.3
06314:  BCF    F92.3
06316:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06318:  BTFSC  xDE.0
0631A:  BRA    6348
0631C:  BTFSC  xDE.1
0631E:  BRA    6348
06320:  BTFSC  xDE.2
06322:  BRA    6348
06324:  BTFSC  xDE.3
06326:  BRA    6348
06328:  BTFSC  xDE.4
0632A:  BRA    6348
0632C:  BTFSC  xDE.5
0632E:  BRA    6348
06330:  BTFSC  xDE.6
06332:  BRA    6348
06334:  BTFSC  xDE.7
06336:  BRA    6348
06338:  BTFSC  xDF.0
0633A:  BRA    6348
0633C:  BTFSC  xDF.1
0633E:  BRA    6348
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06340:  BCF    F89.3
06342:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06344:  BCF    F89.4
06346:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06348:  MOVLW  00
0634A:  BTFSC  xCC.2
0634C:  MOVLW  01
0634E:  MOVLB  B
06350:  MOVWF  x57
06352:  MOVLW  00
06354:  MOVLB  A
06356:  BTFSC  xD0.2
06358:  MOVLW  01
0635A:  MOVLB  B
0635C:  XORWF  x57,W
0635E:  SUBLW  01
06360:  BNZ   636A
06362:  MOVLB  A
06364:  BTFSS  xD2.2
06366:  BRA    6370
06368:  MOVLB  B
0636A:  BTFSS  1A.5
0636C:  BRA    6432
0636E:  MOVLB  A
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
06370:  BTFSC  xDE.2
06372:  BRA    6386
06374:  MOVF   5E,W
06376:  SUBLW  0F
06378:  BNZ   6386
0637A:  BTFSC  xDA.2
0637C:  BRA    6386
....................       {
....................             TimeBase1s = 100 ;            //reload again
0637E:  MOVLW  64
06380:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06382:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B3 = 1;
06386:  BSF    xDE.2
....................       if(Ack.B3 == 0)
06388:  BTFSC  xDA.2
0638A:  BRA    63B6
....................       {
....................          if(FlashingFlag == 0)
0638C:  BTFSC  1A.1
0638E:  BRA    6394
....................             {
....................                Output.B3 = 0;           //Flash output1
06390:  BCF    xCE.2
....................             }
06392:  BRA    6396
....................             else
....................             {
....................                Output.B3 = 1;
06394:  BSF    xCE.2
....................             }
....................          if (~AutoTestFlag)
06396:  BTFSC  1A.4
06398:  BRA    63B6
....................          {
....................              if(OutputBoth.B3 == 0)        //Both output
0639A:  BTFSC  xD6.2
0639C:  BRA    63A8
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
0639E:  BSF    F89.4
063A0:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
063A2:  BSF    F89.3
063A4:  BCF    F92.3
....................              }
063A6:  BRA    63B6
....................              else
....................              {
....................                if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
063A8:  BTFSS  xD4.2
063AA:  BRA    63B2
063AC:  BSF    F89.4
063AE:  BCF    F92.4
063B0:  BRA    63B6
....................                else output_bit(Pbell,1);                          //Bell
063B2:  BSF    F89.3
063B4:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
063B6:  MOVLW  01
063B8:  MOVLB  B
063BA:  MOVWF  x4A
....................       
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
063BC:  MOVLB  A
063BE:  BTFSC  xE8.2
063C0:  BRA    6430
063C2:  BTFSC  30.1
063C4:  BRA    6430
063C6:  BTFSC  xDA.2
063C8:  BRA    6430
....................       {
....................          SendSMS.B3 =1;
063CA:  BSF    xE8.2
....................          fprintf(CH2,"AT+CMGS=\"");
063CC:  MOVLW  A0
063CE:  MOVWF  FF6
063D0:  MOVLW  07
063D2:  MOVWF  FF7
063D4:  MOVLB  0
063D6:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
063DA:  MOVLW  09
063DC:  MOVWF  FEA
063DE:  MOVLW  7D
063E0:  MOVWF  FE9
063E2:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
063E6:  MOVLW  22
063E8:  MOVLB  B
063EA:  MOVWF  x58
063EC:  MOVLB  0
063EE:  CALL   23A2
....................          putc('\n',CH2);
063F2:  MOVLW  0A
063F4:  MOVLB  B
063F6:  MOVWF  x58
063F8:  MOVLB  0
063FA:  CALL   23A2
....................          delay_ms(50);
063FE:  MOVLW  32
06400:  MOVLB  B
06402:  MOVWF  x57
06404:  MOVLB  0
06406:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage3); 
0640A:  MOVLW  09
0640C:  MOVWF  FEA
0640E:  MOVLW  CC
06410:  MOVWF  FE9
06412:  CALL   479E
....................         putc('\n',CH2);
06416:  MOVLW  0A
06418:  MOVLB  B
0641A:  MOVWF  x58
0641C:  MOVLB  0
0641E:  CALL   23A2
....................        putc(26,CH2);
06422:  MOVLW  1A
06424:  MOVLB  B
06426:  MOVWF  x58
06428:  MOVLB  0
0642A:  CALL   23A2
0642E:  MOVLB  A
....................       }
....................    }
06430:  BRA    64C4
....................    else if(FaultType.B3 == 0)
06432:  MOVLB  A
06434:  BTFSC  xD2.2
06436:  BRA    64C4
....................    {
....................       In2.B3 = 0x00;
06438:  BCF    xDE.2
....................       Ack.B3 = 0;
0643A:  BCF    xDA.2
....................       Output.B3 = 1;      //Off LED
0643C:  BSF    xCE.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
0643E:  BCF    xE8.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)       //If Buzzer or Both
06440:  BTFSC  xD4.2
06442:  BRA    6448
06444:  BTFSC  xD6.2
06446:  BRA    646A
06448:  MOVLB  B
0644A:  MOVF   x4A,F
0644C:  BTFSC  FD8.2
0644E:  BRA    6454
06450:  MOVLB  A
06452:  BRA    646A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06454:  MOVLW  01
06456:  MOVWF  x56
06458:  MOVLB  0
0645A:  CALL   47C4
0645E:  DECFSZ 01,W
06460:  BRA    6464
06462:  BRA    6468
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06464:  BCF    F89.4
06466:  BCF    F92.4
06468:  MOVLB  A
....................          }
....................       }
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)   //If Bell or Both
0646A:  BTFSS  xD4.2
0646C:  BRA    6472
0646E:  BTFSC  xD6.2
06470:  BRA    6494
06472:  MOVLB  B
06474:  MOVF   x4A,F
06476:  BTFSC  FD8.2
06478:  BRA    647E
0647A:  MOVLB  A
0647C:  BRA    6494
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0647E:  MOVLW  02
06480:  MOVWF  x56
06482:  MOVLB  0
06484:  CALL   47C4
06488:  DECFSZ 01,W
0648A:  BRA    648E
0648C:  BRA    6492
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0648E:  BCF    F89.3
06490:  BCF    F92.3
06492:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06494:  BTFSC  xDE.0
06496:  BRA    64C4
06498:  BTFSC  xDE.1
0649A:  BRA    64C4
0649C:  BTFSC  xDE.2
0649E:  BRA    64C4
064A0:  BTFSC  xDE.3
064A2:  BRA    64C4
064A4:  BTFSC  xDE.4
064A6:  BRA    64C4
064A8:  BTFSC  xDE.5
064AA:  BRA    64C4
064AC:  BTFSC  xDE.6
064AE:  BRA    64C4
064B0:  BTFSC  xDE.7
064B2:  BRA    64C4
064B4:  BTFSC  xDF.0
064B6:  BRA    64C4
064B8:  BTFSC  xDF.1
064BA:  BRA    64C4
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
064BC:  BCF    F89.3
064BE:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
064C0:  BCF    F89.4
064C2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
064C4:  MOVLW  00
064C6:  BTFSC  xCC.3
064C8:  MOVLW  01
064CA:  MOVLB  B
064CC:  MOVWF  x57
064CE:  MOVLW  00
064D0:  MOVLB  A
064D2:  BTFSC  xD0.3
064D4:  MOVLW  01
064D6:  MOVLB  B
064D8:  XORWF  x57,W
064DA:  SUBLW  01
064DC:  BNZ   64E6
064DE:  MOVLB  A
064E0:  BTFSS  xD2.3
064E2:  BRA    64EC
064E4:  MOVLB  B
064E6:  BTFSS  1A.5
064E8:  BRA    65AE
064EA:  MOVLB  A
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
064EC:  BTFSC  xDE.3
064EE:  BRA    6502
064F0:  MOVF   5E,W
064F2:  SUBLW  0F
064F4:  BNZ   6502
064F6:  BTFSC  xDA.3
064F8:  BRA    6502
....................       {
....................             TimeBase1s = 100 ;            //reload again
064FA:  MOVLW  64
064FC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
064FE:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B4 = 1;
06502:  BSF    xDE.3
....................       if(Ack.B4 == 0)
06504:  BTFSC  xDA.3
06506:  BRA    6532
....................       {
....................          if(FlashingFlag == 0)
06508:  BTFSC  1A.1
0650A:  BRA    6510
....................             {
....................                Output.B4 = 0;           //Flash output1
0650C:  BCF    xCE.3
....................             }
0650E:  BRA    6512
....................             else
....................             {
....................                Output.B4 = 1;
06510:  BSF    xCE.3
....................             }
....................          if (~AutoTestFlag)
06512:  BTFSC  1A.4
06514:  BRA    6532
....................          {
....................              if(OutputBoth.B4 == 0)        //Both output
06516:  BTFSC  xD6.3
06518:  BRA    6524
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
0651A:  BSF    F89.4
0651C:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
0651E:  BSF    F89.3
06520:  BCF    F92.3
....................              }
06522:  BRA    6532
....................              else
....................              {
....................                if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
06524:  BTFSS  xD4.3
06526:  BRA    652E
06528:  BSF    F89.4
0652A:  BCF    F92.4
0652C:  BRA    6532
....................                else output_bit(Pbell,1);                          //Bell
0652E:  BSF    F89.3
06530:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06532:  MOVLW  01
06534:  MOVLB  B
06536:  MOVWF  x4A
....................       
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
06538:  MOVLB  A
0653A:  BTFSC  xE8.3
0653C:  BRA    65AC
0653E:  BTFSC  30.1
06540:  BRA    65AC
06542:  BTFSC  xDA.3
06544:  BRA    65AC
....................       {
....................          SendSMS.B4 =1;
06546:  BSF    xE8.3
....................          fprintf(CH2,"AT+CMGS=\"");
06548:  MOVLW  AA
0654A:  MOVWF  FF6
0654C:  MOVLW  07
0654E:  MOVWF  FF7
06550:  MOVLB  0
06552:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
06556:  MOVLW  09
06558:  MOVWF  FEA
0655A:  MOVLW  7D
0655C:  MOVWF  FE9
0655E:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
06562:  MOVLW  22
06564:  MOVLB  B
06566:  MOVWF  x58
06568:  MOVLB  0
0656A:  CALL   23A2
....................          putc('\n',CH2);
0656E:  MOVLW  0A
06570:  MOVLB  B
06572:  MOVWF  x58
06574:  MOVLB  0
06576:  CALL   23A2
....................          delay_ms(50);
0657A:  MOVLW  32
0657C:  MOVLB  B
0657E:  MOVWF  x57
06580:  MOVLB  0
06582:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage4); 
06586:  MOVLW  09
06588:  MOVWF  FEA
0658A:  MOVLW  EC
0658C:  MOVWF  FE9
0658E:  CALL   479E
....................         putc('\n',CH2);
06592:  MOVLW  0A
06594:  MOVLB  B
06596:  MOVWF  x58
06598:  MOVLB  0
0659A:  CALL   23A2
....................        putc(26,CH2);
0659E:  MOVLW  1A
065A0:  MOVLB  B
065A2:  MOVWF  x58
065A4:  MOVLB  0
065A6:  CALL   23A2
065AA:  MOVLB  A
....................       }
....................    }
065AC:  BRA    6640
....................    else if(FaultType.B4 == 0)
065AE:  MOVLB  A
065B0:  BTFSC  xD2.3
065B2:  BRA    6640
....................    {
....................       In2.B4 = 0x00;
065B4:  BCF    xDE.3
....................       Ack.B4 = 0;
065B6:  BCF    xDA.3
....................       Output.B4 = 1;      //Off LED
065B8:  BSF    xCE.3
....................       
....................       SendSMS.B4 =0;// Clear SMS
065BA:  BCF    xE8.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)       //If Buzzer or Both
065BC:  BTFSC  xD4.3
065BE:  BRA    65C4
065C0:  BTFSC  xD6.3
065C2:  BRA    65E6
065C4:  MOVLB  B
065C6:  MOVF   x4A,F
065C8:  BTFSC  FD8.2
065CA:  BRA    65D0
065CC:  MOVLB  A
065CE:  BRA    65E6
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
065D0:  MOVLW  01
065D2:  MOVWF  x56
065D4:  MOVLB  0
065D6:  CALL   47C4
065DA:  DECFSZ 01,W
065DC:  BRA    65E0
065DE:  BRA    65E4
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
065E0:  BCF    F89.4
065E2:  BCF    F92.4
065E4:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)   //If Bell or Both
065E6:  BTFSS  xD4.3
065E8:  BRA    65EE
065EA:  BTFSC  xD6.3
065EC:  BRA    6610
065EE:  MOVLB  B
065F0:  MOVF   x4A,F
065F2:  BTFSC  FD8.2
065F4:  BRA    65FA
065F6:  MOVLB  A
065F8:  BRA    6610
....................       {
....................          if(CheckAutoReset(0x02) == 1);
065FA:  MOVLW  02
065FC:  MOVWF  x56
065FE:  MOVLB  0
06600:  CALL   47C4
06604:  DECFSZ 01,W
06606:  BRA    660A
06608:  BRA    660E
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0660A:  BCF    F89.3
0660C:  BCF    F92.3
0660E:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06610:  BTFSC  xDE.0
06612:  BRA    6640
06614:  BTFSC  xDE.1
06616:  BRA    6640
06618:  BTFSC  xDE.2
0661A:  BRA    6640
0661C:  BTFSC  xDE.3
0661E:  BRA    6640
06620:  BTFSC  xDE.4
06622:  BRA    6640
06624:  BTFSC  xDE.5
06626:  BRA    6640
06628:  BTFSC  xDE.6
0662A:  BRA    6640
0662C:  BTFSC  xDE.7
0662E:  BRA    6640
06630:  BTFSC  xDF.0
06632:  BRA    6640
06634:  BTFSC  xDF.1
06636:  BRA    6640
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06638:  BCF    F89.3
0663A:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0663C:  BCF    F89.4
0663E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06640:  MOVLW  00
06642:  BTFSC  xCC.4
06644:  MOVLW  01
06646:  MOVLB  B
06648:  MOVWF  x57
0664A:  MOVLW  00
0664C:  MOVLB  A
0664E:  BTFSC  xD0.4
06650:  MOVLW  01
06652:  MOVLB  B
06654:  XORWF  x57,W
06656:  SUBLW  01
06658:  BNZ   6662
0665A:  MOVLB  A
0665C:  BTFSS  xD2.4
0665E:  BRA    6668
06660:  MOVLB  B
06662:  BTFSS  1A.5
06664:  BRA    672A
06666:  MOVLB  A
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
06668:  BTFSC  xDE.4
0666A:  BRA    667E
0666C:  MOVF   5E,W
0666E:  SUBLW  0F
06670:  BNZ   667E
06672:  BTFSC  xDA.4
06674:  BRA    667E
....................       {
....................             TimeBase1s = 100 ;            //reload again
06676:  MOVLW  64
06678:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0667A:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B5 = 1;
0667E:  BSF    xDE.4
....................       if(Ack.B5 == 0)
06680:  BTFSC  xDA.4
06682:  BRA    66AE
....................       {
....................          if(FlashingFlag == 0)
06684:  BTFSC  1A.1
06686:  BRA    668C
....................             {
....................                Output.B5 = 0;           //Flash output1
06688:  BCF    xCE.4
....................             }
0668A:  BRA    668E
....................             else
....................             {
....................                Output.B5 = 1;
0668C:  BSF    xCE.4
....................             }
....................          if (~AutoTestFlag)
0668E:  BTFSC  1A.4
06690:  BRA    66AE
....................          {
....................              if(OutputBoth.B5 == 0)        //Both output
06692:  BTFSC  xD6.4
06694:  BRA    66A0
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06696:  BSF    F89.4
06698:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
0669A:  BSF    F89.3
0669C:  BCF    F92.3
....................              }
0669E:  BRA    66AE
....................              else
....................              {
....................                if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
066A0:  BTFSS  xD4.4
066A2:  BRA    66AA
066A4:  BSF    F89.4
066A6:  BCF    F92.4
066A8:  BRA    66AE
....................                else output_bit(Pbell,1);                          //Bell
066AA:  BSF    F89.3
066AC:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
066AE:  MOVLW  01
066B0:  MOVLB  B
066B2:  MOVWF  x4A
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
066B4:  MOVLB  A
066B6:  BTFSC  xE8.4
066B8:  BRA    6728
066BA:  BTFSC  30.1
066BC:  BRA    6728
066BE:  BTFSC  xDA.4
066C0:  BRA    6728
....................       {
....................          SendSMS.B5 =1;
066C2:  BSF    xE8.4
....................          fprintf(CH2,"AT+CMGS=\"");
066C4:  MOVLW  B4
066C6:  MOVWF  FF6
066C8:  MOVLW  07
066CA:  MOVWF  FF7
066CC:  MOVLB  0
066CE:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
066D2:  MOVLW  09
066D4:  MOVWF  FEA
066D6:  MOVLW  7D
066D8:  MOVWF  FE9
066DA:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
066DE:  MOVLW  22
066E0:  MOVLB  B
066E2:  MOVWF  x58
066E4:  MOVLB  0
066E6:  CALL   23A2
....................          putc('\n',CH2);
066EA:  MOVLW  0A
066EC:  MOVLB  B
066EE:  MOVWF  x58
066F0:  MOVLB  0
066F2:  CALL   23A2
....................          delay_ms(50);
066F6:  MOVLW  32
066F8:  MOVLB  B
066FA:  MOVWF  x57
066FC:  MOVLB  0
066FE:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage5); 
06702:  MOVLW  0A
06704:  MOVWF  FEA
06706:  MOVLW  0C
06708:  MOVWF  FE9
0670A:  CALL   479E
....................         putc('\n',CH2);
0670E:  MOVLW  0A
06710:  MOVLB  B
06712:  MOVWF  x58
06714:  MOVLB  0
06716:  CALL   23A2
....................        putc(26,CH2);
0671A:  MOVLW  1A
0671C:  MOVLB  B
0671E:  MOVWF  x58
06720:  MOVLB  0
06722:  CALL   23A2
06726:  MOVLB  A
....................       }
....................    }
06728:  BRA    67BC
....................    else if(FaultType.B5 == 0)
0672A:  MOVLB  A
0672C:  BTFSC  xD2.4
0672E:  BRA    67BC
....................    {
....................       In2.B5 = 0x00;
06730:  BCF    xDE.4
....................       Ack.B5 = 0;
06732:  BCF    xDA.4
....................       Output.B5 = 1;      //Off LED
06734:  BSF    xCE.4
....................       
....................       SendSMS.B5 =0;// Clear SMS
06736:  BCF    xE8.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)       //If Buzzer or Both
06738:  BTFSC  xD4.4
0673A:  BRA    6740
0673C:  BTFSC  xD6.4
0673E:  BRA    6762
06740:  MOVLB  B
06742:  MOVF   x4A,F
06744:  BTFSC  FD8.2
06746:  BRA    674C
06748:  MOVLB  A
0674A:  BRA    6762
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0674C:  MOVLW  01
0674E:  MOVWF  x56
06750:  MOVLB  0
06752:  CALL   47C4
06756:  DECFSZ 01,W
06758:  BRA    675C
0675A:  BRA    6760
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0675C:  BCF    F89.4
0675E:  BCF    F92.4
06760:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)   //If Bell or Both
06762:  BTFSS  xD4.4
06764:  BRA    676A
06766:  BTFSC  xD6.4
06768:  BRA    678C
0676A:  MOVLB  B
0676C:  MOVF   x4A,F
0676E:  BTFSC  FD8.2
06770:  BRA    6776
06772:  MOVLB  A
06774:  BRA    678C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06776:  MOVLW  02
06778:  MOVWF  x56
0677A:  MOVLB  0
0677C:  CALL   47C4
06780:  DECFSZ 01,W
06782:  BRA    6786
06784:  BRA    678A
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06786:  BCF    F89.3
06788:  BCF    F92.3
0678A:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
0678C:  BTFSC  xDE.0
0678E:  BRA    67BC
06790:  BTFSC  xDE.1
06792:  BRA    67BC
06794:  BTFSC  xDE.2
06796:  BRA    67BC
06798:  BTFSC  xDE.3
0679A:  BRA    67BC
0679C:  BTFSC  xDE.4
0679E:  BRA    67BC
067A0:  BTFSC  xDE.5
067A2:  BRA    67BC
067A4:  BTFSC  xDE.6
067A6:  BRA    67BC
067A8:  BTFSC  xDE.7
067AA:  BRA    67BC
067AC:  BTFSC  xDF.0
067AE:  BRA    67BC
067B0:  BTFSC  xDF.1
067B2:  BRA    67BC
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
067B4:  BCF    F89.3
067B6:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
067B8:  BCF    F89.4
067BA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
067BC:  MOVLW  00
067BE:  BTFSC  xCC.5
067C0:  MOVLW  01
067C2:  MOVLB  B
067C4:  MOVWF  x57
067C6:  MOVLW  00
067C8:  MOVLB  A
067CA:  BTFSC  xD0.5
067CC:  MOVLW  01
067CE:  MOVLB  B
067D0:  XORWF  x57,W
067D2:  SUBLW  01
067D4:  BNZ   67DE
067D6:  MOVLB  A
067D8:  BTFSS  xD2.5
067DA:  BRA    67E4
067DC:  MOVLB  B
067DE:  BTFSS  1A.5
067E0:  BRA    68A6
067E2:  MOVLB  A
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
067E4:  BTFSC  xDE.5
067E6:  BRA    67FA
067E8:  MOVF   5E,W
067EA:  SUBLW  0F
067EC:  BNZ   67FA
067EE:  BTFSC  xDA.5
067F0:  BRA    67FA
....................       {
....................             TimeBase1s = 100 ;            //reload again
067F2:  MOVLW  64
067F4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
067F6:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B6 = 1;
067FA:  BSF    xDE.5
....................       if(Ack.B6 == 0)
067FC:  BTFSC  xDA.5
067FE:  BRA    682A
....................       {
....................          if(FlashingFlag == 0)
06800:  BTFSC  1A.1
06802:  BRA    6808
....................             {
....................                Output.B6 = 0;           //Flash output1
06804:  BCF    xCE.5
....................             }
06806:  BRA    680A
....................             else
....................             {
....................                Output.B6 = 1;
06808:  BSF    xCE.5
....................             }
....................          if (~AutoTestFlag)
0680A:  BTFSC  1A.4
0680C:  BRA    682A
....................          {
....................              if(OutputBoth.B6 == 0)        //Both output
0680E:  BTFSC  xD6.5
06810:  BRA    681C
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06812:  BSF    F89.4
06814:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06816:  BSF    F89.3
06818:  BCF    F92.3
....................              }
0681A:  BRA    682A
....................              else
....................              {
....................                if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
0681C:  BTFSS  xD4.5
0681E:  BRA    6826
06820:  BSF    F89.4
06822:  BCF    F92.4
06824:  BRA    682A
....................                else output_bit(Pbell,1);                          //Bell
06826:  BSF    F89.3
06828:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
0682A:  MOVLW  01
0682C:  MOVLB  B
0682E:  MOVWF  x4A
....................       
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
06830:  MOVLB  A
06832:  BTFSC  xE8.5
06834:  BRA    68A4
06836:  BTFSC  30.1
06838:  BRA    68A4
0683A:  BTFSC  xDA.5
0683C:  BRA    68A4
....................       {
....................          SendSMS.B6 =1;
0683E:  BSF    xE8.5
....................          fprintf(CH2,"AT+CMGS=\"");
06840:  MOVLW  BE
06842:  MOVWF  FF6
06844:  MOVLW  07
06846:  MOVWF  FF7
06848:  MOVLB  0
0684A:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
0684E:  MOVLW  09
06850:  MOVWF  FEA
06852:  MOVLW  7D
06854:  MOVWF  FE9
06856:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
0685A:  MOVLW  22
0685C:  MOVLB  B
0685E:  MOVWF  x58
06860:  MOVLB  0
06862:  CALL   23A2
....................          putc('\n',CH2);
06866:  MOVLW  0A
06868:  MOVLB  B
0686A:  MOVWF  x58
0686C:  MOVLB  0
0686E:  CALL   23A2
....................          delay_ms(50);
06872:  MOVLW  32
06874:  MOVLB  B
06876:  MOVWF  x57
06878:  MOVLB  0
0687A:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage6);  
0687E:  MOVLW  0A
06880:  MOVWF  FEA
06882:  MOVLW  2C
06884:  MOVWF  FE9
06886:  CALL   479E
....................         putc('\n',CH2);
0688A:  MOVLW  0A
0688C:  MOVLB  B
0688E:  MOVWF  x58
06890:  MOVLB  0
06892:  CALL   23A2
....................        putc(26,CH2);
06896:  MOVLW  1A
06898:  MOVLB  B
0689A:  MOVWF  x58
0689C:  MOVLB  0
0689E:  CALL   23A2
068A2:  MOVLB  A
....................       }
....................    }
068A4:  BRA    6938
....................    else if(FaultType.B6 == 0)
068A6:  MOVLB  A
068A8:  BTFSC  xD2.5
068AA:  BRA    6938
....................    {
....................       In2.B6 = 0x00;
068AC:  BCF    xDE.5
....................       Ack.B6 = 0;
068AE:  BCF    xDA.5
....................       Output.B6 = 1;      //Off LED
068B0:  BSF    xCE.5
....................       
....................       SendSMS.B6 =0;// Clear SMS
068B2:  BCF    xE8.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)       //If Buzzer or Both
068B4:  BTFSC  xD4.5
068B6:  BRA    68BC
068B8:  BTFSC  xD6.5
068BA:  BRA    68DE
068BC:  MOVLB  B
068BE:  MOVF   x4A,F
068C0:  BTFSC  FD8.2
068C2:  BRA    68C8
068C4:  MOVLB  A
068C6:  BRA    68DE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
068C8:  MOVLW  01
068CA:  MOVWF  x56
068CC:  MOVLB  0
068CE:  CALL   47C4
068D2:  DECFSZ 01,W
068D4:  BRA    68D8
068D6:  BRA    68DC
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
068D8:  BCF    F89.4
068DA:  BCF    F92.4
068DC:  MOVLB  A
....................          }
....................       }
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)   //If Bell or Both
068DE:  BTFSS  xD4.5
068E0:  BRA    68E6
068E2:  BTFSC  xD6.5
068E4:  BRA    6908
068E6:  MOVLB  B
068E8:  MOVF   x4A,F
068EA:  BTFSC  FD8.2
068EC:  BRA    68F2
068EE:  MOVLB  A
068F0:  BRA    6908
....................       {
....................          if(CheckAutoReset(0x02) == 1);
068F2:  MOVLW  02
068F4:  MOVWF  x56
068F6:  MOVLB  0
068F8:  CALL   47C4
068FC:  DECFSZ 01,W
068FE:  BRA    6902
06900:  BRA    6906
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06902:  BCF    F89.3
06904:  BCF    F92.3
06906:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06908:  BTFSC  xDE.0
0690A:  BRA    6938
0690C:  BTFSC  xDE.1
0690E:  BRA    6938
06910:  BTFSC  xDE.2
06912:  BRA    6938
06914:  BTFSC  xDE.3
06916:  BRA    6938
06918:  BTFSC  xDE.4
0691A:  BRA    6938
0691C:  BTFSC  xDE.5
0691E:  BRA    6938
06920:  BTFSC  xDE.6
06922:  BRA    6938
06924:  BTFSC  xDE.7
06926:  BRA    6938
06928:  BTFSC  xDF.0
0692A:  BRA    6938
0692C:  BTFSC  xDF.1
0692E:  BRA    6938
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06930:  BCF    F89.3
06932:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06934:  BCF    F89.4
06936:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06938:  MOVLW  00
0693A:  BTFSC  xCC.6
0693C:  MOVLW  01
0693E:  MOVLB  B
06940:  MOVWF  x57
06942:  MOVLW  00
06944:  MOVLB  A
06946:  BTFSC  xD0.6
06948:  MOVLW  01
0694A:  MOVLB  B
0694C:  XORWF  x57,W
0694E:  SUBLW  01
06950:  BNZ   695A
06952:  MOVLB  A
06954:  BTFSS  xD2.6
06956:  BRA    6960
06958:  MOVLB  B
0695A:  BTFSS  1A.5
0695C:  BRA    6A22
0695E:  MOVLB  A
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
06960:  BTFSC  xDE.6
06962:  BRA    6976
06964:  MOVF   5E,W
06966:  SUBLW  0F
06968:  BNZ   6976
0696A:  BTFSC  xDA.6
0696C:  BRA    6976
....................       {
....................             TimeBase1s = 100 ;            //reload again
0696E:  MOVLW  64
06970:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06972:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B7 = 1;
06976:  BSF    xDE.6
....................       if(Ack.B7 == 0)
06978:  BTFSC  xDA.6
0697A:  BRA    69A6
....................       {
....................          if(FlashingFlag == 0)
0697C:  BTFSC  1A.1
0697E:  BRA    6984
....................             {
....................                Output.B7 = 0;           //Flash output1
06980:  BCF    xCE.6
....................             }
06982:  BRA    6986
....................             else
....................             {
....................                Output.B7 = 1;
06984:  BSF    xCE.6
....................             }
....................          if (~AutoTestFlag)
06986:  BTFSC  1A.4
06988:  BRA    69A6
....................          {
....................              if(OutputBoth.B7 == 0)        //Both output
0698A:  BTFSC  xD6.6
0698C:  BRA    6998
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
0698E:  BSF    F89.4
06990:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06992:  BSF    F89.3
06994:  BCF    F92.3
....................              }
06996:  BRA    69A6
....................              else
....................              {
....................                if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
06998:  BTFSS  xD4.6
0699A:  BRA    69A2
0699C:  BSF    F89.4
0699E:  BCF    F92.4
069A0:  BRA    69A6
....................                else output_bit(Pbell,1);                          //Bell
069A2:  BSF    F89.3
069A4:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
069A6:  MOVLW  01
069A8:  MOVLB  B
069AA:  MOVWF  x4A
....................       
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
069AC:  MOVLB  A
069AE:  BTFSC  xE8.6
069B0:  BRA    6A20
069B2:  BTFSC  30.1
069B4:  BRA    6A20
069B6:  BTFSC  xDA.6
069B8:  BRA    6A20
....................       {
....................          SendSMS.B7 =1;
069BA:  BSF    xE8.6
....................          fprintf(CH2,"AT+CMGS=\"");
069BC:  MOVLW  C8
069BE:  MOVWF  FF6
069C0:  MOVLW  07
069C2:  MOVWF  FF7
069C4:  MOVLB  0
069C6:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
069CA:  MOVLW  09
069CC:  MOVWF  FEA
069CE:  MOVLW  7D
069D0:  MOVWF  FE9
069D2:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
069D6:  MOVLW  22
069D8:  MOVLB  B
069DA:  MOVWF  x58
069DC:  MOVLB  0
069DE:  CALL   23A2
....................          putc('\n',CH2);
069E2:  MOVLW  0A
069E4:  MOVLB  B
069E6:  MOVWF  x58
069E8:  MOVLB  0
069EA:  CALL   23A2
....................          delay_ms(50);
069EE:  MOVLW  32
069F0:  MOVLB  B
069F2:  MOVWF  x57
069F4:  MOVLB  0
069F6:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage7);  
069FA:  MOVLW  0A
069FC:  MOVWF  FEA
069FE:  MOVLW  4C
06A00:  MOVWF  FE9
06A02:  CALL   479E
....................         putc('\n',CH2);
06A06:  MOVLW  0A
06A08:  MOVLB  B
06A0A:  MOVWF  x58
06A0C:  MOVLB  0
06A0E:  CALL   23A2
....................        putc(26,CH2);
06A12:  MOVLW  1A
06A14:  MOVLB  B
06A16:  MOVWF  x58
06A18:  MOVLB  0
06A1A:  CALL   23A2
06A1E:  MOVLB  A
....................       }
....................    }
06A20:  BRA    6AB4
....................    else if(FaultType.B7 == 0)
06A22:  MOVLB  A
06A24:  BTFSC  xD2.6
06A26:  BRA    6AB4
....................    {
....................       In2.B7 = 0x00;
06A28:  BCF    xDE.6
....................       Ack.B7 = 0;
06A2A:  BCF    xDA.6
....................       Output.B7 = 1;      //Off LED
06A2C:  BSF    xCE.6
....................       
....................       SendSMS.B7 =0;// Clear SMS
06A2E:  BCF    xE8.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)       //If Buzzer or Both
06A30:  BTFSC  xD4.6
06A32:  BRA    6A38
06A34:  BTFSC  xD6.6
06A36:  BRA    6A5A
06A38:  MOVLB  B
06A3A:  MOVF   x4A,F
06A3C:  BTFSC  FD8.2
06A3E:  BRA    6A44
06A40:  MOVLB  A
06A42:  BRA    6A5A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06A44:  MOVLW  01
06A46:  MOVWF  x56
06A48:  MOVLB  0
06A4A:  CALL   47C4
06A4E:  DECFSZ 01,W
06A50:  BRA    6A54
06A52:  BRA    6A58
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06A54:  BCF    F89.4
06A56:  BCF    F92.4
06A58:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)   //If Bell or Both
06A5A:  BTFSS  xD4.6
06A5C:  BRA    6A62
06A5E:  BTFSC  xD6.6
06A60:  BRA    6A84
06A62:  MOVLB  B
06A64:  MOVF   x4A,F
06A66:  BTFSC  FD8.2
06A68:  BRA    6A6E
06A6A:  MOVLB  A
06A6C:  BRA    6A84
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06A6E:  MOVLW  02
06A70:  MOVWF  x56
06A72:  MOVLB  0
06A74:  CALL   47C4
06A78:  DECFSZ 01,W
06A7A:  BRA    6A7E
06A7C:  BRA    6A82
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06A7E:  BCF    F89.3
06A80:  BCF    F92.3
06A82:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06A84:  BTFSC  xDE.0
06A86:  BRA    6AB4
06A88:  BTFSC  xDE.1
06A8A:  BRA    6AB4
06A8C:  BTFSC  xDE.2
06A8E:  BRA    6AB4
06A90:  BTFSC  xDE.3
06A92:  BRA    6AB4
06A94:  BTFSC  xDE.4
06A96:  BRA    6AB4
06A98:  BTFSC  xDE.5
06A9A:  BRA    6AB4
06A9C:  BTFSC  xDE.6
06A9E:  BRA    6AB4
06AA0:  BTFSC  xDE.7
06AA2:  BRA    6AB4
06AA4:  BTFSC  xDF.0
06AA6:  BRA    6AB4
06AA8:  BTFSC  xDF.1
06AAA:  BRA    6AB4
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06AAC:  BCF    F89.3
06AAE:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06AB0:  BCF    F89.4
06AB2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06AB4:  MOVLW  00
06AB6:  BTFSC  xCC.7
06AB8:  MOVLW  01
06ABA:  MOVLB  B
06ABC:  MOVWF  x57
06ABE:  MOVLW  00
06AC0:  MOVLB  A
06AC2:  BTFSC  xD0.7
06AC4:  MOVLW  01
06AC6:  MOVLB  B
06AC8:  XORWF  x57,W
06ACA:  SUBLW  01
06ACC:  BNZ   6AD6
06ACE:  MOVLB  A
06AD0:  BTFSS  xD2.7
06AD2:  BRA    6ADC
06AD4:  MOVLB  B
06AD6:  BTFSS  1A.5
06AD8:  BRA    6B9E
06ADA:  MOVLB  A
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
06ADC:  BTFSC  xDE.7
06ADE:  BRA    6AF2
06AE0:  MOVF   5E,W
06AE2:  SUBLW  0F
06AE4:  BNZ   6AF2
06AE6:  BTFSC  xDA.7
06AE8:  BRA    6AF2
....................       {
....................             TimeBase1s = 100 ;            //reload again
06AEA:  MOVLW  64
06AEC:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06AEE:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B8 = 1;
06AF2:  BSF    xDE.7
....................       if(Ack.B8 == 0)
06AF4:  BTFSC  xDA.7
06AF6:  BRA    6B22
....................       {
....................          if(FlashingFlag == 0)
06AF8:  BTFSC  1A.1
06AFA:  BRA    6B00
....................             {
....................                Output.B8 = 0;           //Flash output1
06AFC:  BCF    xCE.7
....................             }
06AFE:  BRA    6B02
....................             else
....................             {
....................                Output.B8 = 1;
06B00:  BSF    xCE.7
....................             }
....................          if (~AutoTestFlag)
06B02:  BTFSC  1A.4
06B04:  BRA    6B22
....................          {
....................              if(OutputBoth.B8 == 0)        //Both output
06B06:  BTFSC  xD6.7
06B08:  BRA    6B14
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06B0A:  BSF    F89.4
06B0C:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06B0E:  BSF    F89.3
06B10:  BCF    F92.3
....................              }
06B12:  BRA    6B22
....................              else
....................              {
....................                if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
06B14:  BTFSS  xD4.7
06B16:  BRA    6B1E
06B18:  BSF    F89.4
06B1A:  BCF    F92.4
06B1C:  BRA    6B22
....................                else output_bit(Pbell,1);                          //Bell
06B1E:  BSF    F89.3
06B20:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06B22:  MOVLW  01
06B24:  MOVLB  B
06B26:  MOVWF  x4A
....................       
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
06B28:  MOVLB  A
06B2A:  BTFSC  xE8.7
06B2C:  BRA    6B9C
06B2E:  BTFSC  30.1
06B30:  BRA    6B9C
06B32:  BTFSC  xDA.7
06B34:  BRA    6B9C
....................       {
....................          SendSMS.B8 =1;
06B36:  BSF    xE8.7
....................          fprintf(CH2,"AT+CMGS=\"");
06B38:  MOVLW  D2
06B3A:  MOVWF  FF6
06B3C:  MOVLW  07
06B3E:  MOVWF  FF7
06B40:  MOVLB  0
06B42:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
06B46:  MOVLW  09
06B48:  MOVWF  FEA
06B4A:  MOVLW  7D
06B4C:  MOVWF  FE9
06B4E:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
06B52:  MOVLW  22
06B54:  MOVLB  B
06B56:  MOVWF  x58
06B58:  MOVLB  0
06B5A:  CALL   23A2
....................          putc('\n',CH2);
06B5E:  MOVLW  0A
06B60:  MOVLB  B
06B62:  MOVWF  x58
06B64:  MOVLB  0
06B66:  CALL   23A2
....................          delay_ms(50);
06B6A:  MOVLW  32
06B6C:  MOVLB  B
06B6E:  MOVWF  x57
06B70:  MOVLB  0
06B72:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage8);   
06B76:  MOVLW  0A
06B78:  MOVWF  FEA
06B7A:  MOVLW  6C
06B7C:  MOVWF  FE9
06B7E:  CALL   479E
....................         putc('\n',CH2);
06B82:  MOVLW  0A
06B84:  MOVLB  B
06B86:  MOVWF  x58
06B88:  MOVLB  0
06B8A:  CALL   23A2
....................         putc(26,CH2);
06B8E:  MOVLW  1A
06B90:  MOVLB  B
06B92:  MOVWF  x58
06B94:  MOVLB  0
06B96:  CALL   23A2
06B9A:  MOVLB  A
....................       }
....................    }
06B9C:  BRA    6C30
....................    else if(FaultType.B8 == 0)
06B9E:  MOVLB  A
06BA0:  BTFSC  xD2.7
06BA2:  BRA    6C30
....................    {
....................       In2.B8 = 0x00;
06BA4:  BCF    xDE.7
....................       Ack.B8 = 0;
06BA6:  BCF    xDA.7
....................       Output.B8 = 1;      //Off LED
06BA8:  BSF    xCE.7
....................       
....................       SendSMS.B8 =0;// Clear SMS
06BAA:  BCF    xE8.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)       //If Buzzer or Both
06BAC:  BTFSC  xD4.7
06BAE:  BRA    6BB4
06BB0:  BTFSC  xD6.7
06BB2:  BRA    6BD6
06BB4:  MOVLB  B
06BB6:  MOVF   x4A,F
06BB8:  BTFSC  FD8.2
06BBA:  BRA    6BC0
06BBC:  MOVLB  A
06BBE:  BRA    6BD6
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06BC0:  MOVLW  01
06BC2:  MOVWF  x56
06BC4:  MOVLB  0
06BC6:  CALL   47C4
06BCA:  DECFSZ 01,W
06BCC:  BRA    6BD0
06BCE:  BRA    6BD4
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06BD0:  BCF    F89.4
06BD2:  BCF    F92.4
06BD4:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)   //If Bell or Both
06BD6:  BTFSS  xD4.7
06BD8:  BRA    6BDE
06BDA:  BTFSC  xD6.7
06BDC:  BRA    6C00
06BDE:  MOVLB  B
06BE0:  MOVF   x4A,F
06BE2:  BTFSC  FD8.2
06BE4:  BRA    6BEA
06BE6:  MOVLB  A
06BE8:  BRA    6C00
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06BEA:  MOVLW  02
06BEC:  MOVWF  x56
06BEE:  MOVLB  0
06BF0:  CALL   47C4
06BF4:  DECFSZ 01,W
06BF6:  BRA    6BFA
06BF8:  BRA    6BFE
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06BFA:  BCF    F89.3
06BFC:  BCF    F92.3
06BFE:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06C00:  BTFSC  xDE.0
06C02:  BRA    6C30
06C04:  BTFSC  xDE.1
06C06:  BRA    6C30
06C08:  BTFSC  xDE.2
06C0A:  BRA    6C30
06C0C:  BTFSC  xDE.3
06C0E:  BRA    6C30
06C10:  BTFSC  xDE.4
06C12:  BRA    6C30
06C14:  BTFSC  xDE.5
06C16:  BRA    6C30
06C18:  BTFSC  xDE.6
06C1A:  BRA    6C30
06C1C:  BTFSC  xDE.7
06C1E:  BRA    6C30
06C20:  BTFSC  xDF.0
06C22:  BRA    6C30
06C24:  BTFSC  xDF.1
06C26:  BRA    6C30
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06C28:  BCF    F89.3
06C2A:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06C2C:  BCF    F89.4
06C2E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06C30:  MOVLW  00
06C32:  BTFSC  xCD.0
06C34:  MOVLW  01
06C36:  MOVLB  B
06C38:  MOVWF  x57
06C3A:  MOVLW  00
06C3C:  MOVLB  A
06C3E:  BTFSC  xD1.0
06C40:  MOVLW  01
06C42:  MOVLB  B
06C44:  XORWF  x57,W
06C46:  SUBLW  01
06C48:  BNZ   6C52
06C4A:  MOVLB  A
06C4C:  BTFSS  xD3.0
06C4E:  BRA    6C58
06C50:  MOVLB  B
06C52:  BTFSS  1A.5
06C54:  BRA    6D1A
06C56:  MOVLB  A
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
06C58:  BTFSC  xDF.0
06C5A:  BRA    6C6E
06C5C:  MOVF   5E,W
06C5E:  SUBLW  0F
06C60:  BNZ   6C6E
06C62:  BTFSC  xDB.0
06C64:  BRA    6C6E
....................       {
....................             TimeBase1s = 100 ;            //reload again
06C66:  MOVLW  64
06C68:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06C6A:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B9 = 1;
06C6E:  BSF    xDF.0
....................       if(Ack.B9 == 0)
06C70:  BTFSC  xDB.0
06C72:  BRA    6C9E
....................       {
....................          if(FlashingFlag == 0)
06C74:  BTFSC  1A.1
06C76:  BRA    6C7C
....................             {
....................                Output.B9 = 0;           //Flash output1
06C78:  BCF    xCF.0
....................             }
06C7A:  BRA    6C7E
....................             else
....................             {
....................                Output.B9 = 1;
06C7C:  BSF    xCF.0
....................             }
....................          if (~AutoTestFlag)
06C7E:  BTFSC  1A.4
06C80:  BRA    6C9E
....................          {
....................              if(OutputBoth.B9 == 0)        //Both output
06C82:  BTFSC  xD7.0
06C84:  BRA    6C90
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06C86:  BSF    F89.4
06C88:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06C8A:  BSF    F89.3
06C8C:  BCF    F92.3
....................              }
06C8E:  BRA    6C9E
....................              else
....................              {
....................                if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
06C90:  BTFSS  xD5.0
06C92:  BRA    6C9A
06C94:  BSF    F89.4
06C96:  BCF    F92.4
06C98:  BRA    6C9E
....................                else output_bit(Pbell,1);                          //Bell
06C9A:  BSF    F89.3
06C9C:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06C9E:  MOVLW  01
06CA0:  MOVLB  B
06CA2:  MOVWF  x4A
....................       
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
06CA4:  MOVLB  A
06CA6:  BTFSC  xE9.0
06CA8:  BRA    6D18
06CAA:  BTFSC  30.1
06CAC:  BRA    6D18
06CAE:  BTFSC  xDB.0
06CB0:  BRA    6D18
....................       {
....................          SendSMS.B9 =1;
06CB2:  BSF    xE9.0
....................          fprintf(CH2,"AT+CMGS=\"");
06CB4:  MOVLW  DC
06CB6:  MOVWF  FF6
06CB8:  MOVLW  07
06CBA:  MOVWF  FF7
06CBC:  MOVLB  0
06CBE:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
06CC2:  MOVLW  09
06CC4:  MOVWF  FEA
06CC6:  MOVLW  7D
06CC8:  MOVWF  FE9
06CCA:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
06CCE:  MOVLW  22
06CD0:  MOVLB  B
06CD2:  MOVWF  x58
06CD4:  MOVLB  0
06CD6:  CALL   23A2
....................          putc('\n',CH2);
06CDA:  MOVLW  0A
06CDC:  MOVLB  B
06CDE:  MOVWF  x58
06CE0:  MOVLB  0
06CE2:  CALL   23A2
....................          delay_ms(50);
06CE6:  MOVLW  32
06CE8:  MOVLB  B
06CEA:  MOVWF  x57
06CEC:  MOVLB  0
06CEE:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage9);   
06CF2:  MOVLW  0A
06CF4:  MOVWF  FEA
06CF6:  MOVLW  8C
06CF8:  MOVWF  FE9
06CFA:  CALL   479E
....................         putc('\n',CH2);
06CFE:  MOVLW  0A
06D00:  MOVLB  B
06D02:  MOVWF  x58
06D04:  MOVLB  0
06D06:  CALL   23A2
....................         putc(26,CH2);
06D0A:  MOVLW  1A
06D0C:  MOVLB  B
06D0E:  MOVWF  x58
06D10:  MOVLB  0
06D12:  CALL   23A2
06D16:  MOVLB  A
....................       }
....................    }
06D18:  BRA    6DAC
....................    else if(FaultType.B9 == 0)
06D1A:  MOVLB  A
06D1C:  BTFSC  xD3.0
06D1E:  BRA    6DAC
....................    {
....................       In2.B9 = 0x00;
06D20:  BCF    xDF.0
....................       Ack.B9 = 0;
06D22:  BCF    xDB.0
....................       Output.B9 = 1;      //Off LED
06D24:  BSF    xCF.0
....................       
....................       SendSMS.B9 =0;// Clear SMS
06D26:  BCF    xE9.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)       //If Buzzer or Both
06D28:  BTFSC  xD5.0
06D2A:  BRA    6D30
06D2C:  BTFSC  xD7.0
06D2E:  BRA    6D52
06D30:  MOVLB  B
06D32:  MOVF   x4A,F
06D34:  BTFSC  FD8.2
06D36:  BRA    6D3C
06D38:  MOVLB  A
06D3A:  BRA    6D52
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06D3C:  MOVLW  01
06D3E:  MOVWF  x56
06D40:  MOVLB  0
06D42:  CALL   47C4
06D46:  DECFSZ 01,W
06D48:  BRA    6D4C
06D4A:  BRA    6D50
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06D4C:  BCF    F89.4
06D4E:  BCF    F92.4
06D50:  MOVLB  A
....................          }
....................       }
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)   //If Bell or Both
06D52:  BTFSS  xD5.0
06D54:  BRA    6D5A
06D56:  BTFSC  xD7.0
06D58:  BRA    6D7C
06D5A:  MOVLB  B
06D5C:  MOVF   x4A,F
06D5E:  BTFSC  FD8.2
06D60:  BRA    6D66
06D62:  MOVLB  A
06D64:  BRA    6D7C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06D66:  MOVLW  02
06D68:  MOVWF  x56
06D6A:  MOVLB  0
06D6C:  CALL   47C4
06D70:  DECFSZ 01,W
06D72:  BRA    6D76
06D74:  BRA    6D7A
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06D76:  BCF    F89.3
06D78:  BCF    F92.3
06D7A:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06D7C:  BTFSC  xDE.0
06D7E:  BRA    6DAC
06D80:  BTFSC  xDE.1
06D82:  BRA    6DAC
06D84:  BTFSC  xDE.2
06D86:  BRA    6DAC
06D88:  BTFSC  xDE.3
06D8A:  BRA    6DAC
06D8C:  BTFSC  xDE.4
06D8E:  BRA    6DAC
06D90:  BTFSC  xDE.5
06D92:  BRA    6DAC
06D94:  BTFSC  xDE.6
06D96:  BRA    6DAC
06D98:  BTFSC  xDE.7
06D9A:  BRA    6DAC
06D9C:  BTFSC  xDF.0
06D9E:  BRA    6DAC
06DA0:  BTFSC  xDF.1
06DA2:  BRA    6DAC
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06DA4:  BCF    F89.3
06DA6:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06DA8:  BCF    F89.4
06DAA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06DAC:  MOVLW  00
06DAE:  BTFSC  xCD.1
06DB0:  MOVLW  01
06DB2:  MOVLB  B
06DB4:  MOVWF  x57
06DB6:  MOVLW  00
06DB8:  MOVLB  A
06DBA:  BTFSC  xD1.1
06DBC:  MOVLW  01
06DBE:  MOVLB  B
06DC0:  XORWF  x57,W
06DC2:  SUBLW  01
06DC4:  BNZ   6DCE
06DC6:  MOVLB  A
06DC8:  BTFSS  xD3.1
06DCA:  BRA    6DD4
06DCC:  MOVLB  B
06DCE:  BTFSS  1A.5
06DD0:  BRA    6E96
06DD2:  MOVLB  A
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
06DD4:  BTFSC  xDF.1
06DD6:  BRA    6DEA
06DD8:  MOVF   5E,W
06DDA:  SUBLW  0F
06DDC:  BNZ   6DEA
06DDE:  BTFSC  xDB.1
06DE0:  BRA    6DEA
....................       {
....................             TimeBase1s = 100 ;            //reload again
06DE2:  MOVLW  64
06DE4:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06DE6:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B10 = 1;
06DEA:  BSF    xDF.1
....................       if(Ack.B10 == 0)
06DEC:  BTFSC  xDB.1
06DEE:  BRA    6E1A
....................       {
....................          if(FlashingFlag == 0)
06DF0:  BTFSC  1A.1
06DF2:  BRA    6DF8
....................          {
....................             Output.B10 = 0;           //Flash output1
06DF4:  BCF    xCF.1
....................          }
06DF6:  BRA    6DFA
....................          else
....................          {
....................             Output.B10 = 1;
06DF8:  BSF    xCF.1
....................          }
....................          if (~AutoTestFlag)
06DFA:  BTFSC  1A.4
06DFC:  BRA    6E1A
....................          {
....................              if(OutputBoth.B10 == 0)        //Both output
06DFE:  BTFSC  xD7.1
06E00:  BRA    6E0C
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06E02:  BSF    F89.4
06E04:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06E06:  BSF    F89.3
06E08:  BCF    F92.3
....................              }
06E0A:  BRA    6E1A
....................              else
....................              {
....................                if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
06E0C:  BTFSS  xD5.1
06E0E:  BRA    6E16
06E10:  BSF    F89.4
06E12:  BCF    F92.4
06E14:  BRA    6E1A
....................                else output_bit(Pbell,1);                          //Bell
06E16:  BSF    F89.3
06E18:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06E1A:  MOVLW  01
06E1C:  MOVLB  B
06E1E:  MOVWF  x4A
....................       
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
06E20:  MOVLB  A
06E22:  BTFSC  xE9.1
06E24:  BRA    6E94
06E26:  BTFSC  30.1
06E28:  BRA    6E94
06E2A:  BTFSC  xDB.1
06E2C:  BRA    6E94
....................       {
....................          SendSMS.B10 =1;
06E2E:  BSF    xE9.1
....................          fprintf(CH2,"AT+CMGS=\"");
06E30:  MOVLW  E6
06E32:  MOVWF  FF6
06E34:  MOVLW  07
06E36:  MOVWF  FF7
06E38:  MOVLB  0
06E3A:  CALL   23E8
....................          fprintf(CH2,sms_phonenumber);
06E3E:  MOVLW  09
06E40:  MOVWF  FEA
06E42:  MOVLW  7D
06E44:  MOVWF  FE9
06E46:  CALL   479E
....................          
....................          fprintf(CH2,"\"");
06E4A:  MOVLW  22
06E4C:  MOVLB  B
06E4E:  MOVWF  x58
06E50:  MOVLB  0
06E52:  CALL   23A2
....................          putc('\n',CH2);
06E56:  MOVLW  0A
06E58:  MOVLB  B
06E5A:  MOVWF  x58
06E5C:  MOVLB  0
06E5E:  CALL   23A2
....................          delay_ms(50);
06E62:  MOVLW  32
06E64:  MOVLB  B
06E66:  MOVWF  x57
06E68:  MOVLB  0
06E6A:  CALL   07FA
....................         
....................         fprintf(CH2,SMS_Massage10);   
06E6E:  MOVLW  0A
06E70:  MOVWF  FEA
06E72:  MOVLW  AC
06E74:  MOVWF  FE9
06E76:  CALL   479E
....................         putc('\n',CH2);
06E7A:  MOVLW  0A
06E7C:  MOVLB  B
06E7E:  MOVWF  x58
06E80:  MOVLB  0
06E82:  CALL   23A2
....................         putc(26,CH2);
06E86:  MOVLW  1A
06E88:  MOVLB  B
06E8A:  MOVWF  x58
06E8C:  MOVLB  0
06E8E:  CALL   23A2
06E92:  MOVLB  A
....................       }
....................    }
06E94:  BRA    6F28
....................    else if(FaultType.B10 == 0)
06E96:  MOVLB  A
06E98:  BTFSC  xD3.1
06E9A:  BRA    6F28
....................    {
....................       In2.B10 = 0x00;
06E9C:  BCF    xDF.1
....................       Ack.B10 = 0;
06E9E:  BCF    xDB.1
....................       Output.B10 = 1;      //Off LED
06EA0:  BSF    xCF.1
....................       
....................       SendSMS.B10 =0;// Clear SMS
06EA2:  BCF    xE9.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)       //If Buzzer or Both
06EA4:  BTFSC  xD5.1
06EA6:  BRA    6EAC
06EA8:  BTFSC  xD7.1
06EAA:  BRA    6ECE
06EAC:  MOVLB  B
06EAE:  MOVF   x4A,F
06EB0:  BTFSC  FD8.2
06EB2:  BRA    6EB8
06EB4:  MOVLB  A
06EB6:  BRA    6ECE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06EB8:  MOVLW  01
06EBA:  MOVWF  x56
06EBC:  MOVLB  0
06EBE:  CALL   47C4
06EC2:  DECFSZ 01,W
06EC4:  BRA    6EC8
06EC6:  BRA    6ECC
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06EC8:  BCF    F89.4
06ECA:  BCF    F92.4
06ECC:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)   //If Bell or Both
06ECE:  BTFSS  xD5.1
06ED0:  BRA    6ED6
06ED2:  BTFSC  xD7.1
06ED4:  BRA    6EF8
06ED6:  MOVLB  B
06ED8:  MOVF   x4A,F
06EDA:  BTFSC  FD8.2
06EDC:  BRA    6EE2
06EDE:  MOVLB  A
06EE0:  BRA    6EF8
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06EE2:  MOVLW  02
06EE4:  MOVWF  x56
06EE6:  MOVLB  0
06EE8:  CALL   47C4
06EEC:  DECFSZ 01,W
06EEE:  BRA    6EF2
06EF0:  BRA    6EF6
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06EF2:  BCF    F89.3
06EF4:  BCF    F92.3
06EF6:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06EF8:  BTFSC  xDE.0
06EFA:  BRA    6F28
06EFC:  BTFSC  xDE.1
06EFE:  BRA    6F28
06F00:  BTFSC  xDE.2
06F02:  BRA    6F28
06F04:  BTFSC  xDE.3
06F06:  BRA    6F28
06F08:  BTFSC  xDE.4
06F0A:  BRA    6F28
06F0C:  BTFSC  xDE.5
06F0E:  BRA    6F28
06F10:  BTFSC  xDE.6
06F12:  BRA    6F28
06F14:  BTFSC  xDE.7
06F16:  BRA    6F28
06F18:  BTFSC  xDF.0
06F1A:  BRA    6F28
06F1C:  BTFSC  xDF.1
06F1E:  BRA    6F28
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06F20:  BCF    F89.3
06F22:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06F24:  BCF    F89.4
06F26:  BCF    F92.4
....................       }
....................    }
06F28:  MOVLB  0
06F2A:  RETURN 0
....................    
.................... 
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Send_Ouput(void)
.................... {
.................... 
....................    if(T_test == 0x00)
*
0216C:  MOVF   2F,F
0216E:  BTFSS  FD8.2
02170:  BRA    23A0
....................    {
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
02172:  MOVLB  A
02174:  BTFSS  xCE.0
02176:  BRA    217E
....................            {
....................              bit_clear(Green1_8,0); bit_clear(Red1_8,0);
02178:  BCF    52.0
0217A:  BCF    4E.0
....................            }
0217C:  BRA    21A6
....................            else
....................            {
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
0217E:  BTFSS  xE4.0
02180:  BRA    218C
02182:  BTFSC  xE6.0
02184:  BRA    218C
....................              {
....................                bit_set(Red1_8,0); bit_clear(Green1_8,0);
02186:  BSF    4E.0
02188:  BCF    52.0
....................              }
0218A:  BRA    21A6
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
0218C:  BTFSC  xE4.0
0218E:  BRA    219A
02190:  BTFSS  xE6.0
02192:  BRA    219A
....................              {
....................                bit_clear(Red1_8,0); bit_set(Green1_8,0); 
02194:  BCF    4E.0
02196:  BSF    52.0
....................              }
02198:  BRA    21A6
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
0219A:  BTFSS  xE4.0
0219C:  BRA    21A6
0219E:  BTFSS  xE6.0
021A0:  BRA    21A6
....................              {
....................                bit_set(Red1_8,0); bit_set(Green1_8,0) ; 
021A2:  BSF    4E.0
021A4:  BSF    52.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
021A6:  BTFSS  xCE.1
021A8:  BRA    21B0
....................            {
....................              bit_clear(Green1_8,1); bit_clear(Red1_8,1);
021AA:  BCF    52.1
021AC:  BCF    4E.1
....................            }
021AE:  BRA    21D8
....................            else
....................            {
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
021B0:  BTFSS  xE4.1
021B2:  BRA    21BE
021B4:  BTFSC  xE6.1
021B6:  BRA    21BE
....................              {
....................                bit_set(Red1_8,1); bit_clear(Green1_8,1);
021B8:  BSF    4E.1
021BA:  BCF    52.1
....................              }
021BC:  BRA    21D8
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
021BE:  BTFSC  xE4.1
021C0:  BRA    21CC
021C2:  BTFSS  xE6.1
021C4:  BRA    21CC
....................              {
....................                bit_clear(Red1_8,1); bit_set(Green1_8,1); 
021C6:  BCF    4E.1
021C8:  BSF    52.1
....................              }
021CA:  BRA    21D8
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
021CC:  BTFSS  xE4.1
021CE:  BRA    21D8
021D0:  BTFSS  xE6.1
021D2:  BRA    21D8
....................              {
....................                bit_set(Red1_8,1); bit_set(Green1_8,1) ; 
021D4:  BSF    4E.1
021D6:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
021D8:  BTFSS  xCE.2
021DA:  BRA    21E2
....................            {
....................              bit_clear(Green1_8,2); bit_clear(Red1_8,2);
021DC:  BCF    52.2
021DE:  BCF    4E.2
....................            }
021E0:  BRA    220A
....................            else
....................            {
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
021E2:  BTFSS  xE4.2
021E4:  BRA    21F0
021E6:  BTFSC  xE6.2
021E8:  BRA    21F0
....................              {
....................                bit_set(Red1_8,2); bit_clear(Green1_8,2);
021EA:  BSF    4E.2
021EC:  BCF    52.2
....................              }
021EE:  BRA    220A
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
021F0:  BTFSC  xE4.2
021F2:  BRA    21FE
021F4:  BTFSS  xE6.2
021F6:  BRA    21FE
....................              {
....................                bit_clear(Red1_8,2); bit_set(Green1_8,2); 
021F8:  BCF    4E.2
021FA:  BSF    52.2
....................              }
021FC:  BRA    220A
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
021FE:  BTFSS  xE4.2
02200:  BRA    220A
02202:  BTFSS  xE6.2
02204:  BRA    220A
....................              {
....................                bit_set(Red1_8,2); bit_set(Green1_8,2) ; 
02206:  BSF    4E.2
02208:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
0220A:  BTFSS  xCE.3
0220C:  BRA    2214
....................            {
....................              bit_clear(Green1_8,3); bit_clear(Red1_8,3);
0220E:  BCF    52.3
02210:  BCF    4E.3
....................            }
02212:  BRA    223C
....................            else
....................            {
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
02214:  BTFSS  xE4.3
02216:  BRA    2222
02218:  BTFSC  xE6.3
0221A:  BRA    2222
....................              {
....................                bit_set(Red1_8,3); bit_clear(Green1_8,3);
0221C:  BSF    4E.3
0221E:  BCF    52.3
....................              }
02220:  BRA    223C
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
02222:  BTFSC  xE4.3
02224:  BRA    2230
02226:  BTFSS  xE6.3
02228:  BRA    2230
....................              {
....................                bit_clear(Red1_8,3); bit_set(Green1_8,3); 
0222A:  BCF    4E.3
0222C:  BSF    52.3
....................              }
0222E:  BRA    223C
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
02230:  BTFSS  xE4.3
02232:  BRA    223C
02234:  BTFSS  xE6.3
02236:  BRA    223C
....................              {
....................                bit_set(Red1_8,3); bit_set(Green1_8,3) ; 
02238:  BSF    4E.3
0223A:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
0223C:  BTFSS  xCE.4
0223E:  BRA    2246
....................            {
....................              bit_clear(Green1_8,4); bit_clear(Red1_8,4);
02240:  BCF    52.4
02242:  BCF    4E.4
....................            }
02244:  BRA    226E
....................            else
....................            {
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
02246:  BTFSS  xE4.4
02248:  BRA    2254
0224A:  BTFSC  xE6.4
0224C:  BRA    2254
....................              {
....................                bit_set(Red1_8,4); bit_clear(Green1_8,4);
0224E:  BSF    4E.4
02250:  BCF    52.4
....................              }
02252:  BRA    226E
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
02254:  BTFSC  xE4.4
02256:  BRA    2262
02258:  BTFSS  xE6.4
0225A:  BRA    2262
....................              {
....................                bit_clear(Red1_8,4); bit_set(Green1_8,4); 
0225C:  BCF    4E.4
0225E:  BSF    52.4
....................              }
02260:  BRA    226E
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
02262:  BTFSS  xE4.4
02264:  BRA    226E
02266:  BTFSS  xE6.4
02268:  BRA    226E
....................              {
....................                bit_set(Red1_8,4); bit_set(Green1_8,4) ; 
0226A:  BSF    4E.4
0226C:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
0226E:  BTFSS  xCE.5
02270:  BRA    2278
....................            {
....................              bit_clear(Green1_8,5); bit_clear(Red1_8,5);
02272:  BCF    52.5
02274:  BCF    4E.5
....................            }
02276:  BRA    22A0
....................            else
....................            {
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
02278:  BTFSS  xE4.5
0227A:  BRA    2286
0227C:  BTFSC  xE6.5
0227E:  BRA    2286
....................              {
....................                bit_set(Red1_8,5); bit_clear(Green1_8,5);
02280:  BSF    4E.5
02282:  BCF    52.5
....................              }
02284:  BRA    22A0
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
02286:  BTFSC  xE4.5
02288:  BRA    2294
0228A:  BTFSS  xE6.5
0228C:  BRA    2294
....................              {
....................                bit_clear(Red1_8,5); bit_set(Green1_8,5); 
0228E:  BCF    4E.5
02290:  BSF    52.5
....................              }
02292:  BRA    22A0
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
02294:  BTFSS  xE4.5
02296:  BRA    22A0
02298:  BTFSS  xE6.5
0229A:  BRA    22A0
....................              {
....................                bit_set(Red1_8,5); bit_set(Green1_8,5) ; 
0229C:  BSF    4E.5
0229E:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
022A0:  BTFSS  xCE.6
022A2:  BRA    22AA
....................            {
....................              bit_clear(Green1_8,6); bit_clear(Red1_8,6);
022A4:  BCF    52.6
022A6:  BCF    4E.6
....................            }
022A8:  BRA    22D2
....................            else
....................            {
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
022AA:  BTFSS  xE4.6
022AC:  BRA    22B8
022AE:  BTFSC  xE6.6
022B0:  BRA    22B8
....................              {
....................                bit_set(Red1_8,6); bit_clear(Green1_8,6);
022B2:  BSF    4E.6
022B4:  BCF    52.6
....................              }
022B6:  BRA    22D2
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
022B8:  BTFSC  xE4.6
022BA:  BRA    22C6
022BC:  BTFSS  xE6.6
022BE:  BRA    22C6
....................              {
....................                bit_clear(Red1_8,6); bit_set(Green1_8,6); 
022C0:  BCF    4E.6
022C2:  BSF    52.6
....................              }
022C4:  BRA    22D2
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
022C6:  BTFSS  xE4.6
022C8:  BRA    22D2
022CA:  BTFSS  xE6.6
022CC:  BRA    22D2
....................              {
....................                bit_set(Red1_8,6); bit_set(Green
022CE:  BSF    4E.6
022D0:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
022D2:  BTFSS  xCE.7
022D4:  BRA    22DC
....................            {
....................              bit_clear(Green1_8,7); bit_clear(Red1_8,7);
022D6:  BCF    52.7
022D8:  BCF    4E.7
....................            }
022DA:  BRA    2304
....................            else
....................            {
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
022DC:  BTFSS  xE4.7
022DE:  BRA    22EA
022E0:  BTFSC  xE6.7
022E2:  BRA    22EA
....................              {
....................                bit_set(Red1_8,7); bit_clear(Green1_8,7);
022E4:  BSF    4E.7
022E6:  BCF    52.7
....................              }
022E8:  BRA    2304
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
022EA:  BTFSC  xE4.7
022EC:  BRA    22F8
022EE:  BTFSS  xE6.7
022F0:  BRA    22F8
....................              {
....................                bit_clear(Red1_8,7); bit_set(Green1_8,7); 
022F2:  BCF    4E.7
022F4:  BSF    52.7
....................              }
022F6:  BRA    2304
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
022F8:  BTFSS  xE4.7
022FA:  BRA    2304
022FC:  BTFSS  xE6.7
022FE:  BRA    2304
....................              {
....................                bit_set(Red1_8,7); bit_set(Green1_8,7) ; 
02300:  BSF    4E.7
02302:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
02304:  BTFSS  xCF.0
02306:  BRA    230E
....................            {
....................              bit_clear(Green9_10,0); bit_clear(Red9_10,0);
02308:  BCF    53.0
0230A:  BCF    4F.0
....................            }
0230C:  BRA    2336
....................            else
....................            {
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
0230E:  BTFSS  xE5.0
02310:  BRA    231C
02312:  BTFSC  xE7.0
02314:  BRA    231C
....................              {
....................                bit_set(Red9_10,0); bit_clear(Green9_10,0);
02316:  BSF    4F.0
02318:  BCF    53.0
....................              }
0231A:  BRA    2336
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
0231C:  BTFSC  xE5.0
0231E:  BRA    232A
02320:  BTFSS  xE7.0
02322:  BRA    232A
....................              {
....................                bit_clear(Red9_10,0); bit_set(Green9_10,0); 
02324:  BCF    4F.0
02326:  BSF    53.0
....................              }
02328:  BRA    2336
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
0232A:  BTFSS  xE5.0
0232C:  BRA    2336
0232E:  BTFSS  xE7.0
02330:  BRA    2336
....................              {
....................                bit_set(Red9_10,0); bit_set(Green9_10,0) ; 
02332:  BSF    4F.0
02334:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
02336:  BTFSS  xCF.1
02338:  BRA    2340
....................            {
....................              bit_clear(Green9_10,1); bit_clear(Red9_10,1);
0233A:  BCF    53.1
0233C:  BCF    4F.1
....................            }
0233E:  BRA    2368
....................            else
....................            {
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
02340:  BTFSS  xE5.1
02342:  BRA    234E
02344:  BTFSC  xE7.1
02346:  BRA    234E
....................              {
....................                bit_set(Red9_10,1); bit_clear(Green9_10,1);
02348:  BSF    4F.1
0234A:  BCF    53.1
....................              }
0234C:  BRA    2368
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
0234E:  BTFSC  xE5.1
02350:  BRA    235C
02352:  BTFSS  xE7.1
02354:  BRA    235C
....................              {
....................                bit_clear(Red9_10,1); bit_set(Green9_10,1); 
02356:  BCF    4F.1
02358:  BSF    53.1
....................              }
0235A:  BRA    2368
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
0235C:  BTFSS  xE5.1
0235E:  BRA    2368
02360:  BTFSS  xE7.1
02362:  BRA    2368
....................              {
....................                bit_set(Red9_10,1); bit_set(Green9_10,1) ; 
02364:  BSF    4F.1
02366:  BSF    53.1
....................              }  
....................            }
....................              
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_8);
02368:  MOVLW  04
0236A:  MOVLB  B
0236C:  MOVWF  x4E
0236E:  MOVFF  4E,B4F
02372:  MOVLB  0
02374:  RCALL  2140
....................            IO_OUTPUT_B(IO_DEVICE_2, Red9_10);
02376:  MOVLW  04
02378:  MOVLB  B
0237A:  MOVWF  x4E
0237C:  MOVFF  4F,B4F
02380:  MOVLB  0
02382:  RCALL  2156
....................                    
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_8);
02384:  MOVLW  06
02386:  MOVLB  B
02388:  MOVWF  x4E
0238A:  MOVFF  52,B4F
0238E:  MOVLB  0
02390:  RCALL  2140
....................            IO_OUTPUT_B(IO_DEVICE_3, Green9_10);                                             
02392:  MOVLW  06
02394:  MOVLB  B
02396:  MOVWF  x4E
02398:  MOVFF  53,B4F
0239C:  MOVLB  0
0239E:  RCALL  2156
....................    }
023A0:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 10)
*
0473C:  MOVF   x61,W
0473E:  SUBLW  0A
04740:  BNZ   4782
....................    {
....................       Inputt.B1 = ~InputType.B1;
04742:  MOVLB  A
04744:  BCF    xCC.0
04746:  BTFSS  xD0.0
04748:  BSF    xCC.0
....................       Inputt.B2 = ~InputType.B2;
0474A:  BCF    xCC.1
0474C:  BTFSS  xD0.1
0474E:  BSF    xCC.1
....................       Inputt.B3 = ~InputType.B3;
04750:  BCF    xCC.2
04752:  BTFSS  xD0.2
04754:  BSF    xCC.2
....................       Inputt.B4 = ~InputType.B4;
04756:  BCF    xCC.3
04758:  BTFSS  xD0.3
0475A:  BSF    xCC.3
....................       Inputt.B5 = ~InputType.B5;
0475C:  BCF    xCC.4
0475E:  BTFSS  xD0.4
04760:  BSF    xCC.4
....................       Inputt.B6 = ~InputType.B6;
04762:  BCF    xCC.5
04764:  BTFSS  xD0.5
04766:  BSF    xCC.5
....................       Inputt.B7 = ~InputType.B7;
04768:  BCF    xCC.6
0476A:  BTFSS  xD0.6
0476C:  BSF    xCC.6
....................       Inputt.B8 = ~InputType.B8;
0476E:  BCF    xCC.7
04770:  BTFSS  xD0.7
04772:  BSF    xCC.7
....................       Inputt.B9 = ~InputType.B9;
04774:  BCF    xCD.0
04776:  BTFSS  xD1.0
04778:  BSF    xCD.0
....................       Inputt.B10 = ~InputType.B10;
0477A:  BCF    xCD.1
0477C:  BTFSS  xD1.1
0477E:  BSF    xCD.1
04780:  MOVLB  0
....................    } 
.................... 
....................    Ack.B1 = 0;
04782:  MOVLB  A
04784:  BCF    xDA.0
....................    Ack.B2 = 0;
04786:  BCF    xDA.1
....................    Ack.B3 = 0;
04788:  BCF    xDA.2
....................    Ack.B4 = 0;
0478A:  BCF    xDA.3
....................    Ack.B5 = 0;
0478C:  BCF    xDA.4
....................    Ack.B6 = 0;
0478E:  BCF    xDA.5
....................    Ack.B7 = 0;
04790:  BCF    xDA.6
....................    Ack.B8 = 0;
04792:  BCF    xDA.7
....................    Ack.B9 = 0;
04794:  BCF    xDB.0
....................    Ack.B10 = 0;
04796:  BCF    xDB.1
04798:  MOVLB  0
0479A:  GOTO   6F90 (RETURN)
.................... 
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
06F2C:  MOVFF  33,B4E
....................    output_temp[1] = output9_16;
06F30:  MOVFF  34,B4F
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
06F34:  BSF    F94.2
06F36:  BTFSC  F82.2
06F38:  BRA    6F3E
06F3A:  BTFSS  1A.6
06F3C:  BRA    6F42
06F3E:  BTFSS  1A.4
06F40:  BRA    6F4E
06F42:  MOVLW  32
06F44:  MOVLB  B
06F46:  MOVWF  x57
06F48:  MOVLB  0
06F4A:  CALL   07FA
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
06F4E:  BSF    F94.2
06F50:  BTFSC  F82.2
06F52:  BRA    6F58
06F54:  BTFSS  1A.6
06F56:  BRA    6F5C
06F58:  BTFSS  1A.4
06F5A:  BRA    6F78
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
06F5C:  BSF    F94.2
06F5E:  BTFSC  F82.2
06F60:  BRA    6F66
06F62:  BTFSS  1A.6
06F64:  BRA    6F6A
06F66:  BTFSS  1A.4
06F68:  BRA    6F76
....................            {
....................              restart_wdt();
06F6A:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
06F6C:  MOVF   2F,F
06F6E:  BNZ   6F74
06F70:  MOVLW  06
06F72:  MOVWF  2F
....................               Test = 1;
06F74:  BSF    1A.6
....................              
....................            }
....................        }
06F76:  BRA    6F88
....................        else if(input(Ptest) == 1 && Test == 1)
06F78:  BSF    F94.2
06F7A:  BTFSS  F82.2
06F7C:  BRA    6F88
06F7E:  BTFSS  1A.6
06F80:  BRA    6F88
....................        {
....................            T_test = 0x00;
06F82:  CLRF   2F
....................            Test = 0;
06F84:  BCF    1A.6
....................            Test_fault = 0;
06F86:  BCF    1A.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
06F88:  BTFSS  1A.5
06F8A:  BRA    6F9E
....................        {
....................           ForceAllAlarm();
06F8C:  GOTO   473C
....................           Anal_Function();
06F90:  CALL   4E0C
....................           //Test_fault = 0;
....................           if(Input(Ptest) == 1)
06F94:  BSF    F94.2
06F96:  BTFSS  F82.2
06F98:  BRA    6F9C
....................           {
....................             Test_fault = 0;
06F9A:  BCF    1A.5
....................           }
....................        }
06F9C:  BRA    6FB4
....................        else if(input(Ptest) == 1 && Test == 1)
06F9E:  BSF    F94.2
06FA0:  BTFSS  F82.2
06FA2:  BRA    6FB4
06FA4:  BTFSS  1A.6
06FA6:  BRA    6FB4
....................        {
....................           if(NoOfPoint >= 16)
06FA8:  MOVF   x61,W
06FAA:  SUBLW  0F
06FAC:  BC    6FAE
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
06FAE:  CLRF   2F
....................           Test = 0;
06FB0:  BCF    1A.6
....................           Test_fault = 0;
06FB2:  BCF    1A.5
....................        }
06FB4:  GOTO   776E (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
04478:  BSF    F94.0
0447A:  BTFSC  F82.0
0447C:  BRA    4482
0447E:  BTFSS  1A.7
04480:  BRA    4486
04482:  BTFSS  1A.2
04484:  BRA    4492
04486:  MOVLW  32
04488:  MOVLB  B
0448A:  MOVWF  x57
0448C:  MOVLB  0
0448E:  CALL   07FA
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
04492:  BSF    F94.0
04494:  BTFSC  F82.0
04496:  BRA    449C
04498:  BTFSS  1A.7
0449A:  BRA    44A0
0449C:  BTFSS  1A.2
0449E:  BRA    4554
....................    {
....................             AutoAckFlag = 0;
044A0:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
044A2:  CLRF   1D
....................       
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
044A4:  MOVLB  A
044A6:  BTFSC  xDC.0
044A8:  BRA    44AE
044AA:  BTFSS  xDE.0
044AC:  BRA    44B6
....................            {
....................              Ack.B1 = 1;
044AE:  BSF    xDA.0
....................              In.B1 = 0;
044B0:  BCF    xDC.0
....................              In2.B1 = 0;      //for auto reset
044B2:  BCF    xDE.0
....................              Output.B1 = 0;
044B4:  BCF    xCE.0
....................            }
.................... 
....................            if((In.B2 == 1)||(In2.B2 == 1))
044B6:  BTFSC  xDC.1
044B8:  BRA    44BE
044BA:  BTFSS  xDE.1
044BC:  BRA    44C6
....................            {
....................              Ack.B2 = 1;
044BE:  BSF    xDA.1
....................              In.B2 = 0;
044C0:  BCF    xDC.1
....................              In2.B2 = 0;      //for auto reset
044C2:  BCF    xDE.1
....................              Output.B2 = 0;
044C4:  BCF    xCE.1
....................            }
.................... 
....................            if((In.B3 == 1)||(In2.B3 == 1))
044C6:  BTFSC  xDC.2
044C8:  BRA    44CE
044CA:  BTFSS  xDE.2
044CC:  BRA    44D6
....................            {
....................              Ack.B3 = 1;
044CE:  BSF    xDA.2
....................              In.B3 = 0;
044D0:  BCF    xDC.2
....................              In2.B3 = 0;      //for auto reset
044D2:  BCF    xDE.2
....................              Output.B3 = 0;
044D4:  BCF    xCE.2
....................            }
.................... 
....................            if((In.B4 == 1)||(In2.B4 == 1))
044D6:  BTFSC  xDC.3
044D8:  BRA    44DE
044DA:  BTFSS  xDE.3
044DC:  BRA    44E6
....................            {
....................              Ack.B4 = 1;
044DE:  BSF    xDA.3
....................              In.B4 = 0;
044E0:  BCF    xDC.3
....................              In2.B4 = 0;      //for auto reset
044E2:  BCF    xDE.3
....................              Output.B4 = 0;
044E4:  BCF    xCE.3
....................            }
.................... 
....................            if((In.B5 == 1)||(In2.B5 == 1))
044E6:  BTFSC  xDC.4
044E8:  BRA    44EE
044EA:  BTFSS  xDE.4
044EC:  BRA    44F6
....................            {
....................              Ack.B5 = 1;
044EE:  BSF    xDA.4
....................              In.B5 = 0;
044F0:  BCF    xDC.4
....................              In2.B5 = 0;      //for auto reset
044F2:  BCF    xDE.4
....................              Output.B5 = 0;
044F4:  BCF    xCE.4
....................            }
.................... 
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
044F6:  BTFSC  xDC.5
044F8:  BRA    44FE
044FA:  BTFSS  xDE.5
044FC:  BRA    4506
....................            {
....................              Ack.B6 = 1;
044FE:  BSF    xDA.5
....................              In.B6 = 0;
04500:  BCF    xDC.5
....................              In2.B6 = 0;      //for auto reset
04502:  BCF    xDE.5
....................              Output.B6 = 0;
04504:  BCF    xCE.5
....................            }
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
04506:  BTFSC  xDC.6
04508:  BRA    450E
0450A:  BTFSS  xDE.6
0450C:  BRA    4516
....................            {
....................              Ack.B7 = 1;
0450E:  BSF    xDA.6
....................              In.B7 = 0;
04510:  BCF    xDC.6
....................              In2.B7 = 0;      //for auto reset
04512:  BCF    xDE.6
....................              Output.B7 = 0;
04514:  BCF    xCE.6
....................            }
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
04516:  BTFSC  xDC.7
04518:  BRA    451E
0451A:  BTFSS  xDE.7
0451C:  BRA    4526
....................            {
....................              Ack.B8 = 1;
0451E:  BSF    xDA.7
....................              In.B8 = 0;
04520:  BCF    xDC.7
....................              In2.B8 = 0;      //for auto reset
04522:  BCF    xDE.7
....................              Output.B8 = 0;
04524:  BCF    xCE.7
....................            }
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
04526:  BTFSC  xDD.0
04528:  BRA    452E
0452A:  BTFSS  xDF.0
0452C:  BRA    4536
....................            {
....................              Ack.B9 = 1;
0452E:  BSF    xDB.0
....................              In.B9 = 0;
04530:  BCF    xDD.0
....................              In2.B9 = 0;      //for auto reset
04532:  BCF    xDF.0
....................              Output.B9 = 0;
04534:  BCF    xCF.0
....................            }
....................            if((In.B10 == 1)||(In2.B10 == 1))
04536:  BTFSC  xDD.1
04538:  BRA    453E
0453A:  BTFSS  xDF.1
0453C:  BRA    4546
....................            {
....................              Ack.B10 = 1;
0453E:  BSF    xDB.1
....................              In.B10 = 0;
04540:  BCF    xDD.1
....................              In2.B10 = 0;      //for auto reset
04542:  BCF    xDF.1
....................              Output.B10 = 0;
04544:  BCF    xCF.1
....................            }
....................           
....................             Ack_F = 1;
04546:  BSF    1A.7
....................             output_bit(Pbuzzer,0);   //Buzzer
04548:  BCF    F89.4
0454A:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
0454C:  BCF    F89.3
0454E:  BCF    F92.3
....................    }
04550:  BRA    4562
04552:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
04554:  BSF    F94.0
04556:  BTFSS  F82.0
04558:  BRA    4560
0455A:  BTFSS  1A.7
0455C:  BRA    4560
....................    {
....................       Ack_F = 0;
0455E:  BCF    1A.7
04560:  MOVLB  A
....................    }
04562:  MOVLB  0
04564:  GOTO   7766 (RETURN)
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
04568:  BSF    F94.1
0456A:  BTFSC  F82.1
0456C:  BRA    4572
0456E:  BTFSS  30.0
04570:  BRA    4576
04572:  BTFSS  1A.3
04574:  BRA    4582
04576:  MOVLW  32
04578:  MOVLB  B
0457A:  MOVWF  x57
0457C:  MOVLB  0
0457E:  CALL   07FA
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
04582:  BSF    F94.1
04584:  BTFSC  F82.1
04586:  BRA    458C
04588:  BTFSS  30.0
0458A:  BRA    4590
0458C:  BTFSS  1A.3
0458E:  BRA    4728
....................     {
....................        AutoResetFlag = 0;
04590:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
04592:  MOVLW  00
04594:  MOVLB  A
04596:  BTFSC  xCC.0
04598:  MOVLW  01
0459A:  MOVLB  B
0459C:  MOVWF  x4F
0459E:  MOVLW  00
045A0:  MOVLB  A
045A2:  BTFSC  xD0.0
045A4:  MOVLW  01
045A6:  MOVLB  B
045A8:  XORWF  x4F,W
045AA:  BNZ   45BA
045AC:  MOVLB  A
045AE:  BTFSS  xDC.0
045B0:  BRA    45B6
045B2:  MOVLB  B
045B4:  BRA    45BA
045B6:  BSF    xCE.0
045B8:  MOVLB  B
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
045BA:  MOVLW  00
045BC:  MOVLB  A
045BE:  BTFSC  xCC.1
045C0:  MOVLW  01
045C2:  MOVLB  B
045C4:  MOVWF  x4F
045C6:  MOVLW  00
045C8:  MOVLB  A
045CA:  BTFSC  xD0.1
045CC:  MOVLW  01
045CE:  MOVLB  B
045D0:  XORWF  x4F,W
045D2:  BNZ   45E2
045D4:  MOVLB  A
045D6:  BTFSS  xDC.1
045D8:  BRA    45DE
045DA:  MOVLB  B
045DC:  BRA    45E2
045DE:  BSF    xCE.1
045E0:  MOVLB  B
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
045E2:  MOVLW  00
045E4:  MOVLB  A
045E6:  BTFSC  xCC.2
045E8:  MOVLW  01
045EA:  MOVLB  B
045EC:  MOVWF  x4F
045EE:  MOVLW  00
045F0:  MOVLB  A
045F2:  BTFSC  xD0.2
045F4:  MOVLW  01
045F6:  MOVLB  B
045F8:  XORWF  x4F,W
045FA:  BNZ   460A
045FC:  MOVLB  A
045FE:  BTFSS  xDC.2
04600:  BRA    4606
04602:  MOVLB  B
04604:  BRA    460A
04606:  BSF    xCE.2
04608:  MOVLB  B
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
0460A:  MOVLW  00
0460C:  MOVLB  A
0460E:  BTFSC  xCC.3
04610:  MOVLW  01
04612:  MOVLB  B
04614:  MOVWF  x4F
04616:  MOVLW  00
04618:  MOVLB  A
0461A:  BTFSC  xD0.3
0461C:  MOVLW  01
0461E:  MOVLB  B
04620:  XORWF  x4F,W
04622:  BNZ   4632
04624:  MOVLB  A
04626:  BTFSS  xDC.3
04628:  BRA    462E
0462A:  MOVLB  B
0462C:  BRA    4632
0462E:  BSF    xCE.3
04630:  MOVLB  B
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
04632:  MOVLW  00
04634:  MOVLB  A
04636:  BTFSC  xCC.4
04638:  MOVLW  01
0463A:  MOVLB  B
0463C:  MOVWF  x4F
0463E:  MOVLW  00
04640:  MOVLB  A
04642:  BTFSC  xD0.4
04644:  MOVLW  01
04646:  MOVLB  B
04648:  XORWF  x4F,W
0464A:  BNZ   465A
0464C:  MOVLB  A
0464E:  BTFSS  xDC.4
04650:  BRA    4656
04652:  MOVLB  B
04654:  BRA    465A
04656:  BSF    xCE.4
04658:  MOVLB  B
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
0465A:  MOVLW  00
0465C:  MOVLB  A
0465E:  BTFSC  xCC.5
04660:  MOVLW  01
04662:  MOVLB  B
04664:  MOVWF  x4F
04666:  MOVLW  00
04668:  MOVLB  A
0466A:  BTFSC  xD0.5
0466C:  MOVLW  01
0466E:  MOVLB  B
04670:  XORWF  x4F,W
04672:  BNZ   4682
04674:  MOVLB  A
04676:  BTFSS  xDC.5
04678:  BRA    467E
0467A:  MOVLB  B
0467C:  BRA    4682
0467E:  BSF    xCE.5
04680:  MOVLB  B
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
04682:  MOVLW  00
04684:  MOVLB  A
04686:  BTFSC  xCC.6
04688:  MOVLW  01
0468A:  MOVLB  B
0468C:  MOVWF  x4F
0468E:  MOVLW  00
04690:  MOVLB  A
04692:  BTFSC  xD0.6
04694:  MOVLW  01
04696:  MOVLB  B
04698:  XORWF  x4F,W
0469A:  BNZ   46AA
0469C:  MOVLB  A
0469E:  BTFSS  xDC.6
046A0:  BRA    46A6
046A2:  MOVLB  B
046A4:  BRA    46AA
046A6:  BSF    xCE.6
046A8:  MOVLB  B
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
046AA:  MOVLW  00
046AC:  MOVLB  A
046AE:  BTFSC  xCC.7
046B0:  MOVLW  01
046B2:  MOVLB  B
046B4:  MOVWF  x4F
046B6:  MOVLW  00
046B8:  MOVLB  A
046BA:  BTFSC  xD0.7
046BC:  MOVLW  01
046BE:  MOVLB  B
046C0:  XORWF  x4F,W
046C2:  BNZ   46D2
046C4:  MOVLB  A
046C6:  BTFSS  xDC.7
046C8:  BRA    46CE
046CA:  MOVLB  B
046CC:  BRA    46D2
046CE:  BSF    xCE.7
046D0:  MOVLB  B
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
046D2:  MOVLW  00
046D4:  MOVLB  A
046D6:  BTFSC  xCD.0
046D8:  MOVLW  01
046DA:  MOVLB  B
046DC:  MOVWF  x4F
046DE:  MOVLW  00
046E0:  MOVLB  A
046E2:  BTFSC  xD1.0
046E4:  MOVLW  01
046E6:  MOVLB  B
046E8:  XORWF  x4F,W
046EA:  BNZ   46FA
046EC:  MOVLB  A
046EE:  BTFSS  xDD.0
046F0:  BRA    46F6
046F2:  MOVLB  B
046F4:  BRA    46FA
046F6:  BSF    xCF.0
046F8:  MOVLB  B
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
046FA:  MOVLW  00
046FC:  MOVLB  A
046FE:  BTFSC  xCD.1
04700:  MOVLW  01
04702:  MOVLB  B
04704:  MOVWF  x4F
04706:  MOVLW  00
04708:  MOVLB  A
0470A:  BTFSC  xD1.1
0470C:  MOVLW  01
0470E:  MOVLB  B
04710:  XORWF  x4F,W
04712:  BNZ   4722
04714:  MOVLB  A
04716:  BTFSS  xDD.1
04718:  BRA    471E
0471A:  MOVLB  B
0471C:  BRA    4722
0471E:  BSF    xCF.1
04720:  MOVLB  B
.................... 
....................        Reset_F = 1;
04722:  BSF    30.0
....................     }
04724:  BRA    4736
04726:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
04728:  BSF    F94.1
0472A:  BTFSS  F82.1
0472C:  BRA    4734
0472E:  BTFSS  30.0
04730:  BRA    4734
....................     {
....................        Reset_F = 0;
04732:  BCF    30.0
04734:  MOVLB  B
....................     }
04736:  MOVLB  0
04738:  GOTO   776A (RETURN)
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
047C4:  MOVLB  B
047C6:  DECFSZ x56,W
047C8:  BRA    4AE2
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
047CA:  MOVLW  00
047CC:  MOVLB  A
047CE:  BTFSC  xDC.0
047D0:  MOVLW  01
047D2:  MOVLB  B
047D4:  MOVWF  x59
047D6:  MOVLW  00
047D8:  MOVLB  A
047DA:  BTFSC  xDE.0
047DC:  MOVLW  01
047DE:  MOVLB  B
047E0:  IORWF  x59,W
047E2:  MOVWF  x58
047E4:  MOVLW  00
047E6:  MOVLB  A
047E8:  BTFSS  xDA.0
047EA:  MOVLW  01
047EC:  MOVLB  B
047EE:  ANDWF  x58,F
047F0:  MOVLW  00
047F2:  MOVLB  A
047F4:  BTFSC  xD4.0
047F6:  MOVLW  01
047F8:  MOVLB  B
047FA:  MOVWF  x5B
047FC:  MOVLW  00
047FE:  MOVLB  A
04800:  BTFSC  xD6.0
04802:  MOVLW  01
04804:  MOVLB  B
04806:  IORWF  x5B,W
04808:  ANDWF  x58,W
0480A:  BCF    x57.0
0480C:  BTFSC  FE8.0
0480E:  BSF    x57.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
04810:  MOVLW  00
04812:  BTFSC  x57.0
04814:  MOVLW  01
04816:  MOVWF  x58
04818:  MOVLW  00
0481A:  MOVLB  A
0481C:  BTFSC  xDC.1
0481E:  MOVLW  01
04820:  MOVLB  B
04822:  MOVWF  x5A
04824:  MOVLW  00
04826:  MOVLB  A
04828:  BTFSC  xDE.1
0482A:  MOVLW  01
0482C:  MOVLB  B
0482E:  IORWF  x5A,W
04830:  MOVWF  x59
04832:  MOVLW  00
04834:  MOVLB  A
04836:  BTFSS  xDA.1
04838:  MOVLW  01
0483A:  MOVLB  B
0483C:  ANDWF  x59,F
0483E:  MOVLW  00
04840:  MOVLB  A
04842:  BTFSC  xD4.1
04844:  MOVLW  01
04846:  MOVLB  B
04848:  MOVWF  x5C
0484A:  MOVLW  00
0484C:  MOVLB  A
0484E:  BTFSC  xD6.1
04850:  MOVLW  01
04852:  MOVLB  B
04854:  IORWF  x5C,W
04856:  ANDWF  x59,W
04858:  IORWF  x58,W
0485A:  BCF    x57.0
0485C:  BTFSC  FE8.0
0485E:  BSF    x57.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
04860:  MOVLW  00
04862:  BTFSC  x57.0
04864:  MOVLW  01
04866:  MOVWF  x58
04868:  MOVLW  00
0486A:  MOVLB  A
0486C:  BTFSC  xDC.2
0486E:  MOVLW  01
04870:  MOVLB  B
04872:  MOVWF  x5A
04874:  MOVLW  00
04876:  MOVLB  A
04878:  BTFSC  xDE.2
0487A:  MOVLW  01
0487C:  MOVLB  B
0487E:  IORWF  x5A,W
04880:  MOVWF  x59
04882:  MOVLW  00
04884:  MOVLB  A
04886:  BTFSS  xDA.2
04888:  MOVLW  01
0488A:  MOVLB  B
0488C:  ANDWF  x59,F
0488E:  MOVLW  00
04890:  MOVLB  A
04892:  BTFSC  xD4.2
04894:  MOVLW  01
04896:  MOVLB  B
04898:  MOVWF  x5C
0489A:  MOVLW  00
0489C:  MOVLB  A
0489E:  BTFSC  xD6.2
048A0:  MOVLW  01
048A2:  MOVLB  B
048A4:  IORWF  x5C,W
048A6:  ANDWF  x59,W
048A8:  IORWF  x58,W
048AA:  BCF    x57.0
048AC:  BTFSC  FE8.0
048AE:  BSF    x57.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
048B0:  MOVLW  00
048B2:  BTFSC  x57.0
048B4:  MOVLW  01
048B6:  MOVWF  x58
048B8:  MOVLW  00
048BA:  MOVLB  A
048BC:  BTFSC  xDC.3
048BE:  MOVLW  01
048C0:  MOVLB  B
048C2:  MOVWF  x5A
048C4:  MOVLW  00
048C6:  MOVLB  A
048C8:  BTFSC  xDE.3
048CA:  MOVLW  01
048CC:  MOVLB  B
048CE:  IORWF  x5A,W
048D0:  MOVWF  x59
048D2:  MOVLW  00
048D4:  MOVLB  A
048D6:  BTFSS  xDA.3
048D8:  MOVLW  01
048DA:  MOVLB  B
048DC:  ANDWF  x59,F
048DE:  MOVLW  00
048E0:  MOVLB  A
048E2:  BTFSC  xD4.3
048E4:  MOVLW  01
048E6:  MOVLB  B
048E8:  MOVWF  x5C
048EA:  MOVLW  00
048EC:  MOVLB  A
048EE:  BTFSC  xD6.3
048F0:  MOVLW  01
048F2:  MOVLB  B
048F4:  IORWF  x5C,W
048F6:  ANDWF  x59,W
048F8:  IORWF  x58,W
048FA:  BCF    x57.0
048FC:  BTFSC  FE8.0
048FE:  BSF    x57.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
04900:  MOVLW  00
04902:  BTFSC  x57.0
04904:  MOVLW  01
04906:  MOVWF  x58
04908:  MOVLW  00
0490A:  MOVLB  A
0490C:  BTFSC  xDC.4
0490E:  MOVLW  01
04910:  MOVLB  B
04912:  MOVWF  x5A
04914:  MOVLW  00
04916:  MOVLB  A
04918:  BTFSC  xDE.4
0491A:  MOVLW  01
0491C:  MOVLB  B
0491E:  IORWF  x5A,W
04920:  MOVWF  x59
04922:  MOVLW  00
04924:  MOVLB  A
04926:  BTFSS  xDA.4
04928:  MOVLW  01
0492A:  MOVLB  B
0492C:  ANDWF  x59,F
0492E:  MOVLW  00
04930:  MOVLB  A
04932:  BTFSC  xD4.4
04934:  MOVLW  01
04936:  MOVLB  B
04938:  MOVWF  x5C
0493A:  MOVLW  00
0493C:  MOVLB  A
0493E:  BTFSC  xD6.4
04940:  MOVLW  01
04942:  MOVLB  B
04944:  IORWF  x5C,W
04946:  ANDWF  x59,W
04948:  IORWF  x58,W
0494A:  BCF    x57.0
0494C:  BTFSC  FE8.0
0494E:  BSF    x57.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
04950:  MOVLW  00
04952:  BTFSC  x57.0
04954:  MOVLW  01
04956:  MOVWF  x58
04958:  MOVLW  00
0495A:  MOVLB  A
0495C:  BTFSC  xDC.5
0495E:  MOVLW  01
04960:  MOVLB  B
04962:  MOVWF  x5A
04964:  MOVLW  00
04966:  MOVLB  A
04968:  BTFSC  xDE.5
0496A:  MOVLW  01
0496C:  MOVLB  B
0496E:  IORWF  x5A,W
04970:  MOVWF  x59
04972:  MOVLW  00
04974:  MOVLB  A
04976:  BTFSS  xDA.5
04978:  MOVLW  01
0497A:  MOVLB  B
0497C:  ANDWF  x59,F
0497E:  MOVLW  00
04980:  MOVLB  A
04982:  BTFSC  xD4.5
04984:  MOVLW  01
04986:  MOVLB  B
04988:  MOVWF  x5C
0498A:  MOVLW  00
0498C:  MOVLB  A
0498E:  BTFSC  xD6.5
04990:  MOVLW  01
04992:  MOVLB  B
04994:  IORWF  x5C,W
04996:  ANDWF  x59,W
04998:  IORWF  x58,W
0499A:  BCF    x57.0
0499C:  BTFSC  FE8.0
0499E:  BSF    x57.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
049A0:  MOVLW  00
049A2:  BTFSC  x57.0
049A4:  MOVLW  01
049A6:  MOVWF  x58
049A8:  MOVLW  00
049AA:  MOVLB  A
049AC:  BTFSC  xDC.6
049AE:  MOVLW  01
049B0:  MOVLB  B
049B2:  MOVWF  x5A
049B4:  MOVLW  00
049B6:  MOVLB  A
049B8:  BTFSC  xDE.6
049BA:  MOVLW  01
049BC:  MOVLB  B
049BE:  IORWF  x5A,W
049C0:  MOVWF  x59
049C2:  MOVLW  00
049C4:  MOVLB  A
049C6:  BTFSS  xDA.6
049C8:  MOVLW  01
049CA:  MOVLB  B
049CC:  ANDWF  x59,F
049CE:  MOVLW  00
049D0:  MOVLB  A
049D2:  BTFSC  xD4.6
049D4:  MOVLW  01
049D6:  MOVLB  B
049D8:  MOVWF  x5C
049DA:  MOVLW  00
049DC:  MOVLB  A
049DE:  BTFSC  xD6.6
049E0:  MOVLW  01
049E2:  MOVLB  B
049E4:  IORWF  x5C,W
049E6:  ANDWF  x59,W
049E8:  IORWF  x58,W
049EA:  BCF    x57.0
049EC:  BTFSC  FE8.0
049EE:  BSF    x57.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
049F0:  MOVLW  00
049F2:  BTFSC  x57.0
049F4:  MOVLW  01
049F6:  MOVWF  x58
049F8:  MOVLW  00
049FA:  MOVLB  A
049FC:  BTFSC  xDC.7
049FE:  MOVLW  01
04A00:  MOVLB  B
04A02:  MOVWF  x5A
04A04:  MOVLW  00
04A06:  MOVLB  A
04A08:  BTFSC  xDE.7
04A0A:  MOVLW  01
04A0C:  MOVLB  B
04A0E:  IORWF  x5A,W
04A10:  MOVWF  x59
04A12:  MOVLW  00
04A14:  MOVLB  A
04A16:  BTFSS  xDA.7
04A18:  MOVLW  01
04A1A:  MOVLB  B
04A1C:  ANDWF  x59,F
04A1E:  MOVLW  00
04A20:  MOVLB  A
04A22:  BTFSC  xD4.7
04A24:  MOVLW  01
04A26:  MOVLB  B
04A28:  MOVWF  x5C
04A2A:  MOVLW  00
04A2C:  MOVLB  A
04A2E:  BTFSC  xD6.7
04A30:  MOVLW  01
04A32:  MOVLB  B
04A34:  IORWF  x5C,W
04A36:  ANDWF  x59,W
04A38:  IORWF  x58,W
04A3A:  BCF    x57.0
04A3C:  BTFSC  FE8.0
04A3E:  BSF    x57.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
04A40:  MOVLW  00
04A42:  BTFSC  x57.0
04A44:  MOVLW  01
04A46:  MOVWF  x58
04A48:  MOVLW  00
04A4A:  MOVLB  A
04A4C:  BTFSC  xDD.0
04A4E:  MOVLW  01
04A50:  MOVLB  B
04A52:  MOVWF  x5A
04A54:  MOVLW  00
04A56:  MOVLB  A
04A58:  BTFSC  xDF.0
04A5A:  MOVLW  01
04A5C:  MOVLB  B
04A5E:  IORWF  x5A,W
04A60:  MOVWF  x59
04A62:  MOVLW  00
04A64:  MOVLB  A
04A66:  BTFSS  xDB.0
04A68:  MOVLW  01
04A6A:  MOVLB  B
04A6C:  ANDWF  x59,F
04A6E:  MOVLW  00
04A70:  MOVLB  A
04A72:  BTFSC  xD5.0
04A74:  MOVLW  01
04A76:  MOVLB  B
04A78:  MOVWF  x5C
04A7A:  MOVLW  00
04A7C:  MOVLB  A
04A7E:  BTFSC  xD7.0
04A80:  MOVLW  01
04A82:  MOVLB  B
04A84:  IORWF  x5C,W
04A86:  ANDWF  x59,W
04A88:  IORWF  x58,W
04A8A:  BCF    x57.0
04A8C:  BTFSC  FE8.0
04A8E:  BSF    x57.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
04A90:  MOVLW  00
04A92:  BTFSC  x57.0
04A94:  MOVLW  01
04A96:  MOVWF  x58
04A98:  MOVLW  00
04A9A:  MOVLB  A
04A9C:  BTFSC  xDD.1
04A9E:  MOVLW  01
04AA0:  MOVLB  B
04AA2:  MOVWF  x5A
04AA4:  MOVLW  00
04AA6:  MOVLB  A
04AA8:  BTFSC  xDF.1
04AAA:  MOVLW  01
04AAC:  MOVLB  B
04AAE:  IORWF  x5A,W
04AB0:  MOVWF  x59
04AB2:  MOVLW  00
04AB4:  MOVLB  A
04AB6:  BTFSS  xDB.1
04AB8:  MOVLW  01
04ABA:  MOVLB  B
04ABC:  ANDWF  x59,F
04ABE:  MOVLW  00
04AC0:  MOVLB  A
04AC2:  BTFSC  xD5.1
04AC4:  MOVLW  01
04AC6:  MOVLB  B
04AC8:  MOVWF  x5C
04ACA:  MOVLW  00
04ACC:  MOVLB  A
04ACE:  BTFSC  xD7.1
04AD0:  MOVLW  01
04AD2:  MOVLB  B
04AD4:  IORWF  x5C,W
04AD6:  ANDWF  x59,W
04AD8:  IORWF  x58,W
04ADA:  BCF    x57.0
04ADC:  BTFSC  FE8.0
04ADE:  BSF    x57.0
.................... 
....................    }
04AE0:  BRA    4E00
....................    else if(DatType == 0x02)             //Bell
04AE2:  MOVF   x56,W
04AE4:  SUBLW  02
04AE6:  BTFSS  FD8.2
04AE8:  BRA    4E00
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
04AEA:  MOVLW  00
04AEC:  MOVLB  A
04AEE:  BTFSC  xDC.0
04AF0:  MOVLW  01
04AF2:  MOVLB  B
04AF4:  MOVWF  x59
04AF6:  MOVLW  00
04AF8:  MOVLB  A
04AFA:  BTFSC  xDE.0
04AFC:  MOVLW  01
04AFE:  MOVLB  B
04B00:  IORWF  x59,W
04B02:  MOVWF  x58
04B04:  MOVLW  00
04B06:  MOVLB  A
04B08:  BTFSS  xDA.0
04B0A:  MOVLW  01
04B0C:  MOVLB  B
04B0E:  ANDWF  x58,F
04B10:  MOVLW  00
04B12:  MOVLB  A
04B14:  BTFSS  xD4.0
04B16:  MOVLW  01
04B18:  MOVLB  B
04B1A:  MOVWF  x5B
04B1C:  MOVLW  00
04B1E:  MOVLB  A
04B20:  BTFSC  xD6.0
04B22:  MOVLW  01
04B24:  MOVLB  B
04B26:  IORWF  x5B,W
04B28:  ANDWF  x58,W
04B2A:  BCF    x57.0
04B2C:  BTFSC  FE8.0
04B2E:  BSF    x57.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
04B30:  MOVLW  00
04B32:  BTFSC  x57.0
04B34:  MOVLW  01
04B36:  MOVWF  x58
04B38:  MOVLW  00
04B3A:  MOVLB  A
04B3C:  BTFSC  xDC.1
04B3E:  MOVLW  01
04B40:  MOVLB  B
04B42:  MOVWF  x5A
04B44:  MOVLW  00
04B46:  MOVLB  A
04B48:  BTFSC  xDE.1
04B4A:  MOVLW  01
04B4C:  MOVLB  B
04B4E:  IORWF  x5A,W
04B50:  MOVWF  x59
04B52:  MOVLW  00
04B54:  MOVLB  A
04B56:  BTFSS  xDA.1
04B58:  MOVLW  01
04B5A:  MOVLB  B
04B5C:  ANDWF  x59,F
04B5E:  MOVLW  00
04B60:  MOVLB  A
04B62:  BTFSS  xD4.1
04B64:  MOVLW  01
04B66:  MOVLB  B
04B68:  MOVWF  x5C
04B6A:  MOVLW  00
04B6C:  MOVLB  A
04B6E:  BTFSC  xD6.1
04B70:  MOVLW  01
04B72:  MOVLB  B
04B74:  IORWF  x5C,W
04B76:  ANDWF  x59,W
04B78:  IORWF  x58,W
04B7A:  BCF    x57.0
04B7C:  BTFSC  FE8.0
04B7E:  BSF    x57.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
04B80:  MOVLW  00
04B82:  BTFSC  x57.0
04B84:  MOVLW  01
04B86:  MOVWF  x58
04B88:  MOVLW  00
04B8A:  MOVLB  A
04B8C:  BTFSC  xDC.2
04B8E:  MOVLW  01
04B90:  MOVLB  B
04B92:  MOVWF  x5A
04B94:  MOVLW  00
04B96:  MOVLB  A
04B98:  BTFSC  xDE.2
04B9A:  MOVLW  01
04B9C:  MOVLB  B
04B9E:  IORWF  x5A,W
04BA0:  MOVWF  x59
04BA2:  MOVLW  00
04BA4:  MOVLB  A
04BA6:  BTFSS  xDA.2
04BA8:  MOVLW  01
04BAA:  MOVLB  B
04BAC:  ANDWF  x59,F
04BAE:  MOVLW  00
04BB0:  MOVLB  A
04BB2:  BTFSS  xD4.2
04BB4:  MOVLW  01
04BB6:  MOVLB  B
04BB8:  MOVWF  x5C
04BBA:  MOVLW  00
04BBC:  MOVLB  A
04BBE:  BTFSC  xD6.2
04BC0:  MOVLW  01
04BC2:  MOVLB  B
04BC4:  IORWF  x5C,W
04BC6:  ANDWF  x59,W
04BC8:  IORWF  x58,W
04BCA:  BCF    x57.0
04BCC:  BTFSC  FE8.0
04BCE:  BSF    x57.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
04BD0:  MOVLW  00
04BD2:  BTFSC  x57.0
04BD4:  MOVLW  01
04BD6:  MOVWF  x58
04BD8:  MOVLW  00
04BDA:  MOVLB  A
04BDC:  BTFSC  xDC.3
04BDE:  MOVLW  01
04BE0:  MOVLB  B
04BE2:  MOVWF  x5A
04BE4:  MOVLW  00
04BE6:  MOVLB  A
04BE8:  BTFSC  xDE.3
04BEA:  MOVLW  01
04BEC:  MOVLB  B
04BEE:  IORWF  x5A,W
04BF0:  MOVWF  x59
04BF2:  MOVLW  00
04BF4:  MOVLB  A
04BF6:  BTFSS  xDA.3
04BF8:  MOVLW  01
04BFA:  MOVLB  B
04BFC:  ANDWF  x59,F
04BFE:  MOVLW  00
04C00:  MOVLB  A
04C02:  BTFSS  xD4.3
04C04:  MOVLW  01
04C06:  MOVLB  B
04C08:  MOVWF  x5C
04C0A:  MOVLW  00
04C0C:  MOVLB  A
04C0E:  BTFSC  xD6.3
04C10:  MOVLW  01
04C12:  MOVLB  B
04C14:  IORWF  x5C,W
04C16:  ANDWF  x59,W
04C18:  IORWF  x58,W
04C1A:  BCF    x57.0
04C1C:  BTFSC  FE8.0
04C1E:  BSF    x57.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
04C20:  MOVLW  00
04C22:  BTFSC  x57.0
04C24:  MOVLW  01
04C26:  MOVWF  x58
04C28:  MOVLW  00
04C2A:  MOVLB  A
04C2C:  BTFSC  xDC.4
04C2E:  MOVLW  01
04C30:  MOVLB  B
04C32:  MOVWF  x5A
04C34:  MOVLW  00
04C36:  MOVLB  A
04C38:  BTFSC  xDE.4
04C3A:  MOVLW  01
04C3C:  MOVLB  B
04C3E:  IORWF  x5A,W
04C40:  MOVWF  x59
04C42:  MOVLW  00
04C44:  MOVLB  A
04C46:  BTFSS  xDA.4
04C48:  MOVLW  01
04C4A:  MOVLB  B
04C4C:  ANDWF  x59,F
04C4E:  MOVLW  00
04C50:  MOVLB  A
04C52:  BTFSS  xD4.4
04C54:  MOVLW  01
04C56:  MOVLB  B
04C58:  MOVWF  x5C
04C5A:  MOVLW  00
04C5C:  MOVLB  A
04C5E:  BTFSC  xD6.4
04C60:  MOVLW  01
04C62:  MOVLB  B
04C64:  IORWF  x5C,W
04C66:  ANDWF  x59,W
04C68:  IORWF  x58,W
04C6A:  BCF    x57.0
04C6C:  BTFSC  FE8.0
04C6E:  BSF    x57.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
04C70:  MOVLW  00
04C72:  BTFSC  x57.0
04C74:  MOVLW  01
04C76:  MOVWF  x58
04C78:  MOVLW  00
04C7A:  MOVLB  A
04C7C:  BTFSC  xDC.5
04C7E:  MOVLW  01
04C80:  MOVLB  B
04C82:  MOVWF  x5A
04C84:  MOVLW  00
04C86:  MOVLB  A
04C88:  BTFSC  xDE.5
04C8A:  MOVLW  01
04C8C:  MOVLB  B
04C8E:  IORWF  x5A,W
04C90:  MOVWF  x59
04C92:  MOVLW  00
04C94:  MOVLB  A
04C96:  BTFSS  xDA.5
04C98:  MOVLW  01
04C9A:  MOVLB  B
04C9C:  ANDWF  x59,F
04C9E:  MOVLW  00
04CA0:  MOVLB  A
04CA2:  BTFSS  xD4.5
04CA4:  MOVLW  01
04CA6:  MOVLB  B
04CA8:  MOVWF  x5C
04CAA:  MOVLW  00
04CAC:  MOVLB  A
04CAE:  BTFSC  xD6.5
04CB0:  MOVLW  01
04CB2:  MOVLB  B
04CB4:  IORWF  x5C,W
04CB6:  ANDWF  x59,W
04CB8:  IORWF  x58,W
04CBA:  BCF    x57.0
04CBC:  BTFSC  FE8.0
04CBE:  BSF    x57.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
04CC0:  MOVLW  00
04CC2:  BTFSC  x57.0
04CC4:  MOVLW  01
04CC6:  MOVWF  x58
04CC8:  MOVLW  00
04CCA:  MOVLB  A
04CCC:  BTFSC  xDC.6
04CCE:  MOVLW  01
04CD0:  MOVLB  B
04CD2:  MOVWF  x5A
04CD4:  MOVLW  00
04CD6:  MOVLB  A
04CD8:  BTFSC  xDE.6
04CDA:  MOVLW  01
04CDC:  MOVLB  B
04CDE:  IORWF  x5A,W
04CE0:  MOVWF  x59
04CE2:  MOVLW  00
04CE4:  MOVLB  A
04CE6:  BTFSS  xDA.6
04CE8:  MOVLW  01
04CEA:  MOVLB  B
04CEC:  ANDWF  x59,F
04CEE:  MOVLW  00
04CF0:  MOVLB  A
04CF2:  BTFSS  xD4.6
04CF4:  MOVLW  01
04CF6:  MOVLB  B
04CF8:  MOVWF  x5C
04CFA:  MOVLW  00
04CFC:  MOVLB  A
04CFE:  BTFSC  xD6.6
04D00:  MOVLW  01
04D02:  MOVLB  B
04D04:  IORWF  x5C,W
04D06:  ANDWF  x59,W
04D08:  IORWF  x58,W
04D0A:  BCF    x57.0
04D0C:  BTFSC  FE8.0
04D0E:  BSF    x57.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
04D10:  MOVLW  00
04D12:  BTFSC  x57.0
04D14:  MOVLW  01
04D16:  MOVWF  x58
04D18:  MOVLW  00
04D1A:  MOVLB  A
04D1C:  BTFSC  xDC.7
04D1E:  MOVLW  01
04D20:  MOVLB  B
04D22:  MOVWF  x5A
04D24:  MOVLW  00
04D26:  MOVLB  A
04D28:  BTFSC  xDE.7
04D2A:  MOVLW  01
04D2C:  MOVLB  B
04D2E:  IORWF  x5A,W
04D30:  MOVWF  x59
04D32:  MOVLW  00
04D34:  MOVLB  A
04D36:  BTFSS  xDA.7
04D38:  MOVLW  01
04D3A:  MOVLB  B
04D3C:  ANDWF  x59,F
04D3E:  MOVLW  00
04D40:  MOVLB  A
04D42:  BTFSS  xD4.7
04D44:  MOVLW  01
04D46:  MOVLB  B
04D48:  MOVWF  x5C
04D4A:  MOVLW  00
04D4C:  MOVLB  A
04D4E:  BTFSC  xD6.7
04D50:  MOVLW  01
04D52:  MOVLB  B
04D54:  IORWF  x5C,W
04D56:  ANDWF  x59,W
04D58:  IORWF  x58,W
04D5A:  BCF    x57.0
04D5C:  BTFSC  FE8.0
04D5E:  BSF    x57.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
04D60:  MOVLW  00
04D62:  BTFSC  x57.0
04D64:  MOVLW  01
04D66:  MOVWF  x58
04D68:  MOVLW  00
04D6A:  MOVLB  A
04D6C:  BTFSC  xDD.0
04D6E:  MOVLW  01
04D70:  MOVLB  B
04D72:  MOVWF  x5A
04D74:  MOVLW  00
04D76:  MOVLB  A
04D78:  BTFSC  xDF.0
04D7A:  MOVLW  01
04D7C:  MOVLB  B
04D7E:  IORWF  x5A,W
04D80:  MOVWF  x59
04D82:  MOVLW  00
04D84:  MOVLB  A
04D86:  BTFSS  xDB.0
04D88:  MOVLW  01
04D8A:  MOVLB  B
04D8C:  ANDWF  x59,F
04D8E:  MOVLW  00
04D90:  MOVLB  A
04D92:  BTFSS  xD5.0
04D94:  MOVLW  01
04D96:  MOVLB  B
04D98:  MOVWF  x5C
04D9A:  MOVLW  00
04D9C:  MOVLB  A
04D9E:  BTFSC  xD7.0
04DA0:  MOVLW  01
04DA2:  MOVLB  B
04DA4:  IORWF  x5C,W
04DA6:  ANDWF  x59,W
04DA8:  IORWF  x58,W
04DAA:  BCF    x57.0
04DAC:  BTFSC  FE8.0
04DAE:  BSF    x57.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
04DB0:  MOVLW  00
04DB2:  BTFSC  x57.0
04DB4:  MOVLW  01
04DB6:  MOVWF  x58
04DB8:  MOVLW  00
04DBA:  MOVLB  A
04DBC:  BTFSC  xDD.1
04DBE:  MOVLW  01
04DC0:  MOVLB  B
04DC2:  MOVWF  x5A
04DC4:  MOVLW  00
04DC6:  MOVLB  A
04DC8:  BTFSC  xDF.1
04DCA:  MOVLW  01
04DCC:  MOVLB  B
04DCE:  IORWF  x5A,W
04DD0:  MOVWF  x59
04DD2:  MOVLW  00
04DD4:  MOVLB  A
04DD6:  BTFSS  xDB.1
04DD8:  MOVLW  01
04DDA:  MOVLB  B
04DDC:  ANDWF  x59,F
04DDE:  MOVLW  00
04DE0:  MOVLB  A
04DE2:  BTFSS  xD5.1
04DE4:  MOVLW  01
04DE6:  MOVLB  B
04DE8:  MOVWF  x5C
04DEA:  MOVLW  00
04DEC:  MOVLB  A
04DEE:  BTFSC  xD7.1
04DF0:  MOVLW  01
04DF2:  MOVLB  B
04DF4:  IORWF  x5C,W
04DF6:  ANDWF  x59,W
04DF8:  IORWF  x58,W
04DFA:  BCF    x57.0
04DFC:  BTFSC  FE8.0
04DFE:  BSF    x57.0
.................... 
....................    }
....................    return(check);
04E00:  MOVLW  00
04E02:  BTFSC  x57.0
04E04:  MOVLW  01
04E06:  MOVWF  01
04E08:  MOVLB  0
04E0A:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void main()
*
070CA:  CLRF   FF8
070CC:  BCF    FD0.7
070CE:  BSF    07.7
070D0:  MOVLW  70
070D2:  MOVWF  FD3
070D4:  BCF    F9B.6
070D6:  BCF    F9B.7
070D8:  BSF    FB8.3
070DA:  MOVLW  A0
070DC:  MOVWF  FAF
070DE:  MOVLW  01
070E0:  MOVWF  FB0
070E2:  MOVLW  A6
070E4:  MOVWF  FAC
070E6:  MOVLW  90
070E8:  MOVWF  FAB
070EA:  BCF    F93.0
070EC:  BSF    F8A.0
070EE:  CLRF   19
070F0:  BCF    1A.0
070F2:  MOVLW  19
070F4:  MOVWF  1B
070F6:  BCF    1A.1
070F8:  MOVLW  64
070FA:  MOVWF  1C
070FC:  CLRF   1D
070FE:  BCF    1A.2
07100:  BCF    1A.3
07102:  BCF    1A.4
07104:  CLRF   2E
07106:  BCF    1A.5
07108:  CLRF   2F
0710A:  BCF    1A.6
0710C:  BCF    1A.7
0710E:  BCF    30.0
07110:  BCF    30.1
07112:  BCF    30.2
07114:  BCF    30.3
07116:  CLRF   31
07118:  BCF    30.4
0711A:  MOVLW  11
0711C:  MOVWF  x63
0711E:  MOVLW  12
07120:  MOVWF  x64
07122:  MOVLW  13
07124:  MOVWF  x65
07126:  MOVLW  14
07128:  MOVWF  x66
0712A:  MOVLW  16
0712C:  MOVWF  x67
0712E:  MOVLW  17
07130:  MOVWF  x68
07132:  MOVLW  19
07134:  MOVWF  x69
07136:  MOVLW  20
07138:  MOVWF  x6A
0713A:  BCF    30.5
0713C:  CLRF   x6E
0713E:  CLRF   x6D
07140:  MOVLW  01
07142:  MOVLB  5
07144:  MOVWF  x72
07146:  MOVLW  F4
07148:  MOVWF  x71
0714A:  CLRF   x74
0714C:  CLRF   x73
0714E:  CLRF   x76
07150:  CLRF   x75
07152:  CLRF   x77
07154:  MOVLB  9
07156:  CLRF   x7B
07158:  CLRF   x7C
0715A:  MOVLB  B
0715C:  CLRF   x49
0715E:  CLRF   x48
07160:  MOVLB  F
07162:  CLRF   x38
07164:  CLRF   x39
07166:  CLRF   x3A
07168:  CLRF   F77
0716A:  CLRF   F78
0716C:  CLRF   F79
0716E:  MOVLB  B
07170:  CLRF   x47
07172:  CLRF   x4A
.................... {
....................    
....................    
....................    delay_ms(50);
07174:  MOVLW  32
07176:  MOVWF  x57
07178:  MOVLB  0
0717A:  CALL   07FA
....................    output_bit(Pled,0);   //power on watchdog signal
0717E:  BCF    F8A.5
07180:  BCF    F93.5
.................... 
....................    //jj
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD);
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0);
....................    
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
07182:  MOVLW  80
07184:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
07186:  MOVLW  78
07188:  IORLW  06
0718A:  MOVWF  FBA
0718C:  MOVLW  C4
0718E:  MOVWF  FBB
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);    //104ms
07190:  MOVLW  37
07192:  MOVWF  FCD
07194:  CLRF   FCC
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................   // enable_interrupts(INT_TIMER1);
....................    enable_interrupts(INT_TIMER2);
07196:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
07198:  BSF    F9D.5
.................... 
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1
0719A:  BCF    FC6.5
0719C:  BCF    F94.5
0719E:  BSF    F94.4
071A0:  BCF    F94.3
071A2:  MOVLW  20
071A4:  MOVWF  FC6
071A6:  MOVLW  40
071A8:  MOVWF  FC7
....................  
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
071AA:  GOTO   085C
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
071AE:  MOVLB  B
071B0:  CLRF   x4E
071B2:  SETF   x4F
071B4:  MOVLB  0
071B6:  CALL   08F2
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
071BA:  MOVLB  B
071BC:  CLRF   x4E
071BE:  SETF   x4F
071C0:  MOVLB  0
071C2:  CALL   0904
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
071C6:  MOVLW  02
071C8:  MOVLB  B
071CA:  MOVWF  x4E
071CC:  SETF   x4F
071CE:  MOVLB  0
071D0:  CALL   08F2
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
071D4:  MOVLW  02
071D6:  MOVLB  B
071D8:  MOVWF  x4E
071DA:  SETF   x4F
071DC:  MOVLB  0
071DE:  CALL   0904
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
071E2:  MOVLB  B
071E4:  CLRF   x50
071E6:  MOVLW  06
071E8:  MOVWF  x51
071EA:  SETF   x52
071EC:  MOVLB  0
071EE:  CALL   082A
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
071F2:  MOVLB  B
071F4:  CLRF   x50
071F6:  MOVLW  16
071F8:  MOVWF  x51
071FA:  SETF   x52
071FC:  MOVLB  0
071FE:  CALL   082A
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
07202:  MOVLW  02
07204:  MOVLB  B
07206:  MOVWF  x50
07208:  MOVLW  06
0720A:  MOVWF  x51
0720C:  SETF   x52
0720E:  MOVLB  0
07210:  CALL   082A
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
07214:  MOVLW  02
07216:  MOVLB  B
07218:  MOVWF  x50
0721A:  MOVLW  16
0721C:  MOVWF  x51
0721E:  SETF   x52
07220:  MOVLB  0
07222:  CALL   082A
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
07226:  MOVLW  04
07228:  MOVLB  B
0722A:  MOVWF  x4E
0722C:  CLRF   x4F
0722E:  MOVLB  0
07230:  CALL   08F2
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
07234:  MOVLW  04
07236:  MOVLB  B
07238:  MOVWF  x4E
0723A:  CLRF   x4F
0723C:  MOVLB  0
0723E:  CALL   0904
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
07242:  MOVLW  06
07244:  MOVLB  B
07246:  MOVWF  x4E
07248:  CLRF   x4F
0724A:  MOVLB  0
0724C:  CALL   08F2
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
07250:  MOVLW  06
07252:  MOVLB  B
07254:  MOVWF  x4E
07256:  CLRF   x4F
07258:  MOVLB  0
0725A:  CALL   0904
....................    
....................    
....................    FlashingFlag = 1;
0725E:  BSF    1A.1
....................    sequence = end_sq;
07260:  MOVFF  63,6B
....................    Address = 1;
07264:  MOVLW  01
07266:  MOVWF  x6C
.................... 
....................    Output.B1 = 1;
07268:  MOVLB  A
0726A:  BSF    xCE.0
....................    Output.B2 = 1;
0726C:  BSF    xCE.1
....................    Output.B3 = 1;
0726E:  BSF    xCE.2
....................    Output.B4 = 1;
07270:  BSF    xCE.3
....................    Output.B5 = 1;
07272:  BSF    xCE.4
....................    Output.B6 = 1;
07274:  BSF    xCE.5
....................    Output.B7 = 1;
07276:  BSF    xCE.6
....................    Output.B8 = 1;
07278:  BSF    xCE.7
....................    Output.B9 = 1;
0727A:  BSF    xCF.0
....................    Output.B10 = 1;
0727C:  BSF    xCF.1
.................... 
....................    ////////////////////
....................    In.B1 = 0;
0727E:  BCF    xDC.0
....................    In.B2 = 0;
07280:  BCF    xDC.1
....................    In.B3 = 0;
07282:  BCF    xDC.2
....................    In.B4 = 0;
07284:  BCF    xDC.3
....................    In.B5 = 0;
07286:  BCF    xDC.4
....................    In.B6 = 0;
07288:  BCF    xDC.5
....................    In.B7 = 0;
0728A:  BCF    xDC.6
....................    In.B8 = 0;
0728C:  BCF    xDC.7
....................    In.B9 = 0;
0728E:  BCF    xDD.0
....................    In.B10 = 0;
07290:  BCF    xDD.1
.................... 
....................    ////////////////////////
....................    Ack.B1 = 0;
07292:  BCF    xDA.0
....................    Ack.B2 = 0;
07294:  BCF    xDA.1
....................    Ack.B3 = 0;
07296:  BCF    xDA.2
....................    Ack.B4 = 0;
07298:  BCF    xDA.3
....................    Ack.B5 = 0;
0729A:  BCF    xDA.4
....................    Ack.B6 = 0;
0729C:  BCF    xDA.5
....................    Ack.B7 = 0;
0729E:  BCF    xDA.6
....................    Ack.B8 = 0;
072A0:  BCF    xDA.7
....................    Ack.B9 = 0;
072A2:  BCF    xDB.0
....................    Ack.B10 = 0;
072A4:  BCF    xDB.1
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
072A6:  MOVFF  FF2,B4E
072AA:  BCF    FF2.7
072AC:  CLRF   FAA
072AE:  CLRF   FA9
072B0:  BCF    FA6.6
072B2:  BCF    FA6.7
072B4:  BSF    FA6.0
072B6:  MOVF   FA8,W
072B8:  MOVLB  B
072BA:  BTFSC  x4E.7
072BC:  BSF    FF2.7
072BE:  SUBLW  0F
072C0:  BNZ   72CC
....................    {
....................       Read_Config();
072C2:  MOVLB  0
072C4:  CALL   0918
....................    }
072C8:  BRA    7504
072CA:  MOVLB  B
....................    else
....................    {
....................       FlashingRateTime = 25;
072CC:  MOVLW  19
072CE:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
072D0:  MOVLW  F0
072D2:  MOVWF  5E
....................       Address = 0x01;
072D4:  MOVLW  01
072D6:  MOVLB  0
072D8:  MOVWF  x6C
.................... 
....................       AutoAckTime = 5;
072DA:  MOVLW  05
072DC:  MOVWF  5F
....................       FlashingRate = 25;
072DE:  MOVLW  19
072E0:  MOVWF  x60
....................       NoOfPoint = 10;
072E2:  MOVLW  0A
072E4:  MOVWF  x61
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
072E6:  MOVLB  B
072E8:  CLRF   x4B
072EA:  MOVF   x4B,W
072EC:  MOVLB  0
072EE:  SUBWF  x61,W
072F0:  BNC   7310
....................       {
....................          FaultDelayTime[i] = 0;
072F2:  BCF    FD8.0
072F4:  MOVLB  B
072F6:  RLCF   x4B,W
072F8:  CLRF   03
072FA:  ADDLW  1A
072FC:  MOVWF  FE9
072FE:  MOVLW  0B
07300:  ADDWFC 03,W
07302:  MOVWF  FEA
07304:  CLRF   FEC
07306:  MOVF   FED,F
07308:  CLRF   FEF
0730A:  INCF   x4B,F
0730C:  BRA    72EA
0730E:  MOVLB  0
....................       }
.................... 
....................       InputType.B1 = 1;
07310:  MOVLB  A
07312:  BSF    xD0.0
....................       InputType.B2 = 1;
07314:  BSF    xD0.1
....................       InputType.B3 = 1;
07316:  BSF    xD0.2
....................       InputType.B4 = 1;
07318:  BSF    xD0.3
....................       InputType.B5 = 1;
0731A:  BSF    xD0.4
....................       InputType.B6 = 1;
0731C:  BSF    xD0.5
....................       InputType.B7 = 1;
0731E:  BSF    xD0.6
....................       InputType.B8 = 1;
07320:  BSF    xD0.7
....................       InputType.B9 = 1;
07322:  BSF    xD1.0
....................       InputType.B10 = 1;
07324:  BSF    xD1.1
.................... 
....................       FaultNCNO[1] = 1;
07326:  MOVLB  B
07328:  BSF    x44.1
....................       FaultNCNO[2] = 1;
0732A:  BSF    x44.2
....................       FaultNCNO[3] = 1;
0732C:  BSF    x44.3
....................       FaultNCNO[4] = 1;
0732E:  BSF    x44.4
....................       FaultNCNO[5] = 1;
07330:  BSF    x44.5
....................       FaultNCNO[6] = 1;
07332:  BSF    x44.6
....................       FaultNCNO[7] = 1;
07334:  BSF    x44.7
....................       FaultNCNO[8] = 1;
07336:  BSF    x45.0
....................       FaultNCNO[9] = 1;
07338:  BSF    x45.1
....................       FaultNCNO[10] = 1;
0733A:  BSF    x45.2
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0733C:  MOVLB  A
0733E:  BSF    xD2.0
....................       FaultType.B2= 1;
07340:  BSF    xD2.1
....................       FaultType.B3 = 1;
07342:  BSF    xD2.2
....................       FaultType.B4 = 1;
07344:  BSF    xD2.3
....................       FaultType.B5 = 1;
07346:  BSF    xD2.4
....................       FaultType.B6 = 1;
07348:  BSF    xD2.5
....................       FaultType.B7 = 1;
0734A:  BSF    xD2.6
....................       FaultType.B8 = 1;
0734C:  BSF    xD2.7
....................       FaultType.B9 = 1;
0734E:  BSF    xD3.0
....................       FaultType.B10 = 1;
07350:  BSF    xD3.1
.................... 
....................       ////////////////////////////
....................       OutputType.B1 = 1;
07352:  BSF    xD4.0
....................       OutputType.B2 = 1;
07354:  BSF    xD4.1
....................       OutputType.B3 = 1;
07356:  BSF    xD4.2
....................       OutputType.B4 = 1;
07358:  BSF    xD4.3
....................       OutputType.B5 = 1;
0735A:  BSF    xD4.4
....................       OutputType.B6 = 1;
0735C:  BSF    xD4.5
....................       OutputType.B7 = 1;
0735E:  BSF    xD4.6
....................       OutputType.B8 = 1;
07360:  BSF    xD4.7
....................       OutputType.B9 = 1;
07362:  BSF    xD5.0
....................       OutputType.B10 = 1;
07364:  BSF    xD5.1
.................... 
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
07366:  BSF    xD6.0
....................       OutputBoth.B2 = 1;
07368:  BSF    xD6.1
....................       OutputBoth.B3 = 1;
0736A:  BSF    xD6.2
....................       OutputBoth.B4 = 1;
0736C:  BSF    xD6.3
....................       OutputBoth.B5 = 1;
0736E:  BSF    xD6.4
....................       OutputBoth.B6 = 1;
07370:  BSF    xD6.5
....................       OutputBoth.B7 = 1;
07372:  BSF    xD6.6
....................       OutputBoth.B8 = 1;
07374:  BSF    xD6.7
....................       OutputBoth.B9 = 1;
07376:  BSF    xD7.0
....................       OutputBoth.B10 = 1;
07378:  BSF    xD7.1
.................... 
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
0737A:  BSF    xD8.0
....................       AlarmIndicator.B2 = 1;
0737C:  BSF    xD8.1
....................       AlarmIndicator.B3 = 1;
0737E:  BSF    xD8.2
....................       AlarmIndicator.B4 = 1;
07380:  BSF    xD8.3
....................       AlarmIndicator.B5 = 1;
07382:  BSF    xD8.4
....................       AlarmIndicator.B6 = 1;
07384:  BSF    xD8.5
....................       AlarmIndicator.B7 = 1;
07386:  BSF    xD8.6
....................       AlarmIndicator.B8 = 1;
07388:  BSF    xD8.7
....................       AlarmIndicator.B9 = 1;
0738A:  BSF    xD9.0
....................       AlarmIndicator.B10 = 1;
0738C:  BSF    xD9.1
.................... 
....................       ///////////// JACK///////////////////
....................       EEpDat = read_eeprom(0x10);
0738E:  MOVFF  FF2,B4E
07392:  BCF    FF2.7
07394:  CLRF   FAA
07396:  MOVLW  10
07398:  MOVWF  FA9
0739A:  BCF    FA6.6
0739C:  BCF    FA6.7
0739E:  BSF    FA6.0
073A0:  MOVF   FA8,W
073A2:  MOVLB  B
073A4:  BTFSC  x4E.7
073A6:  BSF    FF2.7
073A8:  MOVWF  3A
....................       //Red1_8 = EEpDat;
....................       RED_Colour.B1 = EEpDat;
073AA:  MOVLB  A
073AC:  BCF    xE4.0
073AE:  BTFSC  3A.0
073B0:  BSF    xE4.0
....................       RED_Colour.B2 = EEpDat >> 1;
073B2:  BCF    FD8.0
073B4:  RRCF   3A,W
073B6:  BCF    xE4.1
073B8:  BTFSC  FE8.0
073BA:  BSF    xE4.1
....................       RED_Colour.B3 = EEpDat >> 2;
073BC:  RRCF   3A,W
073BE:  MOVWF  00
073C0:  RRCF   00,F
073C2:  MOVLW  3F
073C4:  ANDWF  00,F
073C6:  BCF    xE4.2
073C8:  BTFSC  00.0
073CA:  BSF    xE4.2
....................       RED_Colour.B4 = EEpDat >> 3;
073CC:  RRCF   3A,W
073CE:  MOVWF  00
073D0:  RRCF   00,F
073D2:  RRCF   00,F
073D4:  MOVLW  1F
073D6:  ANDWF  00,F
073D8:  BCF    xE4.3
073DA:  BTFSC  00.0
073DC:  BSF    xE4.3
....................       RED_Colour.B5 = EEpDat >> 4;
073DE:  SWAPF  3A,W
073E0:  MOVWF  00
073E2:  MOVLW  0F
073E4:  ANDWF  00,F
073E6:  BCF    xE4.4
073E8:  BTFSC  00.0
073EA:  BSF    xE4.4
....................       RED_Colour.B6 = EEpDat >> 5;
073EC:  SWAPF  3A,W
073EE:  MOVWF  00
073F0:  RRCF   00,F
073F2:  MOVLW  07
073F4:  ANDWF  00,F
073F6:  BCF    xE4.5
073F8:  BTFSC  00.0
073FA:  BSF    xE4.5
....................       RED_Colour.B7 = EEpDat >> 6;
073FC:  SWAPF  3A,W
073FE:  MOVWF  00
07400:  RRCF   00,F
07402:  RRCF   00,F
07404:  MOVLW  03
07406:  ANDWF  00,F
07408:  BCF    xE4.6
0740A:  BTFSC  00.0
0740C:  BSF    xE4.6
....................       RED_Colour.B8 = EEpDat >> 7;
0740E:  CLRF   00
07410:  BTFSC  3A.7
07412:  BSF    00.0
07414:  BCF    xE4.7
07416:  BTFSC  00.0
07418:  BSF    xE4.7
....................       
....................       EEpDat = read_eeprom(0x11);
0741A:  MOVFF  FF2,B4E
0741E:  BCF    FF2.7
07420:  CLRF   FAA
07422:  MOVLW  11
07424:  MOVWF  FA9
07426:  BCF    FA6.6
07428:  BCF    FA6.7
0742A:  BSF    FA6.0
0742C:  MOVF   FA8,W
0742E:  MOVLB  B
07430:  BTFSC  x4E.7
07432:  BSF    FF2.7
07434:  MOVWF  3A
....................       //Green9_10 = EEpDat;
....................       RED_Colour.B9 = EEpDat;
07436:  MOVLB  A
07438:  BCF    xE5.0
0743A:  BTFSC  3A.0
0743C:  BSF    xE5.0
....................       RED_Colour.B10 = EEpDat >> 1;
0743E:  BCF    FD8.0
07440:  RRCF   3A,W
07442:  BCF    xE5.1
07444:  BTFSC  FE8.0
07446:  BSF    xE5.1
....................           
....................       EEpDat = read_eeprom(0x14);
07448:  MOVFF  FF2,B4E
0744C:  BCF    FF2.7
0744E:  CLRF   FAA
07450:  MOVLW  14
07452:  MOVWF  FA9
07454:  BCF    FA6.6
07456:  BCF    FA6.7
07458:  BSF    FA6.0
0745A:  MOVF   FA8,W
0745C:  MOVLB  B
0745E:  BTFSC  x4E.7
07460:  BSF    FF2.7
07462:  MOVWF  3A
....................       //Green1_8 = EEpDat;
....................       GREEN_Colour.B1 = EEpDat;
07464:  MOVLB  A
07466:  BCF    xE6.0
07468:  BTFSC  3A.0
0746A:  BSF    xE6.0
....................       GREEN_Colour.B2 = EEpDat >> 1;
0746C:  BCF    FD8.0
0746E:  RRCF   3A,W
07470:  BCF    xE6.1
07472:  BTFSC  FE8.0
07474:  BSF    xE6.1
....................       GREEN_Colour.B3 = EEpDat >> 2;
07476:  RRCF   3A,W
07478:  MOVWF  00
0747A:  RRCF   00,F
0747C:  MOVLW  3F
0747E:  ANDWF  00,F
07480:  BCF    xE6.2
07482:  BTFSC  00.0
07484:  BSF    xE6.2
....................       GREEN_Colour.B4 = EEpDat >> 3;
07486:  RRCF   3A,W
07488:  MOVWF  00
0748A:  RRCF   00,F
0748C:  RRCF   00,F
0748E:  MOVLW  1F
07490:  ANDWF  00,F
07492:  BCF    xE6.3
07494:  BTFSC  00.0
07496:  BSF    xE6.3
....................       GREEN_Colour.B5 = EEpDat >> 4;
07498:  SWAPF  3A,W
0749A:  MOVWF  00
0749C:  MOVLW  0F
0749E:  ANDWF  00,F
074A0:  BCF    xE6.4
074A2:  BTFSC  00.0
074A4:  BSF    xE6.4
....................       GREEN_Colour.B6 = EEpDat >> 5;
074A6:  SWAPF  3A,W
074A8:  MOVWF  00
074AA:  RRCF   00,F
074AC:  MOVLW  07
074AE:  ANDWF  00,F
074B0:  BCF    xE6.5
074B2:  BTFSC  00.0
074B4:  BSF    xE6.5
....................       GREEN_Colour.B7 = EEpDat >> 6;
074B6:  SWAPF  3A,W
074B8:  MOVWF  00
074BA:  RRCF   00,F
074BC:  RRCF   00,F
074BE:  MOVLW  03
074C0:  ANDWF  00,F
074C2:  BCF    xE6.6
074C4:  BTFSC  00.0
074C6:  BSF    xE6.6
....................       GREEN_Colour.B8 = EEpDat >> 7;
074C8:  CLRF   00
074CA:  BTFSC  3A.7
074CC:  BSF    00.0
074CE:  BCF    xE6.7
074D0:  BTFSC  00.0
074D2:  BSF    xE6.7
....................       
....................       EEpDat = read_eeprom(0x15);
074D4:  MOVFF  FF2,B4E
074D8:  BCF    FF2.7
074DA:  CLRF   FAA
074DC:  MOVLW  15
074DE:  MOVWF  FA9
074E0:  BCF    FA6.6
074E2:  BCF    FA6.7
074E4:  BSF    FA6.0
074E6:  MOVF   FA8,W
074E8:  MOVLB  B
074EA:  BTFSC  x4E.7
074EC:  BSF    FF2.7
074EE:  MOVWF  3A
....................       //Green9_10 = EEpDat;
....................       GREEN_Colour.B9 = EEpDat;
074F0:  MOVLB  A
074F2:  BCF    xE7.0
074F4:  BTFSC  3A.0
074F6:  BSF    xE7.0
....................       GREEN_Colour.B10 = EEpDat >> 1;
074F8:  BCF    FD8.0
074FA:  RRCF   3A,W
074FC:  BCF    xE7.1
074FE:  BTFSC  FE8.0
07500:  BSF    xE7.1
07502:  MOVLB  0
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................   
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
07504:  MOVLW  00
07506:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
07508:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
0750A:  MOVLW  C0
0750C:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
0750E:  BSF    FD1.0
....................    Read_input(); restart_wdt();
07510:  CALL   18D6
07514:  CLRWDT
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
07516:  BCF    F89.4
07518:  BCF    F92.4
....................    output_bit(Pbell,0);     //Clear Bell
0751A:  BCF    F89.3
0751C:  BCF    F92.3
....................    output_bit(P485ctrl,0);
0751E:  BCF    F8A.3
07520:  BCF    F93.3
....................    output_bit(PIN_B4,1); //jj
07522:  BSF    F8A.4
07524:  BCF    F93.4
....................    Send_Ouput();
07526:  CALL   216C
....................    
....................    delay_ms(500);
0752A:  MOVLW  02
0752C:  MOVLB  B
0752E:  MOVWF  x4E
07530:  MOVLW  FA
07532:  MOVWF  x57
07534:  MOVLB  0
07536:  CALL   07FA
0753A:  MOVLB  B
0753C:  DECFSZ x4E,F
0753E:  BRA    7530
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=10;i++)
07540:  MOVLW  01
07542:  MOVWF  x4C
07544:  MOVF   x4C,W
07546:  SUBLW  0A
07548:  BTFSS  FD8.0
0754A:  BRA    7678
....................    {
....................       FaultAgo[i] = 0;
0754C:  MOVFF  B4C,B52
07550:  CLRF   x53
07552:  MOVLW  0A
07554:  MOVWF  x55
07556:  MOVLW  EA
07558:  MOVWF  x54
0755A:  MOVLB  0
0755C:  CALL   1838
....................       FaultNow[i] = 0;
07560:  MOVFF  B4C,B52
07564:  MOVLB  B
07566:  CLRF   x53
07568:  MOVLW  0A
0756A:  MOVWF  x55
0756C:  MOVLW  ED
0756E:  MOVWF  x54
07570:  MOVLB  0
07572:  CALL   1838
....................       ReleaseTime[i] = 0;
07576:  BCF    FD8.0
07578:  MOVLB  B
0757A:  RLCF   x4C,W
0757C:  CLRF   03
0757E:  ADDLW  F0
07580:  MOVWF  FE9
07582:  MOVLW  0A
07584:  ADDWFC 03,W
07586:  MOVWF  FEA
07588:  CLRF   FEC
0758A:  MOVF   FED,F
0758C:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
0758E:  MOVFF  B4C,B52
07592:  MOVLW  0B
07594:  MOVWF  x54
07596:  MOVLW  44
07598:  MOVWF  x53
0759A:  MOVLB  0
0759C:  CALL   17E0
075A0:  MOVF   01,W
075A2:  ANDLW  01
075A4:  SUBLW  01
075A6:  BNZ   7610
....................       {
....................          switch(i)
075A8:  MOVLW  01
075AA:  MOVLB  B
075AC:  SUBWF  x4C,W
075AE:  ADDLW  F6
075B0:  BC    760C
075B2:  ADDLW  0A
075B4:  MOVLB  0
075B6:  GOTO   7882
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
075BA:  MOVLB  A
075BC:  BSF    xCC.0
....................             break;
075BE:  MOVLB  B
075C0:  BRA    760C
....................             case 2:
....................                Inputt.B2 = 1; 
075C2:  MOVLB  A
075C4:  BSF    xCC.1
....................             break;
075C6:  MOVLB  B
075C8:  BRA    760C
....................             case 3:
....................                Inputt.B3 = 1; 
075CA:  MOVLB  A
075CC:  BSF    xCC.2
....................             break;
075CE:  MOVLB  B
075D0:  BRA    760C
....................             case 4:
....................                Inputt.B4 = 1; 
075D2:  MOVLB  A
075D4:  BSF    xCC.3
....................             break;
075D6:  MOVLB  B
075D8:  BRA    760C
....................             case 5:
....................                Inputt.B5 = 1; 
075DA:  MOVLB  A
075DC:  BSF    xCC.4
....................             break;
075DE:  MOVLB  B
075E0:  BRA    760C
....................             case 6:
....................                Inputt.B6 = 1; 
075E2:  MOVLB  A
075E4:  BSF    xCC.5
....................             break;
075E6:  MOVLB  B
075E8:  BRA    760C
....................             case 7:
....................                Inputt.B7 = 1; 
075EA:  MOVLB  A
075EC:  BSF    xCC.6
....................              break;
075EE:  MOVLB  B
075F0:  BRA    760C
....................              case 8:
....................                Inputt.B8 = 1; 
075F2:  MOVLB  A
075F4:  BSF    xCC.7
....................             break;
075F6:  MOVLB  B
075F8:  BRA    760C
....................             case 9:
....................                Inputt.B9 = 1; 
075FA:  MOVLB  A
075FC:  BSF    xCD.0
....................             break;
075FE:  MOVLB  B
07600:  BRA    760C
....................             case 10:
....................                Inputt.B10 = 1; 
07602:  MOVLB  A
07604:  BSF    xCD.1
....................             break;
07606:  MOVLB  B
07608:  BRA    760C
0760A:  MOVLB  B
....................           
....................          }                 
....................       }
0760C:  BRA    7674
0760E:  MOVLB  0
....................       else
....................       {
....................          switch(i)
07610:  MOVLW  01
07612:  MOVLB  B
07614:  SUBWF  x4C,W
07616:  ADDLW  F6
07618:  BC    7674
0761A:  ADDLW  0A
0761C:  MOVLB  0
0761E:  GOTO   78B0
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
07622:  MOVLB  A
07624:  BCF    xCC.0
....................             break;
07626:  MOVLB  B
07628:  BRA    7674
....................             case 2:
....................                Inputt.B2 = 0; 
0762A:  MOVLB  A
0762C:  BCF    xCC.1
....................             break;
0762E:  MOVLB  B
07630:  BRA    7674
....................             case 3:
....................                Inputt.B3 = 0; 
07632:  MOVLB  A
07634:  BCF    xCC.2
....................             break;
07636:  MOVLB  B
07638:  BRA    7674
....................             case 4:
....................                Inputt.B4 = 0; 
0763A:  MOVLB  A
0763C:  BCF    xCC.3
....................             break;
0763E:  MOVLB  B
07640:  BRA    7674
....................             case 5:
....................                Inputt.B5 = 0; 
07642:  MOVLB  A
07644:  BCF    xCC.4
....................             break;
07646:  MOVLB  B
07648:  BRA    7674
....................             case 6:
....................                Inputt.B6 = 0; 
0764A:  MOVLB  A
0764C:  BCF    xCC.5
....................             break;
0764E:  MOVLB  B
07650:  BRA    7674
....................             case 7:
....................                Inputt.B7 = 0; 
07652:  MOVLB  A
07654:  BCF    xCC.6
....................              break;
07656:  MOVLB  B
07658:  BRA    7674
....................              case 8:
....................                Inputt.B8 = 0; 
0765A:  MOVLB  A
0765C:  BCF    xCC.7
....................             break;
0765E:  MOVLB  B
07660:  BRA    7674
....................             case 9:
....................                Inputt.B9 = 0; 
07662:  MOVLB  A
07664:  BCF    xCD.0
....................             break;
07666:  MOVLB  B
07668:  BRA    7674
....................             case 10:
....................                Inputt.B10 = 0; 
0766A:  MOVLB  A
0766C:  BCF    xCD.1
....................             break;
0766E:  MOVLB  B
07670:  BRA    7674
07672:  MOVLB  B
....................        
....................          }                 
....................       } 
07674:  INCF   x4C,F
07676:  BRA    7544
....................    }
....................    
....................       //GSM SIM900 Init
....................    delay_ms(1000);
07678:  MOVLW  04
0767A:  MOVWF  x4E
0767C:  MOVLW  FA
0767E:  MOVWF  x57
07680:  MOVLB  0
07682:  CALL   07FA
07686:  MOVLB  B
07688:  DECFSZ x4E,F
0768A:  BRA    767C
....................    fprintf(CH2,"AT+CMGF=1"); 
0768C:  MOVLW  F0
0768E:  MOVWF  FF6
07690:  MOVLW  07
07692:  MOVWF  FF7
07694:  MOVLB  0
07696:  CALL   23E8
....................    putc('\n',CH2);
0769A:  MOVLW  0A
0769C:  MOVLB  B
0769E:  MOVWF  x58
076A0:  MOVLB  0
076A2:  CALL   23A2
....................    delay_ms(50);
076A6:  MOVLW  32
076A8:  MOVLB  B
076AA:  MOVWF  x57
076AC:  MOVLB  0
076AE:  CALL   07FA
....................    
....................    SendSMS.B1 =0;
076B2:  MOVLB  A
076B4:  BCF    xE8.0
....................    SendSMS.B2 =0;
076B6:  BCF    xE8.1
....................    SendSMS.B3 =0;
076B8:  BCF    xE8.2
....................    SendSMS.B4 =0;
076BA:  BCF    xE8.3
....................    SendSMS.B5 =0;
076BC:  BCF    xE8.4
....................    SendSMS.B6 =0;
076BE:  BCF    xE8.5
....................    SendSMS.B7 =0;
076C0:  BCF    xE8.6
....................    SendSMS.B8 =0;
076C2:  BCF    xE8.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
076C4:  MOVLB  B
076C6:  CLRF   x4D
076C8:  MOVF   x4D,W
076CA:  SUBLW  09
076CC:  BNC   7700
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
076CE:  CLRF   03
076D0:  MOVF   x4D,W
076D2:  ADDLW  7D
076D4:  MOVWF  FE9
076D6:  MOVLW  09
076D8:  ADDWFC 03,W
076DA:  MOVWF  FEA
076DC:  MOVLW  32
076DE:  ADDWF  x4D,W
076E0:  MOVWF  x50
076E2:  MOVFF  FF2,B51
076E6:  BCF    FF2.7
076E8:  CLRF   FAA
076EA:  MOVFF  B50,FA9
076EE:  BCF    FA6.6
076F0:  BCF    FA6.7
076F2:  BSF    FA6.0
076F4:  MOVF   FA8,W
076F6:  BTFSC  x51.7
076F8:  BSF    FF2.7
076FA:  MOVWF  FEF
076FC:  INCF   x4D,F
076FE:  BRA    76C8
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
07700:  CLRF   03
07702:  MOVF   x4D,W
07704:  ADDLW  7D
07706:  MOVWF  FE9
07708:  MOVLW  09
0770A:  ADDWFC 03,W
0770C:  MOVWF  FEA
0770E:  CLRF   FEF
.................... 
....................    delay_ms(500);
07710:  MOVLW  02
07712:  MOVWF  x4E
07714:  MOVLW  FA
07716:  MOVWF  x57
07718:  MOVLB  0
0771A:  CALL   07FA
0771E:  MOVLB  B
07720:  DECFSZ x4E,F
07722:  BRA    7714
....................    
....................    while(TRUE)
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
07724:  CLRF   x4E
07726:  SETF   x4F
07728:  MOVLB  0
0772A:  CALL   2140
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
0772E:  MOVLB  B
07730:  CLRF   x4E
07732:  SETF   x4F
07734:  MOVLB  0
07736:  CALL   2156
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
0773A:  MOVLW  02
0773C:  MOVLB  B
0773E:  MOVWF  x4E
07740:  SETF   x4F
07742:  MOVLB  0
07744:  CALL   2140
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
07748:  MOVLW  02
0774A:  MOVLB  B
0774C:  MOVWF  x4E
0774E:  SETF   x4F
07750:  MOVLB  0
07752:  CALL   2156
....................       restart_wdt();
07756:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
07758:  BTFSS  30.5
0775A:  BRA    7762
....................       {
....................          Modbus_Function();
0775C:  GOTO   2670
....................          recieve_completed = 0 ;
07760:  BCF    30.5
....................       }
....................       
....................    
....................       check_ack();
07762:  GOTO   4478
....................       check_reset();
07766:  GOTO   4568
....................       check_test();
0776A:  GOTO   6F2C
....................       
....................       restart_wdt();
0776E:  CLRWDT
....................       
....................       
....................       Read_input(); restart_wdt();//Must be first
07770:  CALL   18D6
07774:  CLRWDT
....................       Anal_Function(); restart_wdt();
07776:  CALL   4E0C
0777A:  CLRWDT
....................       Send_Ouput(); restart_wdt();
0777C:  CALL   216C
07780:  CLRWDT
....................       Driver595(); restart_wdt();
07782:  BRA    6FB8
07784:  CLRWDT
....................       
....................       
....................       output_toggle(PIN_A0);
07786:  BCF    F92.0
07788:  BTG    F89.0
....................       
....................       if(RefreshConfigData)
0778A:  BTFSS  30.4
0778C:  BRA    787C
....................       {
....................          RefreshConfigData =0;
0778E:  BCF    30.4
....................          Read_Config();
07790:  CALL   0918
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
07794:  MOVLB  B
07796:  CLRF   x4E
07798:  SETF   x4F
0779A:  MOVLB  0
0779C:  CALL   08F2
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
077A0:  MOVLB  B
077A2:  CLRF   x4E
077A4:  SETF   x4F
077A6:  MOVLB  0
077A8:  CALL   0904
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
077AC:  MOVLW  02
077AE:  MOVLB  B
077B0:  MOVWF  x4E
077B2:  SETF   x4F
077B4:  MOVLB  0
077B6:  CALL   08F2
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
077BA:  MOVLW  02
077BC:  MOVLB  B
077BE:  MOVWF  x4E
077C0:  SETF   x4F
077C2:  MOVLB  0
077C4:  CALL   0904
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
077C8:  MOVLB  B
077CA:  CLRF   x50
077CC:  MOVLW  06
077CE:  MOVWF  x51
077D0:  SETF   x52
077D2:  MOVLB  0
077D4:  CALL   082A
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
077D8:  MOVLB  B
077DA:  CLRF   x50
077DC:  MOVLW  16
077DE:  MOVWF  x51
077E0:  SETF   x52
077E2:  MOVLB  0
077E4:  CALL   082A
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
077E8:  MOVLW  02
077EA:  MOVLB  B
077EC:  MOVWF  x50
077EE:  MOVLW  06
077F0:  MOVWF  x51
077F2:  SETF   x52
077F4:  MOVLB  0
077F6:  CALL   082A
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
077FA:  MOVLW  02
077FC:  MOVLB  B
077FE:  MOVWF  x50
07800:  MOVLW  16
07802:  MOVWF  x51
07804:  SETF   x52
07806:  MOVLB  0
07808:  CALL   082A
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0780C:  MOVLW  04
0780E:  MOVLB  B
07810:  MOVWF  x4E
07812:  CLRF   x4F
07814:  MOVLB  0
07816:  CALL   08F2
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0781A:  MOVLW  04
0781C:  MOVLB  B
0781E:  MOVWF  x4E
07820:  CLRF   x4F
07822:  MOVLB  0
07824:  CALL   0904
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
07828:  MOVLW  06
0782A:  MOVLB  B
0782C:  MOVWF  x4E
0782E:  CLRF   x4F
07830:  MOVLB  0
07832:  CALL   08F2
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
07836:  MOVLW  06
07838:  MOVLB  B
0783A:  MOVWF  x4E
0783C:  CLRF   x4F
0783E:  MOVLB  0
07840:  CALL   0904
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
07844:  MOVLW  08
07846:  MOVLB  B
07848:  MOVWF  x4E
0784A:  CLRF   x4F
0784C:  MOVLB  0
0784E:  CALL   08F2
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
07852:  MOVLW  08
07854:  MOVLB  B
07856:  MOVWF  x4E
07858:  CLRF   x4F
0785A:  MOVLB  0
0785C:  CALL   0904
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
07860:  MOVLW  0A
07862:  MOVLB  B
07864:  MOVWF  x4E
07866:  CLRF   x4F
07868:  MOVLB  0
0786A:  CALL   08F2
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0786E:  MOVLW  0A
07870:  MOVLB  B
07872:  MOVWF  x4E
07874:  CLRF   x4F
07876:  MOVLB  0
07878:  CALL   0904
....................       }
0787C:  MOVLB  B
0787E:  BRA    7724
....................       
....................    }
....................    
.................... }
07880:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
