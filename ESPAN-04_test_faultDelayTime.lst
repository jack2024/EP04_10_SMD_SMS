CCS PCH C Compiler, Version 5.091, 5967               09-¡.Â.-21 16:58

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_10 - Delay - SP - SMD -SMS\ESPAN-04_test_faultDelayTime.lst

               ROM used:   30742 bytes (47%)
                           Largest free fragment is 34790
               RAM used:   2893 (74%) at main() level
                           2911 (75%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   7080
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.0
00056:  GOTO   0060
0005A:  BTFSC  F9E.0
0005C:  GOTO   0550
00060:  BTFSS  F9D.1
00062:  GOTO   006C
00066:  BTFSC  F9E.1
00068:  GOTO   0556
0006C:  BTFSS  F9D.5
0006E:  GOTO   0078
00072:  BTFSC  F9E.5
00074:  GOTO   0540
00078:  MOVFF  0E,00
0007C:  MOVFF  0F,01
00080:  MOVFF  10,02
00084:  MOVFF  11,03
00088:  MOVFF  0C,FE9
0008C:  MOVFF  07,FEA
00090:  BSF    07.7
00092:  MOVFF  08,FE1
00096:  MOVFF  09,FE2
0009A:  MOVFF  0A,FD9
0009E:  MOVFF  0B,FDA
000A2:  MOVFF  12,FF3
000A6:  MOVFF  13,FF4
000AA:  MOVFF  14,FFA
000AE:  MOVFF  15,FF5
000B2:  MOVFF  16,FF6
000B6:  MOVFF  17,FF7
000BA:  MOVF   04,W
000BC:  MOVFF  06,FE0
000C0:  MOVFF  05,FD8
000C4:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000C6:  CLRF   FF7
000C8:  ADDLW  D6
000CA:  MOVWF  FF6
000CC:  MOVLW  00
000CE:  ADDWFC FF7,F
000D0:  TBLRD*+
000D2:  MOVF   FF5,W
000D4:  RETURN 0
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 01,C0
000E0:  DATA 80,41
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 00,C1
000EC:  DATA 81,40
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 01,C0
000F4:  DATA 80,41
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 00,C1
00100:  DATA 81,40
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 01,C0
00110:  DATA 80,41
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 00,C1
00120:  DATA 81,40
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 01,C0
0012C:  DATA 80,41
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 00,C1
00134:  DATA 81,40
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 01,C0
00140:  DATA 80,41
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 00,C1
0014C:  DATA 81,40
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 01,C0
00154:  DATA 80,41
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 00,C1
00160:  DATA 81,40
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 01,C0
0016C:  DATA 80,41
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 00,C1
00174:  DATA 81,40
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 01,C0
00180:  DATA 80,41
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 00,C1
00190:  DATA 81,40
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 01,C0
001A0:  DATA 80,41
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 00,C1
001AC:  DATA 81,40
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 01,C0
001B4:  DATA 80,41
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 00,C1
001C0:  DATA 81,40
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  DATA 01,C0
001CC:  DATA 80,41
001CE:  DATA 01,C0
001D0:  DATA 80,41
001D2:  DATA 00,C1
001D4:  DATA 81,40
001D6:  CLRF   FF7
001D8:  ADDLW  E6
001DA:  MOVWF  FF6
001DC:  MOVLW  01
001DE:  ADDWFC FF7,F
001E0:  TBLRD*+
001E2:  MOVF   FF5,W
001E4:  RETURN 0
001E6:  DATA 00,C0
001E8:  DATA C1,01
001EA:  DATA C3,03
001EC:  DATA 02,C2
001EE:  DATA C6,06
001F0:  DATA 07,C7
001F2:  DATA 05,C5
001F4:  DATA C4,04
001F6:  DATA CC,0C
001F8:  DATA 0D,CD
001FA:  DATA 0F,CF
001FC:  DATA CE,0E
001FE:  DATA 0A,CA
00200:  DATA CB,0B
00202:  DATA C9,09
00204:  DATA 08,C8
00206:  DATA D8,18
00208:  DATA 19,D9
0020A:  DATA 1B,DB
0020C:  DATA DA,1A
0020E:  DATA 1E,DE
00210:  DATA DF,1F
00212:  DATA DD,1D
00214:  DATA 1C,DC
00216:  DATA 14,D4
00218:  DATA D5,15
0021A:  DATA D7,17
0021C:  DATA 16,D6
0021E:  DATA D2,12
00220:  DATA 13,D3
00222:  DATA 11,D1
00224:  DATA D0,10
00226:  DATA F0,30
00228:  DATA 31,F1
0022A:  DATA 33,F3
0022C:  DATA F2,32
0022E:  DATA 36,F6
00230:  DATA F7,37
00232:  DATA F5,35
00234:  DATA 34,F4
00236:  DATA 3C,FC
00238:  DATA FD,3D
0023A:  DATA FF,3F
0023C:  DATA 3E,FE
0023E:  DATA FA,3A
00240:  DATA 3B,FB
00242:  DATA 39,F9
00244:  DATA F8,38
00246:  DATA 28,E8
00248:  DATA E9,29
0024A:  DATA EB,2B
0024C:  DATA 2A,EA
0024E:  DATA EE,2E
00250:  DATA 2F,EF
00252:  DATA 2D,ED
00254:  DATA EC,2C
00256:  DATA E4,24
00258:  DATA 25,E5
0025A:  DATA 27,E7
0025C:  DATA E6,26
0025E:  DATA 22,E2
00260:  DATA E3,23
00262:  DATA E1,21
00264:  DATA 20,E0
00266:  DATA A0,60
00268:  DATA 61,A1
0026A:  DATA 63,A3
0026C:  DATA A2,62
0026E:  DATA 66,A6
00270:  DATA A7,67
00272:  DATA A5,65
00274:  DATA 64,A4
00276:  DATA 6C,AC
00278:  DATA AD,6D
0027A:  DATA AF,6F
0027C:  DATA 6E,AE
0027E:  DATA AA,6A
00280:  DATA 6B,AB
00282:  DATA 69,A9
00284:  DATA A8,68
00286:  DATA 78,B8
00288:  DATA B9,79
0028A:  DATA BB,7B
0028C:  DATA 7A,BA
0028E:  DATA BE,7E
00290:  DATA 7F,BF
00292:  DATA 7D,BD
00294:  DATA BC,7C
00296:  DATA B4,74
00298:  DATA 75,B5
0029A:  DATA 77,B7
0029C:  DATA B6,76
0029E:  DATA 72,B2
002A0:  DATA B3,73
002A2:  DATA B1,71
002A4:  DATA 70,B0
002A6:  DATA 50,90
002A8:  DATA 91,51
002AA:  DATA 93,53
002AC:  DATA 52,92
002AE:  DATA 96,56
002B0:  DATA 57,97
002B2:  DATA 55,95
002B4:  DATA 94,54
002B6:  DATA 9C,5C
002B8:  DATA 5D,9D
002BA:  DATA 5F,9F
002BC:  DATA 9E,5E
002BE:  DATA 5A,9A
002C0:  DATA 9B,5B
002C2:  DATA 99,59
002C4:  DATA 58,98
002C6:  DATA 88,48
002C8:  DATA 49,89
002CA:  DATA 4B,8B
002CC:  DATA 8A,4A
002CE:  DATA 4E,8E
002D0:  DATA 8F,4F
002D2:  DATA 8D,4D
002D4:  DATA 4C,8C
002D6:  DATA 44,84
002D8:  DATA 85,45
002DA:  DATA 87,47
002DC:  DATA 46,86
002DE:  DATA 82,42
002E0:  DATA 43,83
002E2:  DATA 41,81
002E4:  DATA 80,40
*
005E8:  DATA 41,54
005EA:  DATA 2B,43
005EC:  DATA 4D,47
005EE:  DATA 46,3D
005F0:  DATA 31,00
005F2:  DATA 41,54
005F4:  DATA 2B,43
005F6:  DATA 4D,47
005F8:  DATA 53,3D
005FA:  DATA 22,00
005FC:  DATA 41,54
005FE:  DATA 2B,43
00600:  DATA 4D,47
00602:  DATA 46,3D
00604:  DATA 31,00
00606:  DATA 41,54
00608:  DATA 2B,43
0060A:  DATA 4D,47
0060C:  DATA 53,3D
0060E:  DATA 22,00
00610:  DATA 41,54
00612:  DATA 2B,43
00614:  DATA 4D,47
00616:  DATA 46,3D
00618:  DATA 31,00
0061A:  DATA 41,54
0061C:  DATA 2B,43
0061E:  DATA 4D,47
00620:  DATA 53,3D
00622:  DATA 22,00
00624:  DATA 41,54
00626:  DATA 2B,43
00628:  DATA 4D,47
0062A:  DATA 46,3D
0062C:  DATA 31,00
0062E:  DATA 41,54
00630:  DATA 2B,43
00632:  DATA 4D,47
00634:  DATA 53,3D
00636:  DATA 22,00
00638:  DATA 41,54
0063A:  DATA 2B,43
0063C:  DATA 4D,47
0063E:  DATA 46,3D
00640:  DATA 31,00
00642:  DATA 41,54
00644:  DATA 2B,43
00646:  DATA 4D,47
00648:  DATA 53,3D
0064A:  DATA 22,00
0064C:  DATA 41,54
0064E:  DATA 2B,43
00650:  DATA 4D,47
00652:  DATA 46,3D
00654:  DATA 31,00
00656:  DATA 41,54
00658:  DATA 2B,43
0065A:  DATA 4D,47
0065C:  DATA 53,3D
0065E:  DATA 22,00
00660:  DATA 41,54
00662:  DATA 2B,43
00664:  DATA 4D,47
00666:  DATA 46,3D
00668:  DATA 31,00
0066A:  DATA 41,54
0066C:  DATA 2B,43
0066E:  DATA 4D,47
00670:  DATA 53,3D
00672:  DATA 22,00
00674:  DATA 41,54
00676:  DATA 2B,43
00678:  DATA 4D,47
0067A:  DATA 46,3D
0067C:  DATA 31,00
0067E:  DATA 41,54
00680:  DATA 2B,43
00682:  DATA 4D,47
00684:  DATA 53,3D
00686:  DATA 22,00
00688:  DATA 41,54
0068A:  DATA 2B,43
0068C:  DATA 4D,47
0068E:  DATA 46,3D
00690:  DATA 31,00
00692:  DATA 41,54
00694:  DATA 2B,43
00696:  DATA 4D,47
00698:  DATA 53,3D
0069A:  DATA 22,00
0069C:  DATA 41,54
0069E:  DATA 2B,43
006A0:  DATA 4D,47
006A2:  DATA 46,3D
006A4:  DATA 31,00
006A6:  DATA 41,54
006A8:  DATA 2B,43
006AA:  DATA 4D,47
006AC:  DATA 53,3D
006AE:  DATA 22,00
006B0:  DATA 41,54
006B2:  DATA 2B,43
006B4:  DATA 4D,47
006B6:  DATA 46,3D
006B8:  DATA 31,00
006BA:  DATA 41,54
006BC:  DATA 2B,43
006BE:  DATA 4D,47
006C0:  DATA 53,3D
006C2:  DATA 22,00
006C4:  DATA 41,54
006C6:  DATA 2B,43
006C8:  DATA 4D,47
006CA:  DATA 46,3D
006CC:  DATA 31,00
006CE:  DATA 41,54
006D0:  DATA 2B,43
006D2:  DATA 4D,47
006D4:  DATA 53,3D
006D6:  DATA 22,00
006D8:  DATA 41,54
006DA:  DATA 2B,43
006DC:  DATA 4D,47
006DE:  DATA 46,3D
006E0:  DATA 31,00
006E2:  DATA 41,54
006E4:  DATA 2B,43
006E6:  DATA 4D,47
006E8:  DATA 53,3D
006EA:  DATA 22,00
006EC:  DATA 41,54
006EE:  DATA 2B,43
006F0:  DATA 4D,47
006F2:  DATA 46,3D
006F4:  DATA 31,00
006F6:  DATA 41,54
006F8:  DATA 2B,43
006FA:  DATA 4D,47
006FC:  DATA 53,3D
006FE:  DATA 22,00
00700:  DATA 41,54
00702:  DATA 2B,43
00704:  DATA 4D,47
00706:  DATA 46,3D
00708:  DATA 31,00
0070A:  DATA 41,54
0070C:  DATA 2B,43
0070E:  DATA 4D,47
00710:  DATA 53,3D
00712:  DATA 22,00
00714:  DATA 41,54
00716:  DATA 2B,43
00718:  DATA 4D,47
0071A:  DATA 46,3D
0071C:  DATA 31,00
0071E:  DATA 41,54
00720:  DATA 2B,43
00722:  DATA 4D,47
00724:  DATA 53,3D
00726:  DATA 22,00
00728:  DATA 41,54
0072A:  DATA 2B,43
0072C:  DATA 4D,47
0072E:  DATA 46,3D
00730:  DATA 31,00
00732:  DATA 41,54
00734:  DATA 2B,43
00736:  DATA 4D,47
00738:  DATA 53,3D
0073A:  DATA 22,00
0073C:  DATA 41,54
0073E:  DATA 2B,43
00740:  DATA 4D,47
00742:  DATA 46,3D
00744:  DATA 31,00
00746:  DATA 41,54
00748:  DATA 2B,43
0074A:  DATA 4D,47
0074C:  DATA 53,3D
0074E:  DATA 22,00
00750:  DATA 41,54
00752:  DATA 2B,43
00754:  DATA 4D,47
00756:  DATA 46,3D
00758:  DATA 31,00
0075A:  DATA 41,54
0075C:  DATA 2B,43
0075E:  DATA 4D,47
00760:  DATA 53,3D
00762:  DATA 22,00
00764:  DATA 41,54
00766:  DATA 2B,43
00768:  DATA 4D,47
0076A:  DATA 46,3D
0076C:  DATA 31,00
0076E:  DATA 41,54
00770:  DATA 2B,43
00772:  DATA 4D,47
00774:  DATA 53,3D
00776:  DATA 22,00
00778:  DATA 41,54
0077A:  DATA 2B,43
0077C:  DATA 4D,47
0077E:  DATA 53,3D
00780:  DATA 22,00
00782:  DATA 41,54
00784:  DATA 2B,43
00786:  DATA 4D,47
00788:  DATA 53,3D
0078A:  DATA 22,00
0078C:  DATA 41,54
0078E:  DATA 2B,43
00790:  DATA 4D,47
00792:  DATA 53,3D
00794:  DATA 22,00
00796:  DATA 41,54
00798:  DATA 2B,43
0079A:  DATA 4D,47
0079C:  DATA 53,3D
0079E:  DATA 22,00
007A0:  DATA 41,54
007A2:  DATA 2B,43
007A4:  DATA 4D,47
007A6:  DATA 53,3D
007A8:  DATA 22,00
007AA:  DATA 41,54
007AC:  DATA 2B,43
007AE:  DATA 4D,47
007B0:  DATA 53,3D
007B2:  DATA 22,00
007B4:  DATA 41,54
007B6:  DATA 2B,43
007B8:  DATA 4D,47
007BA:  DATA 53,3D
007BC:  DATA 22,00
007BE:  DATA 41,54
007C0:  DATA 2B,43
007C2:  DATA 4D,47
007C4:  DATA 53,3D
007C6:  DATA 22,00
007C8:  DATA 41,54
007CA:  DATA 2B,43
007CC:  DATA 4D,47
007CE:  DATA 53,3D
007D0:  DATA 22,00
007D2:  DATA 41,54
007D4:  DATA 2B,43
007D6:  DATA 4D,47
007D8:  DATA 53,3D
007DA:  DATA 22,00
*
017C2:  MOVLB  B
017C4:  MOVF   x4F,W
017C6:  ANDLW  07
017C8:  MOVWF  00
017CA:  RRCF   x4F,W
017CC:  MOVWF  01
017CE:  RRCF   01,F
017D0:  RRCF   01,F
017D2:  MOVLW  1F
017D4:  ANDWF  01,F
017D6:  MOVF   01,W
017D8:  ADDWF  x50,W
017DA:  MOVWF  FE9
017DC:  MOVLW  00
017DE:  ADDWFC x51,W
017E0:  MOVWF  FEA
017E2:  MOVFF  FEF,01
017E6:  INCF   00,F
017E8:  BRA    17EC
017EA:  RRCF   01,F
017EC:  DECFSZ 00,F
017EE:  BRA    17EA
017F0:  MOVLW  01
017F2:  ANDWF  01,F
017F4:  MOVLB  0
017F6:  RETURN 0
017F8:  MOVLB  B
017FA:  MOVF   x50,W
017FC:  MULWF  x52
017FE:  MOVFF  FF3,01
01802:  MOVFF  FF4,00
01806:  MULWF  x53
01808:  MOVF   FF3,W
0180A:  ADDWF  00,F
0180C:  MOVF   x51,W
0180E:  MULWF  x52
01810:  MOVF   FF3,W
01812:  ADDWFC 00,W
01814:  MOVWF  02
01816:  MOVLB  0
01818:  RETURN 0
0181A:  MOVLB  B
0181C:  MOVF   x4F,W
0181E:  ANDLW  07
01820:  MOVWF  00
01822:  RRCF   x4F,W
01824:  MOVWF  01
01826:  RRCF   01,F
01828:  RRCF   01,F
0182A:  MOVLW  1F
0182C:  ANDWF  01,F
0182E:  MOVF   01,W
01830:  ADDWF  x51,W
01832:  MOVWF  FE9
01834:  MOVLW  00
01836:  ADDWFC x52,W
01838:  MOVWF  FEA
0183A:  CLRF   01
0183C:  INCF   01,F
0183E:  INCF   00,F
01840:  BRA    1844
01842:  RLCF   01,F
01844:  DECFSZ 00,F
01846:  BRA    1842
01848:  MOVF   x50,F
0184A:  BZ    1852
0184C:  MOVF   01,W
0184E:  IORWF  FEF,F
01850:  BRA    1858
01852:  COMF   01,F
01854:  MOVF   01,W
01856:  ANDWF  FEF,F
01858:  MOVLB  0
0185A:  RETURN 0
*
0206A:  ADDWF  FE8,W
0206C:  CLRF   FF7
0206E:  RLCF   FF7,F
02070:  ADDLW  85
02072:  MOVWF  FF6
02074:  MOVLW  20
02076:  ADDWFC FF7,F
02078:  TBLRD*-
0207A:  MOVF   FF5,W
0207C:  MOVWF  FFA
0207E:  TBLRD*
02080:  MOVF   FF5,W
02082:  MOVWF  FF9
02084:  DATA 6E,1B
02086:  DATA 76,1B
02088:  DATA 7E,1B
0208A:  DATA 86,1B
0208C:  DATA 8E,1B
0208E:  DATA 96,1B
02090:  DATA 9E,1B
02092:  DATA A6,1B
02094:  DATA AE,1B
02096:  DATA B6,1B
02098:  ADDWF  FE8,W
0209A:  CLRF   FF7
0209C:  RLCF   FF7,F
0209E:  ADDLW  B3
020A0:  MOVWF  FF6
020A2:  MOVLW  20
020A4:  ADDWFC FF7,F
020A6:  TBLRD*-
020A8:  MOVF   FF5,W
020AA:  MOVWF  FFA
020AC:  TBLRD*
020AE:  MOVF   FF5,W
020B0:  MOVWF  FF9
020B2:  DATA 9E,1C
020B4:  DATA A6,1C
020B6:  DATA AE,1C
020B8:  DATA B6,1C
020BA:  DATA BE,1C
020BC:  DATA C6,1C
020BE:  DATA CE,1C
020C0:  DATA D6,1C
020C2:  DATA DE,1C
020C4:  DATA E6,1C
020C6:  ADDWF  FE8,W
020C8:  CLRF   FF7
020CA:  RLCF   FF7,F
020CC:  ADDLW  E1
020CE:  MOVWF  FF6
020D0:  MOVLW  20
020D2:  ADDWFC FF7,F
020D4:  TBLRD*-
020D6:  MOVF   FF5,W
020D8:  MOVWF  FFA
020DA:  TBLRD*
020DC:  MOVF   FF5,W
020DE:  MOVWF  FF9
020E0:  DATA 02,1E
020E2:  DATA 0A,1E
020E4:  DATA 12,1E
020E6:  DATA 1A,1E
020E8:  DATA 22,1E
020EA:  DATA 2A,1E
020EC:  DATA 32,1E
020EE:  DATA 3A,1E
020F0:  DATA 42,1E
020F2:  DATA 4A,1E
020F4:  ADDWF  FE8,W
020F6:  CLRF   FF7
020F8:  RLCF   FF7,F
020FA:  ADDLW  0F
020FC:  MOVWF  FF6
020FE:  MOVLW  21
02100:  ADDWFC FF7,F
02102:  TBLRD*-
02104:  MOVF   FF5,W
02106:  MOVWF  FFA
02108:  TBLRD*
0210A:  MOVF   FF5,W
0210C:  MOVWF  FF9
0210E:  DATA 30,1F
02110:  DATA 38,1F
02112:  DATA 40,1F
02114:  DATA 48,1F
02116:  DATA 50,1F
02118:  DATA 58,1F
0211A:  DATA 60,1F
0211C:  DATA 68,1F
0211E:  DATA 70,1F
02120:  DATA 78,1F
*
04748:  TBLRD*+
0474A:  MOVF   FF5,F
0474C:  BZ    4766
0474E:  MOVFF  FF6,B53
04752:  MOVFF  FF7,B54
04756:  MOVFF  FF5,B55
0475A:  RCALL  4702
0475C:  MOVFF  B53,FF6
04760:  MOVFF  B54,FF7
04764:  BRA    4748
04766:  RETURN 0
04768:  MOVF   FEF,F
0476A:  BZ    478A
0476C:  MOVFF  FEA,B54
04770:  MOVFF  FE9,B53
04774:  MOVFF  FEF,B55
04778:  RCALL  4702
0477A:  MOVFF  B54,FEA
0477E:  MOVFF  B53,FE9
04782:  INCF   FE9,F
04784:  BTFSC  FD8.2
04786:  INCF   FEA,F
04788:  BRA    4768
0478A:  RETURN 0
*
077BE:  ADDWF  FE8,W
077C0:  CLRF   FF7
077C2:  RLCF   FF7,F
077C4:  ADDLW  D9
077C6:  MOVWF  FF6
077C8:  MOVLW  77
077CA:  ADDWFC FF7,F
077CC:  TBLRD*-
077CE:  MOVF   FF5,W
077D0:  MOVWF  FFA
077D2:  TBLRD*
077D4:  MOVF   FF5,W
077D6:  MOVWF  FF9
077D8:  DATA A4,75
077DA:  DATA AC,75
077DC:  DATA B4,75
077DE:  DATA BC,75
077E0:  DATA C4,75
077E2:  DATA CC,75
077E4:  DATA D4,75
077E6:  DATA DC,75
077E8:  DATA E4,75
077EA:  DATA EC,75
077EC:  ADDWF  FE8,W
077EE:  CLRF   FF7
077F0:  RLCF   FF7,F
077F2:  ADDLW  07
077F4:  MOVWF  FF6
077F6:  MOVLW  78
077F8:  ADDWFC FF7,F
077FA:  TBLRD*-
077FC:  MOVF   FF5,W
077FE:  MOVWF  FFA
07800:  TBLRD*
07802:  MOVF   FF5,W
07804:  MOVWF  FF9
07806:  DATA 0C,76
07808:  DATA 14,76
0780A:  DATA 1C,76
0780C:  DATA 24,76
0780E:  DATA 2C,76
07810:  DATA 34,76
07812:  DATA 3C,76
07814:  DATA 44,76
07816:  DATA 4C,76
07818:  DATA 54,76
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
007DC:  MOVLW  0B
007DE:  MOVWF  FEA
007E0:  MOVLW  54
007E2:  MOVWF  FE9
007E4:  MOVF   FEF,W
007E6:  BZ    080A
007E8:  MOVLW  05
007EA:  MOVWF  01
007EC:  MOVLW  BF
007EE:  MOVWF  00
007F0:  CLRWDT
007F2:  DECFSZ 00,F
007F4:  BRA    07F0
007F6:  DECFSZ 01,F
007F8:  BRA    07EC
007FA:  MOVLW  2E
007FC:  MOVWF  00
007FE:  DECFSZ 00,F
00800:  BRA    07FE
00802:  NOP   
00804:  CLRWDT
00806:  DECFSZ FEF,F
00808:  BRA    07E8
0080A:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
0083E:  BCF    F92.5
00840:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
00842:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
00844:  MOVLB  B
00846:  CLRF   x4D
00848:  MOVLW  0A
0084A:  MOVWF  x4E
0084C:  MOVLW  AA
0084E:  MOVWF  x4F
00850:  MOVLB  0
00852:  RCALL  080C
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
00854:  MOVLW  02
00856:  MOVLB  B
00858:  MOVWF  x4D
0085A:  MOVLW  0A
0085C:  MOVWF  x4E
0085E:  MOVLW  AA
00860:  MOVWF  x4F
00862:  MOVLB  0
00864:  RCALL  080C
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
00866:  MOVLW  04
00868:  MOVLB  B
0086A:  MOVWF  x4D
0086C:  MOVLW  0A
0086E:  MOVWF  x4E
00870:  MOVLW  AA
00872:  MOVWF  x4F
00874:  MOVLB  0
00876:  RCALL  080C
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
00878:  MOVLW  06
0087A:  MOVLB  B
0087C:  MOVWF  x4D
0087E:  MOVLW  0A
00880:  MOVWF  x4E
00882:  MOVLW  AA
00884:  MOVWF  x4F
00886:  MOVLB  0
00888:  RCALL  080C
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
0088A:  MOVLW  08
0088C:  MOVLB  B
0088E:  MOVWF  x4D
00890:  MOVLW  0A
00892:  MOVWF  x4E
00894:  MOVLW  AA
00896:  MOVWF  x4F
00898:  MOVLB  0
0089A:  RCALL  080C
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
0089C:  MOVLW  0A
0089E:  MOVLB  B
008A0:  MOVWF  x4D
008A2:  MOVWF  x4E
008A4:  MOVLW  AA
008A6:  MOVWF  x4F
008A8:  MOVLB  0
008AA:  RCALL  080C
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
008AC:  MOVLW  0C
008AE:  MOVLB  B
008B0:  MOVWF  x4D
008B2:  MOVLW  0A
008B4:  MOVWF  x4E
008B6:  MOVLW  AA
008B8:  MOVWF  x4F
008BA:  MOVLB  0
008BC:  RCALL  080C
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
008BE:  MOVLW  0E
008C0:  MOVLB  B
008C2:  MOVWF  x4D
008C4:  MOVLW  0A
008C6:  MOVWF  x4E
008C8:  MOVLW  AA
008CA:  MOVWF  x4F
008CC:  MOVLB  0
008CE:  RCALL  080C
....................    #endif
008D0:  GOTO   7160 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
0080C:  BCF    F92.5
0080E:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
00810:  MOVLB  B
00812:  MOVF   x4D,W
00814:  IORLW  40
00816:  MOVWF  x50
00818:  MOVF   FC9,W
0081A:  MOVFF  B50,FC9
0081E:  RRCF   FC7,W
00820:  BNC   081E
....................    #endif
....................    
....................    spi_write(reg);
00822:  MOVF   FC9,W
00824:  MOVFF  B4E,FC9
00828:  RRCF   FC7,W
0082A:  BNC   0828
....................    spi_write(data);
0082C:  MOVF   FC9,W
0082E:  MOVFF  B4F,FC9
00832:  RRCF   FC7,W
00834:  BNC   0832
....................    
....................    output_high(IO_CS_PIN);
00836:  BCF    F92.5
00838:  BSF    F89.5
0083A:  MOVLB  0
0083C:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
01752:  BCF    F92.5
01754:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
01756:  MOVLB  B
01758:  MOVF   x4E,W
0175A:  IORLW  41
0175C:  MOVWF  x51
0175E:  MOVF   FC9,W
01760:  MOVFF  B51,FC9
01764:  RRCF   FC7,W
01766:  BNC   1764
....................    #endif
....................    
....................    spi_write(reg);
01768:  MOVF   FC9,W
0176A:  MOVFF  B4F,FC9
0176E:  RRCF   FC7,W
01770:  BNC   176E
....................    retVal = spi_read(0);
01772:  MOVF   FC9,W
01774:  CLRF   FC9
01776:  RRCF   FC7,W
01778:  BNC   1776
0177A:  MOVFF  FC9,B50
....................    
....................    output_high(IO_CS_PIN);
0177E:  BCF    F92.5
01780:  BSF    F89.5
....................    
....................    return retVal;
01782:  MOVFF  B50,01
01786:  MOVLB  0
01788:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
02122:  MOVFF  B4B,B4D
02126:  MOVLW  0A
02128:  MOVLB  B
0212A:  MOVWF  x4E
0212C:  MOVFF  B4C,B4F
02130:  MOVLB  0
02132:  CALL   080C
....................    #endif
02136:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02138:  MOVFF  B4B,B4D
0213C:  MOVLW  1A
0213E:  MOVLB  B
02140:  MOVWF  x4E
02142:  MOVFF  B4C,B4F
02146:  MOVLB  0
02148:  CALL   080C
....................    #endif
0214C:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
0178A:  MOVFF  B4C,B4E
0178E:  MOVLW  09
01790:  MOVLB  B
01792:  MOVWF  x4F
01794:  MOVLB  0
01796:  RCALL  1752
01798:  MOVFF  01,B4D
....................    #endif
....................    
....................    return retVal;
0179C:  MOVLB  B
0179E:  MOVFF  B4D,01
017A2:  MOVLB  0
017A4:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
017A6:  MOVFF  B4C,B4E
017AA:  MOVLW  19
017AC:  MOVLB  B
017AE:  MOVWF  x4F
017B0:  MOVLB  0
017B2:  RCALL  1752
017B4:  MOVFF  01,B4D
....................    #endif
....................    
....................    return retVal;
017B8:  MOVLB  B
017BA:  MOVFF  B4D,01
017BE:  MOVLB  0
017C0:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
008D4:  MOVFF  B4B,B4D
008D8:  MOVLB  B
008DA:  CLRF   x4E
008DC:  MOVFF  B4C,B4F
008E0:  MOVLB  0
008E2:  RCALL  080C
....................    #endif
008E4:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
008E6:  MOVFF  B4B,B4D
008EA:  MOVLW  10
008EC:  MOVLB  B
008EE:  MOVWF  x4E
008F0:  MOVFF  B4C,B4F
008F4:  MOVLB  0
008F6:  RCALL  080C
....................    #endif
008F8:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
023DA:  BTFSS  F9E.4
023DC:  BRA    23DA
023DE:  MOVWF  FAD
023E0:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
04702:  BCF    F93.0
04704:  BCF    F8A.0
04706:  MOVLW  08
04708:  MOVWF  01
0470A:  BRA    470C
0470C:  NOP   
0470E:  BSF    01.7
04710:  BRA    4732
04712:  BCF    01.7
04714:  MOVLB  B
04716:  RRCF   x55,F
04718:  MOVLB  0
0471A:  BTFSC  FD8.0
0471C:  BSF    F8A.0
0471E:  BTFSS  FD8.0
04720:  BCF    F8A.0
04722:  BSF    01.6
04724:  BRA    4732
04726:  BCF    01.6
04728:  DECFSZ 01,F
0472A:  BRA    4714
0472C:  BRA    472E
0472E:  NOP   
04730:  BSF    F8A.0
04732:  MOVLW  84
04734:  MOVWF  FE9
04736:  DECFSZ FE9,F
04738:  BRA    4736
0473A:  BRA    473C
0473C:  NOP   
0473E:  BTFSC  01.7
04740:  BRA    4712
04742:  BTFSC  01.6
04744:  BRA    4726
04746:  RETURN 0
.................... 
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... int8 Green1_8 ;
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[256];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... unsigned char index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    //int1 B11,B12,B13,B14,B15,B16,B17,B18,B19,B20;
....................    //int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
.................... struct Bit64 Inputt,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void StoreReleaseFault()
*
0185C:  MOVLB  B
0185E:  CLRF   x4C
.................... {
....................    Signed int8 i=0;
....................    for(i=0;i<=10;i++)
01860:  CLRF   x4C
01862:  BTFSC  x4C.7
01864:  BRA    186C
01866:  MOVF   x4C,W
01868:  SUBLW  0A
0186A:  BNC   18B2
....................    {
....................       FaultAgo[i] = FaultNow[i];
0186C:  CLRF   03
0186E:  MOVF   x4C,W
01870:  MOVWF  00
01872:  BTFSC  FE8.7
01874:  DECF   03,F
01876:  MOVWF  x4D
01878:  MOVFF  03,B4E
0187C:  CLRF   03
0187E:  MOVF   x4C,W
01880:  MOVWF  00
01882:  BTFSC  FE8.7
01884:  DECF   03,F
01886:  MOVWF  x4F
01888:  MOVLW  0A
0188A:  MOVWF  x51
0188C:  MOVLW  EC
0188E:  MOVWF  x50
01890:  MOVLB  0
01892:  RCALL  17C2
01894:  MOVFF  B4D,B4F
01898:  MOVLB  B
0189A:  CLRF   x50
0189C:  BTFSC  01.0
0189E:  INCF   x50,F
018A0:  MOVLW  0A
018A2:  MOVWF  x52
018A4:  MOVLW  E9
018A6:  MOVWF  x51
018A8:  MOVLB  0
018AA:  RCALL  181A
018AC:  MOVLB  B
018AE:  INCF   x4C,F
018B0:  BRA    1862
....................    }
018B2:  MOVLB  0
018B4:  GOTO   1FAA (RETURN)
.................... }
.................... 
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02384:  MOVLB  5
02386:  SETF   x6F
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
02388:  SETF   x6E
.................... 
....................    for(i = 0;i < usDataLen;i++)
0238A:  MOVLB  B
0238C:  CLRF   x59
0238E:  MOVF   x57,W
02390:  SUBWF  x59,W
02392:  BC    23D6
....................    {
....................       restart_wdt();
02394:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02396:  MOVF   x59,W
02398:  ADDWF  x55,W
0239A:  MOVWF  FE9
0239C:  MOVLW  00
0239E:  ADDWFC x56,W
023A0:  MOVWF  FEA
023A2:  MOVF   FEF,W
023A4:  MOVLB  5
023A6:  XORWF  x6F,W
023A8:  MOVLB  B
023AA:  MOVWF  x58
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
023AC:  CLRF   03
023AE:  MOVF   x58,W
023B0:  MOVLB  0
023B2:  CALL   00C6
023B6:  MOVWF  01
023B8:  MOVLB  5
023BA:  MOVF   x6E,W
023BC:  XORWF  01,W
023BE:  MOVWF  x6F
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
023C0:  CLRF   03
023C2:  MOVLB  B
023C4:  MOVF   x58,W
023C6:  MOVLB  0
023C8:  CALL   01D6
023CC:  MOVFF  FE8,56E
023D0:  MOVLB  B
023D2:  INCF   x59,F
023D4:  BRA    238E
....................    }
023D6:  MOVLB  0
023D8:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... void Driver595()
*
06F6E:  MOVLB  B
06F70:  CLRF   x4B
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
06F72:  CLRWDT
....................    
....................     data_out = (~Input19_20);
06F74:  MOVFF  4D,B4C
06F78:  COMF   x4C,F
....................     for(j=7;j>=0;j--)
06F7A:  MOVLW  07
06F7C:  MOVWF  x4B
06F7E:  BTFSC  x4B.7
06F80:  BRA    6FB2
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
06F82:  MOVFF  B4C,00
06F86:  MOVF   x4B,W
06F88:  MOVWF  01
06F8A:  BZ    6F94
06F8C:  BCF    FD8.0
06F8E:  RRCF   00,F
06F90:  DECFSZ 01,F
06F92:  BRA    6F8C
06F94:  BTFSC  00.0
06F96:  BRA    6F9C
06F98:  BCF    F8A.2
06F9A:  BRA    6F9E
06F9C:  BSF    F8A.2
06F9E:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
06FA0:  BCF    F93.1
06FA2:  BSF    F8A.1
....................      delay_us(1);
06FA4:  CLRWDT
06FA6:  BRA    6FA8
06FA8:  NOP   
....................      output_low(EXP_OUT_CLOCK);
06FAA:  BCF    F93.1
06FAC:  BCF    F8A.1
06FAE:  DECF   x4B,F
06FB0:  BRA    6F7E
....................     }
....................     
....................     data_out = (~Input11_18);
06FB2:  MOVFF  4C,B4C
06FB6:  COMF   x4C,F
....................     for(j=7;j>=0;j--)
06FB8:  MOVLW  07
06FBA:  MOVWF  x4B
06FBC:  BTFSC  x4B.7
06FBE:  BRA    6FF0
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
06FC0:  MOVFF  B4C,00
06FC4:  MOVF   x4B,W
06FC6:  MOVWF  01
06FC8:  BZ    6FD2
06FCA:  BCF    FD8.0
06FCC:  RRCF   00,F
06FCE:  DECFSZ 01,F
06FD0:  BRA    6FCA
06FD2:  BTFSC  00.0
06FD4:  BRA    6FDA
06FD6:  BCF    F8A.2
06FD8:  BRA    6FDC
06FDA:  BSF    F8A.2
06FDC:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
06FDE:  BCF    F93.1
06FE0:  BSF    F8A.1
....................      delay_us(1);
06FE2:  CLRWDT
06FE4:  BRA    6FE6
06FE6:  NOP   
....................      output_low(EXP_OUT_CLOCK);
06FE8:  BCF    F93.1
06FEA:  BCF    F8A.1
06FEC:  DECF   x4B,F
06FEE:  BRA    6FBC
....................     }
....................     
....................     data_out = (~Input9_10);
06FF0:  MOVFF  4B,B4C
06FF4:  COMF   x4C,F
....................     for(j=7;j>=0;j--)
06FF6:  MOVLW  07
06FF8:  MOVWF  x4B
06FFA:  BTFSC  x4B.7
06FFC:  BRA    702E
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
06FFE:  MOVFF  B4C,00
07002:  MOVF   x4B,W
07004:  MOVWF  01
07006:  BZ    7010
07008:  BCF    FD8.0
0700A:  RRCF   00,F
0700C:  DECFSZ 01,F
0700E:  BRA    7008
07010:  BTFSC  00.0
07012:  BRA    7018
07014:  BCF    F8A.2
07016:  BRA    701A
07018:  BSF    F8A.2
0701A:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
0701C:  BCF    F93.1
0701E:  BSF    F8A.1
....................      delay_us(1);
07020:  CLRWDT
07022:  BRA    7024
07024:  NOP   
....................      output_low(EXP_OUT_CLOCK);
07026:  BCF    F93.1
07028:  BCF    F8A.1
0702A:  DECF   x4B,F
0702C:  BRA    6FFA
....................     }
....................     
....................     data_out = (~Input1_8);
0702E:  MOVFF  4A,B4C
07032:  COMF   x4C,F
....................     for(j=7;j>=0;j--)
07034:  MOVLW  07
07036:  MOVWF  x4B
07038:  BTFSC  x4B.7
0703A:  BRA    706C
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
0703C:  MOVFF  B4C,00
07040:  MOVF   x4B,W
07042:  MOVWF  01
07044:  BZ    704E
07046:  BCF    FD8.0
07048:  RRCF   00,F
0704A:  DECFSZ 01,F
0704C:  BRA    7046
0704E:  BTFSC  00.0
07050:  BRA    7056
07052:  BCF    F8A.2
07054:  BRA    7058
07056:  BSF    F8A.2
07058:  BCF    F93.2
....................      output_high(EXP_OUT_CLOCK);
0705A:  BCF    F93.1
0705C:  BSF    F8A.1
....................      delay_us(1);
0705E:  CLRWDT
07060:  BRA    7062
07062:  NOP   
....................      output_low(EXP_OUT_CLOCK);
07064:  BCF    F93.1
07066:  BCF    F8A.1
07068:  DECF   x4B,F
0706A:  BRA    7038
....................     }
....................  // } 
....................    output_high(EXP_OUT_ENABLE);
0706C:  BCF    F93.0
0706E:  BSF    F8A.0
....................    delay_us(1);
07070:  CLRWDT
07072:  BRA    7074
07074:  NOP   
....................    output_low(EXP_OUT_ENABLE);
07076:  BCF    F93.0
07078:  BCF    F8A.0
0707A:  MOVLB  0
0707C:  GOTO   76C0 (RETURN)
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
023E2:  CLRF   1E
....................    Input9_16_Send = 0x00;
023E4:  CLRF   1F
....................    
....................    
....................    Ack1_8_Send = 0x00;
023E6:  CLRF   26
....................    Ack9_16_Send = 0x00;
023E8:  CLRF   27
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
023EA:  MOVLB  A
023EC:  BTFSC  xDB.0
023EE:  BRA    23F8
023F0:  BTFSC  xCD.0
023F2:  BRA    23F8
....................       AckSend.B1 = 1;
023F4:  BSF    xE1.0
023F6:  BRA    23FA
....................    else
....................       AckSend.B1 = 0;
023F8:  BCF    xE1.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
023FA:  BTFSC  xDB.1
023FC:  BRA    2406
023FE:  BTFSC  xCD.1
02400:  BRA    2406
....................       AckSend.B2 = 1;
02402:  BSF    xE1.1
02404:  BRA    2408
....................    else
....................       AckSend.B2 = 0;
02406:  BCF    xE1.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
02408:  BTFSC  xDB.2
0240A:  BRA    2414
0240C:  BTFSC  xCD.2
0240E:  BRA    2414
....................       AckSend.B3 = 1;
02410:  BSF    xE1.2
02412:  BRA    2416
....................    else
....................       AckSend.B3 = 0;
02414:  BCF    xE1.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
02416:  BTFSC  xDB.3
02418:  BRA    2422
0241A:  BTFSC  xCD.3
0241C:  BRA    2422
....................       AckSend.B4 = 1;
0241E:  BSF    xE1.3
02420:  BRA    2424
....................    else
....................       AckSend.B4 = 0;
02422:  BCF    xE1.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
02424:  BTFSC  xDB.4
02426:  BRA    2430
02428:  BTFSC  xCD.4
0242A:  BRA    2430
....................       AckSend.B5 = 1;
0242C:  BSF    xE1.4
0242E:  BRA    2432
....................    else
....................       AckSend.B5 = 0;
02430:  BCF    xE1.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
02432:  BTFSC  xDB.5
02434:  BRA    243E
02436:  BTFSC  xCD.5
02438:  BRA    243E
....................       AckSend.B6 = 1;
0243A:  BSF    xE1.5
0243C:  BRA    2440
....................    else
....................       AckSend.B6 = 0;
0243E:  BCF    xE1.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
02440:  BTFSC  xDB.6
02442:  BRA    244C
02444:  BTFSC  xCD.6
02446:  BRA    244C
....................       AckSend.B7 = 1;
02448:  BSF    xE1.6
0244A:  BRA    244E
....................    else
....................       AckSend.B7 = 0;
0244C:  BCF    xE1.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
0244E:  BTFSC  xDB.7
02450:  BRA    245A
02452:  BTFSC  xCD.7
02454:  BRA    245A
....................       AckSend.B8 = 1;
02456:  BSF    xE1.7
02458:  BRA    245C
....................    else
....................       AckSend.B8 = 0;
0245A:  BCF    xE1.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
0245C:  BTFSC  xDC.0
0245E:  BRA    2468
02460:  BTFSC  xCE.0
02462:  BRA    2468
....................       AckSend.B9 = 1;
02464:  BSF    xE2.0
02466:  BRA    246A
....................    else
....................       AckSend.B9 = 0;
02468:  BCF    xE2.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
0246A:  BTFSC  xDC.1
0246C:  BRA    2476
0246E:  BTFSC  xCE.1
02470:  BRA    2476
....................       AckSend.B10 = 1;
02472:  BSF    xE2.1
02474:  BRA    2478
....................    else
....................       AckSend.B10 = 0;
02476:  BCF    xE2.1
.................... 
.................... 
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
02478:  MOVLW  00
0247A:  BTFSC  xE1.7
0247C:  MOVLW  01
0247E:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02480:  BCF    FD8.0
02482:  RLCF   26,W
02484:  MOVLB  B
02486:  MOVWF  x55
02488:  MOVLW  00
0248A:  MOVLB  A
0248C:  BTFSC  xE1.6
0248E:  MOVLW  01
02490:  MOVLB  B
02492:  IORWF  x55,W
02494:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
02496:  BCF    FD8.0
02498:  RLCF   26,W
0249A:  MOVWF  x55
0249C:  MOVLW  00
0249E:  MOVLB  A
024A0:  BTFSC  xE1.5
024A2:  MOVLW  01
024A4:  MOVLB  B
024A6:  IORWF  x55,W
024A8:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
024AA:  BCF    FD8.0
024AC:  RLCF   26,W
024AE:  MOVWF  x55
024B0:  MOVLW  00
024B2:  MOVLB  A
024B4:  BTFSC  xE1.4
024B6:  MOVLW  01
024B8:  MOVLB  B
024BA:  IORWF  x55,W
024BC:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
024BE:  BCF    FD8.0
024C0:  RLCF   26,W
024C2:  MOVWF  x55
024C4:  MOVLW  00
024C6:  MOVLB  A
024C8:  BTFSC  xE1.3
024CA:  MOVLW  01
024CC:  MOVLB  B
024CE:  IORWF  x55,W
024D0:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
024D2:  BCF    FD8.0
024D4:  RLCF   26,W
024D6:  MOVWF  x55
024D8:  MOVLW  00
024DA:  MOVLB  A
024DC:  BTFSC  xE1.2
024DE:  MOVLW  01
024E0:  MOVLB  B
024E2:  IORWF  x55,W
024E4:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
024E6:  BCF    FD8.0
024E8:  RLCF   26,W
024EA:  MOVWF  x55
024EC:  MOVLW  00
024EE:  MOVLB  A
024F0:  BTFSC  xE1.1
024F2:  MOVLW  01
024F4:  MOVLB  B
024F6:  IORWF  x55,W
024F8:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
024FA:  BCF    FD8.0
024FC:  RLCF   26,W
024FE:  MOVWF  x55
02500:  MOVLW  00
02502:  MOVLB  A
02504:  BTFSC  xE1.0
02506:  MOVLW  01
02508:  MOVLB  B
0250A:  IORWF  x55,W
0250C:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B10;
0250E:  MOVLW  00
02510:  MOVLB  A
02512:  BTFSC  xE2.1
02514:  MOVLW  01
02516:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
02518:  BCF    FD8.0
0251A:  RLCF   27,W
0251C:  MOVLB  B
0251E:  MOVWF  x55
02520:  MOVLW  00
02522:  MOVLB  A
02524:  BTFSC  xE2.0
02526:  MOVLW  01
02528:  MOVLB  B
0252A:  IORWF  x55,W
0252C:  MOVWF  27
....................   
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
0252E:  MOVLW  00
02530:  MOVLB  A
02532:  BTFSC  xDB.7
02534:  MOVLW  01
02536:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
02538:  BCF    FD8.0
0253A:  RLCF   1E,W
0253C:  MOVLB  B
0253E:  MOVWF  x55
02540:  MOVLW  00
02542:  MOVLB  A
02544:  BTFSC  xDB.6
02546:  MOVLW  01
02548:  MOVLB  B
0254A:  IORWF  x55,W
0254C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
0254E:  BCF    FD8.0
02550:  RLCF   1E,W
02552:  MOVWF  x55
02554:  MOVLW  00
02556:  MOVLB  A
02558:  BTFSC  xDB.5
0255A:  MOVLW  01
0255C:  MOVLB  B
0255E:  IORWF  x55,W
02560:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
02562:  BCF    FD8.0
02564:  RLCF   1E,W
02566:  MOVWF  x55
02568:  MOVLW  00
0256A:  MOVLB  A
0256C:  BTFSC  xDB.4
0256E:  MOVLW  01
02570:  MOVLB  B
02572:  IORWF  x55,W
02574:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
02576:  BCF    FD8.0
02578:  RLCF   1E,W
0257A:  MOVWF  x55
0257C:  MOVLW  00
0257E:  MOVLB  A
02580:  BTFSC  xDB.3
02582:  MOVLW  01
02584:  MOVLB  B
02586:  IORWF  x55,W
02588:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0258A:  BCF    FD8.0
0258C:  RLCF   1E,W
0258E:  MOVWF  x55
02590:  MOVLW  00
02592:  MOVLB  A
02594:  BTFSC  xDB.2
02596:  MOVLW  01
02598:  MOVLB  B
0259A:  IORWF  x55,W
0259C:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
0259E:  BCF    FD8.0
025A0:  RLCF   1E,W
025A2:  MOVWF  x55
025A4:  MOVLW  00
025A6:  MOVLB  A
025A8:  BTFSC  xDB.1
025AA:  MOVLW  01
025AC:  MOVLB  B
025AE:  IORWF  x55,W
025B0:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
025B2:  BCF    FD8.0
025B4:  RLCF   1E,W
025B6:  MOVWF  x55
025B8:  MOVLW  00
025BA:  MOVLB  A
025BC:  BTFSC  xDB.0
025BE:  MOVLW  01
025C0:  MOVLB  B
025C2:  IORWF  x55,W
025C4:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B10;
025C6:  MOVLW  00
025C8:  MOVLB  A
025CA:  BTFSC  xDC.1
025CC:  MOVLW  01
025CE:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
025D0:  BCF    FD8.0
025D2:  RLCF   1F,W
025D4:  MOVLB  B
025D6:  MOVWF  x55
025D8:  MOVLW  00
025DA:  MOVLB  A
025DC:  BTFSC  xDC.0
025DE:  MOVLW  01
025E0:  MOVLB  B
025E2:  IORWF  x55,W
025E4:  MOVWF  1F
025E6:  MOVLB  0
025E8:  GOTO   2D3A (RETURN)
.................... 
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002E6:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002E8:  MOVF   x63,W
002EA:  SUBWF  x6B,W
002EC:  BNZ   0314
....................    {
....................      RxD_DataLen = 0x00 ;
002EE:  CLRF   x6D
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002F0:  MOVLW  6E
002F2:  ADDWF  x6D,W
002F4:  MOVWF  FE9
002F6:  MOVLW  01
002F8:  MOVWF  FEA
002FA:  BTFSC  FD8.0
002FC:  INCF   FEA,F
002FE:  MOVFF  2E,FEF
....................      restart_wdt();
00302:  CLRWDT
....................      RxD_DataLen ++ ;
00304:  INCF   x6D,F
....................      sequence = addr_sq;
00306:  MOVLW  10
00308:  MOVWF  x6B
....................      T_timeout = 0x14; //200ms
0030A:  MOVLW  14
0030C:  MOVLB  9
0030E:  MOVWF  x79
....................    }
00310:  BRA    053A
00312:  MOVLB  0
....................    else if(sequence == addr_sq)
00314:  MOVF   x6B,W
00316:  SUBLW  10
00318:  BNZ   03D2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0031A:  MOVLW  6E
0031C:  ADDWF  x6D,W
0031E:  MOVWF  FE9
00320:  MOVLW  01
00322:  MOVWF  FEA
00324:  BTFSC  FD8.0
00326:  INCF   FEA,F
00328:  MOVFF  2E,FEF
....................       restart_wdt();
0032C:  CLRWDT
....................       RxD_DataLen ++ ;
0032E:  INCF   x6D,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00330:  MOVLW  01
00332:  SUBWF  x6D,W
00334:  ADDLW  6E
00336:  MOVWF  FE9
00338:  MOVLW  01
0033A:  MOVWF  FEA
0033C:  BTFSC  FD8.0
0033E:  INCF   FEA,F
00340:  MOVF   FEF,W
00342:  SUBLW  16
00344:  BNC   0354
....................        {
....................            sequence = code_sq;
00346:  MOVFF  64,6B
....................            T_timeout = 0x14; //200ms
0034A:  MOVLW  14
0034C:  MOVLB  9
0034E:  MOVWF  x79
....................        }
00350:  BRA    03CE
00352:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00354:  MOVLW  01
00356:  SUBWF  x6D,W
00358:  ADDLW  6E
0035A:  MOVWF  FE9
0035C:  MOVLW  01
0035E:  MOVWF  FEA
00360:  BTFSC  FD8.0
00362:  INCF   FEA,F
00364:  MOVF   FEF,W
00366:  SUBLW  20
00368:  BNZ   0378
....................        {
....................           sequence = ubyte_lo_sq;
0036A:  MOVFF  67,6B
....................           T_timeout = 0x14; //200ms
0036E:  MOVLW  14
00370:  MOVLB  9
00372:  MOVWF  x79
....................        }
00374:  BRA    03CE
00376:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
00378:  MOVLW  01
0037A:  SUBWF  x6D,W
0037C:  ADDLW  6E
0037E:  MOVWF  FE9
00380:  MOVLW  01
00382:  MOVWF  FEA
00384:  BTFSC  FD8.0
00386:  INCF   FEA,F
00388:  MOVF   FEF,W
0038A:  SUBLW  21
0038C:  BNZ   039C
....................        {
....................           sequence = byte_count_sq ;
0038E:  MOVFF  69,6B
....................           T_timeout = 0x14; //200ms
00392:  MOVLW  14
00394:  MOVLB  9
00396:  MOVWF  x79
....................        }
00398:  BRA    03CE
0039A:  MOVLB  0
....................        //   SMS     
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
0039C:  MOVLW  01
0039E:  SUBWF  x6D,W
003A0:  ADDLW  6E
003A2:  MOVWF  FE9
003A4:  MOVLW  01
003A6:  MOVWF  FEA
003A8:  BTFSC  FD8.0
003AA:  INCF   FEA,F
003AC:  MOVF   FEF,W
003AE:  SUBLW  22
003B0:  BNZ   03C0
....................        {
....................           sequence = byte_count_sq ;
003B2:  MOVFF  69,6B
....................           T_timeout = 0x14; //200ms
003B6:  MOVLW  14
003B8:  MOVLB  9
003BA:  MOVWF  x79
....................        }
003BC:  BRA    03CE
003BE:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003C0:  CLRF   x6D
....................           sequence = end_sq;
003C2:  MOVFF  63,6B
....................           T_timeout = 0x00; 
003C6:  MOVLB  9
003C8:  CLRF   x79
....................           output_bit(P485ctrl,0);
003CA:  BCF    F8A.3
003CC:  BCF    F93.3
....................        }
....................    }
003CE:  BRA    053A
003D0:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003D2:  MOVF   x69,W
003D4:  SUBWF  x6B,W
003D6:  BNZ   0410
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003D8:  MOVLW  6E
003DA:  ADDWF  x6D,W
003DC:  MOVWF  FE9
003DE:  MOVLW  01
003E0:  MOVWF  FEA
003E2:  BTFSC  FD8.0
003E4:  INCF   FEA,F
003E6:  MOVFF  2E,FEF
....................       restart_wdt();
003EA:  CLRWDT
....................       RxD_DataLen ++ ;
003EC:  INCF   x6D,F
....................       index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
003EE:  MOVLW  01
003F0:  SUBWF  x6D,W
003F2:  ADDLW  6E
003F4:  MOVWF  FE9
003F6:  MOVLW  01
003F8:  MOVWF  FEA
003FA:  BTFSC  FD8.0
003FC:  INCF   FEA,F
003FE:  MOVFF  FEF,97A
....................       T_timeout = 0x14; //200ms
00402:  MOVLW  14
00404:  MOVLB  9
00406:  MOVWF  x79
....................       sequence = data_sq ;
00408:  MOVFF  6A,6B
....................    }
0040C:  BRA    053A
0040E:  MOVLB  0
....................    else if(sequence == data_sq)
00410:  MOVF   x6A,W
00412:  SUBWF  x6B,W
00414:  BNZ   0440
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00416:  MOVLW  6E
00418:  ADDWF  x6D,W
0041A:  MOVWF  FE9
0041C:  MOVLW  01
0041E:  MOVWF  FEA
00420:  BTFSC  FD8.0
00422:  INCF   FEA,F
00424:  MOVFF  2E,FEF
....................       restart_wdt();
00428:  CLRWDT
....................       RxD_DataLen ++ ;
0042A:  INCF   x6D,F
....................       index -- ;                     //Data Byte Count
0042C:  MOVLB  9
0042E:  DECF   x7A,F
....................       if(index == 0x00)
00430:  MOVF   x7A,F
00432:  BNZ   0438
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
00434:  MOVFF  67,6B
....................       }
....................       T_timeout = 0x14; //200ms
00438:  MOVLW  14
0043A:  MOVWF  x79
....................    }
0043C:  BRA    053A
0043E:  MOVLB  0
....................    else if(sequence == code_sq)
00440:  MOVF   x64,W
00442:  SUBWF  x6B,W
00444:  BNZ   046A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
00446:  MOVLW  6E
00448:  ADDWF  x6D,W
0044A:  MOVWF  FE9
0044C:  MOVLW  01
0044E:  MOVWF  FEA
00450:  BTFSC  FD8.0
00452:  INCF   FEA,F
00454:  MOVFF  2E,FEF
....................       restart_wdt();
00458:  CLRWDT
....................       RxD_DataLen ++ ;
0045A:  INCF   x6D,F
....................       sequence = start_addr_hi_sq;
0045C:  MOVFF  65,6B
....................       T_timeout = 0x14; //200ms
00460:  MOVLW  14
00462:  MOVLB  9
00464:  MOVWF  x79
.................... 
....................    }
00466:  BRA    053A
00468:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
0046A:  MOVF   x65,W
0046C:  SUBWF  x6B,W
0046E:  BNZ   0494
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
00470:  MOVLW  6E
00472:  ADDWF  x6D,W
00474:  MOVWF  FE9
00476:  MOVLW  01
00478:  MOVWF  FEA
0047A:  BTFSC  FD8.0
0047C:  INCF   FEA,F
0047E:  MOVFF  2E,FEF
....................       restart_wdt();
00482:  CLRWDT
....................       RxD_DataLen ++ ;
00484:  INCF   x6D,F
....................       sequence = start_addr_lo_sq;
00486:  MOVFF  66,6B
....................       T_timeout = 0x14; //200ms
0048A:  MOVLW  14
0048C:  MOVLB  9
0048E:  MOVWF  x79
....................    }
00490:  BRA    053A
00492:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
00494:  MOVF   x66,W
00496:  SUBWF  x6B,W
00498:  BNZ   04BE
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
0049A:  MOVLW  6E
0049C:  ADDWF  x6D,W
0049E:  MOVWF  FE9
004A0:  MOVLW  01
004A2:  MOVWF  FEA
004A4:  BTFSC  FD8.0
004A6:  INCF   FEA,F
004A8:  MOVFF  2E,FEF
....................       restart_wdt();
004AC:  CLRWDT
....................       RxD_DataLen ++ ;
004AE:  INCF   x6D,F
....................       sequence = ubyte_hi_sq;
004B0:  MOVLW  15
004B2:  MOVWF  x6B
....................       T_timeout = 0x14; //200ms
004B4:  MOVLW  14
004B6:  MOVLB  9
004B8:  MOVWF  x79
....................    }
004BA:  BRA    053A
004BC:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
004BE:  MOVF   x6B,W
004C0:  SUBLW  15
004C2:  BNZ   04E8
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
004C4:  MOVLW  6E
004C6:  ADDWF  x6D,W
004C8:  MOVWF  FE9
004CA:  MOVLW  01
004CC:  MOVWF  FEA
004CE:  BTFSC  FD8.0
004D0:  INCF   FEA,F
004D2:  MOVFF  2E,FEF
....................       restart_wdt();
004D6:  CLRWDT
....................       RxD_DataLen ++ ;
004D8:  INCF   x6D,F
....................       sequence = ubyte_lo_sq;
004DA:  MOVFF  67,6B
....................       T_timeout = 0x14; //200ms
004DE:  MOVLW  14
004E0:  MOVLB  9
004E2:  MOVWF  x79
....................    }
004E4:  BRA    053A
004E6:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
004E8:  MOVF   x67,W
004EA:  SUBWF  x6B,W
004EC:  BNZ   0512
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
004EE:  MOVLW  6E
004F0:  ADDWF  x6D,W
004F2:  MOVWF  FE9
004F4:  MOVLW  01
004F6:  MOVWF  FEA
004F8:  BTFSC  FD8.0
004FA:  INCF   FEA,F
004FC:  MOVFF  2E,FEF
....................       restart_wdt();
00500:  CLRWDT
....................       RxD_DataLen ++ ;
00502:  INCF   x6D,F
....................       sequence = crc_hi_sq;
00504:  MOVFF  68,6B
....................       T_timeout = 0x14; //200ms
00508:  MOVLW  14
0050A:  MOVLB  9
0050C:  MOVWF  x79
....................    }
0050E:  BRA    053A
00510:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00512:  MOVF   x68,W
00514:  SUBWF  x6B,W
00516:  BNZ   053A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
00518:  MOVLW  6E
0051A:  ADDWF  x6D,W
0051C:  MOVWF  FE9
0051E:  MOVLW  01
00520:  MOVWF  FEA
00522:  BTFSC  FD8.0
00524:  INCF   FEA,F
00526:  MOVFF  2E,FEF
....................       restart_wdt();
0052A:  CLRWDT
....................       sequence = end_sq;
0052C:  MOVFF  63,6B
....................       T_timeout = 0x00;
00530:  MOVLB  9
00532:  CLRF   x79
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
00534:  BSF    30.5
....................       output_bit(P485ctrl,0);
00536:  BCF    F8A.3
00538:  BCF    F93.3
0053A:  MOVLB  0
....................    }
0053C:  GOTO   054A (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
025EC:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
025EE:  MOVLW  01
025F0:  SUBWF  x6D,W
025F2:  MOVLB  B
025F4:  MOVWF  x54
025F6:  MOVLW  01
025F8:  MOVWF  x56
025FA:  MOVLW  6E
025FC:  MOVWF  x55
025FE:  MOVFF  B54,B57
02602:  MOVLB  0
02604:  RCALL  2384
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
02606:  MOVLW  01
02608:  SUBWF  x6D,W
0260A:  ADDLW  6E
0260C:  MOVWF  FE9
0260E:  MOVLW  01
02610:  MOVWF  FEA
02612:  BTFSC  FD8.0
02614:  INCF   FEA,F
02616:  MOVF   FEF,W
02618:  MOVLB  5
0261A:  SUBWF  x6F,W
0261C:  BTFSS  FD8.2
0261E:  GOTO   43C6
02622:  MOVLW  6E
02624:  MOVLB  0
02626:  ADDWF  x6D,W
02628:  MOVWF  FE9
0262A:  MOVLW  01
0262C:  MOVWF  FEA
0262E:  BTFSC  FD8.0
02630:  INCF   FEA,F
02632:  MOVF   FEF,W
02634:  MOVLB  5
02636:  SUBWF  x6E,W
02638:  BTFSS  FD8.2
0263A:  GOTO   43C6
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
0263E:  MOVLB  1
02640:  MOVF   x6E,W
02642:  SUBLW  AA
02644:  BTFSS  FD8.2
02646:  BRA    2904
02648:  MOVF   x6F,W
0264A:  SUBLW  20
0264C:  BTFSS  FD8.2
0264E:  BRA    2904
....................       {
....................          TxD_Buff[0] = Address ;         //Address
02650:  MOVFF  6C,6E
....................          TxD_Buff[1] = 0x20 ;            //function code
02654:  MOVLW  20
02656:  MOVLB  0
02658:  MOVWF  x6F
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
0265A:  MOVLW  1C
0265C:  MOVWF  x70
....................          TxD_Buff[3] = InputType1_8 ;    //1
0265E:  MOVFF  3B,71
....................          TxD_Buff[4] = InputType9_16 ;  //2
02662:  MOVFF  3C,72
....................          TxD_Buff[5] = InputType17_24 ;//3
02666:  MOVFF  3D,73
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
0266A:  MOVFF  3E,74
....................          TxD_Buff[7] = FaultType9_16 ; //5
0266E:  MOVFF  3F,75
....................          TxD_Buff[8] = FaultType17_24 ;   //6
02672:  MOVFF  40,76
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
02676:  MOVFF  41,77
....................          TxD_Buff[10] = OutputType9_16 ;  //8
0267A:  MOVFF  42,78
....................          TxD_Buff[11] = OutputType17_24 ; //9
0267E:  MOVFF  43,79
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
02682:  MOVFF  44,7A
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
02686:  MOVFF  45,7B
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
0268A:  MOVFF  46,7C
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
0268E:  MOVFF  47,7D
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
02692:  MOVFF  48,7E
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
02696:  MOVFF  49,7F
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
0269A:  MOVFF  FF2,B54
0269E:  BCF    FF2.7
026A0:  CLRF   FAA
026A2:  MOVLW  10
026A4:  MOVWF  FA9
026A6:  BCF    FA6.6
026A8:  BCF    FA6.7
026AA:  BSF    FA6.0
026AC:  MOVF   FA8,W
026AE:  MOVLB  B
026B0:  BTFSC  x54.7
026B2:  BSF    FF2.7
026B4:  MOVLB  0
026B6:  MOVWF  x80
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
026B8:  MOVFF  FF2,B54
026BC:  BCF    FF2.7
026BE:  CLRF   FAA
026C0:  MOVLW  11
026C2:  MOVWF  FA9
026C4:  BCF    FA6.6
026C6:  BCF    FA6.7
026C8:  BSF    FA6.0
026CA:  MOVF   FA8,W
026CC:  MOVLB  B
026CE:  BTFSC  x54.7
026D0:  BSF    FF2.7
026D2:  MOVLB  0
026D4:  MOVWF  x81
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
026D6:  MOVFF  FF2,B54
026DA:  BCF    FF2.7
026DC:  CLRF   FAA
026DE:  MOVLW  12
026E0:  MOVWF  FA9
026E2:  BCF    FA6.6
026E4:  BCF    FA6.7
026E6:  BSF    FA6.0
026E8:  MOVF   FA8,W
026EA:  MOVLB  B
026EC:  BTFSC  x54.7
026EE:  BSF    FF2.7
026F0:  MOVLB  0
026F2:  MOVWF  x82
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
026F4:  MOVFF  FF2,B54
026F8:  BCF    FF2.7
026FA:  CLRF   FAA
026FC:  MOVLW  13
026FE:  MOVWF  FA9
02700:  BCF    FA6.6
02702:  BCF    FA6.7
02704:  BSF    FA6.0
02706:  MOVF   FA8,W
02708:  MOVLB  B
0270A:  BTFSC  x54.7
0270C:  BSF    FF2.7
0270E:  MOVLB  0
02710:  MOVWF  x83
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
02712:  MOVFF  FF2,B54
02716:  BCF    FF2.7
02718:  CLRF   FAA
0271A:  MOVLW  14
0271C:  MOVWF  FA9
0271E:  BCF    FA6.6
02720:  BCF    FA6.7
02722:  BSF    FA6.0
02724:  MOVF   FA8,W
02726:  MOVLB  B
02728:  BTFSC  x54.7
0272A:  BSF    FF2.7
0272C:  MOVLB  0
0272E:  MOVWF  x84
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
02730:  MOVFF  FF2,B54
02734:  BCF    FF2.7
02736:  CLRF   FAA
02738:  MOVLW  15
0273A:  MOVWF  FA9
0273C:  BCF    FA6.6
0273E:  BCF    FA6.7
02740:  BSF    FA6.0
02742:  MOVF   FA8,W
02744:  MOVLB  B
02746:  BTFSC  x54.7
02748:  BSF    FF2.7
0274A:  MOVLB  0
0274C:  MOVWF  x85
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
0274E:  MOVFF  FF2,B54
02752:  BCF    FF2.7
02754:  CLRF   FAA
02756:  MOVLW  16
02758:  MOVWF  FA9
0275A:  BCF    FA6.6
0275C:  BCF    FA6.7
0275E:  BSF    FA6.0
02760:  MOVF   FA8,W
02762:  MOVLB  B
02764:  BTFSC  x54.7
02766:  BSF    FF2.7
02768:  MOVLB  0
0276A:  MOVWF  x86
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
0276C:  MOVFF  FF2,B54
02770:  BCF    FF2.7
02772:  CLRF   FAA
02774:  MOVLW  17
02776:  MOVWF  FA9
02778:  BCF    FA6.6
0277A:  BCF    FA6.7
0277C:  BSF    FA6.0
0277E:  MOVF   FA8,W
02780:  MOVLB  B
02782:  BTFSC  x54.7
02784:  BSF    FF2.7
02786:  MOVLB  0
02788:  MOVWF  x87
....................        
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
0278A:  MOVFF  5E,88
....................          TxD_Buff[27] = AutoAckTime ;        //25
0278E:  MOVFF  5F,89
....................          TxD_Buff[28] = FlashingRate ;       //26
02792:  MOVFF  60,8A
....................          TxD_Buff[29] = NoOfPoint ;          //27
02796:  MOVFF  61,8B
....................          TxD_Buff[30] = FaultDelayTime ;    //28
0279A:  MOVLW  19
0279C:  MOVWF  x8C
....................          TxD_Buff[31] = Address ;            //29
0279E:  MOVFF  6C,8D
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
027A2:  MOVFF  B1B,8E
....................          TxD_Buff[33] = FaultDelayTime[2] ;
027A6:  MOVFF  B1D,8F
....................          TxD_Buff[34] = FaultDelayTime[3] ;
027AA:  MOVFF  B1F,90
....................          TxD_Buff[35] = FaultDelayTime[4] ;
027AE:  MOVFF  B21,91
....................          TxD_Buff[36] = FaultDelayTime[5] ;
027B2:  MOVFF  B23,92
....................          TxD_Buff[37] = FaultDelayTime[6] ;
027B6:  MOVFF  B25,93
....................          TxD_Buff[38] = FaultDelayTime[7] ;
027BA:  MOVFF  B27,94
....................          TxD_Buff[39] = FaultDelayTime[8] ;
027BE:  MOVFF  B29,95
....................          TxD_Buff[40] = FaultDelayTime[9] ;
027C2:  MOVFF  B2B,96
....................          TxD_Buff[41] = FaultDelayTime[10] ;
027C6:  MOVFF  B2D,97
....................          TxD_Buff[42] = FaultDelayTime[11] ;
027CA:  MOVFF  B2F,98
....................          TxD_Buff[43] = FaultDelayTime[12] ;
027CE:  MOVFF  B31,99
....................          TxD_Buff[44] = FaultDelayTime[13] ;
027D2:  MOVFF  B33,9A
....................          TxD_Buff[45] = FaultDelayTime[14] ;
027D6:  MOVFF  B35,9B
....................          TxD_Buff[46] = FaultDelayTime[15] ;
027DA:  MOVFF  B37,9C
....................          TxD_Buff[47] = FaultDelayTime[16] ;
027DE:  MOVFF  B39,9D
....................          TxD_Buff[48] = FaultDelayTime[17] ;
027E2:  MOVFF  B3B,9E
....................          TxD_Buff[49] = FaultDelayTime[18] ;
027E6:  MOVFF  B3D,9F
....................          TxD_Buff[50] = FaultDelayTime[19] ;
027EA:  MOVFF  B3F,A0
....................          TxD_Buff[51] = FaultDelayTime[20] ;
027EE:  MOVFF  B41,A1
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
027F2:  MOVLB  B
027F4:  CLRF   x56
027F6:  MOVLW  6E
027F8:  MOVWF  x55
027FA:  MOVLW  34
027FC:  MOVWF  x57
027FE:  MOVLB  0
02800:  RCALL  2384
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
02802:  MOVFF  56F,A2
....................          TxD_Buff[53] = CRC_Lo ;
02806:  MOVFF  56E,A3
.................... 
....................          output_bit(P485ctrl,1);
0280A:  BSF    F8A.3
0280C:  BCF    F93.3
....................          delay_ms(10);
0280E:  MOVLW  0A
02810:  MOVLB  B
02812:  MOVWF  x54
02814:  MOVLB  0
02816:  CALL   07DC
.................... 
....................          putc(Txd_Buff[0]);
0281A:  MOVF   x6E,W
0281C:  RCALL  23DA
....................          putc(Txd_Buff[1]);
0281E:  MOVF   x6F,W
02820:  RCALL  23DA
....................          putc(Txd_Buff[2]);
02822:  MOVF   x70,W
02824:  RCALL  23DA
....................          putc(Txd_Buff[3]);
02826:  MOVF   x71,W
02828:  RCALL  23DA
....................          putc(Txd_Buff[4]);
0282A:  MOVF   x72,W
0282C:  RCALL  23DA
....................          putc(Txd_Buff[5]);
0282E:  MOVF   x73,W
02830:  RCALL  23DA
....................          putc(Txd_Buff[6]);
02832:  MOVF   x74,W
02834:  RCALL  23DA
....................          putc(Txd_Buff[7]);
02836:  MOVF   x75,W
02838:  RCALL  23DA
....................          putc(Txd_Buff[8]);
0283A:  MOVF   x76,W
0283C:  RCALL  23DA
....................          putc(Txd_Buff[9]);
0283E:  MOVF   x77,W
02840:  RCALL  23DA
....................          putc(Txd_Buff[10]);
02842:  MOVF   x78,W
02844:  RCALL  23DA
....................          putc(Txd_Buff[11]);
02846:  MOVF   x79,W
02848:  RCALL  23DA
....................          putc(Txd_Buff[12]);
0284A:  MOVF   x7A,W
0284C:  RCALL  23DA
....................          putc(Txd_Buff[13]);
0284E:  MOVF   x7B,W
02850:  RCALL  23DA
....................          putc(Txd_Buff[14]);
02852:  MOVF   x7C,W
02854:  RCALL  23DA
....................          putc(Txd_Buff[15]);
02856:  MOVF   x7D,W
02858:  RCALL  23DA
....................          putc(Txd_Buff[16]);
0285A:  MOVF   x7E,W
0285C:  RCALL  23DA
....................          putc(Txd_Buff[17]);
0285E:  MOVF   x7F,W
02860:  RCALL  23DA
....................          putc(Txd_Buff[18]);
02862:  MOVF   x80,W
02864:  RCALL  23DA
....................          putc(Txd_Buff[19]);
02866:  MOVF   x81,W
02868:  RCALL  23DA
....................          putc(Txd_Buff[20]);
0286A:  MOVF   x82,W
0286C:  RCALL  23DA
....................          putc(Txd_Buff[21]);
0286E:  MOVF   x83,W
02870:  RCALL  23DA
....................          putc(Txd_Buff[22]);
02872:  MOVF   x84,W
02874:  RCALL  23DA
....................          putc(Txd_Buff[23]);
02876:  MOVF   x85,W
02878:  RCALL  23DA
....................          putc(Txd_Buff[24]);
0287A:  MOVF   x86,W
0287C:  RCALL  23DA
....................          putc(Txd_Buff[25]);
0287E:  MOVF   x87,W
02880:  RCALL  23DA
....................          putc(Txd_Buff[26]);
02882:  MOVF   x88,W
02884:  RCALL  23DA
....................          putc(Txd_Buff[27]);
02886:  MOVF   x89,W
02888:  RCALL  23DA
....................          putc(Txd_Buff[28]);
0288A:  MOVF   x8A,W
0288C:  RCALL  23DA
....................          putc(Txd_Buff[29]);
0288E:  MOVF   x8B,W
02890:  RCALL  23DA
....................          putc(Txd_Buff[30]);
02892:  MOVF   x8C,W
02894:  RCALL  23DA
....................          putc(Txd_Buff[31]);
02896:  MOVF   x8D,W
02898:  RCALL  23DA
....................          
....................          putc(Txd_Buff[32]);
0289A:  MOVF   x8E,W
0289C:  RCALL  23DA
....................          putc(Txd_Buff[33]);
0289E:  MOVF   x8F,W
028A0:  RCALL  23DA
....................          putc(Txd_Buff[34]);
028A2:  MOVF   x90,W
028A4:  RCALL  23DA
....................          putc(Txd_Buff[35]);
028A6:  MOVF   x91,W
028A8:  RCALL  23DA
....................          putc(Txd_Buff[36]);
028AA:  MOVF   x92,W
028AC:  RCALL  23DA
....................          putc(Txd_Buff[37]);
028AE:  MOVF   x93,W
028B0:  RCALL  23DA
....................          putc(Txd_Buff[38]);
028B2:  MOVF   x94,W
028B4:  RCALL  23DA
....................          putc(Txd_Buff[39]);
028B6:  MOVF   x95,W
028B8:  RCALL  23DA
....................          putc(Txd_Buff[40]);
028BA:  MOVF   x96,W
028BC:  RCALL  23DA
....................          putc(Txd_Buff[41]);
028BE:  MOVF   x97,W
028C0:  RCALL  23DA
....................          
....................          putc(Txd_Buff[42]);
028C2:  MOVF   x98,W
028C4:  RCALL  23DA
....................          putc(Txd_Buff[43]);
028C6:  MOVF   x99,W
028C8:  RCALL  23DA
....................          putc(Txd_Buff[44]);
028CA:  MOVF   x9A,W
028CC:  RCALL  23DA
....................          putc(Txd_Buff[45]);
028CE:  MOVF   x9B,W
028D0:  RCALL  23DA
....................          putc(Txd_Buff[46]);
028D2:  MOVF   x9C,W
028D4:  RCALL  23DA
....................          putc(Txd_Buff[47]);
028D6:  MOVF   x9D,W
028D8:  RCALL  23DA
....................          putc(Txd_Buff[48]);
028DA:  MOVF   x9E,W
028DC:  RCALL  23DA
....................          putc(Txd_Buff[49]);
028DE:  MOVF   x9F,W
028E0:  RCALL  23DA
....................          putc(Txd_Buff[50]);
028E2:  MOVF   xA0,W
028E4:  RCALL  23DA
....................          putc(Txd_Buff[51]);
028E6:  MOVF   xA1,W
028E8:  RCALL  23DA
....................          
....................          putc(Txd_Buff[52]);
028EA:  MOVF   xA2,W
028EC:  RCALL  23DA
....................          putc(Txd_Buff[53]);
028EE:  MOVF   xA3,W
028F0:  RCALL  23DA
....................        
....................          delay_ms(3);
028F2:  MOVLW  03
028F4:  MOVLB  B
028F6:  MOVWF  x54
028F8:  MOVLB  0
028FA:  CALL   07DC
....................          output_bit(P485ctrl,0);
028FE:  BCF    F8A.3
02900:  BCF    F93.3
02902:  MOVLB  1
....................          
....................       }
....................    
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
02904:  MOVLB  0
02906:  MOVF   x6C,W
02908:  MOVLB  1
0290A:  SUBWF  x6E,W
0290C:  BTFSS  FD8.2
0290E:  GOTO   43BC
....................       {
....................       
....................          if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
02912:  DECFSZ x6F,W
02914:  BRA    2D2C
....................          {
....................                //Do Read Coil
....................                Start_Address = RxD_Buff[2] ;
02916:  MOVLB  5
02918:  CLRF   x73
0291A:  MOVFF  170,572
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
0291E:  MOVFF  572,573
02922:  MOVLB  B
02924:  CLRF   x54
02926:  MOVF   x54,W
02928:  MOVLB  1
0292A:  IORWF  x71,W
0292C:  MOVLB  5
0292E:  MOVWF  x72
02930:  MOVLB  5
....................                No_PointCount = RxD_Buff[4] ;
02932:  CLRF   x75
02934:  MOVFF  172,574
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
02938:  MOVFF  574,575
0293C:  MOVLB  B
0293E:  CLRF   x54
02940:  MOVF   x54,W
02942:  MOVLB  1
02944:  IORWF  x73,W
02946:  MOVLB  5
02948:  MOVWF  x74
0294A:  MOVLB  5
....................    
....................                if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
0294C:  MOVF   x73,F
0294E:  BTFSS  FD8.2
02950:  BRA    2CBA
02952:  MOVF   x72,W
02954:  SUBLW  0F
02956:  BTFSS  FD8.0
02958:  BRA    2CBA
0295A:  MOVF   x74,W
0295C:  ADDWF  x72,W
0295E:  MOVLB  B
02960:  MOVWF  x54
02962:  MOVLB  5
02964:  MOVF   x75,W
02966:  ADDWFC x73,W
02968:  MOVLB  B
0296A:  MOVWF  x55
0296C:  MOVF   x55,F
0296E:  BTFSC  FD8.2
02970:  BRA    2976
02972:  MOVLB  5
02974:  BRA    2CBA
02976:  MOVF   x54,W
02978:  SUBLW  10
0297A:  BTFSC  FD8.0
0297C:  BRA    2982
0297E:  MOVLB  5
02980:  BRA    2CBA
....................                {
....................                   if(No_PointCount < 9) Data_ByteCount = 0x01 ;
02982:  MOVLB  5
02984:  MOVF   x75,F
02986:  BNZ   2994
02988:  MOVF   x74,W
0298A:  SUBLW  08
0298C:  BNC   2994
0298E:  MOVLW  01
02990:  MOVWF  x76
02992:  BRA    29B8
....................                   else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
02994:  MOVF   x75,F
02996:  BNZ   29A4
02998:  MOVF   x74,W
0299A:  SUBLW  10
0299C:  BNC   29A4
0299E:  MOVLW  02
029A0:  MOVWF  x76
029A2:  BRA    29B8
....................                   else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
029A4:  MOVF   x75,F
029A6:  BNZ   29B4
029A8:  MOVF   x74,W
029AA:  SUBLW  18
029AC:  BNC   29B4
029AE:  MOVLW  03
029B0:  MOVWF  x76
029B2:  BRA    29B8
....................                   else   Data_ByteCount = 0x01 ; //----Jack
029B4:  MOVLW  01
029B6:  MOVWF  x76
....................    
....................                   if(Data_ByteCount == 0x01)
029B8:  DECFSZ x76,W
029BA:  BRA    2AF2
....................                   {
....................    
....................                      if(Start_Address < 0x09)
029BC:  MOVF   x73,F
029BE:  BNZ   29DA
029C0:  MOVF   x72,W
029C2:  SUBLW  08
029C4:  BNC   29DA
....................                      {
....................                         //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                         //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                         //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                          Data_Buff[0] = Input1_8 >> Start_Address ;
029C6:  MOVFF  4A,577
029CA:  MOVF   x72,W
029CC:  MOVWF  01
029CE:  BZ    29D8
029D0:  BCF    FD8.0
029D2:  RRCF   x77,F
029D4:  DECFSZ 01,F
029D6:  BRA    29D0
....................                          //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                          //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                      }
029D8:  BRA    2A0E
....................                      else if(Start_Address > 0x08 && Start_Address < 0x10)
029DA:  MOVF   x73,F
029DC:  BNZ   29E4
029DE:  MOVF   x72,W
029E0:  SUBLW  08
029E2:  BC    2A0E
029E4:  MOVF   x73,F
029E6:  BNZ   2A0E
029E8:  MOVF   x72,W
029EA:  SUBLW  0F
029EC:  BNC   2A0E
....................                      {
....................                         //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                         Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
029EE:  MOVLW  08
029F0:  SUBWF  x72,W
029F2:  MOVWF  00
029F4:  MOVLW  00
029F6:  SUBWFB x73,W
029F8:  MOVWF  03
029FA:  MOVFF  00,01
029FE:  MOVFF  32,577
02A02:  MOVF   01,F
02A04:  BZ    2A0E
02A06:  BCF    FD8.0
02A08:  RRCF   x77,F
02A0A:  DECFSZ 01,F
02A0C:  BRA    2A06
....................                      }
....................    
....................    
....................                      if(No_PointCount == 0x08)
02A0E:  MOVF   x74,W
02A10:  SUBLW  08
02A12:  BNZ   2A1A
02A14:  MOVF   x75,F
02A16:  BNZ   2A1A
....................                      {
....................                         Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                      }
02A18:  BRA    2A84
....................                      else if(No_PointCount == 0x07)
02A1A:  MOVF   x74,W
02A1C:  SUBLW  07
02A1E:  BNZ   2A28
02A20:  MOVF   x75,F
02A22:  BNZ   2A28
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
02A24:  BCF    x77.7
....................                      }
02A26:  BRA    2A84
....................                      else if(No_PointCount == 0x06)
02A28:  MOVF   x74,W
02A2A:  SUBLW  06
02A2C:  BNZ   2A38
02A2E:  MOVF   x75,F
02A30:  BNZ   2A38
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
02A32:  MOVLW  3F
02A34:  ANDWF  x77,F
....................                      }
02A36:  BRA    2A84
....................                      else if(No_PointCount == 0x05)
02A38:  MOVF   x74,W
02A3A:  SUBLW  05
02A3C:  BNZ   2A48
02A3E:  MOVF   x75,F
02A40:  BNZ   2A48
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
02A42:  MOVLW  1F
02A44:  ANDWF  x77,F
....................                      }
02A46:  BRA    2A84
....................                      else if(No_PointCount == 0x04)
02A48:  MOVF   x74,W
02A4A:  SUBLW  04
02A4C:  BNZ   2A58
02A4E:  MOVF   x75,F
02A50:  BNZ   2A58
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
02A52:  MOVLW  0F
02A54:  ANDWF  x77,F
....................                      }
02A56:  BRA    2A84
....................                      else if(No_PointCount == 0x03)
02A58:  MOVF   x74,W
02A5A:  SUBLW  03
02A5C:  BNZ   2A68
02A5E:  MOVF   x75,F
02A60:  BNZ   2A68
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
02A62:  MOVLW  07
02A64:  ANDWF  x77,F
....................                      }
02A66:  BRA    2A84
....................                      else if(No_PointCount == 0x02)
02A68:  MOVF   x74,W
02A6A:  SUBLW  02
02A6C:  BNZ   2A78
02A6E:  MOVF   x75,F
02A70:  BNZ   2A78
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
02A72:  MOVLW  03
02A74:  ANDWF  x77,F
....................                      }
02A76:  BRA    2A84
....................                      else if(No_PointCount == 0x01)
02A78:  DECFSZ x74,W
02A7A:  BRA    2A84
02A7C:  MOVF   x75,F
02A7E:  BNZ   2A84
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
02A80:  MOVLW  01
02A82:  ANDWF  x77,F
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
02A84:  MOVFF  6C,6E
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
02A88:  MOVLW  01
02A8A:  MOVLB  0
02A8C:  MOVWF  x6F
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02A8E:  MOVFF  576,70
....................                      TxD_Buff[3] = Data_Buff[0] ;   //Data
02A92:  MOVFF  577,71
....................    
....................                      CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
02A96:  MOVLB  B
02A98:  CLRF   x56
02A9A:  MOVLW  6E
02A9C:  MOVWF  x55
02A9E:  MOVLW  04
02AA0:  MOVWF  x57
02AA2:  MOVLB  0
02AA4:  RCALL  2384
....................    
....................                      TxD_Buff[4] = CRC_Hi ;
02AA6:  MOVFF  56F,72
....................                      TxD_Buff[5] = CRC_Lo ;
02AAA:  MOVFF  56E,73
.................... 
....................                      output_bit(P485ctrl,1);
02AAE:  BSF    F8A.3
02AB0:  BCF    F93.3
....................                      restart_wdt();
02AB2:  CLRWDT
....................                      delay_ms(4);
02AB4:  MOVLW  04
02AB6:  MOVLB  B
02AB8:  MOVWF  x54
02ABA:  MOVLB  0
02ABC:  CALL   07DC
....................                      restart_wdt();
02AC0:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
02AC2:  MOVF   x6E,W
02AC4:  RCALL  23DA
....................                      putc(TxD_Buff[1]) ;               //Function Code
02AC6:  MOVF   x6F,W
02AC8:  RCALL  23DA
....................                      putc(TxD_Buff[2]) ;               //Byte Count
02ACA:  MOVF   x70,W
02ACC:  RCALL  23DA
....................                      putc(TxD_Buff[3]) ;
02ACE:  MOVF   x71,W
02AD0:  RCALL  23DA
....................                      putc(TxD_Buff[4]) ;
02AD2:  MOVF   x72,W
02AD4:  RCALL  23DA
....................                      putc(TxD_Buff[5]) ;
02AD6:  MOVF   x73,W
02AD8:  RCALL  23DA
....................                   
....................                      restart_wdt();
02ADA:  CLRWDT
....................                      delay_ms(3);
02ADC:  MOVLW  03
02ADE:  MOVLB  B
02AE0:  MOVWF  x54
02AE2:  MOVLB  0
02AE4:  CALL   07DC
....................                      restart_wdt();
02AE8:  CLRWDT
....................                      output_bit(P485ctrl,0);
02AEA:  BCF    F8A.3
02AEC:  BCF    F93.3
....................                  
....................                   }
02AEE:  BRA    2CB6
02AF0:  MOVLB  5
....................                   else if(Data_ByteCount == 0x02)
02AF2:  MOVF   x76,W
02AF4:  SUBLW  02
02AF6:  BTFSS  FD8.2
02AF8:  BRA    2CB8
....................                   {
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
02AFA:  MOVFF  4A,577
02AFE:  MOVF   x72,W
02B00:  MOVWF  01
02B02:  BZ    2B0C
02B04:  BCF    FD8.0
02B06:  RRCF   x77,F
02B08:  DECFSZ 01,F
02B0A:  BRA    2B04
....................                      Data_Buff[1] = Input9_10 ;// >> Start_Address ;
02B0C:  MOVFF  4B,578
....................    
....................    
....................                      if((No_PointCount - 0x07) == 0x08)
02B10:  MOVLW  07
02B12:  SUBWF  x74,W
02B14:  MOVLB  B
02B16:  MOVWF  x54
02B18:  MOVLW  00
02B1A:  MOVLB  5
02B1C:  SUBWFB x75,W
02B1E:  MOVLB  B
02B20:  MOVWF  x55
02B22:  MOVF   x54,W
02B24:  SUBLW  08
02B26:  BNZ   2B2E
02B28:  MOVF   x55,F
02B2A:  BNZ   2B2E
....................                      {
....................                         Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                      }
02B2C:  BRA    2C34
....................                      else if((No_PointCount - 0x07) == 0x07)
02B2E:  MOVLW  07
02B30:  MOVLB  5
02B32:  SUBWF  x74,W
02B34:  MOVLB  B
02B36:  MOVWF  x54
02B38:  MOVLW  00
02B3A:  MOVLB  5
02B3C:  SUBWFB x75,W
02B3E:  MOVLB  B
02B40:  MOVWF  x55
02B42:  MOVF   x54,W
02B44:  SUBLW  07
02B46:  BNZ   2B52
02B48:  MOVF   x55,F
02B4A:  BNZ   2B52
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
02B4C:  MOVLB  5
02B4E:  BCF    x78.7
....................                      }
02B50:  BRA    2C32
....................                      else if((No_PointCount - 0x07) == 0x06)
02B52:  MOVLW  07
02B54:  MOVLB  5
02B56:  SUBWF  x74,W
02B58:  MOVLB  B
02B5A:  MOVWF  x54
02B5C:  MOVLW  00
02B5E:  MOVLB  5
02B60:  SUBWFB x75,W
02B62:  MOVLB  B
02B64:  MOVWF  x55
02B66:  MOVF   x54,W
02B68:  SUBLW  06
02B6A:  BNZ   2B78
02B6C:  MOVF   x55,F
02B6E:  BNZ   2B78
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
02B70:  MOVLW  3F
02B72:  MOVLB  5
02B74:  ANDWF  x78,F
....................                      }
02B76:  BRA    2C32
....................                      else if((No_PointCount - 0x07) == 0x05)
02B78:  MOVLW  07
02B7A:  MOVLB  5
02B7C:  SUBWF  x74,W
02B7E:  MOVLB  B
02B80:  MOVWF  x54
02B82:  MOVLW  00
02B84:  MOVLB  5
02B86:  SUBWFB x75,W
02B88:  MOVLB  B
02B8A:  MOVWF  x55
02B8C:  MOVF   x54,W
02B8E:  SUBLW  05
02B90:  BNZ   2B9E
02B92:  MOVF   x55,F
02B94:  BNZ   2B9E
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
02B96:  MOVLW  1F
02B98:  MOVLB  5
02B9A:  ANDWF  x78,F
....................                      }
02B9C:  BRA    2C32
....................                      else if((No_PointCount - 0x07) == 0x04)
02B9E:  MOVLW  07
02BA0:  MOVLB  5
02BA2:  SUBWF  x74,W
02BA4:  MOVLB  B
02BA6:  MOVWF  x54
02BA8:  MOVLW  00
02BAA:  MOVLB  5
02BAC:  SUBWFB x75,W
02BAE:  MOVLB  B
02BB0:  MOVWF  x55
02BB2:  MOVF   x54,W
02BB4:  SUBLW  04
02BB6:  BNZ   2BC4
02BB8:  MOVF   x55,F
02BBA:  BNZ   2BC4
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
02BBC:  MOVLW  0F
02BBE:  MOVLB  5
02BC0:  ANDWF  x78,F
....................                      }
02BC2:  BRA    2C32
....................                      else if((No_PointCount - 0x07) == 0x03)
02BC4:  MOVLW  07
02BC6:  MOVLB  5
02BC8:  SUBWF  x74,W
02BCA:  MOVLB  B
02BCC:  MOVWF  x54
02BCE:  MOVLW  00
02BD0:  MOVLB  5
02BD2:  SUBWFB x75,W
02BD4:  MOVLB  B
02BD6:  MOVWF  x55
02BD8:  MOVF   x54,W
02BDA:  SUBLW  03
02BDC:  BNZ   2BEA
02BDE:  MOVF   x55,F
02BE0:  BNZ   2BEA
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
02BE2:  MOVLW  07
02BE4:  MOVLB  5
02BE6:  ANDWF  x78,F
....................                      }
02BE8:  BRA    2C32
....................                      else if((No_PointCount - 0x07) == 0x02)
02BEA:  MOVLW  07
02BEC:  MOVLB  5
02BEE:  SUBWF  x74,W
02BF0:  MOVLB  B
02BF2:  MOVWF  x54
02BF4:  MOVLW  00
02BF6:  MOVLB  5
02BF8:  SUBWFB x75,W
02BFA:  MOVLB  B
02BFC:  MOVWF  x55
02BFE:  MOVF   x54,W
02C00:  SUBLW  02
02C02:  BNZ   2C10
02C04:  MOVF   x55,F
02C06:  BNZ   2C10
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
02C08:  MOVLW  03
02C0A:  MOVLB  5
02C0C:  ANDWF  x78,F
....................                      }
02C0E:  BRA    2C32
....................                      else if((No_PointCount - 0x07) == 0x01)
02C10:  MOVLW  07
02C12:  MOVLB  5
02C14:  SUBWF  x74,W
02C16:  MOVLB  B
02C18:  MOVWF  x54
02C1A:  MOVLW  00
02C1C:  MOVLB  5
02C1E:  SUBWFB x75,W
02C20:  MOVLB  B
02C22:  MOVWF  x55
02C24:  DECFSZ x54,W
02C26:  BRA    2C34
02C28:  MOVF   x55,F
02C2A:  BNZ   2C34
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
02C2C:  MOVLW  01
02C2E:  MOVLB  5
02C30:  ANDWF  x78,F
02C32:  MOVLB  B
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
02C34:  MOVFF  6C,6E
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
02C38:  MOVLW  01
02C3A:  MOVLB  0
02C3C:  MOVWF  x6F
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02C3E:  MOVFF  576,70
....................                      TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02C42:  MOVFF  577,71
....................                      TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02C46:  MOVFF  578,72
....................    
....................                      CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02C4A:  MOVLB  B
02C4C:  CLRF   x56
02C4E:  MOVLW  6E
02C50:  MOVWF  x55
02C52:  MOVLW  05
02C54:  MOVWF  x57
02C56:  MOVLB  0
02C58:  CALL   2384
....................    
....................                      TxD_Buff[5] = CRC_Hi ;
02C5C:  MOVFF  56F,73
....................                      TxD_Buff[6] = CRC_Lo ;
02C60:  MOVFF  56E,74
.................... 
....................                      output_bit(P485ctrl,1);
02C64:  BSF    F8A.3
02C66:  BCF    F93.3
....................                      restart_wdt();
02C68:  CLRWDT
....................                      delay_ms(4);
02C6A:  MOVLW  04
02C6C:  MOVLB  B
02C6E:  MOVWF  x54
02C70:  MOVLB  0
02C72:  CALL   07DC
....................                      restart_wdt();
02C76:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
02C78:  MOVF   x6E,W
02C7A:  CALL   23DA
....................                      putc(TxD_Buff[1]) ;               //Function Code
02C7E:  MOVF   x6F,W
02C80:  CALL   23DA
....................                      putc(TxD_Buff[2]) ;               //Byte Count
02C84:  MOVF   x70,W
02C86:  CALL   23DA
....................                      putc(TxD_Buff[3]) ;
02C8A:  MOVF   x71,W
02C8C:  CALL   23DA
....................                      putc(TxD_Buff[4]) ;
02C90:  MOVF   x72,W
02C92:  CALL   23DA
....................                      putc(TxD_Buff[5]) ;
02C96:  MOVF   x73,W
02C98:  CALL   23DA
....................                      putc(TxD_Buff[6]) ;
02C9C:  MOVF   x74,W
02C9E:  CALL   23DA
....................    
....................                      restart_wdt();
02CA2:  CLRWDT
....................                      delay_ms(3);
02CA4:  MOVLW  03
02CA6:  MOVLB  B
02CA8:  MOVWF  x54
02CAA:  MOVLB  0
02CAC:  CALL   07DC
....................                      restart_wdt();
02CB0:  CLRWDT
....................                      output_bit(P485ctrl,0);
02CB2:  BCF    F8A.3
02CB4:  BCF    F93.3
02CB6:  MOVLB  5
....................                  
....................                   }
....................                }
02CB8:  BRA    2D2A
....................                else
....................                {
....................                   //invalid parameter
....................                   TxD_Buff[0] = Address ;         //Address
02CBA:  MOVFF  6C,6E
....................                   TxD_Buff[1] = 0x81 ;         //Function Code
02CBE:  MOVLW  81
02CC0:  MOVLB  0
02CC2:  MOVWF  x6F
....................                   TxD_Buff[2] = 0x02 ;         //illegal data address
02CC4:  MOVLW  02
02CC6:  MOVWF  x70
....................    
....................                   CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02CC8:  MOVLB  B
02CCA:  CLRF   x56
02CCC:  MOVLW  6E
02CCE:  MOVWF  x55
02CD0:  MOVLW  03
02CD2:  MOVWF  x57
02CD4:  MOVLB  0
02CD6:  CALL   2384
....................    
....................                   TxD_Buff[3] = CRC_Hi ;
02CDA:  MOVFF  56F,71
....................                   TxD_Buff[4] = CRC_Lo ;
02CDE:  MOVFF  56E,72
.................... 
....................                   output_bit(P485ctrl,1);
02CE2:  BSF    F8A.3
02CE4:  BCF    F93.3
....................                   restart_wdt();
02CE6:  CLRWDT
....................                   delay_ms(4);
02CE8:  MOVLW  04
02CEA:  MOVLB  B
02CEC:  MOVWF  x54
02CEE:  MOVLB  0
02CF0:  CALL   07DC
....................                   restart_wdt();
02CF4:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
02CF6:  MOVF   x6E,W
02CF8:  CALL   23DA
....................                   putc(TxD_Buff[1]) ;               //Function Code
02CFC:  MOVF   x6F,W
02CFE:  CALL   23DA
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02D02:  MOVF   x70,W
02D04:  CALL   23DA
....................                   putc(TxD_Buff[3]) ;
02D08:  MOVF   x71,W
02D0A:  CALL   23DA
....................                   putc(TxD_Buff[4]) ;
02D0E:  MOVF   x72,W
02D10:  CALL   23DA
....................    
....................                   restart_wdt();
02D14:  CLRWDT
....................                   delay_ms(3);
02D16:  MOVLW  03
02D18:  MOVLB  B
02D1A:  MOVWF  x54
02D1C:  MOVLB  0
02D1E:  CALL   07DC
....................                   restart_wdt();
02D22:  CLRWDT
....................                   output_bit(P485ctrl,0);
02D24:  BCF    F8A.3
02D26:  BCF    F93.3
02D28:  MOVLB  5
02D2A:  MOVLB  1
....................                   
....................                }
....................             }
.................... 
.................... 
....................               /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02D2C:  MOVF   x6F,W
02D2E:  SUBLW  07
02D30:  BTFSS  FD8.2
02D32:  BRA    2E96
....................       {
....................          alarmtosend();
02D34:  MOVLB  0
02D36:  GOTO   23E2
....................          
....................          disable_interrupts(INT_TIMER2);
02D3A:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02D3C:  MOVFF  1E,577
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02D40:  MOVFF  1F,578
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02D44:  MOVFF  20,579
....................             Data_Buff[3] = Input25_32_Send ;
02D48:  MOVFF  21,57A
....................             Data_Buff[4] = Input33_40_Send ;
02D4C:  MOVFF  22,57B
....................             Data_Buff[5] = Input41_48_Send ;
02D50:  MOVFF  23,57C
....................             Data_Buff[6] = Input49_56_Send ;
02D54:  MOVFF  24,57D
....................             Data_Buff[7] = Input57_64_Send ;
02D58:  MOVFF  25,57E
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02D5C:  MOVFF  26,57F
....................             Data_Buff[9] = Ack9_16_Send ;
02D60:  MOVFF  27,580
....................             Data_Buff[10] = Ack17_24_Send ;
02D64:  MOVFF  28,581
....................             Data_Buff[11] = Ack25_32_Send ;
02D68:  MOVFF  29,582
....................             Data_Buff[12] = Ack33_40_Send ;
02D6C:  MOVFF  2A,583
....................             Data_Buff[13] = Ack41_48_Send ;
02D70:  MOVFF  2B,584
....................             Data_Buff[14] = Ack49_56_Send ;
02D74:  MOVFF  2C,585
....................             Data_Buff[15] = Ack57_64_Send ;
02D78:  MOVFF  2D,586
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02D7C:  MOVFF  6C,6E
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02D80:  MOVLW  07
02D82:  MOVWF  x6F
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02D84:  MOVLW  10
02D86:  MOVLB  5
02D88:  MOVWF  x76
02D8A:  MOVFF  576,70
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02D8E:  MOVFF  577,71
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02D92:  MOVFF  578,72
....................             TxD_Buff[5] = Data_Buff[2] ;  
02D96:  MOVFF  579,73
....................             TxD_Buff[6] = Data_Buff[3] ;
02D9A:  MOVFF  57A,74
....................             TxD_Buff[7] = Data_Buff[4] ;
02D9E:  MOVFF  57B,75
....................             TxD_Buff[8] = Data_Buff[5] ;
02DA2:  MOVFF  57C,76
....................             TxD_Buff[9] = Data_Buff[6] ;
02DA6:  MOVFF  57D,77
....................             TxD_Buff[10] = Data_Buff[7] ;
02DAA:  MOVFF  57E,78
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02DAE:  MOVFF  57F,79
....................            TxD_Buff[12] = Data_Buff[9] ;
02DB2:  MOVFF  580,7A
....................            TxD_Buff[13] = Data_Buff[10] ;
02DB6:  MOVFF  581,7B
....................            TxD_Buff[14] = Data_Buff[11] ;
02DBA:  MOVFF  582,7C
....................            TxD_Buff[15] = Data_Buff[12] ;
02DBE:  MOVFF  583,7D
....................            TxD_Buff[16] = Data_Buff[13] ;
02DC2:  MOVFF  584,7E
....................            TxD_Buff[17] = Data_Buff[14] ;
02DC6:  MOVFF  585,7F
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02DCA:  MOVFF  586,80
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02DCE:  MOVLB  B
02DD0:  CLRF   x56
02DD2:  MOVLW  6E
02DD4:  MOVWF  x55
02DD6:  MOVLW  13
02DD8:  MOVWF  x57
02DDA:  MOVLB  0
02DDC:  CALL   2384
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
02DE0:  MOVFF  56F,81
....................           TxD_Buff[20] = CRC_Lo ;
02DE4:  MOVFF  56E,82
.................... 
....................         
....................          output_bit(P485ctrl,1);
02DE8:  BSF    F8A.3
02DEA:  BCF    F93.3
....................          restart_wdt();
02DEC:  CLRWDT
....................          delay_ms(4);
02DEE:  MOVLW  04
02DF0:  MOVLB  B
02DF2:  MOVWF  x54
02DF4:  MOVLB  0
02DF6:  CALL   07DC
....................          restart_wdt();
02DFA:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
02DFC:  MOVF   x6E,W
02DFE:  CALL   23DA
....................          putc(TxD_Buff[1]) ;               //Function Code
02E02:  MOVF   x6F,W
02E04:  CALL   23DA
....................          putc(TxD_Buff[2]) ;               //Byte Count
02E08:  MOVF   x70,W
02E0A:  CALL   23DA
....................          putc(TxD_Buff[3]) ;
02E0E:  MOVF   x71,W
02E10:  CALL   23DA
....................          putc(TxD_Buff[4]) ;
02E14:  MOVF   x72,W
02E16:  CALL   23DA
....................          putc(TxD_Buff[5]) ;
02E1A:  MOVF   x73,W
02E1C:  CALL   23DA
....................          putc(TxD_Buff[6]) ;
02E20:  MOVF   x74,W
02E22:  CALL   23DA
....................          putc(TxD_Buff[7]) ;
02E26:  MOVF   x75,W
02E28:  CALL   23DA
....................          putc(TxD_Buff[8]) ;
02E2C:  MOVF   x76,W
02E2E:  CALL   23DA
....................          putc(TxD_Buff[9]) ;
02E32:  MOVF   x77,W
02E34:  CALL   23DA
....................          putc(TxD_Buff[10]) ;
02E38:  MOVF   x78,W
02E3A:  CALL   23DA
....................          putc(TxD_Buff[11]) ;
02E3E:  MOVF   x79,W
02E40:  CALL   23DA
....................          putc(TxD_Buff[12]) ;
02E44:  MOVF   x7A,W
02E46:  CALL   23DA
....................          putc(TxD_Buff[13]) ;
02E4A:  MOVF   x7B,W
02E4C:  CALL   23DA
....................          putc(TxD_Buff[14]) ;
02E50:  MOVF   x7C,W
02E52:  CALL   23DA
....................          putc(TxD_Buff[15]) ;
02E56:  MOVF   x7D,W
02E58:  CALL   23DA
....................          putc(TxD_Buff[16]) ;
02E5C:  MOVF   x7E,W
02E5E:  CALL   23DA
....................          putc(TxD_Buff[17]) ;
02E62:  MOVF   x7F,W
02E64:  CALL   23DA
....................          putc(TxD_Buff[18]) ;
02E68:  MOVF   x80,W
02E6A:  CALL   23DA
....................          putc(TxD_Buff[19]) ;
02E6E:  MOVF   x81,W
02E70:  CALL   23DA
....................          putc(TxD_Buff[20]) ;
02E74:  MOVF   x82,W
02E76:  CALL   23DA
.................... 
....................          restart_wdt();
02E7A:  CLRWDT
....................          delay_ms(3);
02E7C:  MOVLW  03
02E7E:  MOVLB  B
02E80:  MOVWF  x54
02E82:  MOVLB  0
02E84:  CALL   07DC
....................          restart_wdt();
02E88:  CLRWDT
....................          output_bit(P485ctrl,0);
02E8A:  BCF    F8A.3
02E8C:  BCF    F93.3
....................            
....................         
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
02E8E:  BSF    F9D.1
....................      
....................        }
02E90:  GOTO   4328
02E94:  MOVLB  1
....................      
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
02E96:  MOVF   x6F,W
02E98:  SUBLW  21
02E9A:  BTFSS  FD8.2
02E9C:  GOTO   3804
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
02EA0:  MOVF   FF2,W
02EA2:  MOVWF  00
02EA4:  BCF    FF2.7
02EA6:  CLRF   FAA
02EA8:  CLRF   FA9
02EAA:  MOVLW  0F
02EAC:  MOVWF  FA8
02EAE:  BCF    FA6.6
02EB0:  BCF    FA6.7
02EB2:  BSF    FA6.2
02EB4:  MOVLB  F
02EB6:  MOVLW  55
02EB8:  MOVWF  FA7
02EBA:  MOVLW  AA
02EBC:  MOVWF  FA7
02EBE:  BSF    FA6.1
02EC0:  BTFSC  FA6.1
02EC2:  BRA    2EC0
02EC4:  BCF    FA6.2
02EC6:  MOVF   00,W
02EC8:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Input Type
02ECA:  MOVFF  FF2,00
02ECE:  BCF    FF2.7
02ED0:  CLRF   FAA
02ED2:  MOVLW  01
02ED4:  MOVWF  FA9
02ED6:  MOVFF  171,FA8
02EDA:  BCF    FA6.6
02EDC:  BCF    FA6.7
02EDE:  BSF    FA6.2
02EE0:  MOVLW  55
02EE2:  MOVWF  FA7
02EE4:  MOVLW  AA
02EE6:  MOVWF  FA7
02EE8:  BSF    FA6.1
02EEA:  BTFSC  FA6.1
02EEC:  BRA    2EEA
02EEE:  BCF    FA6.2
02EF0:  MOVF   00,W
02EF2:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
02EF4:  MOVFF  FF2,00
02EF8:  BCF    FF2.7
02EFA:  CLRF   FAA
02EFC:  MOVLW  02
02EFE:  MOVWF  FA9
02F00:  MOVFF  172,FA8
02F04:  BCF    FA6.6
02F06:  BCF    FA6.7
02F08:  BSF    FA6.2
02F0A:  MOVLW  55
02F0C:  MOVWF  FA7
02F0E:  MOVLW  AA
02F10:  MOVWF  FA7
02F12:  BSF    FA6.1
02F14:  BTFSC  FA6.1
02F16:  BRA    2F14
02F18:  BCF    FA6.2
02F1A:  MOVF   00,W
02F1C:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
02F1E:  MOVFF  FF2,00
02F22:  BCF    FF2.7
02F24:  CLRF   FAA
02F26:  MOVLW  03
02F28:  MOVWF  FA9
02F2A:  MOVFF  173,FA8
02F2E:  BCF    FA6.6
02F30:  BCF    FA6.7
02F32:  BSF    FA6.2
02F34:  MOVLW  55
02F36:  MOVWF  FA7
02F38:  MOVLW  AA
02F3A:  MOVWF  FA7
02F3C:  BSF    FA6.1
02F3E:  BTFSC  FA6.1
02F40:  BRA    2F3E
02F42:  BCF    FA6.2
02F44:  MOVF   00,W
02F46:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
02F48:  MOVFF  FF2,00
02F4C:  BCF    FF2.7
02F4E:  CLRF   FAA
02F50:  MOVLW  04
02F52:  MOVWF  FA9
02F54:  MOVFF  174,FA8
02F58:  BCF    FA6.6
02F5A:  BCF    FA6.7
02F5C:  BSF    FA6.2
02F5E:  MOVLW  55
02F60:  MOVWF  FA7
02F62:  MOVLW  AA
02F64:  MOVWF  FA7
02F66:  BSF    FA6.1
02F68:  BTFSC  FA6.1
02F6A:  BRA    2F68
02F6C:  BCF    FA6.2
02F6E:  MOVF   00,W
02F70:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
02F72:  MOVFF  FF2,00
02F76:  BCF    FF2.7
02F78:  CLRF   FAA
02F7A:  MOVLW  05
02F7C:  MOVWF  FA9
02F7E:  MOVFF  175,FA8
02F82:  BCF    FA6.6
02F84:  BCF    FA6.7
02F86:  BSF    FA6.2
02F88:  MOVLW  55
02F8A:  MOVWF  FA7
02F8C:  MOVLW  AA
02F8E:  MOVWF  FA7
02F90:  BSF    FA6.1
02F92:  BTFSC  FA6.1
02F94:  BRA    2F92
02F96:  BCF    FA6.2
02F98:  MOVF   00,W
02F9A:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
02F9C:  MOVFF  FF2,00
02FA0:  BCF    FF2.7
02FA2:  CLRF   FAA
02FA4:  MOVLW  06
02FA6:  MOVWF  FA9
02FA8:  MOVFF  176,FA8
02FAC:  BCF    FA6.6
02FAE:  BCF    FA6.7
02FB0:  BSF    FA6.2
02FB2:  MOVLW  55
02FB4:  MOVWF  FA7
02FB6:  MOVLW  AA
02FB8:  MOVWF  FA7
02FBA:  BSF    FA6.1
02FBC:  BTFSC  FA6.1
02FBE:  BRA    2FBC
02FC0:  BCF    FA6.2
02FC2:  MOVF   00,W
02FC4:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
02FC6:  MOVFF  FF2,00
02FCA:  BCF    FF2.7
02FCC:  CLRF   FAA
02FCE:  MOVLW  07
02FD0:  MOVWF  FA9
02FD2:  MOVFF  177,FA8
02FD6:  BCF    FA6.6
02FD8:  BCF    FA6.7
02FDA:  BSF    FA6.2
02FDC:  MOVLW  55
02FDE:  MOVWF  FA7
02FE0:  MOVLW  AA
02FE2:  MOVWF  FA7
02FE4:  BSF    FA6.1
02FE6:  BTFSC  FA6.1
02FE8:  BRA    2FE6
02FEA:  BCF    FA6.2
02FEC:  MOVF   00,W
02FEE:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
02FF0:  MOVFF  FF2,00
02FF4:  BCF    FF2.7
02FF6:  CLRF   FAA
02FF8:  MOVLW  08
02FFA:  MOVWF  FA9
02FFC:  MOVFF  178,FA8
03000:  BCF    FA6.6
03002:  BCF    FA6.7
03004:  BSF    FA6.2
03006:  MOVLW  55
03008:  MOVWF  FA7
0300A:  MOVLW  AA
0300C:  MOVWF  FA7
0300E:  BSF    FA6.1
03010:  BTFSC  FA6.1
03012:  BRA    3010
03014:  BCF    FA6.2
03016:  MOVF   00,W
03018:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
0301A:  MOVFF  FF2,00
0301E:  BCF    FF2.7
03020:  CLRF   FAA
03022:  MOVLW  09
03024:  MOVWF  FA9
03026:  MOVFF  179,FA8
0302A:  BCF    FA6.6
0302C:  BCF    FA6.7
0302E:  BSF    FA6.2
03030:  MOVLW  55
03032:  MOVWF  FA7
03034:  MOVLW  AA
03036:  MOVWF  FA7
03038:  BSF    FA6.1
0303A:  BTFSC  FA6.1
0303C:  BRA    303A
0303E:  BCF    FA6.2
03040:  MOVF   00,W
03042:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
03044:  MOVFF  FF2,00
03048:  BCF    FF2.7
0304A:  CLRF   FAA
0304C:  MOVLW  0A
0304E:  MOVWF  FA9
03050:  MOVFF  17A,FA8
03054:  BCF    FA6.6
03056:  BCF    FA6.7
03058:  BSF    FA6.2
0305A:  MOVLW  55
0305C:  MOVWF  FA7
0305E:  MOVLW  AA
03060:  MOVWF  FA7
03062:  BSF    FA6.1
03064:  BTFSC  FA6.1
03066:  BRA    3064
03068:  BCF    FA6.2
0306A:  MOVF   00,W
0306C:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
0306E:  MOVFF  FF2,00
03072:  BCF    FF2.7
03074:  CLRF   FAA
03076:  MOVLW  0B
03078:  MOVWF  FA9
0307A:  MOVFF  17B,FA8
0307E:  BCF    FA6.6
03080:  BCF    FA6.7
03082:  BSF    FA6.2
03084:  MOVLW  55
03086:  MOVWF  FA7
03088:  MOVLW  AA
0308A:  MOVWF  FA7
0308C:  BSF    FA6.1
0308E:  BTFSC  FA6.1
03090:  BRA    308E
03092:  BCF    FA6.2
03094:  MOVF   00,W
03096:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
03098:  MOVFF  FF2,00
0309C:  BCF    FF2.7
0309E:  CLRF   FAA
030A0:  MOVLW  0C
030A2:  MOVWF  FA9
030A4:  MOVFF  17C,FA8
030A8:  BCF    FA6.6
030AA:  BCF    FA6.7
030AC:  BSF    FA6.2
030AE:  MOVLW  55
030B0:  MOVWF  FA7
030B2:  MOVLW  AA
030B4:  MOVWF  FA7
030B6:  BSF    FA6.1
030B8:  BTFSC  FA6.1
030BA:  BRA    30B8
030BC:  BCF    FA6.2
030BE:  MOVF   00,W
030C0:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
030C2:  MOVFF  FF2,00
030C6:  BCF    FF2.7
030C8:  CLRF   FAA
030CA:  MOVLW  0D
030CC:  MOVWF  FA9
030CE:  MOVFF  17D,FA8
030D2:  BCF    FA6.6
030D4:  BCF    FA6.7
030D6:  BSF    FA6.2
030D8:  MOVLW  55
030DA:  MOVWF  FA7
030DC:  MOVLW  AA
030DE:  MOVWF  FA7
030E0:  BSF    FA6.1
030E2:  BTFSC  FA6.1
030E4:  BRA    30E2
030E6:  BCF    FA6.2
030E8:  MOVF   00,W
030EA:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
030EC:  MOVFF  FF2,00
030F0:  BCF    FF2.7
030F2:  CLRF   FAA
030F4:  MOVLW  0E
030F6:  MOVWF  FA9
030F8:  MOVFF  17E,FA8
030FC:  BCF    FA6.6
030FE:  BCF    FA6.7
03100:  BSF    FA6.2
03102:  MOVLW  55
03104:  MOVWF  FA7
03106:  MOVLW  AA
03108:  MOVWF  FA7
0310A:  BSF    FA6.1
0310C:  BTFSC  FA6.1
0310E:  BRA    310C
03110:  BCF    FA6.2
03112:  MOVF   00,W
03114:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
03116:  MOVFF  FF2,00
0311A:  BCF    FF2.7
0311C:  CLRF   FAA
0311E:  MOVLW  0F
03120:  MOVWF  FA9
03122:  MOVFF  17F,FA8
03126:  BCF    FA6.6
03128:  BCF    FA6.7
0312A:  BSF    FA6.2
0312C:  MOVLW  55
0312E:  MOVWF  FA7
03130:  MOVLW  AA
03132:  MOVWF  FA7
03134:  BSF    FA6.1
03136:  BTFSC  FA6.1
03138:  BRA    3136
0313A:  BCF    FA6.2
0313C:  MOVF   00,W
0313E:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
03140:  MOVFF  FF2,00
03144:  BCF    FF2.7
03146:  CLRF   FAA
03148:  MOVLW  10
0314A:  MOVWF  FA9
0314C:  MOVFF  180,FA8
03150:  BCF    FA6.6
03152:  BCF    FA6.7
03154:  BSF    FA6.2
03156:  MOVLW  55
03158:  MOVWF  FA7
0315A:  MOVLW  AA
0315C:  MOVWF  FA7
0315E:  BSF    FA6.1
03160:  BTFSC  FA6.1
03162:  BRA    3160
03164:  BCF    FA6.2
03166:  MOVF   00,W
03168:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
0316A:  MOVFF  FF2,00
0316E:  BCF    FF2.7
03170:  CLRF   FAA
03172:  MOVLW  11
03174:  MOVWF  FA9
03176:  MOVFF  181,FA8
0317A:  BCF    FA6.6
0317C:  BCF    FA6.7
0317E:  BSF    FA6.2
03180:  MOVLW  55
03182:  MOVWF  FA7
03184:  MOVLW  AA
03186:  MOVWF  FA7
03188:  BSF    FA6.1
0318A:  BTFSC  FA6.1
0318C:  BRA    318A
0318E:  BCF    FA6.2
03190:  MOVF   00,W
03192:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
03194:  MOVFF  FF2,00
03198:  BCF    FF2.7
0319A:  CLRF   FAA
0319C:  MOVLW  12
0319E:  MOVWF  FA9
031A0:  MOVFF  182,FA8
031A4:  BCF    FA6.6
031A6:  BCF    FA6.7
031A8:  BSF    FA6.2
031AA:  MOVLW  55
031AC:  MOVWF  FA7
031AE:  MOVLW  AA
031B0:  MOVWF  FA7
031B2:  BSF    FA6.1
031B4:  BTFSC  FA6.1
031B6:  BRA    31B4
031B8:  BCF    FA6.2
031BA:  MOVF   00,W
031BC:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
031BE:  MOVFF  FF2,00
031C2:  BCF    FF2.7
031C4:  CLRF   FAA
031C6:  MOVLW  13
031C8:  MOVWF  FA9
031CA:  MOVFF  183,FA8
031CE:  BCF    FA6.6
031D0:  BCF    FA6.7
031D2:  BSF    FA6.2
031D4:  MOVLW  55
031D6:  MOVWF  FA7
031D8:  MOVLW  AA
031DA:  MOVWF  FA7
031DC:  BSF    FA6.1
031DE:  BTFSC  FA6.1
031E0:  BRA    31DE
031E2:  BCF    FA6.2
031E4:  MOVF   00,W
031E6:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
031E8:  MOVFF  FF2,00
031EC:  BCF    FF2.7
031EE:  CLRF   FAA
031F0:  MOVLW  14
031F2:  MOVWF  FA9
031F4:  MOVFF  184,FA8
031F8:  BCF    FA6.6
031FA:  BCF    FA6.7
031FC:  BSF    FA6.2
031FE:  MOVLW  55
03200:  MOVWF  FA7
03202:  MOVLW  AA
03204:  MOVWF  FA7
03206:  BSF    FA6.1
03208:  BTFSC  FA6.1
0320A:  BRA    3208
0320C:  BCF    FA6.2
0320E:  MOVF   00,W
03210:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
03212:  MOVFF  FF2,00
03216:  BCF    FF2.7
03218:  CLRF   FAA
0321A:  MOVLW  15
0321C:  MOVWF  FA9
0321E:  MOVFF  185,FA8
03222:  BCF    FA6.6
03224:  BCF    FA6.7
03226:  BSF    FA6.2
03228:  MOVLW  55
0322A:  MOVWF  FA7
0322C:  MOVLW  AA
0322E:  MOVWF  FA7
03230:  BSF    FA6.1
03232:  BTFSC  FA6.1
03234:  BRA    3232
03236:  BCF    FA6.2
03238:  MOVF   00,W
0323A:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
0323C:  MOVFF  FF2,00
03240:  BCF    FF2.7
03242:  CLRF   FAA
03244:  MOVLW  16
03246:  MOVWF  FA9
03248:  MOVFF  186,FA8
0324C:  BCF    FA6.6
0324E:  BCF    FA6.7
03250:  BSF    FA6.2
03252:  MOVLW  55
03254:  MOVWF  FA7
03256:  MOVLW  AA
03258:  MOVWF  FA7
0325A:  BSF    FA6.1
0325C:  BTFSC  FA6.1
0325E:  BRA    325C
03260:  BCF    FA6.2
03262:  MOVF   00,W
03264:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
03266:  MOVFF  FF2,00
0326A:  BCF    FF2.7
0326C:  CLRF   FAA
0326E:  MOVLW  17
03270:  MOVWF  FA9
03272:  MOVFF  187,FA8
03276:  BCF    FA6.6
03278:  BCF    FA6.7
0327A:  BSF    FA6.2
0327C:  MOVLW  55
0327E:  MOVWF  FA7
03280:  MOVLW  AA
03282:  MOVWF  FA7
03284:  BSF    FA6.1
03286:  BTFSC  FA6.1
03288:  BRA    3286
0328A:  BCF    FA6.2
0328C:  MOVF   00,W
0328E:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
03290:  MOVFF  FF2,00
03294:  BCF    FF2.7
03296:  CLRF   FAA
03298:  MOVLW  18
0329A:  MOVWF  FA9
0329C:  MOVFF  188,FA8
032A0:  BCF    FA6.6
032A2:  BCF    FA6.7
032A4:  BSF    FA6.2
032A6:  MOVLW  55
032A8:  MOVWF  FA7
032AA:  MOVLW  AA
032AC:  MOVWF  FA7
032AE:  BSF    FA6.1
032B0:  BTFSC  FA6.1
032B2:  BRA    32B0
032B4:  BCF    FA6.2
032B6:  MOVF   00,W
032B8:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
032BA:  MOVFF  FF2,00
032BE:  BCF    FF2.7
032C0:  CLRF   FAA
032C2:  MOVLW  19
032C4:  MOVWF  FA9
032C6:  MOVFF  189,FA8
032CA:  BCF    FA6.6
032CC:  BCF    FA6.7
032CE:  BSF    FA6.2
032D0:  MOVLW  55
032D2:  MOVWF  FA7
032D4:  MOVLW  AA
032D6:  MOVWF  FA7
032D8:  BSF    FA6.1
032DA:  BTFSC  FA6.1
032DC:  BRA    32DA
032DE:  BCF    FA6.2
032E0:  MOVF   00,W
032E2:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
032E4:  MOVFF  FF2,00
032E8:  BCF    FF2.7
032EA:  CLRF   FAA
032EC:  MOVLW  1A
032EE:  MOVWF  FA9
032F0:  MOVFF  18A,FA8
032F4:  BCF    FA6.6
032F6:  BCF    FA6.7
032F8:  BSF    FA6.2
032FA:  MOVLW  55
032FC:  MOVWF  FA7
032FE:  MOVLW  AA
03300:  MOVWF  FA7
03302:  BSF    FA6.1
03304:  BTFSC  FA6.1
03306:  BRA    3304
03308:  BCF    FA6.2
0330A:  MOVF   00,W
0330C:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
0330E:  MOVFF  FF2,00
03312:  BCF    FF2.7
03314:  CLRF   FAA
03316:  MOVLW  1B
03318:  MOVWF  FA9
0331A:  MOVFF  18B,FA8
0331E:  BCF    FA6.6
03320:  BCF    FA6.7
03322:  BSF    FA6.2
03324:  MOVLW  55
03326:  MOVWF  FA7
03328:  MOVLW  AA
0332A:  MOVWF  FA7
0332C:  BSF    FA6.1
0332E:  BTFSC  FA6.1
03330:  BRA    332E
03332:  BCF    FA6.2
03334:  MOVF   00,W
03336:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //FaultDelayTime
03338:  MOVFF  FF2,00
0333C:  BCF    FF2.7
0333E:  CLRF   FAA
03340:  MOVLW  1C
03342:  MOVWF  FA9
03344:  MOVFF  18C,FA8
03348:  BCF    FA6.6
0334A:  BCF    FA6.7
0334C:  BSF    FA6.2
0334E:  MOVLW  55
03350:  MOVWF  FA7
03352:  MOVLW  AA
03354:  MOVWF  FA7
03356:  BSF    FA6.1
03358:  BTFSC  FA6.1
0335A:  BRA    3358
0335C:  BCF    FA6.2
0335E:  MOVF   00,W
03360:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
03362:  MOVFF  FF2,00
03366:  BCF    FF2.7
03368:  CLRF   FAA
0336A:  MOVLW  1D
0336C:  MOVWF  FA9
0336E:  MOVFF  18D,FA8
03372:  BCF    FA6.6
03374:  BCF    FA6.7
03376:  BSF    FA6.2
03378:  MOVLW  55
0337A:  MOVWF  FA7
0337C:  MOVLW  AA
0337E:  MOVWF  FA7
03380:  BSF    FA6.1
03382:  BTFSC  FA6.1
03384:  BRA    3382
03386:  BCF    FA6.2
03388:  MOVF   00,W
0338A:  IORWF  FF2,F
....................    
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Fault Delay Time 1
0338C:  MOVFF  FF2,00
03390:  BCF    FF2.7
03392:  CLRF   FAA
03394:  MOVLW  1E
03396:  MOVWF  FA9
03398:  MOVFF  18E,FA8
0339C:  BCF    FA6.6
0339E:  BCF    FA6.7
033A0:  BSF    FA6.2
033A2:  MOVLW  55
033A4:  MOVWF  FA7
033A6:  MOVLW  AA
033A8:  MOVWF  FA7
033AA:  BSF    FA6.1
033AC:  BTFSC  FA6.1
033AE:  BRA    33AC
033B0:  BCF    FA6.2
033B2:  MOVF   00,W
033B4:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Fault Delay Time 2
033B6:  MOVFF  FF2,00
033BA:  BCF    FF2.7
033BC:  CLRF   FAA
033BE:  MOVLW  1F
033C0:  MOVWF  FA9
033C2:  MOVFF  18F,FA8
033C6:  BCF    FA6.6
033C8:  BCF    FA6.7
033CA:  BSF    FA6.2
033CC:  MOVLW  55
033CE:  MOVWF  FA7
033D0:  MOVLW  AA
033D2:  MOVWF  FA7
033D4:  BSF    FA6.1
033D6:  BTFSC  FA6.1
033D8:  BRA    33D6
033DA:  BCF    FA6.2
033DC:  MOVF   00,W
033DE:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Fault Delay Time 3
033E0:  MOVFF  FF2,00
033E4:  BCF    FF2.7
033E6:  CLRF   FAA
033E8:  MOVLW  20
033EA:  MOVWF  FA9
033EC:  MOVFF  190,FA8
033F0:  BCF    FA6.6
033F2:  BCF    FA6.7
033F4:  BSF    FA6.2
033F6:  MOVLW  55
033F8:  MOVWF  FA7
033FA:  MOVLW  AA
033FC:  MOVWF  FA7
033FE:  BSF    FA6.1
03400:  BTFSC  FA6.1
03402:  BRA    3400
03404:  BCF    FA6.2
03406:  MOVF   00,W
03408:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Fault Delay Time 4
0340A:  MOVFF  FF2,00
0340E:  BCF    FF2.7
03410:  CLRF   FAA
03412:  MOVLW  21
03414:  MOVWF  FA9
03416:  MOVFF  191,FA8
0341A:  BCF    FA6.6
0341C:  BCF    FA6.7
0341E:  BSF    FA6.2
03420:  MOVLW  55
03422:  MOVWF  FA7
03424:  MOVLW  AA
03426:  MOVWF  FA7
03428:  BSF    FA6.1
0342A:  BTFSC  FA6.1
0342C:  BRA    342A
0342E:  BCF    FA6.2
03430:  MOVF   00,W
03432:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Fault Delay Time 5
03434:  MOVFF  FF2,00
03438:  BCF    FF2.7
0343A:  CLRF   FAA
0343C:  MOVLW  22
0343E:  MOVWF  FA9
03440:  MOVFF  192,FA8
03444:  BCF    FA6.6
03446:  BCF    FA6.7
03448:  BSF    FA6.2
0344A:  MOVLW  55
0344C:  MOVWF  FA7
0344E:  MOVLW  AA
03450:  MOVWF  FA7
03452:  BSF    FA6.1
03454:  BTFSC  FA6.1
03456:  BRA    3454
03458:  BCF    FA6.2
0345A:  MOVF   00,W
0345C:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Fault Delay Time6
0345E:  MOVFF  FF2,00
03462:  BCF    FF2.7
03464:  CLRF   FAA
03466:  MOVLW  23
03468:  MOVWF  FA9
0346A:  MOVFF  193,FA8
0346E:  BCF    FA6.6
03470:  BCF    FA6.7
03472:  BSF    FA6.2
03474:  MOVLW  55
03476:  MOVWF  FA7
03478:  MOVLW  AA
0347A:  MOVWF  FA7
0347C:  BSF    FA6.1
0347E:  BTFSC  FA6.1
03480:  BRA    347E
03482:  BCF    FA6.2
03484:  MOVF   00,W
03486:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Fault Delay Time7
03488:  MOVFF  FF2,00
0348C:  BCF    FF2.7
0348E:  CLRF   FAA
03490:  MOVLW  24
03492:  MOVWF  FA9
03494:  MOVFF  194,FA8
03498:  BCF    FA6.6
0349A:  BCF    FA6.7
0349C:  BSF    FA6.2
0349E:  MOVLW  55
034A0:  MOVWF  FA7
034A2:  MOVLW  AA
034A4:  MOVWF  FA7
034A6:  BSF    FA6.1
034A8:  BTFSC  FA6.1
034AA:  BRA    34A8
034AC:  BCF    FA6.2
034AE:  MOVF   00,W
034B0:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Fault Delay Time8
034B2:  MOVFF  FF2,00
034B6:  BCF    FF2.7
034B8:  CLRF   FAA
034BA:  MOVLW  25
034BC:  MOVWF  FA9
034BE:  MOVFF  195,FA8
034C2:  BCF    FA6.6
034C4:  BCF    FA6.7
034C6:  BSF    FA6.2
034C8:  MOVLW  55
034CA:  MOVWF  FA7
034CC:  MOVLW  AA
034CE:  MOVWF  FA7
034D0:  BSF    FA6.1
034D2:  BTFSC  FA6.1
034D4:  BRA    34D2
034D6:  BCF    FA6.2
034D8:  MOVF   00,W
034DA:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Fault Delay Time9
034DC:  MOVFF  FF2,00
034E0:  BCF    FF2.7
034E2:  CLRF   FAA
034E4:  MOVLW  26
034E6:  MOVWF  FA9
034E8:  MOVFF  196,FA8
034EC:  BCF    FA6.6
034EE:  BCF    FA6.7
034F0:  BSF    FA6.2
034F2:  MOVLW  55
034F4:  MOVWF  FA7
034F6:  MOVLW  AA
034F8:  MOVWF  FA7
034FA:  BSF    FA6.1
034FC:  BTFSC  FA6.1
034FE:  BRA    34FC
03500:  BCF    FA6.2
03502:  MOVF   00,W
03504:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Fault Delay Time10
03506:  MOVFF  FF2,00
0350A:  BCF    FF2.7
0350C:  CLRF   FAA
0350E:  MOVLW  27
03510:  MOVWF  FA9
03512:  MOVFF  197,FA8
03516:  BCF    FA6.6
03518:  BCF    FA6.7
0351A:  BSF    FA6.2
0351C:  MOVLW  55
0351E:  MOVWF  FA7
03520:  MOVLW  AA
03522:  MOVWF  FA7
03524:  BSF    FA6.1
03526:  BTFSC  FA6.1
03528:  BRA    3526
0352A:  BCF    FA6.2
0352C:  MOVF   00,W
0352E:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Fault Delay Time11
03530:  MOVFF  FF2,00
03534:  BCF    FF2.7
03536:  CLRF   FAA
03538:  MOVLW  28
0353A:  MOVWF  FA9
0353C:  MOVFF  198,FA8
03540:  BCF    FA6.6
03542:  BCF    FA6.7
03544:  BSF    FA6.2
03546:  MOVLW  55
03548:  MOVWF  FA7
0354A:  MOVLW  AA
0354C:  MOVWF  FA7
0354E:  BSF    FA6.1
03550:  BTFSC  FA6.1
03552:  BRA    3550
03554:  BCF    FA6.2
03556:  MOVF   00,W
03558:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Fault Delay Time12
0355A:  MOVFF  FF2,00
0355E:  BCF    FF2.7
03560:  CLRF   FAA
03562:  MOVLW  29
03564:  MOVWF  FA9
03566:  MOVFF  199,FA8
0356A:  BCF    FA6.6
0356C:  BCF    FA6.7
0356E:  BSF    FA6.2
03570:  MOVLW  55
03572:  MOVWF  FA7
03574:  MOVLW  AA
03576:  MOVWF  FA7
03578:  BSF    FA6.1
0357A:  BTFSC  FA6.1
0357C:  BRA    357A
0357E:  BCF    FA6.2
03580:  MOVF   00,W
03582:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Fault Delay Time13
03584:  MOVFF  FF2,00
03588:  BCF    FF2.7
0358A:  CLRF   FAA
0358C:  MOVLW  2A
0358E:  MOVWF  FA9
03590:  MOVFF  19A,FA8
03594:  BCF    FA6.6
03596:  BCF    FA6.7
03598:  BSF    FA6.2
0359A:  MOVLW  55
0359C:  MOVWF  FA7
0359E:  MOVLW  AA
035A0:  MOVWF  FA7
035A2:  BSF    FA6.1
035A4:  BTFSC  FA6.1
035A6:  BRA    35A4
035A8:  BCF    FA6.2
035AA:  MOVF   00,W
035AC:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Fault Delay Time14
035AE:  MOVFF  FF2,00
035B2:  BCF    FF2.7
035B4:  CLRF   FAA
035B6:  MOVLW  2B
035B8:  MOVWF  FA9
035BA:  MOVFF  19B,FA8
035BE:  BCF    FA6.6
035C0:  BCF    FA6.7
035C2:  BSF    FA6.2
035C4:  MOVLW  55
035C6:  MOVWF  FA7
035C8:  MOVLW  AA
035CA:  MOVWF  FA7
035CC:  BSF    FA6.1
035CE:  BTFSC  FA6.1
035D0:  BRA    35CE
035D2:  BCF    FA6.2
035D4:  MOVF   00,W
035D6:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Fault Delay Time15
035D8:  MOVFF  FF2,00
035DC:  BCF    FF2.7
035DE:  CLRF   FAA
035E0:  MOVLW  2C
035E2:  MOVWF  FA9
035E4:  MOVFF  19C,FA8
035E8:  BCF    FA6.6
035EA:  BCF    FA6.7
035EC:  BSF    FA6.2
035EE:  MOVLW  55
035F0:  MOVWF  FA7
035F2:  MOVLW  AA
035F4:  MOVWF  FA7
035F6:  BSF    FA6.1
035F8:  BTFSC  FA6.1
035FA:  BRA    35F8
035FC:  BCF    FA6.2
035FE:  MOVF   00,W
03600:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Fault Delay Time16
03602:  MOVFF  FF2,00
03606:  BCF    FF2.7
03608:  CLRF   FAA
0360A:  MOVLW  2D
0360C:  MOVWF  FA9
0360E:  MOVFF  19D,FA8
03612:  BCF    FA6.6
03614:  BCF    FA6.7
03616:  BSF    FA6.2
03618:  MOVLW  55
0361A:  MOVWF  FA7
0361C:  MOVLW  AA
0361E:  MOVWF  FA7
03620:  BSF    FA6.1
03622:  BTFSC  FA6.1
03624:  BRA    3622
03626:  BCF    FA6.2
03628:  MOVF   00,W
0362A:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Fault Delay Time17
0362C:  MOVFF  FF2,00
03630:  BCF    FF2.7
03632:  CLRF   FAA
03634:  MOVLW  2E
03636:  MOVWF  FA9
03638:  MOVFF  19E,FA8
0363C:  BCF    FA6.6
0363E:  BCF    FA6.7
03640:  BSF    FA6.2
03642:  MOVLW  55
03644:  MOVWF  FA7
03646:  MOVLW  AA
03648:  MOVWF  FA7
0364A:  BSF    FA6.1
0364C:  BTFSC  FA6.1
0364E:  BRA    364C
03650:  BCF    FA6.2
03652:  MOVF   00,W
03654:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Fault Delay Time18
03656:  MOVFF  FF2,00
0365A:  BCF    FF2.7
0365C:  CLRF   FAA
0365E:  MOVLW  2F
03660:  MOVWF  FA9
03662:  MOVFF  19F,FA8
03666:  BCF    FA6.6
03668:  BCF    FA6.7
0366A:  BSF    FA6.2
0366C:  MOVLW  55
0366E:  MOVWF  FA7
03670:  MOVLW  AA
03672:  MOVWF  FA7
03674:  BSF    FA6.1
03676:  BTFSC  FA6.1
03678:  BRA    3676
0367A:  BCF    FA6.2
0367C:  MOVF   00,W
0367E:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Fault Delay Time19
03680:  MOVFF  FF2,00
03684:  BCF    FF2.7
03686:  CLRF   FAA
03688:  MOVLW  30
0368A:  MOVWF  FA9
0368C:  MOVFF  1A0,FA8
03690:  BCF    FA6.6
03692:  BCF    FA6.7
03694:  BSF    FA6.2
03696:  MOVLW  55
03698:  MOVWF  FA7
0369A:  MOVLW  AA
0369C:  MOVWF  FA7
0369E:  BSF    FA6.1
036A0:  BTFSC  FA6.1
036A2:  BRA    36A0
036A4:  BCF    FA6.2
036A6:  MOVF   00,W
036A8:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Fault Delay Time20
036AA:  MOVFF  FF2,00
036AE:  BCF    FF2.7
036B0:  CLRF   FAA
036B2:  MOVLW  31
036B4:  MOVWF  FA9
036B6:  MOVFF  1A1,FA8
036BA:  BCF    FA6.6
036BC:  BCF    FA6.7
036BE:  BSF    FA6.2
036C0:  MOVLW  55
036C2:  MOVWF  FA7
036C4:  MOVLW  AA
036C6:  MOVWF  FA7
036C8:  BSF    FA6.1
036CA:  BTFSC  FA6.1
036CC:  BRA    36CA
036CE:  BCF    FA6.2
036D0:  MOVF   00,W
036D2:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
036D4:  MOVLB  B
036D6:  CLRF   x4C
036D8:  CLRF   x4B
....................             for(; ; a++)
....................             {
....................                restart_wdt();
036DA:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
036DC:  MOVLW  A2
036DE:  ADDWF  x4B,W
036E0:  MOVWF  FE9
036E2:  MOVLW  01
036E4:  ADDWFC x4C,W
036E6:  MOVWF  FEA
036E8:  MOVFF  FEF,B4D
....................                if((phonenum == 0x0D) || (a > 15))
036EC:  MOVF   x4D,W
036EE:  SUBLW  0D
036F0:  BZ    36FC
036F2:  MOVF   x4C,F
036F4:  BNZ   36FC
036F6:  MOVF   x4B,W
036F8:  SUBLW  0F
036FA:  BC    374A
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
036FC:  MOVLW  7C
036FE:  ADDWF  x4B,W
03700:  MOVWF  FE9
03702:  MOVLW  09
03704:  ADDWFC x4C,W
03706:  MOVWF  FEA
03708:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
0370A:  MOVLW  32
0370C:  ADDWF  x4B,W
0370E:  MOVWF  x54
03710:  MOVLW  00
03712:  ADDWFC x4C,W
03714:  MOVWF  x55
03716:  MOVF   FF2,W
03718:  MOVWF  00
0371A:  BCF    FF2.7
0371C:  MOVFF  B55,FAA
03720:  MOVFF  B54,FA9
03724:  MOVFF  B4D,FA8
03728:  BCF    FA6.6
0372A:  BCF    FA6.7
0372C:  BSF    FA6.2
0372E:  MOVLB  F
03730:  MOVLW  55
03732:  MOVWF  FA7
03734:  MOVLW  AA
03736:  MOVWF  FA7
03738:  BSF    FA6.1
0373A:  BTFSC  FA6.1
0373C:  BRA    373A
0373E:  BCF    FA6.2
03740:  MOVF   00,W
03742:  IORWF  FF2,F
....................                   break;
03744:  BRA    37A0
....................                }
03746:  BRA    3794
03748:  MOVLB  B
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
0374A:  MOVLW  7C
0374C:  ADDWF  x4B,W
0374E:  MOVWF  FE9
03750:  MOVLW  09
03752:  ADDWFC x4C,W
03754:  MOVWF  FEA
03756:  MOVFF  B4D,FEF
....................                   write_eeprom(0x32+a,phonenum);
0375A:  MOVLW  32
0375C:  ADDWF  x4B,W
0375E:  MOVWF  x54
03760:  MOVLW  00
03762:  ADDWFC x4C,W
03764:  MOVWF  x55
03766:  MOVF   FF2,W
03768:  MOVWF  00
0376A:  BCF    FF2.7
0376C:  MOVFF  B55,FAA
03770:  MOVFF  B54,FA9
03774:  MOVFF  B4D,FA8
03778:  BCF    FA6.6
0377A:  BCF    FA6.7
0377C:  BSF    FA6.2
0377E:  MOVLB  F
03780:  MOVLW  55
03782:  MOVWF  FA7
03784:  MOVLW  AA
03786:  MOVWF  FA7
03788:  BSF    FA6.1
0378A:  BTFSC  FA6.1
0378C:  BRA    378A
0378E:  BCF    FA6.2
03790:  MOVF   00,W
03792:  IORWF  FF2,F
....................                }
03794:  MOVLB  B
03796:  INCF   x4B,F
03798:  BTFSC  FD8.2
0379A:  INCF   x4C,F
0379C:  BRA    36DA
0379E:  MOVLB  F
....................             }
....................          
....................             TxD_Buff[0] = Address ;         //Address
037A0:  MOVFF  6C,6E
....................             TxD_Buff[1] = 0x21 ;            //return function code
037A4:  MOVLW  21
037A6:  MOVLB  0
037A8:  MOVWF  x6F
....................    
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
037AA:  MOVLB  B
037AC:  CLRF   x56
037AE:  MOVLW  6E
037B0:  MOVWF  x55
037B2:  MOVLW  02
037B4:  MOVWF  x57
037B6:  MOVLB  0
037B8:  CALL   2384
....................    
....................             TxD_Buff[2] = CRC_Hi ;
037BC:  MOVFF  56F,70
....................             TxD_Buff[3] = CRC_Lo ;
037C0:  MOVFF  56E,71
....................    
....................             output_bit(P485ctrl,1);
037C4:  BSF    F8A.3
037C6:  BCF    F93.3
....................             delay_ms(10);
037C8:  MOVLW  0A
037CA:  MOVLB  B
037CC:  MOVWF  x54
037CE:  MOVLB  0
037D0:  CALL   07DC
....................    
....................             putc(Txd_Buff[0]);
037D4:  MOVF   x6E,W
037D6:  CALL   23DA
....................             putc(Txd_Buff[1]);
037DA:  MOVF   x6F,W
037DC:  CALL   23DA
....................             putc(Txd_Buff[2]);
037E0:  MOVF   x70,W
037E2:  CALL   23DA
....................             putc(Txd_Buff[3]);
037E6:  MOVF   x71,W
037E8:  CALL   23DA
....................    
....................             delay_ms(3);
037EC:  MOVLW  03
037EE:  MOVLB  B
037F0:  MOVWF  x54
037F2:  MOVLB  0
037F4:  CALL   07DC
....................             output_bit(P485ctrl,0);           
037F8:  BCF    F8A.3
037FA:  BCF    F93.3
....................             
....................             reset_cpu();
037FC:  RESET
....................             //Read_Config(); //jj
....................          }
037FE:  GOTO   4328
03802:  MOVLB  1
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
03804:  MOVF   x6F,W
03806:  SUBLW  22
03808:  BTFSS  FD8.2
0380A:  GOTO   432A
....................          {
....................             //SMS_Massage
....................             int16  i =3,j=0,k=0;
0380E:  MOVLB  B
03810:  CLRF   x4F
03812:  MOVLW  03
03814:  MOVWF  x4E
03816:  CLRF   x51
03818:  CLRF   x50
0381A:  CLRF   x53
0381C:  CLRF   x52
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0381E:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03820:  MOVLW  6E
03822:  ADDWF  x4E,W
03824:  MOVWF  FE9
03826:  MOVLW  01
03828:  ADDWFC x4F,W
0382A:  MOVWF  FEA
0382C:  MOVF   FEF,W
0382E:  SUBLW  0D
03830:  BZ    383C
03832:  MOVF   x51,F
03834:  BNZ   383C
03836:  MOVF   x50,W
03838:  SUBLW  29
0383A:  BC    388C
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0383C:  MOVLW  5D
0383E:  ADDWF  x4E,W
03840:  MOVWF  x54
03842:  MOVLW  00
03844:  ADDWFC x4F,W
03846:  MOVWF  x55
03848:  MOVLW  6E
0384A:  ADDWF  x4E,W
0384C:  MOVWF  FE9
0384E:  MOVLW  01
03850:  ADDWFC x4F,W
03852:  MOVWF  FEA
03854:  MOVFF  FEF,B56
03858:  MOVF   FF2,W
0385A:  MOVWF  00
0385C:  BCF    FF2.7
0385E:  MOVFF  B55,FAA
03862:  MOVFF  B54,FA9
03866:  MOVFF  B56,FA8
0386A:  BCF    FA6.6
0386C:  BCF    FA6.7
0386E:  BSF    FA6.2
03870:  MOVLB  F
03872:  MOVLW  55
03874:  MOVWF  FA7
03876:  MOVLW  AA
03878:  MOVWF  FA7
0387A:  BSF    FA6.1
0387C:  BTFSC  FA6.1
0387E:  BRA    387C
03880:  BCF    FA6.2
03882:  MOVF   00,W
03884:  IORWF  FF2,F
....................                   break;
03886:  BRA    3916
....................                }
03888:  BRA    38FE
0388A:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage1[j] = RxD_Buff[i];
0388C:  MOVLW  8B
0388E:  ADDWF  x50,W
03890:  MOVWF  01
03892:  MOVLW  09
03894:  ADDWFC x51,W
03896:  MOVWF  03
03898:  MOVLW  6E
0389A:  ADDWF  x4E,W
0389C:  MOVWF  FE9
0389E:  MOVLW  01
038A0:  ADDWFC x4F,W
038A2:  MOVWF  FEA
038A4:  MOVFF  FEF,B56
038A8:  MOVFF  03,FEA
038AC:  MOVFF  01,FE9
038B0:  MOVFF  B56,FEF
....................                   
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
038B4:  MOVLW  5D
038B6:  ADDWF  x4E,W
038B8:  MOVWF  x54
038BA:  MOVLW  00
038BC:  ADDWFC x4F,W
038BE:  MOVWF  x55
038C0:  MOVLW  6E
038C2:  ADDWF  x4E,W
038C4:  MOVWF  FE9
038C6:  MOVLW  01
038C8:  ADDWFC x4F,W
038CA:  MOVWF  FEA
038CC:  MOVFF  FEF,B56
038D0:  MOVF   FF2,W
038D2:  MOVWF  00
038D4:  BCF    FF2.7
038D6:  MOVFF  B55,FAA
038DA:  MOVFF  B54,FA9
038DE:  MOVFF  B56,FA8
038E2:  BCF    FA6.6
038E4:  BCF    FA6.7
038E6:  BSF    FA6.2
038E8:  MOVLB  F
038EA:  MOVLW  55
038EC:  MOVWF  FA7
038EE:  MOVLW  AA
038F0:  MOVWF  FA7
038F2:  BSF    FA6.1
038F4:  BTFSC  FA6.1
038F6:  BRA    38F4
038F8:  BCF    FA6.2
038FA:  MOVF   00,W
038FC:  IORWF  FF2,F
....................                }
038FE:  MOVLB  B
03900:  MOVFF  B4F,03
03904:  MOVF   x4E,W
03906:  INCF   x4E,F
03908:  BTFSC  FD8.2
0390A:  INCF   x4F,F
0390C:  INCF   x50,F
0390E:  BTFSC  FD8.2
03910:  INCF   x51,F
03912:  BRA    381E
03914:  MOVLB  F
....................             }
....................             SMS_Massage1[j] = '\0' ; // end string
03916:  MOVLW  8B
03918:  MOVLB  B
0391A:  ADDWF  x50,W
0391C:  MOVWF  FE9
0391E:  MOVLW  09
03920:  ADDWFC x51,W
03922:  MOVWF  FEA
03924:  CLRF   FEF
....................             
....................             j=0;
03926:  CLRF   x51
03928:  CLRF   x50
....................             i++;
0392A:  INCF   x4E,F
0392C:  BTFSC  FD8.2
0392E:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03930:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03932:  MOVLW  6E
03934:  ADDWF  x4E,W
03936:  MOVWF  FE9
03938:  MOVLW  01
0393A:  ADDWFC x4F,W
0393C:  MOVWF  FEA
0393E:  MOVF   FEF,W
03940:  SUBLW  0D
03942:  BZ    394E
03944:  MOVF   x51,F
03946:  BNZ   394E
03948:  MOVF   x50,W
0394A:  SUBLW  29
0394C:  BC    399E
....................                {  
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0394E:  MOVLW  5D
03950:  ADDWF  x4E,W
03952:  MOVWF  x54
03954:  MOVLW  00
03956:  ADDWFC x4F,W
03958:  MOVWF  x55
0395A:  MOVLW  6E
0395C:  ADDWF  x4E,W
0395E:  MOVWF  FE9
03960:  MOVLW  01
03962:  ADDWFC x4F,W
03964:  MOVWF  FEA
03966:  MOVFF  FEF,B56
0396A:  MOVF   FF2,W
0396C:  MOVWF  00
0396E:  BCF    FF2.7
03970:  MOVFF  B55,FAA
03974:  MOVFF  B54,FA9
03978:  MOVFF  B56,FA8
0397C:  BCF    FA6.6
0397E:  BCF    FA6.7
03980:  BSF    FA6.2
03982:  MOVLB  F
03984:  MOVLW  55
03986:  MOVWF  FA7
03988:  MOVLW  AA
0398A:  MOVWF  FA7
0398C:  BSF    FA6.1
0398E:  BTFSC  FA6.1
03990:  BRA    398E
03992:  BCF    FA6.2
03994:  MOVF   00,W
03996:  IORWF  FF2,F
....................                   break;
03998:  BRA    3A28
....................                }
0399A:  BRA    3A10
0399C:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage2[j] = RxD_Buff[i];
0399E:  MOVLW  AB
039A0:  ADDWF  x50,W
039A2:  MOVWF  01
039A4:  MOVLW  09
039A6:  ADDWFC x51,W
039A8:  MOVWF  03
039AA:  MOVLW  6E
039AC:  ADDWF  x4E,W
039AE:  MOVWF  FE9
039B0:  MOVLW  01
039B2:  ADDWFC x4F,W
039B4:  MOVWF  FEA
039B6:  MOVFF  FEF,B56
039BA:  MOVFF  03,FEA
039BE:  MOVFF  01,FE9
039C2:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
039C6:  MOVLW  5D
039C8:  ADDWF  x4E,W
039CA:  MOVWF  x54
039CC:  MOVLW  00
039CE:  ADDWFC x4F,W
039D0:  MOVWF  x55
039D2:  MOVLW  6E
039D4:  ADDWF  x4E,W
039D6:  MOVWF  FE9
039D8:  MOVLW  01
039DA:  ADDWFC x4F,W
039DC:  MOVWF  FEA
039DE:  MOVFF  FEF,B56
039E2:  MOVF   FF2,W
039E4:  MOVWF  00
039E6:  BCF    FF2.7
039E8:  MOVFF  B55,FAA
039EC:  MOVFF  B54,FA9
039F0:  MOVFF  B56,FA8
039F4:  BCF    FA6.6
039F6:  BCF    FA6.7
039F8:  BSF    FA6.2
039FA:  MOVLB  F
039FC:  MOVLW  55
039FE:  MOVWF  FA7
03A00:  MOVLW  AA
03A02:  MOVWF  FA7
03A04:  BSF    FA6.1
03A06:  BTFSC  FA6.1
03A08:  BRA    3A06
03A0A:  BCF    FA6.2
03A0C:  MOVF   00,W
03A0E:  IORWF  FF2,F
....................                }
03A10:  MOVLB  B
03A12:  MOVFF  B4F,03
03A16:  MOVF   x4E,W
03A18:  INCF   x4E,F
03A1A:  BTFSC  FD8.2
03A1C:  INCF   x4F,F
03A1E:  INCF   x50,F
03A20:  BTFSC  FD8.2
03A22:  INCF   x51,F
03A24:  BRA    3930
03A26:  MOVLB  F
....................             }
....................             SMS_Massage2[j] = '\0' ; // end string
03A28:  MOVLW  AB
03A2A:  MOVLB  B
03A2C:  ADDWF  x50,W
03A2E:  MOVWF  FE9
03A30:  MOVLW  09
03A32:  ADDWFC x51,W
03A34:  MOVWF  FEA
03A36:  CLRF   FEF
....................             
....................             j=0;
03A38:  CLRF   x51
03A3A:  CLRF   x50
....................             i++;
03A3C:  INCF   x4E,F
03A3E:  BTFSC  FD8.2
03A40:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03A42:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03A44:  MOVLW  6E
03A46:  ADDWF  x4E,W
03A48:  MOVWF  FE9
03A4A:  MOVLW  01
03A4C:  ADDWFC x4F,W
03A4E:  MOVWF  FEA
03A50:  MOVF   FEF,W
03A52:  SUBLW  0D
03A54:  BZ    3A60
03A56:  MOVF   x51,F
03A58:  BNZ   3A60
03A5A:  MOVF   x50,W
03A5C:  SUBLW  29
03A5E:  BC    3AB0
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03A60:  MOVLW  5D
03A62:  ADDWF  x4E,W
03A64:  MOVWF  x54
03A66:  MOVLW  00
03A68:  ADDWFC x4F,W
03A6A:  MOVWF  x55
03A6C:  MOVLW  6E
03A6E:  ADDWF  x4E,W
03A70:  MOVWF  FE9
03A72:  MOVLW  01
03A74:  ADDWFC x4F,W
03A76:  MOVWF  FEA
03A78:  MOVFF  FEF,B56
03A7C:  MOVF   FF2,W
03A7E:  MOVWF  00
03A80:  BCF    FF2.7
03A82:  MOVFF  B55,FAA
03A86:  MOVFF  B54,FA9
03A8A:  MOVFF  B56,FA8
03A8E:  BCF    FA6.6
03A90:  BCF    FA6.7
03A92:  BSF    FA6.2
03A94:  MOVLB  F
03A96:  MOVLW  55
03A98:  MOVWF  FA7
03A9A:  MOVLW  AA
03A9C:  MOVWF  FA7
03A9E:  BSF    FA6.1
03AA0:  BTFSC  FA6.1
03AA2:  BRA    3AA0
03AA4:  BCF    FA6.2
03AA6:  MOVF   00,W
03AA8:  IORWF  FF2,F
....................                   break;
03AAA:  BRA    3B3A
....................                }
03AAC:  BRA    3B22
03AAE:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage3[j] = RxD_Buff[i];
03AB0:  MOVLW  CB
03AB2:  ADDWF  x50,W
03AB4:  MOVWF  01
03AB6:  MOVLW  09
03AB8:  ADDWFC x51,W
03ABA:  MOVWF  03
03ABC:  MOVLW  6E
03ABE:  ADDWF  x4E,W
03AC0:  MOVWF  FE9
03AC2:  MOVLW  01
03AC4:  ADDWFC x4F,W
03AC6:  MOVWF  FEA
03AC8:  MOVFF  FEF,B56
03ACC:  MOVFF  03,FEA
03AD0:  MOVFF  01,FE9
03AD4:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03AD8:  MOVLW  5D
03ADA:  ADDWF  x4E,W
03ADC:  MOVWF  x54
03ADE:  MOVLW  00
03AE0:  ADDWFC x4F,W
03AE2:  MOVWF  x55
03AE4:  MOVLW  6E
03AE6:  ADDWF  x4E,W
03AE8:  MOVWF  FE9
03AEA:  MOVLW  01
03AEC:  ADDWFC x4F,W
03AEE:  MOVWF  FEA
03AF0:  MOVFF  FEF,B56
03AF4:  MOVF   FF2,W
03AF6:  MOVWF  00
03AF8:  BCF    FF2.7
03AFA:  MOVFF  B55,FAA
03AFE:  MOVFF  B54,FA9
03B02:  MOVFF  B56,FA8
03B06:  BCF    FA6.6
03B08:  BCF    FA6.7
03B0A:  BSF    FA6.2
03B0C:  MOVLB  F
03B0E:  MOVLW  55
03B10:  MOVWF  FA7
03B12:  MOVLW  AA
03B14:  MOVWF  FA7
03B16:  BSF    FA6.1
03B18:  BTFSC  FA6.1
03B1A:  BRA    3B18
03B1C:  BCF    FA6.2
03B1E:  MOVF   00,W
03B20:  IORWF  FF2,F
....................                }
03B22:  MOVLB  B
03B24:  MOVFF  B4F,03
03B28:  MOVF   x4E,W
03B2A:  INCF   x4E,F
03B2C:  BTFSC  FD8.2
03B2E:  INCF   x4F,F
03B30:  INCF   x50,F
03B32:  BTFSC  FD8.2
03B34:  INCF   x51,F
03B36:  BRA    3A42
03B38:  MOVLB  F
....................             }
....................             SMS_Massage3[j] = '\0' ; // end string
03B3A:  MOVLW  CB
03B3C:  MOVLB  B
03B3E:  ADDWF  x50,W
03B40:  MOVWF  FE9
03B42:  MOVLW  09
03B44:  ADDWFC x51,W
03B46:  MOVWF  FEA
03B48:  CLRF   FEF
....................             
....................             j=0;
03B4A:  CLRF   x51
03B4C:  CLRF   x50
....................             i++;
03B4E:  INCF   x4E,F
03B50:  BTFSC  FD8.2
03B52:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03B54:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03B56:  MOVLW  6E
03B58:  ADDWF  x4E,W
03B5A:  MOVWF  FE9
03B5C:  MOVLW  01
03B5E:  ADDWFC x4F,W
03B60:  MOVWF  FEA
03B62:  MOVF   FEF,W
03B64:  SUBLW  0D
03B66:  BZ    3B72
03B68:  MOVF   x51,F
03B6A:  BNZ   3B72
03B6C:  MOVF   x50,W
03B6E:  SUBLW  29
03B70:  BC    3BC2
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B72:  MOVLW  5D
03B74:  ADDWF  x4E,W
03B76:  MOVWF  x54
03B78:  MOVLW  00
03B7A:  ADDWFC x4F,W
03B7C:  MOVWF  x55
03B7E:  MOVLW  6E
03B80:  ADDWF  x4E,W
03B82:  MOVWF  FE9
03B84:  MOVLW  01
03B86:  ADDWFC x4F,W
03B88:  MOVWF  FEA
03B8A:  MOVFF  FEF,B56
03B8E:  MOVF   FF2,W
03B90:  MOVWF  00
03B92:  BCF    FF2.7
03B94:  MOVFF  B55,FAA
03B98:  MOVFF  B54,FA9
03B9C:  MOVFF  B56,FA8
03BA0:  BCF    FA6.6
03BA2:  BCF    FA6.7
03BA4:  BSF    FA6.2
03BA6:  MOVLB  F
03BA8:  MOVLW  55
03BAA:  MOVWF  FA7
03BAC:  MOVLW  AA
03BAE:  MOVWF  FA7
03BB0:  BSF    FA6.1
03BB2:  BTFSC  FA6.1
03BB4:  BRA    3BB2
03BB6:  BCF    FA6.2
03BB8:  MOVF   00,W
03BBA:  IORWF  FF2,F
....................                   break;
03BBC:  BRA    3C4C
....................                }
03BBE:  BRA    3C34
03BC0:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage4[j] = RxD_Buff[i];
03BC2:  MOVLW  EB
03BC4:  ADDWF  x50,W
03BC6:  MOVWF  01
03BC8:  MOVLW  09
03BCA:  ADDWFC x51,W
03BCC:  MOVWF  03
03BCE:  MOVLW  6E
03BD0:  ADDWF  x4E,W
03BD2:  MOVWF  FE9
03BD4:  MOVLW  01
03BD6:  ADDWFC x4F,W
03BD8:  MOVWF  FEA
03BDA:  MOVFF  FEF,B56
03BDE:  MOVFF  03,FEA
03BE2:  MOVFF  01,FE9
03BE6:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03BEA:  MOVLW  5D
03BEC:  ADDWF  x4E,W
03BEE:  MOVWF  x54
03BF0:  MOVLW  00
03BF2:  ADDWFC x4F,W
03BF4:  MOVWF  x55
03BF6:  MOVLW  6E
03BF8:  ADDWF  x4E,W
03BFA:  MOVWF  FE9
03BFC:  MOVLW  01
03BFE:  ADDWFC x4F,W
03C00:  MOVWF  FEA
03C02:  MOVFF  FEF,B56
03C06:  MOVF   FF2,W
03C08:  MOVWF  00
03C0A:  BCF    FF2.7
03C0C:  MOVFF  B55,FAA
03C10:  MOVFF  B54,FA9
03C14:  MOVFF  B56,FA8
03C18:  BCF    FA6.6
03C1A:  BCF    FA6.7
03C1C:  BSF    FA6.2
03C1E:  MOVLB  F
03C20:  MOVLW  55
03C22:  MOVWF  FA7
03C24:  MOVLW  AA
03C26:  MOVWF  FA7
03C28:  BSF    FA6.1
03C2A:  BTFSC  FA6.1
03C2C:  BRA    3C2A
03C2E:  BCF    FA6.2
03C30:  MOVF   00,W
03C32:  IORWF  FF2,F
....................                }
03C34:  MOVLB  B
03C36:  MOVFF  B4F,03
03C3A:  MOVF   x4E,W
03C3C:  INCF   x4E,F
03C3E:  BTFSC  FD8.2
03C40:  INCF   x4F,F
03C42:  INCF   x50,F
03C44:  BTFSC  FD8.2
03C46:  INCF   x51,F
03C48:  BRA    3B54
03C4A:  MOVLB  F
....................             }
....................             SMS_Massage4[j] = '\0' ; // end string
03C4C:  MOVLW  EB
03C4E:  MOVLB  B
03C50:  ADDWF  x50,W
03C52:  MOVWF  FE9
03C54:  MOVLW  09
03C56:  ADDWFC x51,W
03C58:  MOVWF  FEA
03C5A:  CLRF   FEF
....................             
....................             j=0;
03C5C:  CLRF   x51
03C5E:  CLRF   x50
....................             i++;
03C60:  INCF   x4E,F
03C62:  BTFSC  FD8.2
03C64:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03C66:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03C68:  MOVLW  6E
03C6A:  ADDWF  x4E,W
03C6C:  MOVWF  FE9
03C6E:  MOVLW  01
03C70:  ADDWFC x4F,W
03C72:  MOVWF  FEA
03C74:  MOVF   FEF,W
03C76:  SUBLW  0D
03C78:  BZ    3C84
03C7A:  MOVF   x51,F
03C7C:  BNZ   3C84
03C7E:  MOVF   x50,W
03C80:  SUBLW  29
03C82:  BC    3CD4
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C84:  MOVLW  5D
03C86:  ADDWF  x4E,W
03C88:  MOVWF  x54
03C8A:  MOVLW  00
03C8C:  ADDWFC x4F,W
03C8E:  MOVWF  x55
03C90:  MOVLW  6E
03C92:  ADDWF  x4E,W
03C94:  MOVWF  FE9
03C96:  MOVLW  01
03C98:  ADDWFC x4F,W
03C9A:  MOVWF  FEA
03C9C:  MOVFF  FEF,B56
03CA0:  MOVF   FF2,W
03CA2:  MOVWF  00
03CA4:  BCF    FF2.7
03CA6:  MOVFF  B55,FAA
03CAA:  MOVFF  B54,FA9
03CAE:  MOVFF  B56,FA8
03CB2:  BCF    FA6.6
03CB4:  BCF    FA6.7
03CB6:  BSF    FA6.2
03CB8:  MOVLB  F
03CBA:  MOVLW  55
03CBC:  MOVWF  FA7
03CBE:  MOVLW  AA
03CC0:  MOVWF  FA7
03CC2:  BSF    FA6.1
03CC4:  BTFSC  FA6.1
03CC6:  BRA    3CC4
03CC8:  BCF    FA6.2
03CCA:  MOVF   00,W
03CCC:  IORWF  FF2,F
....................                   break;
03CCE:  BRA    3D5E
....................                }
03CD0:  BRA    3D46
03CD2:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage5[j] = RxD_Buff[i];
03CD4:  MOVLW  0B
03CD6:  ADDWF  x50,W
03CD8:  MOVWF  01
03CDA:  MOVLW  0A
03CDC:  ADDWFC x51,W
03CDE:  MOVWF  03
03CE0:  MOVLW  6E
03CE2:  ADDWF  x4E,W
03CE4:  MOVWF  FE9
03CE6:  MOVLW  01
03CE8:  ADDWFC x4F,W
03CEA:  MOVWF  FEA
03CEC:  MOVFF  FEF,B56
03CF0:  MOVFF  03,FEA
03CF4:  MOVFF  01,FE9
03CF8:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03CFC:  MOVLW  5D
03CFE:  ADDWF  x4E,W
03D00:  MOVWF  x54
03D02:  MOVLW  00
03D04:  ADDWFC x4F,W
03D06:  MOVWF  x55
03D08:  MOVLW  6E
03D0A:  ADDWF  x4E,W
03D0C:  MOVWF  FE9
03D0E:  MOVLW  01
03D10:  ADDWFC x4F,W
03D12:  MOVWF  FEA
03D14:  MOVFF  FEF,B56
03D18:  MOVF   FF2,W
03D1A:  MOVWF  00
03D1C:  BCF    FF2.7
03D1E:  MOVFF  B55,FAA
03D22:  MOVFF  B54,FA9
03D26:  MOVFF  B56,FA8
03D2A:  BCF    FA6.6
03D2C:  BCF    FA6.7
03D2E:  BSF    FA6.2
03D30:  MOVLB  F
03D32:  MOVLW  55
03D34:  MOVWF  FA7
03D36:  MOVLW  AA
03D38:  MOVWF  FA7
03D3A:  BSF    FA6.1
03D3C:  BTFSC  FA6.1
03D3E:  BRA    3D3C
03D40:  BCF    FA6.2
03D42:  MOVF   00,W
03D44:  IORWF  FF2,F
....................                }
03D46:  MOVLB  B
03D48:  MOVFF  B4F,03
03D4C:  MOVF   x4E,W
03D4E:  INCF   x4E,F
03D50:  BTFSC  FD8.2
03D52:  INCF   x4F,F
03D54:  INCF   x50,F
03D56:  BTFSC  FD8.2
03D58:  INCF   x51,F
03D5A:  BRA    3C66
03D5C:  MOVLB  F
....................             }
....................             SMS_Massage5[j] = '\0' ; // end string
03D5E:  MOVLW  0B
03D60:  MOVLB  B
03D62:  ADDWF  x50,W
03D64:  MOVWF  FE9
03D66:  MOVLW  0A
03D68:  ADDWFC x51,W
03D6A:  MOVWF  FEA
03D6C:  CLRF   FEF
....................             
....................             j=0;
03D6E:  CLRF   x51
03D70:  CLRF   x50
....................             i++;
03D72:  INCF   x4E,F
03D74:  BTFSC  FD8.2
03D76:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03D78:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03D7A:  MOVLW  6E
03D7C:  ADDWF  x4E,W
03D7E:  MOVWF  FE9
03D80:  MOVLW  01
03D82:  ADDWFC x4F,W
03D84:  MOVWF  FEA
03D86:  MOVF   FEF,W
03D88:  SUBLW  0D
03D8A:  BZ    3D96
03D8C:  MOVF   x51,F
03D8E:  BNZ   3D96
03D90:  MOVF   x50,W
03D92:  SUBLW  29
03D94:  BC    3DE6
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D96:  MOVLW  5D
03D98:  ADDWF  x4E,W
03D9A:  MOVWF  x54
03D9C:  MOVLW  00
03D9E:  ADDWFC x4F,W
03DA0:  MOVWF  x55
03DA2:  MOVLW  6E
03DA4:  ADDWF  x4E,W
03DA6:  MOVWF  FE9
03DA8:  MOVLW  01
03DAA:  ADDWFC x4F,W
03DAC:  MOVWF  FEA
03DAE:  MOVFF  FEF,B56
03DB2:  MOVF   FF2,W
03DB4:  MOVWF  00
03DB6:  BCF    FF2.7
03DB8:  MOVFF  B55,FAA
03DBC:  MOVFF  B54,FA9
03DC0:  MOVFF  B56,FA8
03DC4:  BCF    FA6.6
03DC6:  BCF    FA6.7
03DC8:  BSF    FA6.2
03DCA:  MOVLB  F
03DCC:  MOVLW  55
03DCE:  MOVWF  FA7
03DD0:  MOVLW  AA
03DD2:  MOVWF  FA7
03DD4:  BSF    FA6.1
03DD6:  BTFSC  FA6.1
03DD8:  BRA    3DD6
03DDA:  BCF    FA6.2
03DDC:  MOVF   00,W
03DDE:  IORWF  FF2,F
....................                   break;
03DE0:  BRA    3E74
....................                }
03DE2:  BRA    3E5C
03DE4:  MOVLB  B
....................                else
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03DE6:  MOVLW  5D
03DE8:  ADDWF  x4E,W
03DEA:  MOVWF  x54
03DEC:  MOVLW  00
03DEE:  ADDWFC x4F,W
03DF0:  MOVWF  x55
03DF2:  MOVLW  6E
03DF4:  ADDWF  x4E,W
03DF6:  MOVWF  FE9
03DF8:  MOVLW  01
03DFA:  ADDWFC x4F,W
03DFC:  MOVWF  FEA
03DFE:  MOVFF  FEF,B56
03E02:  MOVF   FF2,W
03E04:  MOVWF  00
03E06:  BCF    FF2.7
03E08:  MOVFF  B55,FAA
03E0C:  MOVFF  B54,FA9
03E10:  MOVFF  B56,FA8
03E14:  BCF    FA6.6
03E16:  BCF    FA6.7
03E18:  BSF    FA6.2
03E1A:  MOVLB  F
03E1C:  MOVLW  55
03E1E:  MOVWF  FA7
03E20:  MOVLW  AA
03E22:  MOVWF  FA7
03E24:  BSF    FA6.1
03E26:  BTFSC  FA6.1
03E28:  BRA    3E26
03E2A:  BCF    FA6.2
03E2C:  MOVF   00,W
03E2E:  IORWF  FF2,F
....................                   SMS_Massage6[j] = RxD_Buff[i];
03E30:  MOVLW  2B
03E32:  MOVLB  B
03E34:  ADDWF  x50,W
03E36:  MOVWF  01
03E38:  MOVLW  0A
03E3A:  ADDWFC x51,W
03E3C:  MOVWF  03
03E3E:  MOVLW  6E
03E40:  ADDWF  x4E,W
03E42:  MOVWF  FE9
03E44:  MOVLW  01
03E46:  ADDWFC x4F,W
03E48:  MOVWF  FEA
03E4A:  MOVFF  FEF,B56
03E4E:  MOVFF  03,FEA
03E52:  MOVFF  01,FE9
03E56:  MOVFF  B56,FEF
03E5A:  MOVLB  F
....................                }
03E5C:  MOVLB  B
03E5E:  MOVFF  B4F,03
03E62:  MOVF   x4E,W
03E64:  INCF   x4E,F
03E66:  BTFSC  FD8.2
03E68:  INCF   x4F,F
03E6A:  INCF   x50,F
03E6C:  BTFSC  FD8.2
03E6E:  INCF   x51,F
03E70:  BRA    3D78
03E72:  MOVLB  F
....................             }
....................             SMS_Massage6[j] = '\0' ; // end string
03E74:  MOVLW  2B
03E76:  MOVLB  B
03E78:  ADDWF  x50,W
03E7A:  MOVWF  FE9
03E7C:  MOVLW  0A
03E7E:  ADDWFC x51,W
03E80:  MOVWF  FEA
03E82:  CLRF   FEF
....................             
....................             j=0;
03E84:  CLRF   x51
03E86:  CLRF   x50
....................             i++;
03E88:  INCF   x4E,F
03E8A:  BTFSC  FD8.2
03E8C:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03E8E:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03E90:  MOVLW  6E
03E92:  ADDWF  x4E,W
03E94:  MOVWF  FE9
03E96:  MOVLW  01
03E98:  ADDWFC x4F,W
03E9A:  MOVWF  FEA
03E9C:  MOVF   FEF,W
03E9E:  SUBLW  0D
03EA0:  BZ    3EAC
03EA2:  MOVF   x51,F
03EA4:  BNZ   3EAC
03EA6:  MOVF   x50,W
03EA8:  SUBLW  29
03EAA:  BC    3EFC
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03EAC:  MOVLW  5D
03EAE:  ADDWF  x4E,W
03EB0:  MOVWF  x54
03EB2:  MOVLW  00
03EB4:  ADDWFC x4F,W
03EB6:  MOVWF  x55
03EB8:  MOVLW  6E
03EBA:  ADDWF  x4E,W
03EBC:  MOVWF  FE9
03EBE:  MOVLW  01
03EC0:  ADDWFC x4F,W
03EC2:  MOVWF  FEA
03EC4:  MOVFF  FEF,B56
03EC8:  MOVF   FF2,W
03ECA:  MOVWF  00
03ECC:  BCF    FF2.7
03ECE:  MOVFF  B55,FAA
03ED2:  MOVFF  B54,FA9
03ED6:  MOVFF  B56,FA8
03EDA:  BCF    FA6.6
03EDC:  BCF    FA6.7
03EDE:  BSF    FA6.2
03EE0:  MOVLB  F
03EE2:  MOVLW  55
03EE4:  MOVWF  FA7
03EE6:  MOVLW  AA
03EE8:  MOVWF  FA7
03EEA:  BSF    FA6.1
03EEC:  BTFSC  FA6.1
03EEE:  BRA    3EEC
03EF0:  BCF    FA6.2
03EF2:  MOVF   00,W
03EF4:  IORWF  FF2,F
....................                   break;
03EF6:  BRA    3F86
....................                }
03EF8:  BRA    3F6E
03EFA:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage7[j] = RxD_Buff[i];
03EFC:  MOVLW  4B
03EFE:  ADDWF  x50,W
03F00:  MOVWF  01
03F02:  MOVLW  0A
03F04:  ADDWFC x51,W
03F06:  MOVWF  03
03F08:  MOVLW  6E
03F0A:  ADDWF  x4E,W
03F0C:  MOVWF  FE9
03F0E:  MOVLW  01
03F10:  ADDWFC x4F,W
03F12:  MOVWF  FEA
03F14:  MOVFF  FEF,B56
03F18:  MOVFF  03,FEA
03F1C:  MOVFF  01,FE9
03F20:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03F24:  MOVLW  5D
03F26:  ADDWF  x4E,W
03F28:  MOVWF  x54
03F2A:  MOVLW  00
03F2C:  ADDWFC x4F,W
03F2E:  MOVWF  x55
03F30:  MOVLW  6E
03F32:  ADDWF  x4E,W
03F34:  MOVWF  FE9
03F36:  MOVLW  01
03F38:  ADDWFC x4F,W
03F3A:  MOVWF  FEA
03F3C:  MOVFF  FEF,B56
03F40:  MOVF   FF2,W
03F42:  MOVWF  00
03F44:  BCF    FF2.7
03F46:  MOVFF  B55,FAA
03F4A:  MOVFF  B54,FA9
03F4E:  MOVFF  B56,FA8
03F52:  BCF    FA6.6
03F54:  BCF    FA6.7
03F56:  BSF    FA6.2
03F58:  MOVLB  F
03F5A:  MOVLW  55
03F5C:  MOVWF  FA7
03F5E:  MOVLW  AA
03F60:  MOVWF  FA7
03F62:  BSF    FA6.1
03F64:  BTFSC  FA6.1
03F66:  BRA    3F64
03F68:  BCF    FA6.2
03F6A:  MOVF   00,W
03F6C:  IORWF  FF2,F
....................                }
03F6E:  MOVLB  B
03F70:  MOVFF  B4F,03
03F74:  MOVF   x4E,W
03F76:  INCF   x4E,F
03F78:  BTFSC  FD8.2
03F7A:  INCF   x4F,F
03F7C:  INCF   x50,F
03F7E:  BTFSC  FD8.2
03F80:  INCF   x51,F
03F82:  BRA    3E8E
03F84:  MOVLB  F
....................             }
....................             SMS_Massage7[j] = '\0' ; // end string
03F86:  MOVLW  4B
03F88:  MOVLB  B
03F8A:  ADDWF  x50,W
03F8C:  MOVWF  FE9
03F8E:  MOVLW  0A
03F90:  ADDWFC x51,W
03F92:  MOVWF  FEA
03F94:  CLRF   FEF
....................             
....................             j=0;
03F96:  CLRF   x51
03F98:  CLRF   x50
....................             i++;
03F9A:  INCF   x4E,F
03F9C:  BTFSC  FD8.2
03F9E:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03FA0:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
03FA2:  MOVLW  6E
03FA4:  ADDWF  x4E,W
03FA6:  MOVWF  FE9
03FA8:  MOVLW  01
03FAA:  ADDWFC x4F,W
03FAC:  MOVWF  FEA
03FAE:  MOVF   FEF,W
03FB0:  SUBLW  0D
03FB2:  BZ    3FBE
03FB4:  MOVF   x51,F
03FB6:  BNZ   3FBE
03FB8:  MOVF   x50,W
03FBA:  SUBLW  29
03FBC:  BC    400E
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03FBE:  MOVLW  5D
03FC0:  ADDWF  x4E,W
03FC2:  MOVWF  x54
03FC4:  MOVLW  00
03FC6:  ADDWFC x4F,W
03FC8:  MOVWF  x55
03FCA:  MOVLW  6E
03FCC:  ADDWF  x4E,W
03FCE:  MOVWF  FE9
03FD0:  MOVLW  01
03FD2:  ADDWFC x4F,W
03FD4:  MOVWF  FEA
03FD6:  MOVFF  FEF,B56
03FDA:  MOVF   FF2,W
03FDC:  MOVWF  00
03FDE:  BCF    FF2.7
03FE0:  MOVFF  B55,FAA
03FE4:  MOVFF  B54,FA9
03FE8:  MOVFF  B56,FA8
03FEC:  BCF    FA6.6
03FEE:  BCF    FA6.7
03FF0:  BSF    FA6.2
03FF2:  MOVLB  F
03FF4:  MOVLW  55
03FF6:  MOVWF  FA7
03FF8:  MOVLW  AA
03FFA:  MOVWF  FA7
03FFC:  BSF    FA6.1
03FFE:  BTFSC  FA6.1
04000:  BRA    3FFE
04002:  BCF    FA6.2
04004:  MOVF   00,W
04006:  IORWF  FF2,F
....................                   break;
04008:  BRA    4098
....................                }
0400A:  BRA    4080
0400C:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage8[j] = RxD_Buff[i];
0400E:  MOVLW  6B
04010:  ADDWF  x50,W
04012:  MOVWF  01
04014:  MOVLW  0A
04016:  ADDWFC x51,W
04018:  MOVWF  03
0401A:  MOVLW  6E
0401C:  ADDWF  x4E,W
0401E:  MOVWF  FE9
04020:  MOVLW  01
04022:  ADDWFC x4F,W
04024:  MOVWF  FEA
04026:  MOVFF  FEF,B56
0402A:  MOVFF  03,FEA
0402E:  MOVFF  01,FE9
04032:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04036:  MOVLW  5D
04038:  ADDWF  x4E,W
0403A:  MOVWF  x54
0403C:  MOVLW  00
0403E:  ADDWFC x4F,W
04040:  MOVWF  x55
04042:  MOVLW  6E
04044:  ADDWF  x4E,W
04046:  MOVWF  FE9
04048:  MOVLW  01
0404A:  ADDWFC x4F,W
0404C:  MOVWF  FEA
0404E:  MOVFF  FEF,B56
04052:  MOVF   FF2,W
04054:  MOVWF  00
04056:  BCF    FF2.7
04058:  MOVFF  B55,FAA
0405C:  MOVFF  B54,FA9
04060:  MOVFF  B56,FA8
04064:  BCF    FA6.6
04066:  BCF    FA6.7
04068:  BSF    FA6.2
0406A:  MOVLB  F
0406C:  MOVLW  55
0406E:  MOVWF  FA7
04070:  MOVLW  AA
04072:  MOVWF  FA7
04074:  BSF    FA6.1
04076:  BTFSC  FA6.1
04078:  BRA    4076
0407A:  BCF    FA6.2
0407C:  MOVF   00,W
0407E:  IORWF  FF2,F
....................                }
04080:  MOVLB  B
04082:  MOVFF  B4F,03
04086:  MOVF   x4E,W
04088:  INCF   x4E,F
0408A:  BTFSC  FD8.2
0408C:  INCF   x4F,F
0408E:  INCF   x50,F
04090:  BTFSC  FD8.2
04092:  INCF   x51,F
04094:  BRA    3FA0
04096:  MOVLB  F
....................             }
....................             SMS_Massage8[j] = '\0' ; // end string
04098:  MOVLW  6B
0409A:  MOVLB  B
0409C:  ADDWF  x50,W
0409E:  MOVWF  FE9
040A0:  MOVLW  0A
040A2:  ADDWFC x51,W
040A4:  MOVWF  FEA
040A6:  CLRF   FEF
....................             
....................             /////////////////////////////////////////////
....................             j=0;
040A8:  CLRF   x51
040AA:  CLRF   x50
....................             i++;
040AC:  INCF   x4E,F
040AE:  BTFSC  FD8.2
040B0:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
040B2:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
040B4:  MOVLW  6E
040B6:  ADDWF  x4E,W
040B8:  MOVWF  FE9
040BA:  MOVLW  01
040BC:  ADDWFC x4F,W
040BE:  MOVWF  FEA
040C0:  MOVF   FEF,W
040C2:  SUBLW  0D
040C4:  BZ    40D0
040C6:  MOVF   x51,F
040C8:  BNZ   40D0
040CA:  MOVF   x50,W
040CC:  SUBLW  29
040CE:  BC    4120
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
040D0:  MOVLW  5D
040D2:  ADDWF  x4E,W
040D4:  MOVWF  x54
040D6:  MOVLW  00
040D8:  ADDWFC x4F,W
040DA:  MOVWF  x55
040DC:  MOVLW  6E
040DE:  ADDWF  x4E,W
040E0:  MOVWF  FE9
040E2:  MOVLW  01
040E4:  ADDWFC x4F,W
040E6:  MOVWF  FEA
040E8:  MOVFF  FEF,B56
040EC:  MOVF   FF2,W
040EE:  MOVWF  00
040F0:  BCF    FF2.7
040F2:  MOVFF  B55,FAA
040F6:  MOVFF  B54,FA9
040FA:  MOVFF  B56,FA8
040FE:  BCF    FA6.6
04100:  BCF    FA6.7
04102:  BSF    FA6.2
04104:  MOVLB  F
04106:  MOVLW  55
04108:  MOVWF  FA7
0410A:  MOVLW  AA
0410C:  MOVWF  FA7
0410E:  BSF    FA6.1
04110:  BTFSC  FA6.1
04112:  BRA    4110
04114:  BCF    FA6.2
04116:  MOVF   00,W
04118:  IORWF  FF2,F
....................                   break;
0411A:  BRA    41AA
....................                }
0411C:  BRA    4192
0411E:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage9[j] = RxD_Buff[i];
04120:  MOVLW  8B
04122:  ADDWF  x50,W
04124:  MOVWF  01
04126:  MOVLW  0A
04128:  ADDWFC x51,W
0412A:  MOVWF  03
0412C:  MOVLW  6E
0412E:  ADDWF  x4E,W
04130:  MOVWF  FE9
04132:  MOVLW  01
04134:  ADDWFC x4F,W
04136:  MOVWF  FEA
04138:  MOVFF  FEF,B56
0413C:  MOVFF  03,FEA
04140:  MOVFF  01,FE9
04144:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04148:  MOVLW  5D
0414A:  ADDWF  x4E,W
0414C:  MOVWF  x54
0414E:  MOVLW  00
04150:  ADDWFC x4F,W
04152:  MOVWF  x55
04154:  MOVLW  6E
04156:  ADDWF  x4E,W
04158:  MOVWF  FE9
0415A:  MOVLW  01
0415C:  ADDWFC x4F,W
0415E:  MOVWF  FEA
04160:  MOVFF  FEF,B56
04164:  MOVF   FF2,W
04166:  MOVWF  00
04168:  BCF    FF2.7
0416A:  MOVFF  B55,FAA
0416E:  MOVFF  B54,FA9
04172:  MOVFF  B56,FA8
04176:  BCF    FA6.6
04178:  BCF    FA6.7
0417A:  BSF    FA6.2
0417C:  MOVLB  F
0417E:  MOVLW  55
04180:  MOVWF  FA7
04182:  MOVLW  AA
04184:  MOVWF  FA7
04186:  BSF    FA6.1
04188:  BTFSC  FA6.1
0418A:  BRA    4188
0418C:  BCF    FA6.2
0418E:  MOVF   00,W
04190:  IORWF  FF2,F
....................                }
04192:  MOVLB  B
04194:  MOVFF  B4F,03
04198:  MOVF   x4E,W
0419A:  INCF   x4E,F
0419C:  BTFSC  FD8.2
0419E:  INCF   x4F,F
041A0:  INCF   x50,F
041A2:  BTFSC  FD8.2
041A4:  INCF   x51,F
041A6:  BRA    40B2
041A8:  MOVLB  F
....................             }
....................             SMS_Massage9[j] = '\0' ; // end string
041AA:  MOVLW  8B
041AC:  MOVLB  B
041AE:  ADDWF  x50,W
041B0:  MOVWF  FE9
041B2:  MOVLW  0A
041B4:  ADDWFC x51,W
041B6:  MOVWF  FEA
041B8:  CLRF   FEF
....................             j=0;
041BA:  CLRF   x51
041BC:  CLRF   x50
....................             i++;
041BE:  INCF   x4E,F
041C0:  BTFSC  FD8.2
041C2:  INCF   x4F,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
041C4:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 41))
041C6:  MOVLW  6E
041C8:  ADDWF  x4E,W
041CA:  MOVWF  FE9
041CC:  MOVLW  01
041CE:  ADDWFC x4F,W
041D0:  MOVWF  FEA
041D2:  MOVF   FEF,W
041D4:  SUBLW  0D
041D6:  BZ    41E2
041D8:  MOVF   x51,F
041DA:  BNZ   41E2
041DC:  MOVF   x50,W
041DE:  SUBLW  29
041E0:  BC    4232
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
041E2:  MOVLW  5D
041E4:  ADDWF  x4E,W
041E6:  MOVWF  x54
041E8:  MOVLW  00
041EA:  ADDWFC x4F,W
041EC:  MOVWF  x55
041EE:  MOVLW  6E
041F0:  ADDWF  x4E,W
041F2:  MOVWF  FE9
041F4:  MOVLW  01
041F6:  ADDWFC x4F,W
041F8:  MOVWF  FEA
041FA:  MOVFF  FEF,B56
041FE:  MOVF   FF2,W
04200:  MOVWF  00
04202:  BCF    FF2.7
04204:  MOVFF  B55,FAA
04208:  MOVFF  B54,FA9
0420C:  MOVFF  B56,FA8
04210:  BCF    FA6.6
04212:  BCF    FA6.7
04214:  BSF    FA6.2
04216:  MOVLB  F
04218:  MOVLW  55
0421A:  MOVWF  FA7
0421C:  MOVLW  AA
0421E:  MOVWF  FA7
04220:  BSF    FA6.1
04222:  BTFSC  FA6.1
04224:  BRA    4222
04226:  BCF    FA6.2
04228:  MOVF   00,W
0422A:  IORWF  FF2,F
....................                   break;
0422C:  BRA    42BC
....................                }
0422E:  BRA    42A4
04230:  MOVLB  B
....................                else
....................                {
....................                   SMS_Massage10[j] = RxD_Buff[i];
04232:  MOVLW  AB
04234:  ADDWF  x50,W
04236:  MOVWF  01
04238:  MOVLW  0A
0423A:  ADDWFC x51,W
0423C:  MOVWF  03
0423E:  MOVLW  6E
04240:  ADDWF  x4E,W
04242:  MOVWF  FE9
04244:  MOVLW  01
04246:  ADDWFC x4F,W
04248:  MOVWF  FEA
0424A:  MOVFF  FEF,B56
0424E:  MOVFF  03,FEA
04252:  MOVFF  01,FE9
04256:  MOVFF  B56,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0425A:  MOVLW  5D
0425C:  ADDWF  x4E,W
0425E:  MOVWF  x54
04260:  MOVLW  00
04262:  ADDWFC x4F,W
04264:  MOVWF  x55
04266:  MOVLW  6E
04268:  ADDWF  x4E,W
0426A:  MOVWF  FE9
0426C:  MOVLW  01
0426E:  ADDWFC x4F,W
04270:  MOVWF  FEA
04272:  MOVFF  FEF,B56
04276:  MOVF   FF2,W
04278:  MOVWF  00
0427A:  BCF    FF2.7
0427C:  MOVFF  B55,FAA
04280:  MOVFF  B54,FA9
04284:  MOVFF  B56,FA8
04288:  BCF    FA6.6
0428A:  BCF    FA6.7
0428C:  BSF    FA6.2
0428E:  MOVLB  F
04290:  MOVLW  55
04292:  MOVWF  FA7
04294:  MOVLW  AA
04296:  MOVWF  FA7
04298:  BSF    FA6.1
0429A:  BTFSC  FA6.1
0429C:  BRA    429A
0429E:  BCF    FA6.2
042A0:  MOVF   00,W
042A2:  IORWF  FF2,F
....................                }
042A4:  MOVLB  B
042A6:  MOVFF  B4F,03
042AA:  MOVF   x4E,W
042AC:  INCF   x4E,F
042AE:  BTFSC  FD8.2
042B0:  INCF   x4F,F
042B2:  INCF   x50,F
042B4:  BTFSC  FD8.2
042B6:  INCF   x51,F
042B8:  BRA    41C4
042BA:  MOVLB  F
....................             }
....................             SMS_Massage10[j] = '\0' ; // end string
042BC:  MOVLW  AB
042BE:  MOVLB  B
042C0:  ADDWF  x50,W
042C2:  MOVWF  FE9
042C4:  MOVLW  0A
042C6:  ADDWFC x51,W
042C8:  MOVWF  FEA
042CA:  CLRF   FEF
....................             
....................          
....................             TxD_Buff[0] = Address ;         //Address
042CC:  MOVFF  6C,6E
....................             TxD_Buff[1] = 0x21 ;            //return function code
042D0:  MOVLW  21
042D2:  MOVLB  0
042D4:  MOVWF  x6F
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
042D6:  MOVLB  B
042D8:  CLRF   x56
042DA:  MOVLW  6E
042DC:  MOVWF  x55
042DE:  MOVLW  02
042E0:  MOVWF  x57
042E2:  MOVLB  0
042E4:  CALL   2384
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
042E8:  MOVFF  56F,70
....................             TxD_Buff[3] = CRC_Lo ;
042EC:  MOVFF  56E,71
.................... 
....................             output_bit(P485ctrl,1);
042F0:  BSF    F8A.3
042F2:  BCF    F93.3
....................             delay_ms(10);
042F4:  MOVLW  0A
042F6:  MOVLB  B
042F8:  MOVWF  x54
042FA:  MOVLB  0
042FC:  CALL   07DC
.................... 
....................             putc(Txd_Buff[0]);
04300:  MOVF   x6E,W
04302:  CALL   23DA
....................             putc(Txd_Buff[1]);
04306:  MOVF   x6F,W
04308:  CALL   23DA
....................             putc(Txd_Buff[2]);
0430C:  MOVF   x70,W
0430E:  CALL   23DA
....................             putc(Txd_Buff[3]);
04312:  MOVF   x71,W
04314:  CALL   23DA
.................... 
....................             delay_ms(3);
04318:  MOVLW  03
0431A:  MOVLB  B
0431C:  MOVWF  x54
0431E:  MOVLB  0
04320:  CALL   07DC
....................             output_bit(P485ctrl,0);
04324:  BCF    F8A.3
04326:  BCF    F93.3
04328:  MOVLB  1
....................          }
....................          /////////////////////////////////////////////////////////////////////////////////////
....................          
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
0432A:  MOVF   x6F,W
0432C:  SUBLW  03
0432E:  BNZ   43BC
....................          {
.................... 
....................             Data_Buff[0] = Input9_10;// dummy data
04330:  MOVFF  4B,577
....................             Data_Buff[1] = Input1_8;
04334:  MOVFF  4A,578
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
04338:  MOVFF  6C,6E
....................             TxD_Buff[1] = 0x03 ;           //Function Code
0433C:  MOVLW  03
0433E:  MOVLB  0
04340:  MOVWF  x6F
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
04342:  MOVLW  02
04344:  MOVWF  x70
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
04346:  MOVFF  577,71
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
0434A:  MOVFF  578,72
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
0434E:  MOVLB  B
04350:  CLRF   x56
04352:  MOVLW  6E
04354:  MOVWF  x55
04356:  MOVLW  05
04358:  MOVWF  x57
0435A:  MOVLB  0
0435C:  CALL   2384
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
04360:  MOVFF  56F,73
....................             TxD_Buff[6] = CRC_Lo ;
04364:  MOVFF  56E,74
.................... 
....................             output_bit(P485ctrl,1);
04368:  BSF    F8A.3
0436A:  BCF    F93.3
....................             restart_wdt();
0436C:  CLRWDT
....................             delay_ms(4);
0436E:  MOVLW  04
04370:  MOVLB  B
04372:  MOVWF  x54
04374:  MOVLB  0
04376:  CALL   07DC
....................             restart_wdt();
0437A:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
0437C:  MOVF   x6E,W
0437E:  CALL   23DA
....................             putc(TxD_Buff[1]) ;               //Function Code
04382:  MOVF   x6F,W
04384:  CALL   23DA
....................             putc(TxD_Buff[2]) ;               //Byte Count
04388:  MOVF   x70,W
0438A:  CALL   23DA
....................             putc(TxD_Buff[3]) ;
0438E:  MOVF   x71,W
04390:  CALL   23DA
....................             putc(TxD_Buff[4]) ;
04394:  MOVF   x72,W
04396:  CALL   23DA
....................             putc(TxD_Buff[5]) ;
0439A:  MOVF   x73,W
0439C:  CALL   23DA
....................             putc(TxD_Buff[6]) ;
043A0:  MOVF   x74,W
043A2:  CALL   23DA
....................             
....................             restart_wdt();
043A6:  CLRWDT
....................             delay_ms(3);
043A8:  MOVLW  03
043AA:  MOVLB  B
043AC:  MOVWF  x54
043AE:  MOVLB  0
043B0:  CALL   07DC
....................             restart_wdt();
043B4:  CLRWDT
....................             output_bit(P485ctrl,0);
043B6:  BCF    F8A.3
043B8:  BCF    F93.3
043BA:  MOVLB  1
....................          }
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
043BC:  MOVLW  01
043BE:  MOVLB  5
043C0:  MOVWF  x71
043C2:  MOVLW  F4
043C4:  MOVWF  x70
....................    }
.................... 
....................    recieve_completed = 0 ;
043C6:  BCF    30.5
....................    sequence = end_sq ;
043C8:  MOVFF  63,6B
....................    T_timeout = 0x00;
043CC:  MOVLB  9
043CE:  CLRF   x79
....................    RxD_DataLen = 0x00 ;
043D0:  MOVLB  0
043D2:  CLRF   x6D
....................    output_bit(P485ctrl,0);
043D4:  BCF    F8A.3
043D6:  BCF    F93.3
043D8:  GOTO   769E (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................     ///////////////////////--Edit--///////////////////
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
*
018B8:  MOVLB  B
018BA:  CLRF   x4C
018BC:  MOVLB  0
018BE:  RCALL  178A
018C0:  MOVFF  01,977
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
018C4:  BTFSS  1A.4
018C6:  BRA    18CE
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
018C8:  MOVLB  9
018CA:  COMF   x77,F
018CC:  MOVLB  0
....................       }
....................       
....................       FaultNow[11] = MCP23s17_Ip_dat;
018CE:  MOVLB  A
018D0:  BCF    xED.3
018D2:  MOVLB  9
018D4:  BTFSS  x77.0
018D6:  BRA    18DE
018D8:  MOVLB  A
018DA:  BSF    xED.3
018DC:  MOVLB  9
....................       FaultNow[12] = MCP23s17_Ip_dat >> 1;
018DE:  BCF    FD8.0
018E0:  RRCF   x77,W
018E2:  MOVLB  A
018E4:  BCF    xED.4
018E6:  BTFSC  FE8.0
018E8:  BSF    xED.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 2;
018EA:  MOVLB  9
018EC:  RRCF   x77,W
018EE:  MOVWF  00
018F0:  RRCF   00,F
018F2:  MOVLW  3F
018F4:  ANDWF  00,F
018F6:  MOVLB  A
018F8:  BCF    xED.5
018FA:  BTFSC  00.0
018FC:  BSF    xED.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 3;
018FE:  MOVLB  9
01900:  RRCF   x77,W
01902:  MOVWF  00
01904:  RRCF   00,F
01906:  RRCF   00,F
01908:  MOVLW  1F
0190A:  ANDWF  00,F
0190C:  MOVLB  A
0190E:  BCF    xED.6
01910:  BTFSC  00.0
01912:  BSF    xED.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 4;
01914:  MOVLB  9
01916:  SWAPF  x77,W
01918:  MOVWF  00
0191A:  MOVLW  0F
0191C:  ANDWF  00,F
0191E:  MOVLB  A
01920:  BCF    xED.7
01922:  BTFSC  00.0
01924:  BSF    xED.7
....................       FaultNow[16] = MCP23s17_Ip_dat >> 5;
01926:  MOVLB  9
01928:  SWAPF  x77,W
0192A:  MOVWF  00
0192C:  RRCF   00,F
0192E:  MOVLW  07
01930:  ANDWF  00,F
01932:  MOVLB  A
01934:  BCF    xEE.0
01936:  BTFSC  00.0
01938:  BSF    xEE.0
....................       FaultNow[17] = MCP23s17_Ip_dat >> 6;
0193A:  MOVLB  9
0193C:  SWAPF  x77,W
0193E:  MOVWF  00
01940:  RRCF   00,F
01942:  RRCF   00,F
01944:  MOVLW  03
01946:  ANDWF  00,F
01948:  MOVLB  A
0194A:  BCF    xEE.1
0194C:  BTFSC  00.0
0194E:  BSF    xEE.1
....................       FaultNow[18] = MCP23s17_Ip_dat >> 7;
01950:  CLRF   00
01952:  MOVLB  9
01954:  BTFSC  x77.7
01956:  BSF    00.0
01958:  MOVLB  A
0195A:  BCF    xEE.2
0195C:  BTFSC  00.0
0195E:  BSF    xEE.2
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
01960:  MOVLB  B
01962:  CLRF   x4C
01964:  MOVLB  0
01966:  RCALL  17A6
01968:  MOVFF  01,977
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0196C:  BTFSS  1A.4
0196E:  BRA    1976
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01970:  MOVLB  9
01972:  COMF   x77,F
01974:  MOVLB  0
....................       }
....................       
....................       FaultNow[19] = MCP23s17_Ip_dat;
01976:  MOVLB  A
01978:  BCF    xEE.3
0197A:  MOVLB  9
0197C:  BTFSS  x77.0
0197E:  BRA    1986
01980:  MOVLB  A
01982:  BSF    xEE.3
01984:  MOVLB  9
....................       FaultNow[20] = MCP23s17_Ip_dat >> 1;
01986:  BCF    FD8.0
01988:  RRCF   x77,W
0198A:  MOVLB  A
0198C:  BCF    xEE.4
0198E:  BTFSC  FE8.0
01990:  BSF    xEE.4
....................       
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
01992:  MOVLW  02
01994:  MOVLB  B
01996:  MOVWF  x4C
01998:  MOVLB  0
0199A:  RCALL  178A
0199C:  MOVFF  01,977
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
019A0:  BTFSS  1A.4
019A2:  BRA    19AA
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
019A4:  MOVLB  9
019A6:  COMF   x77,F
019A8:  MOVLB  0
....................          
....................       }
....................       
....................       FaultNow[1] = MCP23s17_Ip_dat;
019AA:  MOVLB  A
019AC:  BCF    xEC.1
019AE:  MOVLB  9
019B0:  BTFSS  x77.0
019B2:  BRA    19BA
019B4:  MOVLB  A
019B6:  BSF    xEC.1
019B8:  MOVLB  9
....................       FaultNow[2] = MCP23s17_Ip_dat >> 1;
019BA:  BCF    FD8.0
019BC:  RRCF   x77,W
019BE:  MOVLB  A
019C0:  BCF    xEC.2
019C2:  BTFSC  FE8.0
019C4:  BSF    xEC.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 2;
019C6:  MOVLB  9
019C8:  RRCF   x77,W
019CA:  MOVWF  00
019CC:  RRCF   00,F
019CE:  MOVLW  3F
019D0:  ANDWF  00,F
019D2:  MOVLB  A
019D4:  BCF    xEC.3
019D6:  BTFSC  00.0
019D8:  BSF    xEC.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 3;
019DA:  MOVLB  9
019DC:  RRCF   x77,W
019DE:  MOVWF  00
019E0:  RRCF   00,F
019E2:  RRCF   00,F
019E4:  MOVLW  1F
019E6:  ANDWF  00,F
019E8:  MOVLB  A
019EA:  BCF    xEC.4
019EC:  BTFSC  00.0
019EE:  BSF    xEC.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 4;
019F0:  MOVLB  9
019F2:  SWAPF  x77,W
019F4:  MOVWF  00
019F6:  MOVLW  0F
019F8:  ANDWF  00,F
019FA:  MOVLB  A
019FC:  BCF    xEC.5
019FE:  BTFSC  00.0
01A00:  BSF    xEC.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 5;
01A02:  MOVLB  9
01A04:  SWAPF  x77,W
01A06:  MOVWF  00
01A08:  RRCF   00,F
01A0A:  MOVLW  07
01A0C:  ANDWF  00,F
01A0E:  MOVLB  A
01A10:  BCF    xEC.6
01A12:  BTFSC  00.0
01A14:  BSF    xEC.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 6;
01A16:  MOVLB  9
01A18:  SWAPF  x77,W
01A1A:  MOVWF  00
01A1C:  RRCF   00,F
01A1E:  RRCF   00,F
01A20:  MOVLW  03
01A22:  ANDWF  00,F
01A24:  MOVLB  A
01A26:  BCF    xEC.7
01A28:  BTFSC  00.0
01A2A:  BSF    xEC.7
....................       FaultNow[8] = MCP23s17_Ip_dat >> 7;
01A2C:  CLRF   00
01A2E:  MOVLB  9
01A30:  BTFSC  x77.7
01A32:  BSF    00.0
01A34:  MOVLB  A
01A36:  BCF    xED.0
01A38:  BTFSC  00.0
01A3A:  BSF    xED.0
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01A3C:  MOVLW  02
01A3E:  MOVLB  B
01A40:  MOVWF  x4C
01A42:  MOVLB  0
01A44:  RCALL  17A6
01A46:  MOVFF  01,977
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01A4A:  BTFSS  1A.4
01A4C:  BRA    1A54
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01A4E:  MOVLB  9
01A50:  COMF   x77,F
01A52:  MOVLB  0
....................       }
....................       
....................       FaultNow[9] = MCP23s17_Ip_dat;
01A54:  MOVLB  A
01A56:  BCF    xED.1
01A58:  MOVLB  9
01A5A:  BTFSS  x77.0
01A5C:  BRA    1A64
01A5E:  MOVLB  A
01A60:  BSF    xED.1
01A62:  MOVLB  9
....................       FaultNow[10] = MCP23s17_Ip_dat >> 1;
01A64:  BCF    FD8.0
01A66:  RRCF   x77,W
01A68:  MOVLB  A
01A6A:  BCF    xED.2
01A6C:  BTFSC  FE8.0
01A6E:  BSF    xED.2
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=10; i++)
01A70:  MOVLW  01
01A72:  MOVLB  B
01A74:  MOVWF  x4B
01A76:  MOVF   x4B,W
01A78:  SUBLW  0A
01A7A:  BTFSS  FD8.0
01A7C:  BRA    1FA6
....................       {
....................          if(FaultNCNO[i] ==NO)
01A7E:  MOVFF  B4B,B4F
01A82:  MOVLW  0B
01A84:  MOVWF  x51
01A86:  MOVLW  43
01A88:  MOVWF  x50
01A8A:  MOVLB  0
01A8C:  RCALL  17C2
01A8E:  MOVF   01,W
01A90:  ANDLW  01
01A92:  SUBLW  01
01A94:  BTFSS  FD8.2
01A96:  BRA    1D0E
....................          {
....................              if(FaultNow[i]==0)
01A98:  MOVFF  B4B,B4F
01A9C:  MOVLW  0A
01A9E:  MOVLB  B
01AA0:  MOVWF  x51
01AA2:  MOVLW  EC
01AA4:  MOVWF  x50
01AA6:  MOVLB  0
01AA8:  RCALL  17C2
01AAA:  MOVF   01,W
01AAC:  ANDLW  01
01AAE:  BTFSS  FD8.2
01AB0:  BRA    1BE0
....................              {   
....................                if(FaultAgo[i]==0)
01AB2:  MOVFF  B4B,B4F
01AB6:  MOVLW  0A
01AB8:  MOVLB  B
01ABA:  MOVWF  x51
01ABC:  MOVLW  E9
01ABE:  MOVWF  x50
01AC0:  MOVLB  0
01AC2:  RCALL  17C2
01AC4:  MOVF   01,W
01AC6:  ANDLW  01
01AC8:  BTFSS  FD8.2
01ACA:  BRA    1BC4
....................                {
....................                    ReleaseTime[i]++;
01ACC:  BCF    FD8.0
01ACE:  MOVLB  B
01AD0:  RLCF   x4B,W
01AD2:  CLRF   03
01AD4:  ADDLW  EF
01AD6:  MOVWF  FE9
01AD8:  MOVLW  0A
01ADA:  ADDWFC 03,W
01ADC:  MOVWF  FEA
01ADE:  MOVLW  01
01AE0:  ADDWF  FEE,F
01AE2:  BNC   1AE6
01AE4:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01AE6:  BCF    FD8.0
01AE8:  RLCF   x4B,W
01AEA:  CLRF   03
01AEC:  ADDLW  EF
01AEE:  MOVWF  FE9
01AF0:  MOVLW  0A
01AF2:  ADDWFC 03,W
01AF4:  MOVWF  FEA
01AF6:  MOVFF  FEC,B4D
01AFA:  MOVF   FED,F
01AFC:  MOVFF  FEF,B4C
01B00:  BCF    FD8.0
01B02:  RLCF   x4B,W
01B04:  CLRF   03
01B06:  ADDLW  19
01B08:  MOVWF  FE9
01B0A:  MOVLW  0B
01B0C:  ADDWFC 03,W
01B0E:  MOVWF  FEA
01B10:  MOVFF  FEC,B51
01B14:  MOVF   FED,F
01B16:  MOVFF  FEF,B50
01B1A:  CLRF   x53
01B1C:  MOVLW  4B
01B1E:  MOVWF  x52
01B20:  MOVLB  0
01B22:  RCALL  17F8
01B24:  MOVFF  02,B4F
01B28:  MOVFF  01,B4E
01B2C:  MOVLW  0F
01B2E:  MOVLB  B
01B30:  ADDWF  01,W
01B32:  MOVWF  01
01B34:  MOVLW  00
01B36:  ADDWFC 02,W
01B38:  MOVWF  03
01B3A:  MOVF   03,W
01B3C:  SUBWF  x4D,W
01B3E:  BNC   1BC0
01B40:  BNZ   1B48
01B42:  MOVF   01,W
01B44:  SUBWF  x4C,W
01B46:  BNC   1BC0
....................                    {   
....................                      ReleaseTime[i] = 0;
01B48:  BCF    FD8.0
01B4A:  RLCF   x4B,W
01B4C:  CLRF   03
01B4E:  ADDLW  EF
01B50:  MOVWF  FE9
01B52:  MOVLW  0A
01B54:  ADDWFC 03,W
01B56:  MOVWF  FEA
01B58:  CLRF   FEC
01B5A:  MOVF   FED,F
01B5C:  CLRF   FEF
....................                      switch(i)
01B5E:  MOVLW  01
01B60:  SUBWF  x4B,W
01B62:  ADDLW  F6
01B64:  BC    1BC0
01B66:  ADDLW  0A
01B68:  MOVLB  0
01B6A:  GOTO   206A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01B6E:  MOVLB  A
01B70:  BCF    xCB.0
....................                         break;
01B72:  MOVLB  B
01B74:  BRA    1BC0
....................                         case 2:
....................                            Inputt.B2 = 0; 
01B76:  MOVLB  A
01B78:  BCF    xCB.1
....................                         break;
01B7A:  MOVLB  B
01B7C:  BRA    1BC0
....................                         case 3:
....................                            Inputt.B3 = 0; 
01B7E:  MOVLB  A
01B80:  BCF    xCB.2
....................                         break;
01B82:  MOVLB  B
01B84:  BRA    1BC0
....................                         case 4:
....................                            Inputt.B4 = 0; 
01B86:  MOVLB  A
01B88:  BCF    xCB.3
....................                         break;
01B8A:  MOVLB  B
01B8C:  BRA    1BC0
....................                         case 5:
....................                            Inputt.B5 = 0; 
01B8E:  MOVLB  A
01B90:  BCF    xCB.4
....................                         break;
01B92:  MOVLB  B
01B94:  BRA    1BC0
....................                         case 6:
....................                            Inputt.B6 = 0; 
01B96:  MOVLB  A
01B98:  BCF    xCB.5
....................                         break;
01B9A:  MOVLB  B
01B9C:  BRA    1BC0
....................                         case 7:
....................                            Inputt.B7 = 0; 
01B9E:  MOVLB  A
01BA0:  BCF    xCB.6
....................                          break;
01BA2:  MOVLB  B
01BA4:  BRA    1BC0
....................                          case 8:
....................                            Inputt.B8 = 0; 
01BA6:  MOVLB  A
01BA8:  BCF    xCB.7
....................                         break;
01BAA:  MOVLB  B
01BAC:  BRA    1BC0
....................                         case 9:
....................                            Inputt.B9 = 0; 
01BAE:  MOVLB  A
01BB0:  BCF    xCC.0
....................                         break;
01BB2:  MOVLB  B
01BB4:  BRA    1BC0
....................                         case 10:
....................                            Inputt.B10 = 0; 
01BB6:  MOVLB  A
01BB8:  BCF    xCC.1
....................                         break;
01BBA:  MOVLB  B
01BBC:  BRA    1BC0
01BBE:  MOVLB  B
....................         
....................                      }                 
....................                    }
....................                }
01BC0:  BRA    1BDC
01BC2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01BC4:  BCF    FD8.0
01BC6:  MOVLB  B
01BC8:  RLCF   x4B,W
01BCA:  CLRF   03
01BCC:  ADDLW  EF
01BCE:  MOVWF  FE9
01BD0:  MOVLW  0A
01BD2:  ADDWFC 03,W
01BD4:  MOVWF  FEA
01BD6:  CLRF   FEC
01BD8:  MOVF   FED,F
01BDA:  CLRF   FEF
....................                }
....................              }
01BDC:  BRA    1D0C
01BDE:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
01BE0:  MOVFF  B4B,B4F
01BE4:  MOVLW  0A
01BE6:  MOVLB  B
01BE8:  MOVWF  x51
01BEA:  MOVLW  E9
01BEC:  MOVWF  x50
01BEE:  MOVLB  0
01BF0:  RCALL  17C2
01BF2:  MOVF   01,W
01BF4:  ANDLW  01
01BF6:  SUBLW  01
01BF8:  BTFSS  FD8.2
01BFA:  BRA    1CF4
....................                {
....................                    ReleaseTime[i]++;
01BFC:  BCF    FD8.0
01BFE:  MOVLB  B
01C00:  RLCF   x4B,W
01C02:  CLRF   03
01C04:  ADDLW  EF
01C06:  MOVWF  FE9
01C08:  MOVLW  0A
01C0A:  ADDWFC 03,W
01C0C:  MOVWF  FEA
01C0E:  MOVLW  01
01C10:  ADDWF  FEE,F
01C12:  BNC   1C16
01C14:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01C16:  BCF    FD8.0
01C18:  RLCF   x4B,W
01C1A:  CLRF   03
01C1C:  ADDLW  EF
01C1E:  MOVWF  FE9
01C20:  MOVLW  0A
01C22:  ADDWFC 03,W
01C24:  MOVWF  FEA
01C26:  MOVFF  FEC,B4D
01C2A:  MOVF   FED,F
01C2C:  MOVFF  FEF,B4C
01C30:  BCF    FD8.0
01C32:  RLCF   x4B,W
01C34:  CLRF   03
01C36:  ADDLW  19
01C38:  MOVWF  FE9
01C3A:  MOVLW  0B
01C3C:  ADDWFC 03,W
01C3E:  MOVWF  FEA
01C40:  MOVFF  FEC,B51
01C44:  MOVF   FED,F
01C46:  MOVFF  FEF,B50
01C4A:  CLRF   x53
01C4C:  MOVLW  4B
01C4E:  MOVWF  x52
01C50:  MOVLB  0
01C52:  RCALL  17F8
01C54:  MOVFF  02,B4F
01C58:  MOVFF  01,B4E
01C5C:  MOVLW  0F
01C5E:  MOVLB  B
01C60:  ADDWF  01,W
01C62:  MOVWF  01
01C64:  MOVLW  00
01C66:  ADDWFC 02,W
01C68:  MOVWF  03
01C6A:  MOVF   03,W
01C6C:  SUBWF  x4D,W
01C6E:  BNC   1CF0
01C70:  BNZ   1C78
01C72:  MOVF   01,W
01C74:  SUBWF  x4C,W
01C76:  BNC   1CF0
....................                    {   
....................                      ReleaseTime[i] = 1;
01C78:  BCF    FD8.0
01C7A:  RLCF   x4B,W
01C7C:  CLRF   03
01C7E:  ADDLW  EF
01C80:  MOVWF  FE9
01C82:  MOVLW  0A
01C84:  ADDWFC 03,W
01C86:  MOVWF  FEA
01C88:  CLRF   FEC
01C8A:  MOVF   FED,F
01C8C:  MOVLW  01
01C8E:  MOVWF  FEF
....................                      switch(i)
01C90:  SUBWF  x4B,W
01C92:  ADDLW  F6
01C94:  BC    1CF0
01C96:  ADDLW  0A
01C98:  MOVLB  0
01C9A:  GOTO   2098
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01C9E:  MOVLB  A
01CA0:  BSF    xCB.0
....................                         break;
01CA2:  MOVLB  B
01CA4:  BRA    1CF0
....................                         case 2:
....................                            Inputt.B2 = 1; 
01CA6:  MOVLB  A
01CA8:  BSF    xCB.1
....................                         break;
01CAA:  MOVLB  B
01CAC:  BRA    1CF0
....................                         case 3:
....................                            Inputt.B3 = 1; 
01CAE:  MOVLB  A
01CB0:  BSF    xCB.2
....................                         break;
01CB2:  MOVLB  B
01CB4:  BRA    1CF0
....................                         case 4:
....................                            Inputt.B4 = 1; 
01CB6:  MOVLB  A
01CB8:  BSF    xCB.3
....................                         break;
01CBA:  MOVLB  B
01CBC:  BRA    1CF0
....................                         case 5:
....................                            Inputt.B5 = 1; 
01CBE:  MOVLB  A
01CC0:  BSF    xCB.4
....................                         break;
01CC2:  MOVLB  B
01CC4:  BRA    1CF0
....................                         case 6:
....................                            Inputt.B6 = 1; 
01CC6:  MOVLB  A
01CC8:  BSF    xCB.5
....................                         break;
01CCA:  MOVLB  B
01CCC:  BRA    1CF0
....................                         case 7:
....................                            Inputt.B7 = 1; 
01CCE:  MOVLB  A
01CD0:  BSF    xCB.6
....................                          break;
01CD2:  MOVLB  B
01CD4:  BRA    1CF0
....................                          case 8:
....................                            Inputt.B8 = 1; 
01CD6:  MOVLB  A
01CD8:  BSF    xCB.7
....................                         break;
01CDA:  MOVLB  B
01CDC:  BRA    1CF0
....................                         case 9:
....................                            Inputt.B9 = 1; 
01CDE:  MOVLB  A
01CE0:  BSF    xCC.0
....................                         break;
01CE2:  MOVLB  B
01CE4:  BRA    1CF0
....................                         case 10:
....................                            Inputt.B10 = 1; 
01CE6:  MOVLB  A
01CE8:  BSF    xCC.1
....................                         break;
01CEA:  MOVLB  B
01CEC:  BRA    1CF0
01CEE:  MOVLB  B
....................          
....................                      }                 
....................                    }
....................                }
01CF0:  BRA    1D0C
01CF2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01CF4:  BCF    FD8.0
01CF6:  MOVLB  B
01CF8:  RLCF   x4B,W
01CFA:  CLRF   03
01CFC:  ADDLW  EF
01CFE:  MOVWF  FE9
01D00:  MOVLW  0A
01D02:  ADDWFC 03,W
01D04:  MOVWF  FEA
01D06:  CLRF   FEC
01D08:  MOVF   FED,F
01D0A:  CLRF   FEF
....................                }
.................... 
....................              }
....................           }
01D0C:  BRA    1F9E
....................           else if(FaultNCNO[i] ==NC)
01D0E:  MOVFF  B4B,B4F
01D12:  MOVLW  0B
01D14:  MOVLB  B
01D16:  MOVWF  x51
01D18:  MOVLW  43
01D1A:  MOVWF  x50
01D1C:  MOVLB  0
01D1E:  RCALL  17C2
01D20:  MOVF   01,W
01D22:  ANDLW  01
01D24:  BTFSS  FD8.2
01D26:  BRA    1FA0
....................           {
....................              if(FaultNow[i]==1)
01D28:  MOVFF  B4B,B4F
01D2C:  MOVLW  0A
01D2E:  MOVLB  B
01D30:  MOVWF  x51
01D32:  MOVLW  EC
01D34:  MOVWF  x50
01D36:  MOVLB  0
01D38:  RCALL  17C2
01D3A:  MOVF   01,W
01D3C:  ANDLW  01
01D3E:  SUBLW  01
01D40:  BTFSS  FD8.2
01D42:  BRA    1E74
....................              {
....................                if(FaultAgo[i]==1)
01D44:  MOVFF  B4B,B4F
01D48:  MOVLW  0A
01D4A:  MOVLB  B
01D4C:  MOVWF  x51
01D4E:  MOVLW  E9
01D50:  MOVWF  x50
01D52:  MOVLB  0
01D54:  RCALL  17C2
01D56:  MOVF   01,W
01D58:  ANDLW  01
01D5A:  SUBLW  01
01D5C:  BTFSS  FD8.2
01D5E:  BRA    1E58
....................                {
....................                    ReleaseTime[i]++;
01D60:  BCF    FD8.0
01D62:  MOVLB  B
01D64:  RLCF   x4B,W
01D66:  CLRF   03
01D68:  ADDLW  EF
01D6A:  MOVWF  FE9
01D6C:  MOVLW  0A
01D6E:  ADDWFC 03,W
01D70:  MOVWF  FEA
01D72:  MOVLW  01
01D74:  ADDWF  FEE,F
01D76:  BNC   1D7A
01D78:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01D7A:  BCF    FD8.0
01D7C:  RLCF   x4B,W
01D7E:  CLRF   03
01D80:  ADDLW  EF
01D82:  MOVWF  FE9
01D84:  MOVLW  0A
01D86:  ADDWFC 03,W
01D88:  MOVWF  FEA
01D8A:  MOVFF  FEC,B4D
01D8E:  MOVF   FED,F
01D90:  MOVFF  FEF,B4C
01D94:  BCF    FD8.0
01D96:  RLCF   x4B,W
01D98:  CLRF   03
01D9A:  ADDLW  19
01D9C:  MOVWF  FE9
01D9E:  MOVLW  0B
01DA0:  ADDWFC 03,W
01DA2:  MOVWF  FEA
01DA4:  MOVFF  FEC,B51
01DA8:  MOVF   FED,F
01DAA:  MOVFF  FEF,B50
01DAE:  CLRF   x53
01DB0:  MOVLW  4B
01DB2:  MOVWF  x52
01DB4:  MOVLB  0
01DB6:  RCALL  17F8
01DB8:  MOVFF  02,B4F
01DBC:  MOVFF  01,B4E
01DC0:  MOVLW  0F
01DC2:  MOVLB  B
01DC4:  ADDWF  01,W
01DC6:  MOVWF  01
01DC8:  MOVLW  00
01DCA:  ADDWFC 02,W
01DCC:  MOVWF  03
01DCE:  MOVF   03,W
01DD0:  SUBWF  x4D,W
01DD2:  BNC   1E54
01DD4:  BNZ   1DDC
01DD6:  MOVF   01,W
01DD8:  SUBWF  x4C,W
01DDA:  BNC   1E54
....................                    {   
....................                      ReleaseTime[i] = 0;
01DDC:  BCF    FD8.0
01DDE:  RLCF   x4B,W
01DE0:  CLRF   03
01DE2:  ADDLW  EF
01DE4:  MOVWF  FE9
01DE6:  MOVLW  0A
01DE8:  ADDWFC 03,W
01DEA:  MOVWF  FEA
01DEC:  CLRF   FEC
01DEE:  MOVF   FED,F
01DF0:  CLRF   FEF
....................                      switch(i)
01DF2:  MOVLW  01
01DF4:  SUBWF  x4B,W
01DF6:  ADDLW  F6
01DF8:  BC    1E54
01DFA:  ADDLW  0A
01DFC:  MOVLB  0
01DFE:  GOTO   20C6
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01E02:  MOVLB  A
01E04:  BSF    xCB.0
....................                         break;
01E06:  MOVLB  B
01E08:  BRA    1E54
....................                         case 2:
....................                            Inputt.B2 = 1; 
01E0A:  MOVLB  A
01E0C:  BSF    xCB.1
....................                         break;
01E0E:  MOVLB  B
01E10:  BRA    1E54
....................                         case 3:
....................                            Inputt.B3 = 1; 
01E12:  MOVLB  A
01E14:  BSF    xCB.2
....................                         break;
01E16:  MOVLB  B
01E18:  BRA    1E54
....................                         case 4:
....................                            Inputt.B4 = 1; 
01E1A:  MOVLB  A
01E1C:  BSF    xCB.3
....................                         break;
01E1E:  MOVLB  B
01E20:  BRA    1E54
....................                         case 5:
....................                            Inputt.B5 = 1; 
01E22:  MOVLB  A
01E24:  BSF    xCB.4
....................                         break;
01E26:  MOVLB  B
01E28:  BRA    1E54
....................                         case 6:
....................                            Inputt.B6 = 1; 
01E2A:  MOVLB  A
01E2C:  BSF    xCB.5
....................                         break;
01E2E:  MOVLB  B
01E30:  BRA    1E54
....................                         case 7:
....................                            Inputt.B7 = 1; 
01E32:  MOVLB  A
01E34:  BSF    xCB.6
....................                          break;
01E36:  MOVLB  B
01E38:  BRA    1E54
....................                          case 8:
....................                            Inputt.B8 = 1; 
01E3A:  MOVLB  A
01E3C:  BSF    xCB.7
....................                         break;
01E3E:  MOVLB  B
01E40:  BRA    1E54
....................                         case 9:
....................                            Inputt.B9 = 1; 
01E42:  MOVLB  A
01E44:  BSF    xCC.0
....................                         break;
01E46:  MOVLB  B
01E48:  BRA    1E54
....................                         case 10:
....................                            Inputt.B10 = 1; 
01E4A:  MOVLB  A
01E4C:  BSF    xCC.1
....................                         break;
01E4E:  MOVLB  B
01E50:  BRA    1E54
01E52:  MOVLB  B
....................                                          
....................                      }                 
....................                   }
....................                }
01E54:  BRA    1E70
01E56:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01E58:  BCF    FD8.0
01E5A:  MOVLB  B
01E5C:  RLCF   x4B,W
01E5E:  CLRF   03
01E60:  ADDLW  EF
01E62:  MOVWF  FE9
01E64:  MOVLW  0A
01E66:  ADDWFC 03,W
01E68:  MOVWF  FEA
01E6A:  CLRF   FEC
01E6C:  MOVF   FED,F
01E6E:  CLRF   FEF
....................                }
....................              }
01E70:  BRA    1F9E
01E72:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
01E74:  MOVFF  B4B,B4F
01E78:  MOVLW  0A
01E7A:  MOVLB  B
01E7C:  MOVWF  x51
01E7E:  MOVLW  E9
01E80:  MOVWF  x50
01E82:  MOVLB  0
01E84:  RCALL  17C2
01E86:  MOVF   01,W
01E88:  ANDLW  01
01E8A:  BTFSS  FD8.2
01E8C:  BRA    1F86
....................                {
....................                    ReleaseTime[i]++;
01E8E:  BCF    FD8.0
01E90:  MOVLB  B
01E92:  RLCF   x4B,W
01E94:  CLRF   03
01E96:  ADDLW  EF
01E98:  MOVWF  FE9
01E9A:  MOVLW  0A
01E9C:  ADDWFC 03,W
01E9E:  MOVWF  FEA
01EA0:  MOVLW  01
01EA2:  ADDWF  FEE,F
01EA4:  BNC   1EA8
01EA6:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01EA8:  BCF    FD8.0
01EAA:  RLCF   x4B,W
01EAC:  CLRF   03
01EAE:  ADDLW  EF
01EB0:  MOVWF  FE9
01EB2:  MOVLW  0A
01EB4:  ADDWFC 03,W
01EB6:  MOVWF  FEA
01EB8:  MOVFF  FEC,B4D
01EBC:  MOVF   FED,F
01EBE:  MOVFF  FEF,B4C
01EC2:  BCF    FD8.0
01EC4:  RLCF   x4B,W
01EC6:  CLRF   03
01EC8:  ADDLW  19
01ECA:  MOVWF  FE9
01ECC:  MOVLW  0B
01ECE:  ADDWFC 03,W
01ED0:  MOVWF  FEA
01ED2:  MOVFF  FEC,B51
01ED6:  MOVF   FED,F
01ED8:  MOVFF  FEF,B50
01EDC:  CLRF   x53
01EDE:  MOVLW  4B
01EE0:  MOVWF  x52
01EE2:  MOVLB  0
01EE4:  RCALL  17F8
01EE6:  MOVFF  02,B4F
01EEA:  MOVFF  01,B4E
01EEE:  MOVLW  0F
01EF0:  MOVLB  B
01EF2:  ADDWF  01,W
01EF4:  MOVWF  01
01EF6:  MOVLW  00
01EF8:  ADDWFC 02,W
01EFA:  MOVWF  03
01EFC:  MOVF   03,W
01EFE:  SUBWF  x4D,W
01F00:  BNC   1F82
01F02:  BNZ   1F0A
01F04:  MOVF   01,W
01F06:  SUBWF  x4C,W
01F08:  BNC   1F82
....................                    {   
....................                      ReleaseTime[i] = 0;
01F0A:  BCF    FD8.0
01F0C:  RLCF   x4B,W
01F0E:  CLRF   03
01F10:  ADDLW  EF
01F12:  MOVWF  FE9
01F14:  MOVLW  0A
01F16:  ADDWFC 03,W
01F18:  MOVWF  FEA
01F1A:  CLRF   FEC
01F1C:  MOVF   FED,F
01F1E:  CLRF   FEF
....................                      switch(i)
01F20:  MOVLW  01
01F22:  SUBWF  x4B,W
01F24:  ADDLW  F6
01F26:  BC    1F82
01F28:  ADDLW  0A
01F2A:  MOVLB  0
01F2C:  GOTO   20F4
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01F30:  MOVLB  A
01F32:  BCF    xCB.0
....................                         break;
01F34:  MOVLB  B
01F36:  BRA    1F82
....................                         case 2:
....................                            Inputt.B2 = 0; 
01F38:  MOVLB  A
01F3A:  BCF    xCB.1
....................                         break;
01F3C:  MOVLB  B
01F3E:  BRA    1F82
....................                         case 3:
....................                            Inputt.B3 = 0; 
01F40:  MOVLB  A
01F42:  BCF    xCB.2
....................                         break;
01F44:  MOVLB  B
01F46:  BRA    1F82
....................                         case 4:
....................                            Inputt.B4 = 0; 
01F48:  MOVLB  A
01F4A:  BCF    xCB.3
....................                         break;
01F4C:  MOVLB  B
01F4E:  BRA    1F82
....................                         case 5:
....................                            Inputt.B5 = 0; 
01F50:  MOVLB  A
01F52:  BCF    xCB.4
....................                         break;
01F54:  MOVLB  B
01F56:  BRA    1F82
....................                         case 6:
....................                            Inputt.B6 = 0; 
01F58:  MOVLB  A
01F5A:  BCF    xCB.5
....................                         break;
01F5C:  MOVLB  B
01F5E:  BRA    1F82
....................                         case 7:
....................                            Inputt.B7 = 0; 
01F60:  MOVLB  A
01F62:  BCF    xCB.6
....................                          break;
01F64:  MOVLB  B
01F66:  BRA    1F82
....................                          case 8:
....................                            Inputt.B8 = 0; 
01F68:  MOVLB  A
01F6A:  BCF    xCB.7
....................                         break;
01F6C:  MOVLB  B
01F6E:  BRA    1F82
....................                         case 9:
....................                            Inputt.B9 = 0; 
01F70:  MOVLB  A
01F72:  BCF    xCC.0
....................                         break;
01F74:  MOVLB  B
01F76:  BRA    1F82
....................                         case 10:
....................                            Inputt.B10 = 0; 
01F78:  MOVLB  A
01F7A:  BCF    xCC.1
....................                         break;
01F7C:  MOVLB  B
01F7E:  BRA    1F82
01F80:  MOVLB  B
....................          
....................                      }                 
....................                    }
....................                }
01F82:  BRA    1F9E
01F84:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01F86:  BCF    FD8.0
01F88:  MOVLB  B
01F8A:  RLCF   x4B,W
01F8C:  CLRF   03
01F8E:  ADDLW  EF
01F90:  MOVWF  FE9
01F92:  MOVLW  0A
01F94:  ADDWFC 03,W
01F96:  MOVWF  FEA
01F98:  CLRF   FEC
01F9A:  MOVF   FED,F
01F9C:  CLRF   FEF
01F9E:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
01FA0:  MOVLB  B
01FA2:  INCF   x4B,F
01FA4:  BRA    1A76
....................       }
....................         
....................       StoreReleaseFault();
01FA6:  MOVLB  0
01FA8:  BRA    185C
....................    
....................       Input1_8 = 0x00;
01FAA:  CLRF   4A
....................       Input1_8 = Input1_8 | ~Inputt.B8;
01FAC:  MOVLW  00
01FAE:  MOVLB  A
01FB0:  BTFSS  xCB.7
01FB2:  MOVLW  01
01FB4:  IORWF  4A,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
01FB6:  BCF    FD8.0
01FB8:  RLCF   4A,W
01FBA:  MOVLB  B
01FBC:  MOVWF  x4C
01FBE:  MOVLW  00
01FC0:  MOVLB  A
01FC2:  BTFSS  xCB.6
01FC4:  MOVLW  01
01FC6:  MOVLB  B
01FC8:  IORWF  x4C,W
01FCA:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
01FCC:  BCF    FD8.0
01FCE:  RLCF   4A,W
01FD0:  MOVWF  x4C
01FD2:  MOVLW  00
01FD4:  MOVLB  A
01FD6:  BTFSS  xCB.5
01FD8:  MOVLW  01
01FDA:  MOVLB  B
01FDC:  IORWF  x4C,W
01FDE:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
01FE0:  BCF    FD8.0
01FE2:  RLCF   4A,W
01FE4:  MOVWF  x4C
01FE6:  MOVLW  00
01FE8:  MOVLB  A
01FEA:  BTFSS  xCB.4
01FEC:  MOVLW  01
01FEE:  MOVLB  B
01FF0:  IORWF  x4C,W
01FF2:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
01FF4:  BCF    FD8.0
01FF6:  RLCF   4A,W
01FF8:  MOVWF  x4C
01FFA:  MOVLW  00
01FFC:  MOVLB  A
01FFE:  BTFSS  xCB.3
02000:  MOVLW  01
02002:  MOVLB  B
02004:  IORWF  x4C,W
02006:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
02008:  BCF    FD8.0
0200A:  RLCF   4A,W
0200C:  MOVWF  x4C
0200E:  MOVLW  00
02010:  MOVLB  A
02012:  BTFSS  xCB.2
02014:  MOVLW  01
02016:  MOVLB  B
02018:  IORWF  x4C,W
0201A:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
0201C:  BCF    FD8.0
0201E:  RLCF   4A,W
02020:  MOVWF  x4C
02022:  MOVLW  00
02024:  MOVLB  A
02026:  BTFSS  xCB.1
02028:  MOVLW  01
0202A:  MOVLB  B
0202C:  IORWF  x4C,W
0202E:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
02030:  BCF    FD8.0
02032:  RLCF   4A,W
02034:  MOVWF  x4C
02036:  MOVLW  00
02038:  MOVLB  A
0203A:  BTFSS  xCB.0
0203C:  MOVLW  01
0203E:  MOVLB  B
02040:  IORWF  x4C,W
02042:  MOVWF  4A
....................     
....................    
.................... 
....................       Input9_10 = 0x00;
02044:  CLRF   4B
....................       Input9_10 = Input9_10 | ~Inputt.B10;
02046:  MOVLW  00
02048:  MOVLB  A
0204A:  BTFSS  xCC.1
0204C:  MOVLW  01
0204E:  IORWF  4B,F
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
02050:  BCF    FD8.0
02052:  RLCF   4B,W
02054:  MOVLB  B
02056:  MOVWF  x4C
02058:  MOVLW  00
0205A:  MOVLB  A
0205C:  BTFSS  xCC.0
0205E:  MOVLW  01
02060:  MOVLB  B
02062:  IORWF  x4C,W
02064:  MOVWF  4B
02066:  MOVLB  0
02068:  RETURN 0
....................       
....................   
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
008FA:  MOVFF  FF2,B55
008FE:  BCF    FF2.7
00900:  CLRF   FAA
00902:  MOVLW  01
00904:  MOVWF  FA9
00906:  BCF    FA6.6
00908:  BCF    FA6.7
0090A:  BSF    FA6.0
0090C:  MOVF   FA8,W
0090E:  MOVLB  B
00910:  BTFSC  x55.7
00912:  BSF    FF2.7
00914:  MOVWF  3A
....................    InputType1_8 = EEpDat;
00916:  MOVFF  3A,3B
.................... 
....................    InputType.B1 = EEpDat;
0091A:  MOVLB  A
0091C:  BCF    xCF.0
0091E:  BTFSC  3A.0
00920:  BSF    xCF.0
....................    InputType.B2 = EEpDat >> 1;
00922:  BCF    FD8.0
00924:  RRCF   3A,W
00926:  BCF    xCF.1
00928:  BTFSC  FE8.0
0092A:  BSF    xCF.1
....................    InputType.B3 = EEpDat >> 2;
0092C:  RRCF   3A,W
0092E:  MOVWF  00
00930:  RRCF   00,F
00932:  MOVLW  3F
00934:  ANDWF  00,F
00936:  BCF    xCF.2
00938:  BTFSC  00.0
0093A:  BSF    xCF.2
....................    InputType.B4 = EEpDat >> 3;
0093C:  RRCF   3A,W
0093E:  MOVWF  00
00940:  RRCF   00,F
00942:  RRCF   00,F
00944:  MOVLW  1F
00946:  ANDWF  00,F
00948:  BCF    xCF.3
0094A:  BTFSC  00.0
0094C:  BSF    xCF.3
....................    InputType.B5 = EEpDat >> 4;
0094E:  SWAPF  3A,W
00950:  MOVWF  00
00952:  MOVLW  0F
00954:  ANDWF  00,F
00956:  BCF    xCF.4
00958:  BTFSC  00.0
0095A:  BSF    xCF.4
....................    InputType.B6 = EEpDat >> 5;
0095C:  SWAPF  3A,W
0095E:  MOVWF  00
00960:  RRCF   00,F
00962:  MOVLW  07
00964:  ANDWF  00,F
00966:  BCF    xCF.5
00968:  BTFSC  00.0
0096A:  BSF    xCF.5
....................    InputType.B7 = EEpDat >> 6;
0096C:  SWAPF  3A,W
0096E:  MOVWF  00
00970:  RRCF   00,F
00972:  RRCF   00,F
00974:  MOVLW  03
00976:  ANDWF  00,F
00978:  BCF    xCF.6
0097A:  BTFSC  00.0
0097C:  BSF    xCF.6
....................    InputType.B8 = EEpDat >> 7;
0097E:  CLRF   00
00980:  BTFSC  3A.7
00982:  BSF    00.0
00984:  BCF    xCF.7
00986:  BTFSC  00.0
00988:  BSF    xCF.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
0098A:  MOVFF  FF2,B55
0098E:  BCF    FF2.7
00990:  CLRF   FAA
00992:  MOVLW  02
00994:  MOVWF  FA9
00996:  BCF    FA6.6
00998:  BCF    FA6.7
0099A:  BSF    FA6.0
0099C:  MOVF   FA8,W
0099E:  MOVLB  B
009A0:  BTFSC  x55.7
009A2:  BSF    FF2.7
009A4:  MOVWF  3A
....................    InputType9_16 = EEpDat;
009A6:  MOVFF  3A,3C
.................... 
....................    InputType.B9 = EEpDat;
009AA:  MOVLB  A
009AC:  BCF    xD0.0
009AE:  BTFSC  3A.0
009B0:  BSF    xD0.0
....................    InputType.B10 = EEpDat >> 1;
009B2:  BCF    FD8.0
009B4:  RRCF   3A,W
009B6:  BCF    xD0.1
009B8:  BTFSC  FE8.0
009BA:  BSF    xD0.1
....................    
....................    FaultNCNO[1] = InputType.B1;
009BC:  MOVLB  B
009BE:  BCF    x43.1
009C0:  MOVLB  A
009C2:  BTFSS  xCF.0
009C4:  BRA    09CC
009C6:  MOVLB  B
009C8:  BSF    x43.1
009CA:  MOVLB  A
....................    FaultNCNO[2] = InputType.B2;
009CC:  MOVLB  B
009CE:  BCF    x43.2
009D0:  MOVLB  A
009D2:  BTFSS  xCF.1
009D4:  BRA    09DC
009D6:  MOVLB  B
009D8:  BSF    x43.2
009DA:  MOVLB  A
....................    FaultNCNO[3] = InputType.B3;
009DC:  MOVLB  B
009DE:  BCF    x43.3
009E0:  MOVLB  A
009E2:  BTFSS  xCF.2
009E4:  BRA    09EC
009E6:  MOVLB  B
009E8:  BSF    x43.3
009EA:  MOVLB  A
....................    FaultNCNO[4] = InputType.B4;
009EC:  MOVLB  B
009EE:  BCF    x43.4
009F0:  MOVLB  A
009F2:  BTFSS  xCF.3
009F4:  BRA    09FC
009F6:  MOVLB  B
009F8:  BSF    x43.4
009FA:  MOVLB  A
....................    FaultNCNO[5] = InputType.B5;
009FC:  MOVLB  B
009FE:  BCF    x43.5
00A00:  MOVLB  A
00A02:  BTFSS  xCF.4
00A04:  BRA    0A0C
00A06:  MOVLB  B
00A08:  BSF    x43.5
00A0A:  MOVLB  A
....................    FaultNCNO[6] = InputType.B6;
00A0C:  MOVLB  B
00A0E:  BCF    x43.6
00A10:  MOVLB  A
00A12:  BTFSS  xCF.5
00A14:  BRA    0A1C
00A16:  MOVLB  B
00A18:  BSF    x43.6
00A1A:  MOVLB  A
....................    FaultNCNO[7] = InputType.B7;
00A1C:  MOVLB  B
00A1E:  BCF    x43.7
00A20:  MOVLB  A
00A22:  BTFSS  xCF.6
00A24:  BRA    0A2C
00A26:  MOVLB  B
00A28:  BSF    x43.7
00A2A:  MOVLB  A
....................    FaultNCNO[8] = InputType.B8;
00A2C:  MOVLB  B
00A2E:  BCF    x44.0
00A30:  MOVLB  A
00A32:  BTFSS  xCF.7
00A34:  BRA    0A3C
00A36:  MOVLB  B
00A38:  BSF    x44.0
00A3A:  MOVLB  A
....................    FaultNCNO[9] = InputType.B9;
00A3C:  MOVLB  B
00A3E:  BCF    x44.1
00A40:  MOVLB  A
00A42:  BTFSS  xD0.0
00A44:  BRA    0A4C
00A46:  MOVLB  B
00A48:  BSF    x44.1
00A4A:  MOVLB  A
....................    FaultNCNO[10] = InputType.B10;
00A4C:  MOVLB  B
00A4E:  BCF    x44.2
00A50:  MOVLB  A
00A52:  BTFSS  xD0.1
00A54:  BRA    0A5C
00A56:  MOVLB  B
00A58:  BSF    x44.2
00A5A:  MOVLB  A
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00A5C:  MOVFF  FF2,B55
00A60:  BCF    FF2.7
00A62:  CLRF   FAA
00A64:  MOVLW  04
00A66:  MOVWF  FA9
00A68:  BCF    FA6.6
00A6A:  BCF    FA6.7
00A6C:  BSF    FA6.0
00A6E:  MOVF   FA8,W
00A70:  MOVLB  B
00A72:  BTFSC  x55.7
00A74:  BSF    FF2.7
00A76:  MOVWF  3A
....................    FaultType1_8 = EEpDat;
00A78:  MOVFF  3A,3E
.................... 
....................    FaultType.B1 = EEpDat;
00A7C:  MOVLB  A
00A7E:  BCF    xD1.0
00A80:  BTFSC  3A.0
00A82:  BSF    xD1.0
....................    FaultType.B2 = EEpDat >> 1;
00A84:  BCF    FD8.0
00A86:  RRCF   3A,W
00A88:  BCF    xD1.1
00A8A:  BTFSC  FE8.0
00A8C:  BSF    xD1.1
....................    FaultType.B3 = EEpDat >> 2;
00A8E:  RRCF   3A,W
00A90:  MOVWF  00
00A92:  RRCF   00,F
00A94:  MOVLW  3F
00A96:  ANDWF  00,F
00A98:  BCF    xD1.2
00A9A:  BTFSC  00.0
00A9C:  BSF    xD1.2
....................    FaultType.B4 = EEpDat >> 3;
00A9E:  RRCF   3A,W
00AA0:  MOVWF  00
00AA2:  RRCF   00,F
00AA4:  RRCF   00,F
00AA6:  MOVLW  1F
00AA8:  ANDWF  00,F
00AAA:  BCF    xD1.3
00AAC:  BTFSC  00.0
00AAE:  BSF    xD1.3
....................    FaultType.B5 = EEpDat >> 4;
00AB0:  SWAPF  3A,W
00AB2:  MOVWF  00
00AB4:  MOVLW  0F
00AB6:  ANDWF  00,F
00AB8:  BCF    xD1.4
00ABA:  BTFSC  00.0
00ABC:  BSF    xD1.4
....................    FaultType.B6 = EEpDat >> 5;
00ABE:  SWAPF  3A,W
00AC0:  MOVWF  00
00AC2:  RRCF   00,F
00AC4:  MOVLW  07
00AC6:  ANDWF  00,F
00AC8:  BCF    xD1.5
00ACA:  BTFSC  00.0
00ACC:  BSF    xD1.5
....................    FaultType.B7 = EEpDat >> 6;
00ACE:  SWAPF  3A,W
00AD0:  MOVWF  00
00AD2:  RRCF   00,F
00AD4:  RRCF   00,F
00AD6:  MOVLW  03
00AD8:  ANDWF  00,F
00ADA:  BCF    xD1.6
00ADC:  BTFSC  00.0
00ADE:  BSF    xD1.6
....................    FaultType.B8 = EEpDat >> 7;
00AE0:  CLRF   00
00AE2:  BTFSC  3A.7
00AE4:  BSF    00.0
00AE6:  BCF    xD1.7
00AE8:  BTFSC  00.0
00AEA:  BSF    xD1.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00AEC:  MOVFF  FF2,B55
00AF0:  BCF    FF2.7
00AF2:  CLRF   FAA
00AF4:  MOVLW  05
00AF6:  MOVWF  FA9
00AF8:  BCF    FA6.6
00AFA:  BCF    FA6.7
00AFC:  BSF    FA6.0
00AFE:  MOVF   FA8,W
00B00:  MOVLB  B
00B02:  BTFSC  x55.7
00B04:  BSF    FF2.7
00B06:  MOVWF  3A
....................    FaultType9_16 = EEpDat;
00B08:  MOVFF  3A,3F
.................... 
....................    FaultType.B9 = EEpDat;
00B0C:  MOVLB  A
00B0E:  BCF    xD2.0
00B10:  BTFSC  3A.0
00B12:  BSF    xD2.0
....................    FaultType.B10 = EEpDat >> 1;
00B14:  BCF    FD8.0
00B16:  RRCF   3A,W
00B18:  BCF    xD2.1
00B1A:  BTFSC  FE8.0
00B1C:  BSF    xD2.1
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00B1E:  MOVFF  FF2,B55
00B22:  BCF    FF2.7
00B24:  CLRF   FAA
00B26:  MOVLW  07
00B28:  MOVWF  FA9
00B2A:  BCF    FA6.6
00B2C:  BCF    FA6.7
00B2E:  BSF    FA6.0
00B30:  MOVF   FA8,W
00B32:  MOVLB  B
00B34:  BTFSC  x55.7
00B36:  BSF    FF2.7
00B38:  MOVWF  3A
....................    OutputType1_8 = EEpDat;
00B3A:  MOVFF  3A,41
.................... 
....................    OutputType.B1 = EEpDat;
00B3E:  MOVLB  A
00B40:  BCF    xD3.0
00B42:  BTFSC  3A.0
00B44:  BSF    xD3.0
....................    OutputType.B2 = EEpDat >> 1;
00B46:  BCF    FD8.0
00B48:  RRCF   3A,W
00B4A:  BCF    xD3.1
00B4C:  BTFSC  FE8.0
00B4E:  BSF    xD3.1
....................    OutputType.B3 = EEpDat >> 2;
00B50:  RRCF   3A,W
00B52:  MOVWF  00
00B54:  RRCF   00,F
00B56:  MOVLW  3F
00B58:  ANDWF  00,F
00B5A:  BCF    xD3.2
00B5C:  BTFSC  00.0
00B5E:  BSF    xD3.2
....................    OutputType.B4 = EEpDat >> 3;
00B60:  RRCF   3A,W
00B62:  MOVWF  00
00B64:  RRCF   00,F
00B66:  RRCF   00,F
00B68:  MOVLW  1F
00B6A:  ANDWF  00,F
00B6C:  BCF    xD3.3
00B6E:  BTFSC  00.0
00B70:  BSF    xD3.3
....................    OutputType.B5 = EEpDat >> 4;
00B72:  SWAPF  3A,W
00B74:  MOVWF  00
00B76:  MOVLW  0F
00B78:  ANDWF  00,F
00B7A:  BCF    xD3.4
00B7C:  BTFSC  00.0
00B7E:  BSF    xD3.4
....................    OutputType.B6 = EEpDat >> 5;
00B80:  SWAPF  3A,W
00B82:  MOVWF  00
00B84:  RRCF   00,F
00B86:  MOVLW  07
00B88:  ANDWF  00,F
00B8A:  BCF    xD3.5
00B8C:  BTFSC  00.0
00B8E:  BSF    xD3.5
....................    OutputType.B7 = EEpDat >> 6;
00B90:  SWAPF  3A,W
00B92:  MOVWF  00
00B94:  RRCF   00,F
00B96:  RRCF   00,F
00B98:  MOVLW  03
00B9A:  ANDWF  00,F
00B9C:  BCF    xD3.6
00B9E:  BTFSC  00.0
00BA0:  BSF    xD3.6
....................    OutputType.B8 = EEpDat >> 7;
00BA2:  CLRF   00
00BA4:  BTFSC  3A.7
00BA6:  BSF    00.0
00BA8:  BCF    xD3.7
00BAA:  BTFSC  00.0
00BAC:  BSF    xD3.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00BAE:  MOVFF  FF2,B55
00BB2:  BCF    FF2.7
00BB4:  CLRF   FAA
00BB6:  MOVLW  08
00BB8:  MOVWF  FA9
00BBA:  BCF    FA6.6
00BBC:  BCF    FA6.7
00BBE:  BSF    FA6.0
00BC0:  MOVF   FA8,W
00BC2:  MOVLB  B
00BC4:  BTFSC  x55.7
00BC6:  BSF    FF2.7
00BC8:  MOVWF  3A
....................    OutputType9_16 = EEpDat;
00BCA:  MOVFF  3A,42
.................... 
....................    OutputType.B9 = EEpDat;
00BCE:  MOVLB  A
00BD0:  BCF    xD4.0
00BD2:  BTFSC  3A.0
00BD4:  BSF    xD4.0
....................    OutputType.B10 = EEpDat >> 1;
00BD6:  BCF    FD8.0
00BD8:  RRCF   3A,W
00BDA:  BCF    xD4.1
00BDC:  BTFSC  FE8.0
00BDE:  BSF    xD4.1
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00BE0:  MOVFF  FF2,B55
00BE4:  BCF    FF2.7
00BE6:  CLRF   FAA
00BE8:  MOVLW  0A
00BEA:  MOVWF  FA9
00BEC:  BCF    FA6.6
00BEE:  BCF    FA6.7
00BF0:  BSF    FA6.0
00BF2:  MOVF   FA8,W
00BF4:  MOVLB  B
00BF6:  BTFSC  x55.7
00BF8:  BSF    FF2.7
00BFA:  MOVWF  3A
....................    OutputBoth1_8 = EEpDat;
00BFC:  MOVFF  3A,44
.................... 
....................    OutputBoth.B1 = EEpDat;
00C00:  MOVLB  A
00C02:  BCF    xD5.0
00C04:  BTFSC  3A.0
00C06:  BSF    xD5.0
....................    OutputBoth.B2 = EEpDat >> 1;
00C08:  BCF    FD8.0
00C0A:  RRCF   3A,W
00C0C:  BCF    xD5.1
00C0E:  BTFSC  FE8.0
00C10:  BSF    xD5.1
....................    OutputBoth.B3 = EEpDat >> 2;
00C12:  RRCF   3A,W
00C14:  MOVWF  00
00C16:  RRCF   00,F
00C18:  MOVLW  3F
00C1A:  ANDWF  00,F
00C1C:  BCF    xD5.2
00C1E:  BTFSC  00.0
00C20:  BSF    xD5.2
....................    OutputBoth.B4 = EEpDat >> 3;
00C22:  RRCF   3A,W
00C24:  MOVWF  00
00C26:  RRCF   00,F
00C28:  RRCF   00,F
00C2A:  MOVLW  1F
00C2C:  ANDWF  00,F
00C2E:  BCF    xD5.3
00C30:  BTFSC  00.0
00C32:  BSF    xD5.3
....................    OutputBoth.B5 = EEpDat >> 4;
00C34:  SWAPF  3A,W
00C36:  MOVWF  00
00C38:  MOVLW  0F
00C3A:  ANDWF  00,F
00C3C:  BCF    xD5.4
00C3E:  BTFSC  00.0
00C40:  BSF    xD5.4
....................    OutputBoth.B6 = EEpDat >> 5;
00C42:  SWAPF  3A,W
00C44:  MOVWF  00
00C46:  RRCF   00,F
00C48:  MOVLW  07
00C4A:  ANDWF  00,F
00C4C:  BCF    xD5.5
00C4E:  BTFSC  00.0
00C50:  BSF    xD5.5
....................    OutputBoth.B7 = EEpDat >> 6;
00C52:  SWAPF  3A,W
00C54:  MOVWF  00
00C56:  RRCF   00,F
00C58:  RRCF   00,F
00C5A:  MOVLW  03
00C5C:  ANDWF  00,F
00C5E:  BCF    xD5.6
00C60:  BTFSC  00.0
00C62:  BSF    xD5.6
....................    OutputBoth.B8 = EEpDat >> 7;
00C64:  CLRF   00
00C66:  BTFSC  3A.7
00C68:  BSF    00.0
00C6A:  BCF    xD5.7
00C6C:  BTFSC  00.0
00C6E:  BSF    xD5.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00C70:  MOVFF  FF2,B55
00C74:  BCF    FF2.7
00C76:  CLRF   FAA
00C78:  MOVLW  0B
00C7A:  MOVWF  FA9
00C7C:  BCF    FA6.6
00C7E:  BCF    FA6.7
00C80:  BSF    FA6.0
00C82:  MOVF   FA8,W
00C84:  MOVLB  B
00C86:  BTFSC  x55.7
00C88:  BSF    FF2.7
00C8A:  MOVWF  3A
....................    OutputBoth9_16 = EEpDat;
00C8C:  MOVFF  3A,45
.................... 
....................    OutputBoth.B9 = EEpDat;
00C90:  MOVLB  A
00C92:  BCF    xD6.0
00C94:  BTFSC  3A.0
00C96:  BSF    xD6.0
....................    OutputBoth.B10 = EEpDat >> 1;
00C98:  BCF    FD8.0
00C9A:  RRCF   3A,W
00C9C:  BCF    xD6.1
00C9E:  BTFSC  FE8.0
00CA0:  BSF    xD6.1
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00CA2:  MOVFF  FF2,B55
00CA6:  BCF    FF2.7
00CA8:  CLRF   FAA
00CAA:  MOVLW  0D
00CAC:  MOVWF  FA9
00CAE:  BCF    FA6.6
00CB0:  BCF    FA6.7
00CB2:  BSF    FA6.0
00CB4:  MOVF   FA8,W
00CB6:  MOVLB  B
00CB8:  BTFSC  x55.7
00CBA:  BSF    FF2.7
00CBC:  MOVWF  3A
....................    Alarm_Indicator1_8 = EEpDat;
00CBE:  MOVFF  3A,47
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00CC2:  MOVLB  A
00CC4:  BCF    xD7.0
00CC6:  BTFSC  3A.0
00CC8:  BSF    xD7.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00CCA:  BCF    FD8.0
00CCC:  RRCF   3A,W
00CCE:  BCF    xD7.1
00CD0:  BTFSC  FE8.0
00CD2:  BSF    xD7.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00CD4:  RRCF   3A,W
00CD6:  MOVWF  00
00CD8:  RRCF   00,F
00CDA:  MOVLW  3F
00CDC:  ANDWF  00,F
00CDE:  BCF    xD7.2
00CE0:  BTFSC  00.0
00CE2:  BSF    xD7.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00CE4:  RRCF   3A,W
00CE6:  MOVWF  00
00CE8:  RRCF   00,F
00CEA:  RRCF   00,F
00CEC:  MOVLW  1F
00CEE:  ANDWF  00,F
00CF0:  BCF    xD7.3
00CF2:  BTFSC  00.0
00CF4:  BSF    xD7.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00CF6:  SWAPF  3A,W
00CF8:  MOVWF  00
00CFA:  MOVLW  0F
00CFC:  ANDWF  00,F
00CFE:  BCF    xD7.4
00D00:  BTFSC  00.0
00D02:  BSF    xD7.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00D04:  SWAPF  3A,W
00D06:  MOVWF  00
00D08:  RRCF   00,F
00D0A:  MOVLW  07
00D0C:  ANDWF  00,F
00D0E:  BCF    xD7.5
00D10:  BTFSC  00.0
00D12:  BSF    xD7.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00D14:  SWAPF  3A,W
00D16:  MOVWF  00
00D18:  RRCF   00,F
00D1A:  RRCF   00,F
00D1C:  MOVLW  03
00D1E:  ANDWF  00,F
00D20:  BCF    xD7.6
00D22:  BTFSC  00.0
00D24:  BSF    xD7.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00D26:  CLRF   00
00D28:  BTFSC  3A.7
00D2A:  BSF    00.0
00D2C:  BCF    xD7.7
00D2E:  BTFSC  00.0
00D30:  BSF    xD7.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
00D32:  MOVFF  FF2,B55
00D36:  BCF    FF2.7
00D38:  CLRF   FAA
00D3A:  MOVLW  0E
00D3C:  MOVWF  FA9
00D3E:  BCF    FA6.6
00D40:  BCF    FA6.7
00D42:  BSF    FA6.0
00D44:  MOVF   FA8,W
00D46:  MOVLB  B
00D48:  BTFSC  x55.7
00D4A:  BSF    FF2.7
00D4C:  MOVWF  3A
....................    Alarm_Indicator9_16 = EEpDat;
00D4E:  MOVFF  3A,48
.................... 
....................    AlarmIndicator.B9 = EEpDat;
00D52:  MOVLB  A
00D54:  BCF    xD8.0
00D56:  BTFSC  3A.0
00D58:  BSF    xD8.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
00D5A:  BCF    FD8.0
00D5C:  RRCF   3A,W
00D5E:  BCF    xD8.1
00D60:  BTFSC  FE8.0
00D62:  BSF    xD8.1
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00D64:  MOVFF  FF2,B55
00D68:  BCF    FF2.7
00D6A:  CLRF   FAA
00D6C:  MOVLW  10
00D6E:  MOVWF  FA9
00D70:  BCF    FA6.6
00D72:  BCF    FA6.7
00D74:  BSF    FA6.0
00D76:  MOVF   FA8,W
00D78:  MOVLB  B
00D7A:  BTFSC  x55.7
00D7C:  BSF    FF2.7
00D7E:  MOVWF  3A
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00D80:  MOVLB  A
00D82:  BCF    xE3.0
00D84:  BTFSC  3A.0
00D86:  BSF    xE3.0
....................    RED_Colour.B2 = EEpDat >> 1;
00D88:  BCF    FD8.0
00D8A:  RRCF   3A,W
00D8C:  BCF    xE3.1
00D8E:  BTFSC  FE8.0
00D90:  BSF    xE3.1
....................    RED_Colour.B3 = EEpDat >> 2;
00D92:  RRCF   3A,W
00D94:  MOVWF  00
00D96:  RRCF   00,F
00D98:  MOVLW  3F
00D9A:  ANDWF  00,F
00D9C:  BCF    xE3.2
00D9E:  BTFSC  00.0
00DA0:  BSF    xE3.2
....................    RED_Colour.B4 = EEpDat >> 3;
00DA2:  RRCF   3A,W
00DA4:  MOVWF  00
00DA6:  RRCF   00,F
00DA8:  RRCF   00,F
00DAA:  MOVLW  1F
00DAC:  ANDWF  00,F
00DAE:  BCF    xE3.3
00DB0:  BTFSC  00.0
00DB2:  BSF    xE3.3
....................    RED_Colour.B5 = EEpDat >> 4;
00DB4:  SWAPF  3A,W
00DB6:  MOVWF  00
00DB8:  MOVLW  0F
00DBA:  ANDWF  00,F
00DBC:  BCF    xE3.4
00DBE:  BTFSC  00.0
00DC0:  BSF    xE3.4
....................    RED_Colour.B6 = EEpDat >> 5;
00DC2:  SWAPF  3A,W
00DC4:  MOVWF  00
00DC6:  RRCF   00,F
00DC8:  MOVLW  07
00DCA:  ANDWF  00,F
00DCC:  BCF    xE3.5
00DCE:  BTFSC  00.0
00DD0:  BSF    xE3.5
....................    RED_Colour.B7 = EEpDat >> 6;
00DD2:  SWAPF  3A,W
00DD4:  MOVWF  00
00DD6:  RRCF   00,F
00DD8:  RRCF   00,F
00DDA:  MOVLW  03
00DDC:  ANDWF  00,F
00DDE:  BCF    xE3.6
00DE0:  BTFSC  00.0
00DE2:  BSF    xE3.6
....................    RED_Colour.B8 = EEpDat >> 7;
00DE4:  CLRF   00
00DE6:  BTFSC  3A.7
00DE8:  BSF    00.0
00DEA:  BCF    xE3.7
00DEC:  BTFSC  00.0
00DEE:  BSF    xE3.7
....................    
....................    EEpDat = read_eeprom(0x11);
00DF0:  MOVFF  FF2,B55
00DF4:  BCF    FF2.7
00DF6:  CLRF   FAA
00DF8:  MOVLW  11
00DFA:  MOVWF  FA9
00DFC:  BCF    FA6.6
00DFE:  BCF    FA6.7
00E00:  BSF    FA6.0
00E02:  MOVF   FA8,W
00E04:  MOVLB  B
00E06:  BTFSC  x55.7
00E08:  BSF    FF2.7
00E0A:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
00E0C:  MOVLB  A
00E0E:  BCF    xE4.0
00E10:  BTFSC  3A.0
00E12:  BSF    xE4.0
....................    RED_Colour.B10 = EEpDat >> 1;
00E14:  BCF    FD8.0
00E16:  RRCF   3A,W
00E18:  BCF    xE4.1
00E1A:  BTFSC  FE8.0
00E1C:  BSF    xE4.1
....................    
....................    EEpDat = read_eeprom(0x14);
00E1E:  MOVFF  FF2,B55
00E22:  BCF    FF2.7
00E24:  CLRF   FAA
00E26:  MOVLW  14
00E28:  MOVWF  FA9
00E2A:  BCF    FA6.6
00E2C:  BCF    FA6.7
00E2E:  BSF    FA6.0
00E30:  MOVF   FA8,W
00E32:  MOVLB  B
00E34:  BTFSC  x55.7
00E36:  BSF    FF2.7
00E38:  MOVWF  3A
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00E3A:  MOVLB  A
00E3C:  BCF    xE5.0
00E3E:  BTFSC  3A.0
00E40:  BSF    xE5.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00E42:  BCF    FD8.0
00E44:  RRCF   3A,W
00E46:  BCF    xE5.1
00E48:  BTFSC  FE8.0
00E4A:  BSF    xE5.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00E4C:  RRCF   3A,W
00E4E:  MOVWF  00
00E50:  RRCF   00,F
00E52:  MOVLW  3F
00E54:  ANDWF  00,F
00E56:  BCF    xE5.2
00E58:  BTFSC  00.0
00E5A:  BSF    xE5.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00E5C:  RRCF   3A,W
00E5E:  MOVWF  00
00E60:  RRCF   00,F
00E62:  RRCF   00,F
00E64:  MOVLW  1F
00E66:  ANDWF  00,F
00E68:  BCF    xE5.3
00E6A:  BTFSC  00.0
00E6C:  BSF    xE5.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00E6E:  SWAPF  3A,W
00E70:  MOVWF  00
00E72:  MOVLW  0F
00E74:  ANDWF  00,F
00E76:  BCF    xE5.4
00E78:  BTFSC  00.0
00E7A:  BSF    xE5.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00E7C:  SWAPF  3A,W
00E7E:  MOVWF  00
00E80:  RRCF   00,F
00E82:  MOVLW  07
00E84:  ANDWF  00,F
00E86:  BCF    xE5.5
00E88:  BTFSC  00.0
00E8A:  BSF    xE5.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00E8C:  SWAPF  3A,W
00E8E:  MOVWF  00
00E90:  RRCF   00,F
00E92:  RRCF   00,F
00E94:  MOVLW  03
00E96:  ANDWF  00,F
00E98:  BCF    xE5.6
00E9A:  BTFSC  00.0
00E9C:  BSF    xE5.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00E9E:  CLRF   00
00EA0:  BTFSC  3A.7
00EA2:  BSF    00.0
00EA4:  BCF    xE5.7
00EA6:  BTFSC  00.0
00EA8:  BSF    xE5.7
....................    
....................    EEpDat = read_eeprom(0x15);
00EAA:  MOVFF  FF2,B55
00EAE:  BCF    FF2.7
00EB0:  CLRF   FAA
00EB2:  MOVLW  15
00EB4:  MOVWF  FA9
00EB6:  BCF    FA6.6
00EB8:  BCF    FA6.7
00EBA:  BSF    FA6.0
00EBC:  MOVF   FA8,W
00EBE:  MOVLB  B
00EC0:  BTFSC  x55.7
00EC2:  BSF    FF2.7
00EC4:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
00EC6:  MOVLB  A
00EC8:  BCF    xE6.0
00ECA:  BTFSC  3A.0
00ECC:  BSF    xE6.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
00ECE:  BCF    FD8.0
00ED0:  RRCF   3A,W
00ED2:  BCF    xE6.1
00ED4:  BTFSC  FE8.0
00ED6:  BSF    xE6.1
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00ED8:  MOVFF  FF2,B55
00EDC:  BCF    FF2.7
00EDE:  CLRF   FAA
00EE0:  MOVLW  18
00EE2:  MOVWF  FA9
00EE4:  BCF    FA6.6
00EE6:  BCF    FA6.7
00EE8:  BSF    FA6.0
00EEA:  MOVF   FA8,W
00EEC:  MOVLB  B
00EEE:  BTFSC  x55.7
00EF0:  BSF    FF2.7
00EF2:  MOVWF  5E
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00EF4:  MOVFF  FF2,B55
00EF8:  BCF    FF2.7
00EFA:  CLRF   FAA
00EFC:  MOVLW  19
00EFE:  MOVWF  FA9
00F00:  BCF    FA6.6
00F02:  BCF    FA6.7
00F04:  BSF    FA6.0
00F06:  MOVF   FA8,W
00F08:  BTFSC  x55.7
00F0A:  BSF    FF2.7
00F0C:  MOVWF  5F
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
00F0E:  MOVFF  FF2,B55
00F12:  BCF    FF2.7
00F14:  CLRF   FAA
00F16:  MOVLW  1A
00F18:  MOVWF  FA9
00F1A:  BCF    FA6.6
00F1C:  BCF    FA6.7
00F1E:  BSF    FA6.0
00F20:  MOVF   FA8,W
00F22:  BTFSC  x55.7
00F24:  BSF    FF2.7
00F26:  MOVLB  0
00F28:  MOVWF  x60
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00F2A:  MOVFF  FF2,B55
00F2E:  BCF    FF2.7
00F30:  CLRF   FAA
00F32:  MOVLW  1B
00F34:  MOVWF  FA9
00F36:  BCF    FA6.6
00F38:  BCF    FA6.7
00F3A:  BSF    FA6.0
00F3C:  MOVF   FA8,W
00F3E:  MOVLB  B
00F40:  BTFSC  x55.7
00F42:  BSF    FF2.7
00F44:  MOVLB  0
00F46:  MOVWF  x61
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
00F48:  MOVFF  FF2,B55
00F4C:  BCF    FF2.7
00F4E:  CLRF   FAA
00F50:  MOVLW  1C
00F52:  MOVWF  FA9
00F54:  BCF    FA6.6
00F56:  BCF    FA6.7
00F58:  BSF    FA6.0
00F5A:  MOVF   FA8,W
00F5C:  MOVLB  B
00F5E:  BTFSC  x55.7
00F60:  BSF    FF2.7
00F62:  CLRF   x1A
00F64:  MOVWF  x19
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00F66:  MOVFF  FF2,B55
00F6A:  BCF    FF2.7
00F6C:  CLRF   FAA
00F6E:  MOVLW  1D
00F70:  MOVWF  FA9
00F72:  BCF    FA6.6
00F74:  BCF    FA6.7
00F76:  BSF    FA6.0
00F78:  MOVF   FA8,W
00F7A:  BTFSC  x55.7
00F7C:  BSF    FF2.7
00F7E:  MOVLB  0
00F80:  MOVWF  x6C
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00F82:  MOVFF  FF2,B55
00F86:  BCF    FF2.7
00F88:  CLRF   FAA
00F8A:  MOVLW  1E
00F8C:  MOVWF  FA9
00F8E:  BCF    FA6.6
00F90:  BCF    FA6.7
00F92:  BSF    FA6.0
00F94:  MOVF   FA8,W
00F96:  MOVLB  B
00F98:  BTFSC  x55.7
00F9A:  BSF    FF2.7
00F9C:  CLRF   x1C
00F9E:  MOVWF  x1B
....................    FaultDelayTime[2] = read_eeprom(0x1F);
00FA0:  MOVFF  FF2,B55
00FA4:  BCF    FF2.7
00FA6:  CLRF   FAA
00FA8:  MOVLW  1F
00FAA:  MOVWF  FA9
00FAC:  BCF    FA6.6
00FAE:  BCF    FA6.7
00FB0:  BSF    FA6.0
00FB2:  MOVF   FA8,W
00FB4:  BTFSC  x55.7
00FB6:  BSF    FF2.7
00FB8:  CLRF   x1E
00FBA:  MOVWF  x1D
....................    FaultDelayTime[3] = read_eeprom(0x20);
00FBC:  MOVFF  FF2,B55
00FC0:  BCF    FF2.7
00FC2:  CLRF   FAA
00FC4:  MOVLW  20
00FC6:  MOVWF  FA9
00FC8:  BCF    FA6.6
00FCA:  BCF    FA6.7
00FCC:  BSF    FA6.0
00FCE:  MOVF   FA8,W
00FD0:  BTFSC  x55.7
00FD2:  BSF    FF2.7
00FD4:  CLRF   x20
00FD6:  MOVWF  x1F
....................    FaultDelayTime[4] = read_eeprom(0x21);
00FD8:  MOVFF  FF2,B55
00FDC:  BCF    FF2.7
00FDE:  CLRF   FAA
00FE0:  MOVLW  21
00FE2:  MOVWF  FA9
00FE4:  BCF    FA6.6
00FE6:  BCF    FA6.7
00FE8:  BSF    FA6.0
00FEA:  MOVF   FA8,W
00FEC:  BTFSC  x55.7
00FEE:  BSF    FF2.7
00FF0:  CLRF   x22
00FF2:  MOVWF  x21
....................    FaultDelayTime[5] = read_eeprom(0x22);
00FF4:  MOVFF  FF2,B55
00FF8:  BCF    FF2.7
00FFA:  CLRF   FAA
00FFC:  MOVLW  22
00FFE:  MOVWF  FA9
01000:  BCF    FA6.6
01002:  BCF    FA6.7
01004:  BSF    FA6.0
01006:  MOVF   FA8,W
01008:  BTFSC  x55.7
0100A:  BSF    FF2.7
0100C:  CLRF   x24
0100E:  MOVWF  x23
....................    FaultDelayTime[6] = read_eeprom(0x23);
01010:  MOVFF  FF2,B55
01014:  BCF    FF2.7
01016:  CLRF   FAA
01018:  MOVLW  23
0101A:  MOVWF  FA9
0101C:  BCF    FA6.6
0101E:  BCF    FA6.7
01020:  BSF    FA6.0
01022:  MOVF   FA8,W
01024:  BTFSC  x55.7
01026:  BSF    FF2.7
01028:  CLRF   x26
0102A:  MOVWF  x25
....................    FaultDelayTime[7] = read_eeprom(0x24);
0102C:  MOVFF  FF2,B55
01030:  BCF    FF2.7
01032:  CLRF   FAA
01034:  MOVLW  24
01036:  MOVWF  FA9
01038:  BCF    FA6.6
0103A:  BCF    FA6.7
0103C:  BSF    FA6.0
0103E:  MOVF   FA8,W
01040:  BTFSC  x55.7
01042:  BSF    FF2.7
01044:  CLRF   x28
01046:  MOVWF  x27
....................    FaultDelayTime[8] = read_eeprom(0x25);
01048:  MOVFF  FF2,B55
0104C:  BCF    FF2.7
0104E:  CLRF   FAA
01050:  MOVLW  25
01052:  MOVWF  FA9
01054:  BCF    FA6.6
01056:  BCF    FA6.7
01058:  BSF    FA6.0
0105A:  MOVF   FA8,W
0105C:  BTFSC  x55.7
0105E:  BSF    FF2.7
01060:  CLRF   x2A
01062:  MOVWF  x29
....................    FaultDelayTime[9] = read_eeprom(0x26);
01064:  MOVFF  FF2,B55
01068:  BCF    FF2.7
0106A:  CLRF   FAA
0106C:  MOVLW  26
0106E:  MOVWF  FA9
01070:  BCF    FA6.6
01072:  BCF    FA6.7
01074:  BSF    FA6.0
01076:  MOVF   FA8,W
01078:  BTFSC  x55.7
0107A:  BSF    FF2.7
0107C:  CLRF   x2C
0107E:  MOVWF  x2B
....................    FaultDelayTime[10] = read_eeprom(0x27);
01080:  MOVFF  FF2,B55
01084:  BCF    FF2.7
01086:  CLRF   FAA
01088:  MOVLW  27
0108A:  MOVWF  FA9
0108C:  BCF    FA6.6
0108E:  BCF    FA6.7
01090:  BSF    FA6.0
01092:  MOVF   FA8,W
01094:  BTFSC  x55.7
01096:  BSF    FF2.7
01098:  CLRF   x2E
0109A:  MOVWF  x2D
....................    FaultDelayTime[11] = read_eeprom(0x28);
0109C:  MOVFF  FF2,B55
010A0:  BCF    FF2.7
010A2:  CLRF   FAA
010A4:  MOVLW  28
010A6:  MOVWF  FA9
010A8:  BCF    FA6.6
010AA:  BCF    FA6.7
010AC:  BSF    FA6.0
010AE:  MOVF   FA8,W
010B0:  BTFSC  x55.7
010B2:  BSF    FF2.7
010B4:  CLRF   x30
010B6:  MOVWF  x2F
....................    FaultDelayTime[12] = read_eeprom(0x29);
010B8:  MOVFF  FF2,B55
010BC:  BCF    FF2.7
010BE:  CLRF   FAA
010C0:  MOVLW  29
010C2:  MOVWF  FA9
010C4:  BCF    FA6.6
010C6:  BCF    FA6.7
010C8:  BSF    FA6.0
010CA:  MOVF   FA8,W
010CC:  BTFSC  x55.7
010CE:  BSF    FF2.7
010D0:  CLRF   x32
010D2:  MOVWF  x31
....................    FaultDelayTime[13] = read_eeprom(0x2A);
010D4:  MOVFF  FF2,B55
010D8:  BCF    FF2.7
010DA:  CLRF   FAA
010DC:  MOVLW  2A
010DE:  MOVWF  FA9
010E0:  BCF    FA6.6
010E2:  BCF    FA6.7
010E4:  BSF    FA6.0
010E6:  MOVF   FA8,W
010E8:  BTFSC  x55.7
010EA:  BSF    FF2.7
010EC:  CLRF   x34
010EE:  MOVWF  x33
....................    FaultDelayTime[14] = read_eeprom(0x2B);
010F0:  MOVFF  FF2,B55
010F4:  BCF    FF2.7
010F6:  CLRF   FAA
010F8:  MOVLW  2B
010FA:  MOVWF  FA9
010FC:  BCF    FA6.6
010FE:  BCF    FA6.7
01100:  BSF    FA6.0
01102:  MOVF   FA8,W
01104:  BTFSC  x55.7
01106:  BSF    FF2.7
01108:  CLRF   x36
0110A:  MOVWF  x35
....................    FaultDelayTime[15] = read_eeprom(0x2C);
0110C:  MOVFF  FF2,B55
01110:  BCF    FF2.7
01112:  CLRF   FAA
01114:  MOVLW  2C
01116:  MOVWF  FA9
01118:  BCF    FA6.6
0111A:  BCF    FA6.7
0111C:  BSF    FA6.0
0111E:  MOVF   FA8,W
01120:  BTFSC  x55.7
01122:  BSF    FF2.7
01124:  CLRF   x38
01126:  MOVWF  x37
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01128:  MOVFF  FF2,B55
0112C:  BCF    FF2.7
0112E:  CLRF   FAA
01130:  MOVLW  2D
01132:  MOVWF  FA9
01134:  BCF    FA6.6
01136:  BCF    FA6.7
01138:  BSF    FA6.0
0113A:  MOVF   FA8,W
0113C:  BTFSC  x55.7
0113E:  BSF    FF2.7
01140:  CLRF   x3A
01142:  MOVWF  x39
....................    FaultDelayTime[17] = read_eeprom(0x2E);
01144:  MOVFF  FF2,B55
01148:  BCF    FF2.7
0114A:  CLRF   FAA
0114C:  MOVLW  2E
0114E:  MOVWF  FA9
01150:  BCF    FA6.6
01152:  BCF    FA6.7
01154:  BSF    FA6.0
01156:  MOVF   FA8,W
01158:  BTFSC  x55.7
0115A:  BSF    FF2.7
0115C:  CLRF   x3C
0115E:  MOVWF  x3B
....................    FaultDelayTime[18] = read_eeprom(0x2F);
01160:  MOVFF  FF2,B55
01164:  BCF    FF2.7
01166:  CLRF   FAA
01168:  MOVLW  2F
0116A:  MOVWF  FA9
0116C:  BCF    FA6.6
0116E:  BCF    FA6.7
01170:  BSF    FA6.0
01172:  MOVF   FA8,W
01174:  BTFSC  x55.7
01176:  BSF    FF2.7
01178:  CLRF   x3E
0117A:  MOVWF  x3D
....................    FaultDelayTime[19] = read_eeprom(0x30);
0117C:  MOVFF  FF2,B55
01180:  BCF    FF2.7
01182:  CLRF   FAA
01184:  MOVLW  30
01186:  MOVWF  FA9
01188:  BCF    FA6.6
0118A:  BCF    FA6.7
0118C:  BSF    FA6.0
0118E:  MOVF   FA8,W
01190:  BTFSC  x55.7
01192:  BSF    FF2.7
01194:  CLRF   x40
01196:  MOVWF  x3F
....................    FaultDelayTime[20] = read_eeprom(0x31);
01198:  MOVFF  FF2,B55
0119C:  BCF    FF2.7
0119E:  CLRF   FAA
011A0:  MOVLW  31
011A2:  MOVWF  FA9
011A4:  BCF    FA6.6
011A6:  BCF    FA6.7
011A8:  BSF    FA6.0
011AA:  MOVF   FA8,W
011AC:  BTFSC  x55.7
011AE:  BSF    FF2.7
011B0:  CLRF   x42
011B2:  MOVWF  x41
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
011B4:  CLRF   x4B
....................    for(; ; a++)
....................    {
....................       restart_wdt();
011B6:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
011B8:  MOVLW  32
011BA:  ADDWF  x4B,W
011BC:  MOVWF  x55
011BE:  MOVFF  FF2,B56
011C2:  BCF    FF2.7
011C4:  CLRF   FAA
011C6:  MOVFF  B55,FA9
011CA:  BCF    FA6.6
011CC:  BCF    FA6.7
011CE:  BSF    FA6.0
011D0:  MOVF   FA8,W
011D2:  BTFSC  x56.7
011D4:  BSF    FF2.7
011D6:  MOVWF  x4C
....................       if((phonenum == 0x0D) || (a > 15))
011D8:  MOVF   x4C,W
011DA:  SUBLW  0D
011DC:  BZ    11E4
011DE:  MOVF   x4B,W
011E0:  SUBLW  0F
011E2:  BC    122C
....................       {
....................          sms_phonenumber[a] =  '\0';
011E4:  CLRF   03
011E6:  MOVF   x4B,W
011E8:  ADDLW  7C
011EA:  MOVWF  FE9
011EC:  MOVLW  09
011EE:  ADDWFC 03,W
011F0:  MOVWF  FEA
011F2:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
011F4:  MOVLW  32
011F6:  ADDWF  x4B,W
011F8:  MOVWF  x55
011FA:  MOVF   FF2,W
011FC:  MOVWF  00
011FE:  BCF    FF2.7
01200:  CLRF   FAA
01202:  MOVFF  B55,FA9
01206:  MOVFF  B4C,FA8
0120A:  BCF    FA6.6
0120C:  BCF    FA6.7
0120E:  BSF    FA6.2
01210:  MOVLB  F
01212:  MOVLW  55
01214:  MOVWF  FA7
01216:  MOVLW  AA
01218:  MOVWF  FA7
0121A:  BSF    FA6.1
0121C:  BTFSC  FA6.1
0121E:  BRA    121C
01220:  BCF    FA6.2
01222:  MOVF   00,W
01224:  IORWF  FF2,F
....................          break;
01226:  BRA    1248
....................       }
01228:  BRA    1240
0122A:  MOVLB  B
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
0122C:  CLRF   03
0122E:  MOVF   x4B,W
01230:  ADDLW  7C
01232:  MOVWF  FE9
01234:  MOVLW  09
01236:  ADDWFC 03,W
01238:  MOVWF  FEA
0123A:  MOVFF  B4C,FEF
0123E:  MOVLB  F
....................       }
01240:  MOVLB  B
01242:  INCF   x4B,F
01244:  BRA    11B6
01246:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
01248:  MOVLB  B
0124A:  CLRF   x4E
0124C:  MOVLW  03
0124E:  MOVWF  x4D
01250:  CLRF   x50
01252:  CLRF   x4F
01254:  CLRF   x52
01256:  CLRF   x51
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01258:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0125A:  MOVLW  5D
0125C:  ADDWF  x4D,W
0125E:  MOVWF  x55
01260:  MOVLW  00
01262:  ADDWFC x4E,W
01264:  MOVWF  x56
01266:  MOVFF  FF2,B57
0126A:  BCF    FF2.7
0126C:  MOVFF  B56,FAA
01270:  MOVFF  B55,FA9
01274:  BCF    FA6.6
01276:  BCF    FA6.7
01278:  BSF    FA6.0
0127A:  MOVF   FA8,W
0127C:  BTFSC  x57.7
0127E:  BSF    FF2.7
01280:  CLRF   x54
01282:  MOVWF  x53
....................       
....................       if((buff == 0x0D)|| (j>41))
01284:  MOVF   x53,W
01286:  SUBLW  0D
01288:  BNZ   128E
0128A:  MOVF   x54,F
0128C:  BZ    1298
0128E:  MOVF   x50,F
01290:  BNZ   1298
01292:  MOVF   x4F,W
01294:  SUBLW  29
01296:  BC    12AA
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
01298:  MOVLW  8B
0129A:  ADDWF  x4F,W
0129C:  MOVWF  FE9
0129E:  MOVLW  09
012A0:  ADDWFC x50,W
012A2:  MOVWF  FEA
012A4:  CLRF   FEF
....................          break;
012A6:  BRA    12CE
....................       }
012A8:  BRA    12BA
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
012AA:  MOVLW  8B
012AC:  ADDWF  x4F,W
012AE:  MOVWF  FE9
012B0:  MOVLW  09
012B2:  ADDWFC x50,W
012B4:  MOVWF  FEA
012B6:  MOVFF  B53,FEF
....................       }
012BA:  MOVFF  B4E,03
012BE:  MOVF   x4D,W
012C0:  INCF   x4D,F
012C2:  BTFSC  FD8.2
012C4:  INCF   x4E,F
012C6:  INCF   x4F,F
012C8:  BTFSC  FD8.2
012CA:  INCF   x50,F
012CC:  BRA    1258
....................    }
....................    
....................    i++;
012CE:  INCF   x4D,F
012D0:  BTFSC  FD8.2
012D2:  INCF   x4E,F
....................    j=0;
012D4:  CLRF   x50
012D6:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
012D8:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
012DA:  MOVLW  5D
012DC:  ADDWF  x4D,W
012DE:  MOVWF  x55
012E0:  MOVLW  00
012E2:  ADDWFC x4E,W
012E4:  MOVWF  x56
012E6:  MOVFF  FF2,B57
012EA:  BCF    FF2.7
012EC:  MOVFF  B56,FAA
012F0:  MOVFF  B55,FA9
012F4:  BCF    FA6.6
012F6:  BCF    FA6.7
012F8:  BSF    FA6.0
012FA:  MOVF   FA8,W
012FC:  BTFSC  x57.7
012FE:  BSF    FF2.7
01300:  CLRF   x54
01302:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01304:  MOVF   x53,W
01306:  SUBLW  0D
01308:  BNZ   130E
0130A:  MOVF   x54,F
0130C:  BZ    1318
0130E:  MOVF   x50,F
01310:  BNZ   1318
01312:  MOVF   x4F,W
01314:  SUBLW  29
01316:  BC    132A
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01318:  MOVLW  AB
0131A:  ADDWF  x4F,W
0131C:  MOVWF  FE9
0131E:  MOVLW  09
01320:  ADDWFC x50,W
01322:  MOVWF  FEA
01324:  CLRF   FEF
....................          break;
01326:  BRA    134E
....................       }
01328:  BRA    133A
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
0132A:  MOVLW  AB
0132C:  ADDWF  x4F,W
0132E:  MOVWF  FE9
01330:  MOVLW  09
01332:  ADDWFC x50,W
01334:  MOVWF  FEA
01336:  MOVFF  B53,FEF
....................          
....................       }
0133A:  MOVFF  B4E,03
0133E:  MOVF   x4D,W
01340:  INCF   x4D,F
01342:  BTFSC  FD8.2
01344:  INCF   x4E,F
01346:  INCF   x4F,F
01348:  BTFSC  FD8.2
0134A:  INCF   x50,F
0134C:  BRA    12D8
....................    }
....................    
....................    i++;
0134E:  INCF   x4D,F
01350:  BTFSC  FD8.2
01352:  INCF   x4E,F
....................    j=0;
01354:  CLRF   x50
01356:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01358:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0135A:  MOVLW  5D
0135C:  ADDWF  x4D,W
0135E:  MOVWF  x55
01360:  MOVLW  00
01362:  ADDWFC x4E,W
01364:  MOVWF  x56
01366:  MOVFF  FF2,B57
0136A:  BCF    FF2.7
0136C:  MOVFF  B56,FAA
01370:  MOVFF  B55,FA9
01374:  BCF    FA6.6
01376:  BCF    FA6.7
01378:  BSF    FA6.0
0137A:  MOVF   FA8,W
0137C:  BTFSC  x57.7
0137E:  BSF    FF2.7
01380:  CLRF   x54
01382:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01384:  MOVF   x53,W
01386:  SUBLW  0D
01388:  BNZ   138E
0138A:  MOVF   x54,F
0138C:  BZ    1398
0138E:  MOVF   x50,F
01390:  BNZ   1398
01392:  MOVF   x4F,W
01394:  SUBLW  29
01396:  BC    13AA
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
01398:  MOVLW  CB
0139A:  ADDWF  x4F,W
0139C:  MOVWF  FE9
0139E:  MOVLW  09
013A0:  ADDWFC x50,W
013A2:  MOVWF  FEA
013A4:  CLRF   FEF
....................          break;
013A6:  BRA    13CE
....................       }
013A8:  BRA    13BA
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
013AA:  MOVLW  CB
013AC:  ADDWF  x4F,W
013AE:  MOVWF  FE9
013B0:  MOVLW  09
013B2:  ADDWFC x50,W
013B4:  MOVWF  FEA
013B6:  MOVFF  B53,FEF
....................          
....................       }
013BA:  MOVFF  B4E,03
013BE:  MOVF   x4D,W
013C0:  INCF   x4D,F
013C2:  BTFSC  FD8.2
013C4:  INCF   x4E,F
013C6:  INCF   x4F,F
013C8:  BTFSC  FD8.2
013CA:  INCF   x50,F
013CC:  BRA    1358
....................    }
....................    
....................    i++;
013CE:  INCF   x4D,F
013D0:  BTFSC  FD8.2
013D2:  INCF   x4E,F
....................    j=0;
013D4:  CLRF   x50
013D6:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
013D8:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
013DA:  MOVLW  5D
013DC:  ADDWF  x4D,W
013DE:  MOVWF  x55
013E0:  MOVLW  00
013E2:  ADDWFC x4E,W
013E4:  MOVWF  x56
013E6:  MOVFF  FF2,B57
013EA:  BCF    FF2.7
013EC:  MOVFF  B56,FAA
013F0:  MOVFF  B55,FA9
013F4:  BCF    FA6.6
013F6:  BCF    FA6.7
013F8:  BSF    FA6.0
013FA:  MOVF   FA8,W
013FC:  BTFSC  x57.7
013FE:  BSF    FF2.7
01400:  CLRF   x54
01402:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01404:  MOVF   x53,W
01406:  SUBLW  0D
01408:  BNZ   140E
0140A:  MOVF   x54,F
0140C:  BZ    1418
0140E:  MOVF   x50,F
01410:  BNZ   1418
01412:  MOVF   x4F,W
01414:  SUBLW  29
01416:  BC    142A
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01418:  MOVLW  EB
0141A:  ADDWF  x4F,W
0141C:  MOVWF  FE9
0141E:  MOVLW  09
01420:  ADDWFC x50,W
01422:  MOVWF  FEA
01424:  CLRF   FEF
....................          break;
01426:  BRA    144E
....................       }
01428:  BRA    143A
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
0142A:  MOVLW  EB
0142C:  ADDWF  x4F,W
0142E:  MOVWF  FE9
01430:  MOVLW  09
01432:  ADDWFC x50,W
01434:  MOVWF  FEA
01436:  MOVFF  B53,FEF
....................          
....................       }
0143A:  MOVFF  B4E,03
0143E:  MOVF   x4D,W
01440:  INCF   x4D,F
01442:  BTFSC  FD8.2
01444:  INCF   x4E,F
01446:  INCF   x4F,F
01448:  BTFSC  FD8.2
0144A:  INCF   x50,F
0144C:  BRA    13D8
....................    }
....................    
....................    i++;
0144E:  INCF   x4D,F
01450:  BTFSC  FD8.2
01452:  INCF   x4E,F
....................    j=0;
01454:  CLRF   x50
01456:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01458:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0145A:  MOVLW  5D
0145C:  ADDWF  x4D,W
0145E:  MOVWF  x55
01460:  MOVLW  00
01462:  ADDWFC x4E,W
01464:  MOVWF  x56
01466:  MOVFF  FF2,B57
0146A:  BCF    FF2.7
0146C:  MOVFF  B56,FAA
01470:  MOVFF  B55,FA9
01474:  BCF    FA6.6
01476:  BCF    FA6.7
01478:  BSF    FA6.0
0147A:  MOVF   FA8,W
0147C:  BTFSC  x57.7
0147E:  BSF    FF2.7
01480:  CLRF   x54
01482:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01484:  MOVF   x53,W
01486:  SUBLW  0D
01488:  BNZ   148E
0148A:  MOVF   x54,F
0148C:  BZ    1498
0148E:  MOVF   x50,F
01490:  BNZ   1498
01492:  MOVF   x4F,W
01494:  SUBLW  29
01496:  BC    14AA
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
01498:  MOVLW  0B
0149A:  ADDWF  x4F,W
0149C:  MOVWF  FE9
0149E:  MOVLW  0A
014A0:  ADDWFC x50,W
014A2:  MOVWF  FEA
014A4:  CLRF   FEF
....................          break;
014A6:  BRA    14CE
....................       }
014A8:  BRA    14BA
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
014AA:  MOVLW  0B
014AC:  ADDWF  x4F,W
014AE:  MOVWF  FE9
014B0:  MOVLW  0A
014B2:  ADDWFC x50,W
014B4:  MOVWF  FEA
014B6:  MOVFF  B53,FEF
....................          
....................       }
014BA:  MOVFF  B4E,03
014BE:  MOVF   x4D,W
014C0:  INCF   x4D,F
014C2:  BTFSC  FD8.2
014C4:  INCF   x4E,F
014C6:  INCF   x4F,F
014C8:  BTFSC  FD8.2
014CA:  INCF   x50,F
014CC:  BRA    1458
....................    }
....................    
....................    i++;
014CE:  INCF   x4D,F
014D0:  BTFSC  FD8.2
014D2:  INCF   x4E,F
....................    j=0;
014D4:  CLRF   x50
014D6:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
014D8:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
014DA:  MOVLW  5D
014DC:  ADDWF  x4D,W
014DE:  MOVWF  x55
014E0:  MOVLW  00
014E2:  ADDWFC x4E,W
014E4:  MOVWF  x56
014E6:  MOVFF  FF2,B57
014EA:  BCF    FF2.7
014EC:  MOVFF  B56,FAA
014F0:  MOVFF  B55,FA9
014F4:  BCF    FA6.6
014F6:  BCF    FA6.7
014F8:  BSF    FA6.0
014FA:  MOVF   FA8,W
014FC:  BTFSC  x57.7
014FE:  BSF    FF2.7
01500:  CLRF   x54
01502:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01504:  MOVF   x53,W
01506:  SUBLW  0D
01508:  BNZ   150E
0150A:  MOVF   x54,F
0150C:  BZ    1518
0150E:  MOVF   x50,F
01510:  BNZ   1518
01512:  MOVF   x4F,W
01514:  SUBLW  29
01516:  BC    152A
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01518:  MOVLW  2B
0151A:  ADDWF  x4F,W
0151C:  MOVWF  FE9
0151E:  MOVLW  0A
01520:  ADDWFC x50,W
01522:  MOVWF  FEA
01524:  CLRF   FEF
....................          break;
01526:  BRA    154E
....................       }
01528:  BRA    153A
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
0152A:  MOVLW  2B
0152C:  ADDWF  x4F,W
0152E:  MOVWF  FE9
01530:  MOVLW  0A
01532:  ADDWFC x50,W
01534:  MOVWF  FEA
01536:  MOVFF  B53,FEF
....................          
....................       }
0153A:  MOVFF  B4E,03
0153E:  MOVF   x4D,W
01540:  INCF   x4D,F
01542:  BTFSC  FD8.2
01544:  INCF   x4E,F
01546:  INCF   x4F,F
01548:  BTFSC  FD8.2
0154A:  INCF   x50,F
0154C:  BRA    14D8
....................    }
....................    
....................    i++;
0154E:  INCF   x4D,F
01550:  BTFSC  FD8.2
01552:  INCF   x4E,F
....................    j=0;
01554:  CLRF   x50
01556:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01558:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0155A:  MOVLW  5D
0155C:  ADDWF  x4D,W
0155E:  MOVWF  x55
01560:  MOVLW  00
01562:  ADDWFC x4E,W
01564:  MOVWF  x56
01566:  MOVFF  FF2,B57
0156A:  BCF    FF2.7
0156C:  MOVFF  B56,FAA
01570:  MOVFF  B55,FA9
01574:  BCF    FA6.6
01576:  BCF    FA6.7
01578:  BSF    FA6.0
0157A:  MOVF   FA8,W
0157C:  BTFSC  x57.7
0157E:  BSF    FF2.7
01580:  CLRF   x54
01582:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01584:  MOVF   x53,W
01586:  SUBLW  0D
01588:  BNZ   158E
0158A:  MOVF   x54,F
0158C:  BZ    1598
0158E:  MOVF   x50,F
01590:  BNZ   1598
01592:  MOVF   x4F,W
01594:  SUBLW  29
01596:  BC    15AA
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01598:  MOVLW  4B
0159A:  ADDWF  x4F,W
0159C:  MOVWF  FE9
0159E:  MOVLW  0A
015A0:  ADDWFC x50,W
015A2:  MOVWF  FEA
015A4:  CLRF   FEF
....................          break;
015A6:  BRA    15CE
....................       }
015A8:  BRA    15BA
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
015AA:  MOVLW  4B
015AC:  ADDWF  x4F,W
015AE:  MOVWF  FE9
015B0:  MOVLW  0A
015B2:  ADDWFC x50,W
015B4:  MOVWF  FEA
015B6:  MOVFF  B53,FEF
....................          
....................       }
015BA:  MOVFF  B4E,03
015BE:  MOVF   x4D,W
015C0:  INCF   x4D,F
015C2:  BTFSC  FD8.2
015C4:  INCF   x4E,F
015C6:  INCF   x4F,F
015C8:  BTFSC  FD8.2
015CA:  INCF   x50,F
015CC:  BRA    1558
....................    }
....................    
....................    i++;
015CE:  INCF   x4D,F
015D0:  BTFSC  FD8.2
015D2:  INCF   x4E,F
....................    j=0;
015D4:  CLRF   x50
015D6:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
015D8:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
015DA:  MOVLW  5D
015DC:  ADDWF  x4D,W
015DE:  MOVWF  x55
015E0:  MOVLW  00
015E2:  ADDWFC x4E,W
015E4:  MOVWF  x56
015E6:  MOVFF  FF2,B57
015EA:  BCF    FF2.7
015EC:  MOVFF  B56,FAA
015F0:  MOVFF  B55,FA9
015F4:  BCF    FA6.6
015F6:  BCF    FA6.7
015F8:  BSF    FA6.0
015FA:  MOVF   FA8,W
015FC:  BTFSC  x57.7
015FE:  BSF    FF2.7
01600:  CLRF   x54
01602:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01604:  MOVF   x53,W
01606:  SUBLW  0D
01608:  BNZ   160E
0160A:  MOVF   x54,F
0160C:  BZ    1618
0160E:  MOVF   x50,F
01610:  BNZ   1618
01612:  MOVF   x4F,W
01614:  SUBLW  29
01616:  BC    162A
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01618:  MOVLW  6B
0161A:  ADDWF  x4F,W
0161C:  MOVWF  FE9
0161E:  MOVLW  0A
01620:  ADDWFC x50,W
01622:  MOVWF  FEA
01624:  CLRF   FEF
....................          break;
01626:  BRA    164E
....................       }
01628:  BRA    163A
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
0162A:  MOVLW  6B
0162C:  ADDWF  x4F,W
0162E:  MOVWF  FE9
01630:  MOVLW  0A
01632:  ADDWFC x50,W
01634:  MOVWF  FEA
01636:  MOVFF  B53,FEF
....................          
....................       }
0163A:  MOVFF  B4E,03
0163E:  MOVF   x4D,W
01640:  INCF   x4D,F
01642:  BTFSC  FD8.2
01644:  INCF   x4E,F
01646:  INCF   x4F,F
01648:  BTFSC  FD8.2
0164A:  INCF   x50,F
0164C:  BRA    15D8
....................    }
....................    
....................    i++;
0164E:  INCF   x4D,F
01650:  BTFSC  FD8.2
01652:  INCF   x4E,F
....................    j=0;
01654:  CLRF   x50
01656:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01658:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
0165A:  MOVLW  5D
0165C:  ADDWF  x4D,W
0165E:  MOVWF  x55
01660:  MOVLW  00
01662:  ADDWFC x4E,W
01664:  MOVWF  x56
01666:  MOVFF  FF2,B57
0166A:  BCF    FF2.7
0166C:  MOVFF  B56,FAA
01670:  MOVFF  B55,FA9
01674:  BCF    FA6.6
01676:  BCF    FA6.7
01678:  BSF    FA6.0
0167A:  MOVF   FA8,W
0167C:  BTFSC  x57.7
0167E:  BSF    FF2.7
01680:  CLRF   x54
01682:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01684:  MOVF   x53,W
01686:  SUBLW  0D
01688:  BNZ   168E
0168A:  MOVF   x54,F
0168C:  BZ    1698
0168E:  MOVF   x50,F
01690:  BNZ   1698
01692:  MOVF   x4F,W
01694:  SUBLW  29
01696:  BC    16AA
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
01698:  MOVLW  8B
0169A:  ADDWF  x4F,W
0169C:  MOVWF  FE9
0169E:  MOVLW  0A
016A0:  ADDWFC x50,W
016A2:  MOVWF  FEA
016A4:  CLRF   FEF
....................          break;
016A6:  BRA    16CE
....................       }
016A8:  BRA    16BA
....................       else
....................       {
....................          SMS_Massage9[j] = buff;
016AA:  MOVLW  8B
016AC:  ADDWF  x4F,W
016AE:  MOVWF  FE9
016B0:  MOVLW  0A
016B2:  ADDWFC x50,W
016B4:  MOVWF  FEA
016B6:  MOVFF  B53,FEF
....................          
....................       }
016BA:  MOVFF  B4E,03
016BE:  MOVF   x4D,W
016C0:  INCF   x4D,F
016C2:  BTFSC  FD8.2
016C4:  INCF   x4E,F
016C6:  INCF   x4F,F
016C8:  BTFSC  FD8.2
016CA:  INCF   x50,F
016CC:  BRA    1658
....................    }
....................    
....................    i++;
016CE:  INCF   x4D,F
016D0:  BTFSC  FD8.2
016D2:  INCF   x4E,F
....................    j=0;
016D4:  CLRF   x50
016D6:  CLRF   x4F
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
016D8:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
016DA:  MOVLW  5D
016DC:  ADDWF  x4D,W
016DE:  MOVWF  x55
016E0:  MOVLW  00
016E2:  ADDWFC x4E,W
016E4:  MOVWF  x56
016E6:  MOVFF  FF2,B57
016EA:  BCF    FF2.7
016EC:  MOVFF  B56,FAA
016F0:  MOVFF  B55,FA9
016F4:  BCF    FA6.6
016F6:  BCF    FA6.7
016F8:  BSF    FA6.0
016FA:  MOVF   FA8,W
016FC:  BTFSC  x57.7
016FE:  BSF    FF2.7
01700:  CLRF   x54
01702:  MOVWF  x53
....................       
....................       if((buff == 0x0D) || (j>41))
01704:  MOVF   x53,W
01706:  SUBLW  0D
01708:  BNZ   170E
0170A:  MOVF   x54,F
0170C:  BZ    1718
0170E:  MOVF   x50,F
01710:  BNZ   1718
01712:  MOVF   x4F,W
01714:  SUBLW  29
01716:  BC    172A
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01718:  MOVLW  AB
0171A:  ADDWF  x4F,W
0171C:  MOVWF  FE9
0171E:  MOVLW  0A
01720:  ADDWFC x50,W
01722:  MOVWF  FEA
01724:  CLRF   FEF
....................          break;
01726:  BRA    174E
....................       }
01728:  BRA    173A
....................       else
....................       {
....................          SMS_Massage10[j] = buff;
0172A:  MOVLW  AB
0172C:  ADDWF  x4F,W
0172E:  MOVWF  FE9
01730:  MOVLW  0A
01732:  ADDWFC x50,W
01734:  MOVWF  FEA
01736:  MOVFF  B53,FEF
....................          
....................       }
0173A:  MOVFF  B4E,03
0173E:  MOVF   x4D,W
01740:  INCF   x4D,F
01742:  BTFSC  FD8.2
01744:  INCF   x4E,F
01746:  INCF   x4F,F
01748:  BTFSC  FD8.2
0174A:  INCF   x50,F
0174C:  BRA    16D8
....................    }
0174E:  MOVLB  0
01750:  RETURN 0
....................    
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
....................    SBUF = getc();
*
00540:  BTFSS  F9E.5
00542:  BRA    0540
00544:  MOVFF  FAE,2E
....................    checkCommand();
00548:  BRA    02E6
.................... }
0054A:  BCF    F9E.5
0054C:  GOTO   0078
.................... #int_TIMER1
.................... void  TIMER1_isr(void) 
.................... {
....................    //ReadIn_flag =1;
.................... }
.................... 
00550:  BCF    F9E.0
00552:  GOTO   0078
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00556:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00558:  MOVLB  9
0055A:  MOVF   x79,F
0055C:  BZ    056C
....................    {
....................       T_timeout--;
0055E:  DECF   x79,F
....................       if(T_timeout == 0)
00560:  MOVF   x79,F
00562:  BNZ   056C
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout 
00564:  MOVFF  63,6B
....................          output_bit(P485ctrl,0);
00568:  BCF    F8A.3
0056A:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
0056C:  MOVF   1C,F
0056E:  BZ    0588
....................    {
....................       TimeBase1s--;
00570:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
00572:  MOVF   1C,F
00574:  BNZ   0588
....................       {
....................          if(AutoAckDelayTime != 0x00)
00576:  MOVF   1D,F
00578:  BZ    0582
....................          {
....................             AutoAckDelayTime--;
0057A:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
0057C:  MOVF   1D,F
0057E:  BNZ   0582
....................             {
....................                AutoAckFlag = 1 ;
00580:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
00582:  BSF    30.4
....................          TimeBase1s = 100;
00584:  MOVLW  64
00586:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
00588:  MOVF   19,W
0058A:  SUBLW  32
0058C:  BNZ   05B6
....................    {
....................       StatusTime = 0;
0058E:  CLRF   19
....................       if(HearthbeatInd == 0)
00590:  BTFSC  1A.0
00592:  BRA    059C
....................       {
....................          HearthbeatInd = 1;
00594:  BSF    1A.0
....................          output_bit(Pled,1);
00596:  BSF    F8A.5
00598:  BCF    F93.5
....................       }
0059A:  BRA    05A2
....................       else
....................       {
....................          HearthbeatInd = 0;
0059C:  BCF    1A.0
....................          output_bit(Pled,0);
0059E:  BCF    F8A.5
005A0:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
005A2:  BTFSS  1A.6
005A4:  BRA    05B4
....................          {
....................              if(T_test > 0x00) T_test --;
005A6:  MOVF   2F,F
005A8:  BZ    05AC
005AA:  DECF   2F,F
....................              if(T_test == 0x00) Test_fault = 1;
005AC:  MOVF   2F,F
005AE:  BNZ   05B2
005B0:  BSF    1A.5
....................          }
005B2:  BRA    05B6
....................          else
....................          {
....................              //Test = 0;
....................              T_test = 0x00;
005B4:  CLRF   2F
....................          }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
005B6:  MOVF   1B,F
005B8:  BZ    05E0
....................    {
....................       FlashingRateTime--;
005BA:  DECF   1B,F
....................       if(FlashingRateTime == 0)
005BC:  MOVF   1B,F
005BE:  BNZ   05D4
....................       {
....................          outmcp23 = 0xff;
005C0:  SETF   x7B
....................          
....................          if(SyncStatus == 0)
005C2:  BTFSC  30.2
005C4:  BRA    05D0
....................          {
....................             if(FlashingFlag == 1)
005C6:  BTFSS  1A.1
005C8:  BRA    05CE
....................             {
....................                FlashingFlag = 0;
005CA:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
005CC:  BRA    05D0
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
005CE:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
005D0:  MOVFF  60,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
005D4:  MOVF   31,F
005D6:  BZ    05E0
....................       {
....................          Synctimer--;
005D8:  DECF   31,F
....................          if(Synctimer == 0x00)
005DA:  MOVF   31,F
005DC:  BNZ   05E0
....................          {
....................             SyncStatus = 0;
005DE:  BCF    30.2
....................          }
....................       }
.................... 
....................    }
....................    
....................    
005E0:  BCF    F9E.1
005E2:  MOVLB  0
005E4:  GOTO   0078
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
04DD4:  MOVLB  A
04DD6:  BTFSS  xD7.0
04DD8:  BRA    4ED4
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
04DDA:  MOVLW  00
04DDC:  BTFSC  xCB.0
04DDE:  MOVLW  01
04DE0:  MOVLB  B
04DE2:  MOVWF  x54
04DE4:  MOVLW  00
04DE6:  MOVLB  A
04DE8:  BTFSC  xCF.0
04DEA:  MOVLW  01
04DEC:  MOVLB  B
04DEE:  XORWF  x54,W
04DF0:  SUBLW  01
04DF2:  BNZ   4DFA
04DF4:  MOVLB  A
04DF6:  BTFSC  xD1.0
04DF8:  BRA    4E00
04DFA:  MOVLB  A
04DFC:  BTFSS  xDB.0
04DFE:  BRA    4ECC
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
04E00:  BTFSC  xD9.0
04E02:  BRA    4ECA
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04E04:  BTFSC  xDB.0
04E06:  BRA    4E16
04E08:  MOVF   5E,W
04E0A:  SUBLW  0F
04E0C:  BNZ   4E16
....................             {
....................                TimeBase1s = 100 ;            //reload again
04E0E:  MOVLW  64
04E10:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04E12:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
04E16:  BSF    xDB.0
....................             if(FlashingFlag == 0)                                                                                                                                                                                                                                                                
04E18:  BTFSC  1A.1
04E1A:  BRA    4E20
....................             {
....................                Output.B1 = 0;           //Flash output1
04E1C:  BCF    xCD.0
....................             }
04E1E:  BRA    4E22
....................             else
....................             {
....................                Output.B1 = 1;
04E20:  BSF    xCD.0
....................             }
.................... 
....................             if (~AutoTestFlag)
04E22:  BTFSC  1A.4
04E24:  BRA    4E42
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
04E26:  BTFSC  xD5.0
04E28:  BRA    4E34
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04E2A:  BSF    F89.4
04E2C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04E2E:  BSF    F89.3
04E30:  BCF    F92.3
....................                }
04E32:  BRA    4E42
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
04E34:  BTFSS  xD3.0
04E36:  BRA    4E3E
04E38:  BSF    F89.4
04E3A:  BCF    F92.4
04E3C:  BRA    4E42
....................                   else output_bit(Pbell,1);                          //Bell
04E3E:  BSF    F89.3
04E40:  BCF    F92.3
....................                }
....................             }
....................             //////////////////////////////////////////////////////////////////
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04E42:  BTFSC  xE7.0
04E44:  BRA    4ECA
04E46:  BTFSC  30.1
04E48:  BRA    4ECA
04E4A:  BTFSC  xD9.0
04E4C:  BRA    4ECA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04E4E:  MOVLW  E8
04E50:  MOVWF  FF6
04E52:  MOVLW  05
04E54:  MOVWF  FF7
04E56:  MOVLB  0
04E58:  RCALL  4748
....................                putc('\n',CH2);
04E5A:  MOVLW  0A
04E5C:  MOVLB  B
04E5E:  MOVWF  x55
04E60:  MOVLB  0
04E62:  RCALL  4702
....................                delay_ms(10);
04E64:  MOVLW  0A
04E66:  MOVLB  B
04E68:  MOVWF  x54
04E6A:  MOVLB  0
04E6C:  CALL   07DC
....................             
....................                SendSMS.B1 =1;
04E70:  MOVLB  A
04E72:  BSF    xE7.0
....................                fprintf(CH2,"AT+CMGS=\"");
04E74:  MOVLW  F2
04E76:  MOVWF  FF6
04E78:  MOVLW  05
04E7A:  MOVWF  FF7
04E7C:  MOVLB  0
04E7E:  RCALL  4748
....................                fprintf(CH2,sms_phonenumber);
04E80:  MOVLW  09
04E82:  MOVWF  FEA
04E84:  MOVLW  7C
04E86:  MOVWF  FE9
04E88:  RCALL  4768
....................                
....................                fprintf(CH2,"\"");
04E8A:  MOVLW  22
04E8C:  MOVLB  B
04E8E:  MOVWF  x55
04E90:  MOVLB  0
04E92:  RCALL  4702
....................                putc('\n',CH2);
04E94:  MOVLW  0A
04E96:  MOVLB  B
04E98:  MOVWF  x55
04E9A:  MOVLB  0
04E9C:  RCALL  4702
....................                delay_ms(50);
04E9E:  MOVLW  32
04EA0:  MOVLB  B
04EA2:  MOVWF  x54
04EA4:  MOVLB  0
04EA6:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage1);
04EAA:  MOVLW  09
04EAC:  MOVWF  FEA
04EAE:  MOVLW  8B
04EB0:  MOVWF  FE9
04EB2:  RCALL  4768
....................               putc('\n',CH2);
04EB4:  MOVLW  0A
04EB6:  MOVLB  B
04EB8:  MOVWF  x55
04EBA:  MOVLB  0
04EBC:  RCALL  4702
....................               putc(26,CH2);
04EBE:  MOVLW  1A
04EC0:  MOVLB  B
04EC2:  MOVWF  x55
04EC4:  MOVLB  0
04EC6:  RCALL  4702
04EC8:  MOVLB  A
....................             }
....................             //////////////////////////////////////////////////////////////////
....................         }
....................       }
04ECA:  BRA    4ED2
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
04ECC:  BTFSS  xD1.0
04ECE:  BRA    4ED2
04ED0:  BCF    xD9.0
....................    }
04ED2:  BRA    4F92
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
04ED4:  MOVLW  00
04ED6:  BTFSC  xCB.0
04ED8:  MOVLW  01
04EDA:  MOVLB  B
04EDC:  MOVWF  x54
04EDE:  MOVLW  00
04EE0:  MOVLB  A
04EE2:  BTFSC  xCF.0
04EE4:  MOVLW  01
04EE6:  MOVLB  B
04EE8:  XORWF  x54,W
04EEA:  SUBLW  01
04EEC:  BNZ   4F8A
....................       {
....................          Output.B1 = 0;
04EEE:  MOVLB  A
04EF0:  BCF    xCD.0
....................          // SMS Sending   
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04EF2:  BTFSC  xE7.0
04EF4:  BRA    4F86
04EF6:  BTFSC  30.1
04EF8:  BRA    4F86
04EFA:  BTFSC  xD9.0
04EFC:  BRA    4F86
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04EFE:  MOVLW  FC
04F00:  MOVWF  FF6
04F02:  MOVLW  05
04F04:  MOVWF  FF7
04F06:  MOVLB  0
04F08:  RCALL  4748
....................             putc('\n',CH2);
04F0A:  MOVLW  0A
04F0C:  MOVLB  B
04F0E:  MOVWF  x55
04F10:  MOVLB  0
04F12:  CALL   4702
....................             delay_ms(10);
04F16:  MOVLW  0A
04F18:  MOVLB  B
04F1A:  MOVWF  x54
04F1C:  MOVLB  0
04F1E:  CALL   07DC
....................             
....................             SendSMS.B1 =1;
04F22:  MOVLB  A
04F24:  BSF    xE7.0
....................             fprintf(CH2,"AT+CMGS=\"");
04F26:  MOVLW  06
04F28:  MOVWF  FF6
04F2A:  MOVLW  06
04F2C:  MOVWF  FF7
04F2E:  MOVLB  0
04F30:  RCALL  4748
....................             fprintf(CH2,sms_phonenumber);
04F32:  MOVLW  09
04F34:  MOVWF  FEA
04F36:  MOVLW  7C
04F38:  MOVWF  FE9
04F3A:  RCALL  4768
....................             
....................             fprintf(CH2,"\"");
04F3C:  MOVLW  22
04F3E:  MOVLB  B
04F40:  MOVWF  x55
04F42:  MOVLB  0
04F44:  CALL   4702
....................             putc('\n',CH2);
04F48:  MOVLW  0A
04F4A:  MOVLB  B
04F4C:  MOVWF  x55
04F4E:  MOVLB  0
04F50:  CALL   4702
....................             delay_ms(50);
04F54:  MOVLW  32
04F56:  MOVLB  B
04F58:  MOVWF  x54
04F5A:  MOVLB  0
04F5C:  CALL   07DC
....................            
....................            fprintf(CH2,SMS_Massage1);
04F60:  MOVLW  09
04F62:  MOVWF  FEA
04F64:  MOVLW  8B
04F66:  MOVWF  FE9
04F68:  CALL   4768
....................            putc('\n',CH2);
04F6C:  MOVLW  0A
04F6E:  MOVLB  B
04F70:  MOVWF  x55
04F72:  MOVLB  0
04F74:  CALL   4702
....................           putc(26,CH2);
04F78:  MOVLW  1A
04F7A:  MOVLB  B
04F7C:  MOVWF  x55
04F7E:  MOVLB  0
04F80:  CALL   4702
04F84:  MOVLB  A
....................          }
....................       }
04F86:  BRA    4F92
04F88:  MOVLB  B
....................       else
....................       {
....................          Output.B1 = 1;
04F8A:  MOVLB  A
04F8C:  BSF    xCD.0
....................          
....................          SendSMS.B1 =0;
04F8E:  BCF    xE7.0
....................          functointest_f =0;
04F90:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
04F92:  BTFSS  xD7.1
04F94:  BRA    50A2
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
04F96:  MOVLW  00
04F98:  BTFSC  xCB.1
04F9A:  MOVLW  01
04F9C:  MOVLB  B
04F9E:  MOVWF  x54
04FA0:  MOVLW  00
04FA2:  MOVLB  A
04FA4:  BTFSC  xCF.1
04FA6:  MOVLW  01
04FA8:  MOVLB  B
04FAA:  XORWF  x54,W
04FAC:  SUBLW  01
04FAE:  BNZ   4FB6
04FB0:  MOVLB  A
04FB2:  BTFSC  xD1.1
04FB4:  BRA    4FBC
04FB6:  MOVLB  A
04FB8:  BTFSS  xDB.1
04FBA:  BRA    509A
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
04FBC:  BTFSC  xD9.1
04FBE:  BRA    5098
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04FC0:  BTFSC  xDB.1
04FC2:  BRA    4FD2
04FC4:  MOVF   5E,W
04FC6:  SUBLW  0F
04FC8:  BNZ   4FD2
....................             {
....................                TimeBase1s = 100 ;            //reload again
04FCA:  MOVLW  64
04FCC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04FCE:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
04FD2:  BSF    xDB.1
....................             if(FlashingFlag == 0)
04FD4:  BTFSC  1A.1
04FD6:  BRA    4FDC
....................             {
....................                Output.B2 = 0;           //Flash output1
04FD8:  BCF    xCD.1
....................             }
04FDA:  BRA    4FDE
....................             else
....................             {
....................                Output.B2 = 1;
04FDC:  BSF    xCD.1
....................             }
.................... 
....................             if (~AutoTestFlag)
04FDE:  BTFSC  1A.4
04FE0:  BRA    4FFE
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
04FE2:  BTFSC  xD5.1
04FE4:  BRA    4FF0
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04FE6:  BSF    F89.4
04FE8:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04FEA:  BSF    F89.3
04FEC:  BCF    F92.3
....................                }
04FEE:  BRA    4FFE
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
04FF0:  BTFSS  xD3.1
04FF2:  BRA    4FFA
04FF4:  BSF    F89.4
04FF6:  BCF    F92.4
04FF8:  BRA    4FFE
....................                   else output_bit(Pbell,1);                          //Bell
04FFA:  BSF    F89.3
04FFC:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
04FFE:  BTFSC  xE7.1
05000:  BRA    5098
05002:  BTFSC  30.1
05004:  BRA    5098
05006:  BTFSC  xD9.1
05008:  BRA    5098
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0500A:  MOVLW  10
0500C:  MOVWF  FF6
0500E:  MOVLW  06
05010:  MOVWF  FF7
05012:  MOVLB  0
05014:  CALL   4748
....................                putc('\n',CH2);
05018:  MOVLW  0A
0501A:  MOVLB  B
0501C:  MOVWF  x55
0501E:  MOVLB  0
05020:  CALL   4702
....................                delay_ms(10);
05024:  MOVLW  0A
05026:  MOVLB  B
05028:  MOVWF  x54
0502A:  MOVLB  0
0502C:  CALL   07DC
....................                 
....................                SendSMS.B2 =1;
05030:  MOVLB  A
05032:  BSF    xE7.1
....................                fprintf(CH2,"AT+CMGS=\"");
05034:  MOVLW  1A
05036:  MOVWF  FF6
05038:  MOVLW  06
0503A:  MOVWF  FF7
0503C:  MOVLB  0
0503E:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05042:  MOVLW  09
05044:  MOVWF  FEA
05046:  MOVLW  7C
05048:  MOVWF  FE9
0504A:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
0504E:  MOVLW  22
05050:  MOVLB  B
05052:  MOVWF  x55
05054:  MOVLB  0
05056:  CALL   4702
....................                putc('\n',CH2);
0505A:  MOVLW  0A
0505C:  MOVLB  B
0505E:  MOVWF  x55
05060:  MOVLB  0
05062:  CALL   4702
....................                delay_ms(50);
05066:  MOVLW  32
05068:  MOVLB  B
0506A:  MOVWF  x54
0506C:  MOVLB  0
0506E:  CALL   07DC
....................                
....................               fprintf(CH2,SMS_Massage2);
05072:  MOVLW  09
05074:  MOVWF  FEA
05076:  MOVLW  AB
05078:  MOVWF  FE9
0507A:  CALL   4768
....................               putc('\n',CH2);
0507E:  MOVLW  0A
05080:  MOVLB  B
05082:  MOVWF  x55
05084:  MOVLB  0
05086:  CALL   4702
....................              putc(26,CH2);
0508A:  MOVLW  1A
0508C:  MOVLB  B
0508E:  MOVWF  x55
05090:  MOVLB  0
05092:  CALL   4702
05096:  MOVLB  A
....................             } 
....................           }
.................... 
....................       }
05098:  BRA    50A0
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
0509A:  BTFSS  xD1.1
0509C:  BRA    50A0
0509E:  BCF    xD9.1
....................    }
050A0:  BRA    5166
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
050A2:  MOVLW  00
050A4:  BTFSC  xCB.1
050A6:  MOVLW  01
050A8:  MOVLB  B
050AA:  MOVWF  x54
050AC:  MOVLW  00
050AE:  MOVLB  A
050B0:  BTFSC  xCF.1
050B2:  MOVLW  01
050B4:  MOVLB  B
050B6:  XORWF  x54,W
050B8:  SUBLW  01
050BA:  BNZ   515E
....................       {
....................          Output.B2 = 0;
050BC:  MOVLB  A
050BE:  BCF    xCD.1
....................          // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
050C0:  BTFSC  xE7.1
050C2:  BRA    515A
050C4:  BTFSC  30.1
050C6:  BRA    515A
050C8:  BTFSC  xD9.1
050CA:  BRA    515A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
050CC:  MOVLW  24
050CE:  MOVWF  FF6
050D0:  MOVLW  06
050D2:  MOVWF  FF7
050D4:  MOVLB  0
050D6:  CALL   4748
....................                putc('\n',CH2);
050DA:  MOVLW  0A
050DC:  MOVLB  B
050DE:  MOVWF  x55
050E0:  MOVLB  0
050E2:  CALL   4702
....................                delay_ms(10);
050E6:  MOVLW  0A
050E8:  MOVLB  B
050EA:  MOVWF  x54
050EC:  MOVLB  0
050EE:  CALL   07DC
....................                 
....................                SendSMS.B2 =1;
050F2:  MOVLB  A
050F4:  BSF    xE7.1
....................                fprintf(CH2,"AT+CMGS=\"");
050F6:  MOVLW  2E
050F8:  MOVWF  FF6
050FA:  MOVLW  06
050FC:  MOVWF  FF7
050FE:  MOVLB  0
05100:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05104:  MOVLW  09
05106:  MOVWF  FEA
05108:  MOVLW  7C
0510A:  MOVWF  FE9
0510C:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
05110:  MOVLW  22
05112:  MOVLB  B
05114:  MOVWF  x55
05116:  MOVLB  0
05118:  CALL   4702
....................                putc('\n',CH2);
0511C:  MOVLW  0A
0511E:  MOVLB  B
05120:  MOVWF  x55
05122:  MOVLB  0
05124:  CALL   4702
....................                delay_ms(50);
05128:  MOVLW  32
0512A:  MOVLB  B
0512C:  MOVWF  x54
0512E:  MOVLB  0
05130:  CALL   07DC
....................                
....................               fprintf(CH2,SMS_Massage2);
05134:  MOVLW  09
05136:  MOVWF  FEA
05138:  MOVLW  AB
0513A:  MOVWF  FE9
0513C:  CALL   4768
....................               putc('\n',CH2);
05140:  MOVLW  0A
05142:  MOVLB  B
05144:  MOVWF  x55
05146:  MOVLB  0
05148:  CALL   4702
....................              putc(26,CH2);
0514C:  MOVLW  1A
0514E:  MOVLB  B
05150:  MOVWF  x55
05152:  MOVLB  0
05154:  CALL   4702
05158:  MOVLB  A
....................             } 
....................       }
0515A:  BRA    5166
0515C:  MOVLB  B
....................       else
....................       {
....................          Output.B2 = 1;
0515E:  MOVLB  A
05160:  BSF    xCD.1
....................          SendSMS.B2 =0;
05162:  BCF    xE7.1
....................          functointest_f =0;
05164:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
05166:  BTFSS  xD7.2
05168:  BRA    5276
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
0516A:  MOVLW  00
0516C:  BTFSC  xCB.2
0516E:  MOVLW  01
05170:  MOVLB  B
05172:  MOVWF  x54
05174:  MOVLW  00
05176:  MOVLB  A
05178:  BTFSC  xCF.2
0517A:  MOVLW  01
0517C:  MOVLB  B
0517E:  XORWF  x54,W
05180:  SUBLW  01
05182:  BNZ   518A
05184:  MOVLB  A
05186:  BTFSC  xD1.2
05188:  BRA    5190
0518A:  MOVLB  A
0518C:  BTFSS  xDB.2
0518E:  BRA    526E
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
05190:  BTFSC  xD9.2
05192:  BRA    526C
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05194:  BTFSC  xDB.2
05196:  BRA    51A6
05198:  MOVF   5E,W
0519A:  SUBLW  0F
0519C:  BNZ   51A6
....................             {
....................                TimeBase1s = 100 ;            //reload again
0519E:  MOVLW  64
051A0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
051A2:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
051A6:  BSF    xDB.2
....................             if(FlashingFlag == 0)
051A8:  BTFSC  1A.1
051AA:  BRA    51B0
....................             {
....................                Output.B3 = 0;           //Flash output1
051AC:  BCF    xCD.2
....................             }
051AE:  BRA    51B2
....................             else
....................             {
....................                Output.B3 = 1;
051B0:  BSF    xCD.2
....................             }
.................... 
....................             if (~AutoTestFlag)
051B2:  BTFSC  1A.4
051B4:  BRA    51D2
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
051B6:  BTFSC  xD5.2
051B8:  BRA    51C4
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
051BA:  BSF    F89.4
051BC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
051BE:  BSF    F89.3
051C0:  BCF    F92.3
....................                }
051C2:  BRA    51D2
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
051C4:  BTFSS  xD3.2
051C6:  BRA    51CE
051C8:  BSF    F89.4
051CA:  BCF    F92.4
051CC:  BRA    51D2
....................                   else output_bit(Pbell,1);                          //Bell
051CE:  BSF    F89.3
051D0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
051D2:  BTFSC  xE7.2
051D4:  BRA    526C
051D6:  BTFSC  30.1
051D8:  BRA    526C
051DA:  BTFSC  xD9.2
051DC:  BRA    526C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
051DE:  MOVLW  38
051E0:  MOVWF  FF6
051E2:  MOVLW  06
051E4:  MOVWF  FF7
051E6:  MOVLB  0
051E8:  CALL   4748
....................                putc('\n',CH2);
051EC:  MOVLW  0A
051EE:  MOVLB  B
051F0:  MOVWF  x55
051F2:  MOVLB  0
051F4:  CALL   4702
....................                delay_ms(10);
051F8:  MOVLW  0A
051FA:  MOVLB  B
051FC:  MOVWF  x54
051FE:  MOVLB  0
05200:  CALL   07DC
....................                
....................                SendSMS.B3 =1;
05204:  MOVLB  A
05206:  BSF    xE7.2
....................                fprintf(CH2,"AT+CMGS=\"");
05208:  MOVLW  42
0520A:  MOVWF  FF6
0520C:  MOVLW  06
0520E:  MOVWF  FF7
05210:  MOVLB  0
05212:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05216:  MOVLW  09
05218:  MOVWF  FEA
0521A:  MOVLW  7C
0521C:  MOVWF  FE9
0521E:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
05222:  MOVLW  22
05224:  MOVLB  B
05226:  MOVWF  x55
05228:  MOVLB  0
0522A:  CALL   4702
....................                putc('\n',CH2);
0522E:  MOVLW  0A
05230:  MOVLB  B
05232:  MOVWF  x55
05234:  MOVLB  0
05236:  CALL   4702
....................                delay_ms(50);
0523A:  MOVLW  32
0523C:  MOVLB  B
0523E:  MOVWF  x54
05240:  MOVLB  0
05242:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage3);
05246:  MOVLW  09
05248:  MOVWF  FEA
0524A:  MOVLW  CB
0524C:  MOVWF  FE9
0524E:  CALL   4768
....................               putc('\n',CH2);
05252:  MOVLW  0A
05254:  MOVLB  B
05256:  MOVWF  x55
05258:  MOVLB  0
0525A:  CALL   4702
....................              putc(26,CH2);
0525E:  MOVLW  1A
05260:  MOVLB  B
05262:  MOVWF  x55
05264:  MOVLB  0
05266:  CALL   4702
0526A:  MOVLB  A
....................             }
....................             
....................             
....................           }
.................... 
....................       }
0526C:  BRA    5274
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
0526E:  BTFSS  xD1.2
05270:  BRA    5274
05272:  BCF    xD9.2
....................    }
05274:  BRA    533A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
05276:  MOVLW  00
05278:  BTFSC  xCB.2
0527A:  MOVLW  01
0527C:  MOVLB  B
0527E:  MOVWF  x54
05280:  MOVLW  00
05282:  MOVLB  A
05284:  BTFSC  xCF.2
05286:  MOVLW  01
05288:  MOVLB  B
0528A:  XORWF  x54,W
0528C:  SUBLW  01
0528E:  BNZ   5332
....................       {
....................          Output.B3 = 0;
05290:  MOVLB  A
05292:  BCF    xCD.2
....................          // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
05294:  BTFSC  xE7.2
05296:  BRA    532E
05298:  BTFSC  30.1
0529A:  BRA    532E
0529C:  BTFSC  xD9.2
0529E:  BRA    532E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
052A0:  MOVLW  4C
052A2:  MOVWF  FF6
052A4:  MOVLW  06
052A6:  MOVWF  FF7
052A8:  MOVLB  0
052AA:  CALL   4748
....................                putc('\n',CH2);
052AE:  MOVLW  0A
052B0:  MOVLB  B
052B2:  MOVWF  x55
052B4:  MOVLB  0
052B6:  CALL   4702
....................                delay_ms(10);
052BA:  MOVLW  0A
052BC:  MOVLB  B
052BE:  MOVWF  x54
052C0:  MOVLB  0
052C2:  CALL   07DC
....................                
....................                SendSMS.B3 =1;
052C6:  MOVLB  A
052C8:  BSF    xE7.2
....................                fprintf(CH2,"AT+CMGS=\"");
052CA:  MOVLW  56
052CC:  MOVWF  FF6
052CE:  MOVLW  06
052D0:  MOVWF  FF7
052D2:  MOVLB  0
052D4:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
052D8:  MOVLW  09
052DA:  MOVWF  FEA
052DC:  MOVLW  7C
052DE:  MOVWF  FE9
052E0:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
052E4:  MOVLW  22
052E6:  MOVLB  B
052E8:  MOVWF  x55
052EA:  MOVLB  0
052EC:  CALL   4702
....................                putc('\n',CH2);
052F0:  MOVLW  0A
052F2:  MOVLB  B
052F4:  MOVWF  x55
052F6:  MOVLB  0
052F8:  CALL   4702
....................                delay_ms(50);
052FC:  MOVLW  32
052FE:  MOVLB  B
05300:  MOVWF  x54
05302:  MOVLB  0
05304:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage3);
05308:  MOVLW  09
0530A:  MOVWF  FEA
0530C:  MOVLW  CB
0530E:  MOVWF  FE9
05310:  CALL   4768
....................               putc('\n',CH2);
05314:  MOVLW  0A
05316:  MOVLB  B
05318:  MOVWF  x55
0531A:  MOVLB  0
0531C:  CALL   4702
....................              putc(26,CH2);
05320:  MOVLW  1A
05322:  MOVLB  B
05324:  MOVWF  x55
05326:  MOVLB  0
05328:  CALL   4702
0532C:  MOVLB  A
....................             }
....................       }
0532E:  BRA    533A
05330:  MOVLB  B
....................       else
....................       {
....................          Output.B3 = 1;
05332:  MOVLB  A
05334:  BSF    xCD.2
....................          SendSMS.B5 =0;
05336:  BCF    xE7.4
....................          functointest_f =0;
05338:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
0533A:  BTFSS  xD7.3
0533C:  BRA    544A
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
0533E:  MOVLW  00
05340:  BTFSC  xCB.3
05342:  MOVLW  01
05344:  MOVLB  B
05346:  MOVWF  x54
05348:  MOVLW  00
0534A:  MOVLB  A
0534C:  BTFSC  xCF.3
0534E:  MOVLW  01
05350:  MOVLB  B
05352:  XORWF  x54,W
05354:  SUBLW  01
05356:  BNZ   535E
05358:  MOVLB  A
0535A:  BTFSC  xD1.3
0535C:  BRA    5364
0535E:  MOVLB  A
05360:  BTFSS  xDB.3
05362:  BRA    5442
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
05364:  BTFSC  xD9.3
05366:  BRA    5440
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05368:  BTFSC  xDB.3
0536A:  BRA    537A
0536C:  MOVF   5E,W
0536E:  SUBLW  0F
05370:  BNZ   537A
....................             {
....................                TimeBase1s = 100 ;            //reload again
05372:  MOVLW  64
05374:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05376:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
0537A:  BSF    xDB.3
....................             if(FlashingFlag == 0)
0537C:  BTFSC  1A.1
0537E:  BRA    5384
....................             {
....................                Output.B4 = 0;           //Flash output1
05380:  BCF    xCD.3
....................             }
05382:  BRA    5386
....................             else
....................             {
....................                Output.B4 = 1;
05384:  BSF    xCD.3
....................             }
.................... 
....................             if (~AutoTestFlag)
05386:  BTFSC  1A.4
05388:  BRA    53A6
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
0538A:  BTFSC  xD5.3
0538C:  BRA    5398
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0538E:  BSF    F89.4
05390:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05392:  BSF    F89.3
05394:  BCF    F92.3
....................                }
05396:  BRA    53A6
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
05398:  BTFSS  xD3.3
0539A:  BRA    53A2
0539C:  BSF    F89.4
0539E:  BCF    F92.4
053A0:  BRA    53A6
....................                   else output_bit(Pbell,1);                          //Bell
053A2:  BSF    F89.3
053A4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
053A6:  BTFSC  xE7.3
053A8:  BRA    5440
053AA:  BTFSC  30.1
053AC:  BRA    5440
053AE:  BTFSC  xD9.3
053B0:  BRA    5440
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
053B2:  MOVLW  60
053B4:  MOVWF  FF6
053B6:  MOVLW  06
053B8:  MOVWF  FF7
053BA:  MOVLB  0
053BC:  CALL   4748
....................                putc('\n',CH2);
053C0:  MOVLW  0A
053C2:  MOVLB  B
053C4:  MOVWF  x55
053C6:  MOVLB  0
053C8:  CALL   4702
....................                delay_ms(10);
053CC:  MOVLW  0A
053CE:  MOVLB  B
053D0:  MOVWF  x54
053D2:  MOVLB  0
053D4:  CALL   07DC
....................                
....................                SendSMS.B4 =1;
053D8:  MOVLB  A
053DA:  BSF    xE7.3
....................                fprintf(CH2,"AT+CMGS=\"");
053DC:  MOVLW  6A
053DE:  MOVWF  FF6
053E0:  MOVLW  06
053E2:  MOVWF  FF7
053E4:  MOVLB  0
053E6:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
053EA:  MOVLW  09
053EC:  MOVWF  FEA
053EE:  MOVLW  7C
053F0:  MOVWF  FE9
053F2:  CALL   4768
....................             
....................                fprintf(CH2,"\"");
053F6:  MOVLW  22
053F8:  MOVLB  B
053FA:  MOVWF  x55
053FC:  MOVLB  0
053FE:  CALL   4702
....................                putc('\n',CH2);
05402:  MOVLW  0A
05404:  MOVLB  B
05406:  MOVWF  x55
05408:  MOVLB  0
0540A:  CALL   4702
....................                delay_ms(50);
0540E:  MOVLW  32
05410:  MOVLB  B
05412:  MOVWF  x54
05414:  MOVLB  0
05416:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage4);
0541A:  MOVLW  09
0541C:  MOVWF  FEA
0541E:  MOVLW  EB
05420:  MOVWF  FE9
05422:  CALL   4768
....................               putc('\n',CH2);
05426:  MOVLW  0A
05428:  MOVLB  B
0542A:  MOVWF  x55
0542C:  MOVLB  0
0542E:  CALL   4702
....................              putc(26,CH2);
05432:  MOVLW  1A
05434:  MOVLB  B
05436:  MOVWF  x55
05438:  MOVLB  0
0543A:  CALL   4702
0543E:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
05440:  BRA    5448
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
05442:  BTFSS  xD1.3
05444:  BRA    5448
05446:  BCF    xD9.3
....................    }
05448:  BRA    550E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
0544A:  MOVLW  00
0544C:  BTFSC  xCB.3
0544E:  MOVLW  01
05450:  MOVLB  B
05452:  MOVWF  x54
05454:  MOVLW  00
05456:  MOVLB  A
05458:  BTFSC  xCF.3
0545A:  MOVLW  01
0545C:  MOVLB  B
0545E:  XORWF  x54,W
05460:  SUBLW  01
05462:  BNZ   5506
....................       {
....................          Output.B4 = 0;
05464:  MOVLB  A
05466:  BCF    xCD.3
....................          // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05468:  BTFSC  xE7.3
0546A:  BRA    5502
0546C:  BTFSC  30.1
0546E:  BRA    5502
05470:  BTFSC  xD9.3
05472:  BRA    5502
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05474:  MOVLW  74
05476:  MOVWF  FF6
05478:  MOVLW  06
0547A:  MOVWF  FF7
0547C:  MOVLB  0
0547E:  CALL   4748
....................                putc('\n',CH2);
05482:  MOVLW  0A
05484:  MOVLB  B
05486:  MOVWF  x55
05488:  MOVLB  0
0548A:  CALL   4702
....................                delay_ms(10);
0548E:  MOVLW  0A
05490:  MOVLB  B
05492:  MOVWF  x54
05494:  MOVLB  0
05496:  CALL   07DC
....................                
....................                SendSMS.B4 =1;
0549A:  MOVLB  A
0549C:  BSF    xE7.3
....................                fprintf(CH2,"AT+CMGS=\"");
0549E:  MOVLW  7E
054A0:  MOVWF  FF6
054A2:  MOVLW  06
054A4:  MOVWF  FF7
054A6:  MOVLB  0
054A8:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
054AC:  MOVLW  09
054AE:  MOVWF  FEA
054B0:  MOVLW  7C
054B2:  MOVWF  FE9
054B4:  CALL   4768
....................             
....................                fprintf(CH2,"\"");
054B8:  MOVLW  22
054BA:  MOVLB  B
054BC:  MOVWF  x55
054BE:  MOVLB  0
054C0:  CALL   4702
....................                putc('\n',CH2);
054C4:  MOVLW  0A
054C6:  MOVLB  B
054C8:  MOVWF  x55
054CA:  MOVLB  0
054CC:  CALL   4702
....................                delay_ms(50);
054D0:  MOVLW  32
054D2:  MOVLB  B
054D4:  MOVWF  x54
054D6:  MOVLB  0
054D8:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage4);
054DC:  MOVLW  09
054DE:  MOVWF  FEA
054E0:  MOVLW  EB
054E2:  MOVWF  FE9
054E4:  CALL   4768
....................               putc('\n',CH2);
054E8:  MOVLW  0A
054EA:  MOVLB  B
054EC:  MOVWF  x55
054EE:  MOVLB  0
054F0:  CALL   4702
....................              putc(26,CH2);
054F4:  MOVLW  1A
054F6:  MOVLB  B
054F8:  MOVWF  x55
054FA:  MOVLB  0
054FC:  CALL   4702
05500:  MOVLB  A
....................             }
....................       }
05502:  BRA    550E
05504:  MOVLB  B
....................       else
....................       {
....................          Output.B4 = 1;
05506:  MOVLB  A
05508:  BSF    xCD.3
....................          SendSMS.B4 =0;
0550A:  BCF    xE7.3
....................          functointest_f =0;
0550C:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
0550E:  BTFSS  xD7.4
05510:  BRA    561E
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
05512:  MOVLW  00
05514:  BTFSC  xCB.4
05516:  MOVLW  01
05518:  MOVLB  B
0551A:  MOVWF  x54
0551C:  MOVLW  00
0551E:  MOVLB  A
05520:  BTFSC  xCF.4
05522:  MOVLW  01
05524:  MOVLB  B
05526:  XORWF  x54,W
05528:  SUBLW  01
0552A:  BNZ   5532
0552C:  MOVLB  A
0552E:  BTFSC  xD1.4
05530:  BRA    5538
05532:  MOVLB  A
05534:  BTFSS  xDB.4
05536:  BRA    5616
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
05538:  BTFSC  xD9.4
0553A:  BRA    5614
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0553C:  BTFSC  xDB.4
0553E:  BRA    554E
05540:  MOVF   5E,W
05542:  SUBLW  0F
05544:  BNZ   554E
....................             {
....................                TimeBase1s = 100 ;            //reload again
05546:  MOVLW  64
05548:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0554A:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
0554E:  BSF    xDB.4
....................             if(FlashingFlag == 0)
05550:  BTFSC  1A.1
05552:  BRA    5558
....................             {
....................                Output.B5 = 0;           //Flash output1
05554:  BCF    xCD.4
....................             }
05556:  BRA    555A
....................             else
....................             {
....................                Output.B5 = 1;
05558:  BSF    xCD.4
....................             }
.................... 
....................             if (~AutoTestFlag)
0555A:  BTFSC  1A.4
0555C:  BRA    557A
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
0555E:  BTFSC  xD5.4
05560:  BRA    556C
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05562:  BSF    F89.4
05564:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05566:  BSF    F89.3
05568:  BCF    F92.3
....................                }
0556A:  BRA    557A
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
0556C:  BTFSS  xD3.4
0556E:  BRA    5576
05570:  BSF    F89.4
05572:  BCF    F92.4
05574:  BRA    557A
....................                   else output_bit(Pbell,1);                          //Bell
05576:  BSF    F89.3
05578:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
0557A:  BTFSC  xE7.4
0557C:  BRA    5614
0557E:  BTFSC  30.1
05580:  BRA    5614
05582:  BTFSC  xD9.4
05584:  BRA    5614
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05586:  MOVLW  88
05588:  MOVWF  FF6
0558A:  MOVLW  06
0558C:  MOVWF  FF7
0558E:  MOVLB  0
05590:  CALL   4748
....................                putc('\n',CH2);
05594:  MOVLW  0A
05596:  MOVLB  B
05598:  MOVWF  x55
0559A:  MOVLB  0
0559C:  CALL   4702
....................                delay_ms(10);
055A0:  MOVLW  0A
055A2:  MOVLB  B
055A4:  MOVWF  x54
055A6:  MOVLB  0
055A8:  CALL   07DC
....................                
....................                SendSMS.B5 =1;
055AC:  MOVLB  A
055AE:  BSF    xE7.4
....................                fprintf(CH2,"AT+CMGS=\"");
055B0:  MOVLW  92
055B2:  MOVWF  FF6
055B4:  MOVLW  06
055B6:  MOVWF  FF7
055B8:  MOVLB  0
055BA:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
055BE:  MOVLW  09
055C0:  MOVWF  FEA
055C2:  MOVLW  7C
055C4:  MOVWF  FE9
055C6:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
055CA:  MOVLW  22
055CC:  MOVLB  B
055CE:  MOVWF  x55
055D0:  MOVLB  0
055D2:  CALL   4702
....................                putc('\n',CH2);
055D6:  MOVLW  0A
055D8:  MOVLB  B
055DA:  MOVWF  x55
055DC:  MOVLB  0
055DE:  CALL   4702
....................                delay_ms(50);
055E2:  MOVLW  32
055E4:  MOVLB  B
055E6:  MOVWF  x54
055E8:  MOVLB  0
055EA:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage5);
055EE:  MOVLW  0A
055F0:  MOVWF  FEA
055F2:  MOVLW  0B
055F4:  MOVWF  FE9
055F6:  CALL   4768
....................               putc('\n',CH2);
055FA:  MOVLW  0A
055FC:  MOVLB  B
055FE:  MOVWF  x55
05600:  MOVLB  0
05602:  CALL   4702
....................              putc(26,CH2);
05606:  MOVLW  1A
05608:  MOVLB  B
0560A:  MOVWF  x55
0560C:  MOVLB  0
0560E:  CALL   4702
05612:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
05614:  BRA    561C
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
05616:  BTFSS  xD1.4
05618:  BRA    561C
0561A:  BCF    xD9.4
....................    }
0561C:  BRA    56E2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
0561E:  MOVLW  00
05620:  BTFSC  xCB.4
05622:  MOVLW  01
05624:  MOVLB  B
05626:  MOVWF  x54
05628:  MOVLW  00
0562A:  MOVLB  A
0562C:  BTFSC  xCF.4
0562E:  MOVLW  01
05630:  MOVLB  B
05632:  XORWF  x54,W
05634:  SUBLW  01
05636:  BNZ   56DA
....................       {
....................          Output.B5 = 0;
05638:  MOVLB  A
0563A:  BCF    xCD.4
....................          // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
0563C:  BTFSC  xE7.4
0563E:  BRA    56D6
05640:  BTFSC  30.1
05642:  BRA    56D6
05644:  BTFSC  xD9.4
05646:  BRA    56D6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05648:  MOVLW  9C
0564A:  MOVWF  FF6
0564C:  MOVLW  06
0564E:  MOVWF  FF7
05650:  MOVLB  0
05652:  CALL   4748
....................                putc('\n',CH2);
05656:  MOVLW  0A
05658:  MOVLB  B
0565A:  MOVWF  x55
0565C:  MOVLB  0
0565E:  CALL   4702
....................                delay_ms(10);
05662:  MOVLW  0A
05664:  MOVLB  B
05666:  MOVWF  x54
05668:  MOVLB  0
0566A:  CALL   07DC
....................                
....................                SendSMS.B5 =1;
0566E:  MOVLB  A
05670:  BSF    xE7.4
....................                fprintf(CH2,"AT+CMGS=\"");
05672:  MOVLW  A6
05674:  MOVWF  FF6
05676:  MOVLW  06
05678:  MOVWF  FF7
0567A:  MOVLB  0
0567C:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05680:  MOVLW  09
05682:  MOVWF  FEA
05684:  MOVLW  7C
05686:  MOVWF  FE9
05688:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
0568C:  MOVLW  22
0568E:  MOVLB  B
05690:  MOVWF  x55
05692:  MOVLB  0
05694:  CALL   4702
....................                putc('\n',CH2);
05698:  MOVLW  0A
0569A:  MOVLB  B
0569C:  MOVWF  x55
0569E:  MOVLB  0
056A0:  CALL   4702
....................                delay_ms(50);
056A4:  MOVLW  32
056A6:  MOVLB  B
056A8:  MOVWF  x54
056AA:  MOVLB  0
056AC:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage5);
056B0:  MOVLW  0A
056B2:  MOVWF  FEA
056B4:  MOVLW  0B
056B6:  MOVWF  FE9
056B8:  CALL   4768
....................               putc('\n',CH2);
056BC:  MOVLW  0A
056BE:  MOVLB  B
056C0:  MOVWF  x55
056C2:  MOVLB  0
056C4:  CALL   4702
....................              putc(26,CH2);
056C8:  MOVLW  1A
056CA:  MOVLB  B
056CC:  MOVWF  x55
056CE:  MOVLB  0
056D0:  CALL   4702
056D4:  MOVLB  A
....................             }
....................       }
056D6:  BRA    56E2
056D8:  MOVLB  B
....................       else
....................       {
....................          Output.B5 = 1;
056DA:  MOVLB  A
056DC:  BSF    xCD.4
....................          SendSMS.B5 =0;
056DE:  BCF    xE7.4
....................          functointest_f =0;
056E0:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
056E2:  BTFSS  xD7.5
056E4:  BRA    57F2
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
056E6:  MOVLW  00
056E8:  BTFSC  xCB.5
056EA:  MOVLW  01
056EC:  MOVLB  B
056EE:  MOVWF  x54
056F0:  MOVLW  00
056F2:  MOVLB  A
056F4:  BTFSC  xCF.5
056F6:  MOVLW  01
056F8:  MOVLB  B
056FA:  XORWF  x54,W
056FC:  SUBLW  01
056FE:  BNZ   5706
05700:  MOVLB  A
05702:  BTFSC  xD1.5
05704:  BRA    570C
05706:  MOVLB  A
05708:  BTFSS  xDB.5
0570A:  BRA    57EA
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
0570C:  BTFSC  xD9.5
0570E:  BRA    57E8
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05710:  BTFSC  xDB.5
05712:  BRA    5722
05714:  MOVF   5E,W
05716:  SUBLW  0F
05718:  BNZ   5722
....................             {
....................                TimeBase1s = 100 ;            //reload again
0571A:  MOVLW  64
0571C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0571E:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
05722:  BSF    xDB.5
....................             if(FlashingFlag == 0)
05724:  BTFSC  1A.1
05726:  BRA    572C
....................             {
....................                Output.B6 = 0;           //Flash output1
05728:  BCF    xCD.5
....................             }
0572A:  BRA    572E
....................             else
....................             {
....................                Output.B6 = 1;
0572C:  BSF    xCD.5
....................             }
.................... 
....................             if (~AutoTestFlag)
0572E:  BTFSC  1A.4
05730:  BRA    574E
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
05732:  BTFSC  xD5.5
05734:  BRA    5740
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05736:  BSF    F89.4
05738:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0573A:  BSF    F89.3
0573C:  BCF    F92.3
....................                }
0573E:  BRA    574E
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
05740:  BTFSS  xD3.5
05742:  BRA    574A
05744:  BSF    F89.4
05746:  BCF    F92.4
05748:  BRA    574E
....................                   else output_bit(Pbell,1);                          //Bell
0574A:  BSF    F89.3
0574C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0574E:  BTFSC  xE7.5
05750:  BRA    57E8
05752:  BTFSC  30.1
05754:  BRA    57E8
05756:  BTFSC  xD9.5
05758:  BRA    57E8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0575A:  MOVLW  B0
0575C:  MOVWF  FF6
0575E:  MOVLW  06
05760:  MOVWF  FF7
05762:  MOVLB  0
05764:  CALL   4748
....................                putc('\n',CH2);
05768:  MOVLW  0A
0576A:  MOVLB  B
0576C:  MOVWF  x55
0576E:  MOVLB  0
05770:  CALL   4702
....................                delay_ms(10);
05774:  MOVLW  0A
05776:  MOVLB  B
05778:  MOVWF  x54
0577A:  MOVLB  0
0577C:  CALL   07DC
....................                
....................                SendSMS.B6 =1;
05780:  MOVLB  A
05782:  BSF    xE7.5
....................                fprintf(CH2,"AT+CMGS=\"");
05784:  MOVLW  BA
05786:  MOVWF  FF6
05788:  MOVLW  06
0578A:  MOVWF  FF7
0578C:  MOVLB  0
0578E:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05792:  MOVLW  09
05794:  MOVWF  FEA
05796:  MOVLW  7C
05798:  MOVWF  FE9
0579A:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
0579E:  MOVLW  22
057A0:  MOVLB  B
057A2:  MOVWF  x55
057A4:  MOVLB  0
057A6:  CALL   4702
....................                putc('\n',CH2);
057AA:  MOVLW  0A
057AC:  MOVLB  B
057AE:  MOVWF  x55
057B0:  MOVLB  0
057B2:  CALL   4702
....................                delay_ms(50);
057B6:  MOVLW  32
057B8:  MOVLB  B
057BA:  MOVWF  x54
057BC:  MOVLB  0
057BE:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage6);
057C2:  MOVLW  0A
057C4:  MOVWF  FEA
057C6:  MOVLW  2B
057C8:  MOVWF  FE9
057CA:  CALL   4768
....................               putc('\n',CH2);
057CE:  MOVLW  0A
057D0:  MOVLB  B
057D2:  MOVWF  x55
057D4:  MOVLB  0
057D6:  CALL   4702
....................              putc(26,CH2);
057DA:  MOVLW  1A
057DC:  MOVLB  B
057DE:  MOVWF  x55
057E0:  MOVLB  0
057E2:  CALL   4702
057E6:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
057E8:  BRA    57F0
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
057EA:  BTFSS  xD1.5
057EC:  BRA    57F0
057EE:  BCF    xD9.5
....................    }
057F0:  BRA    58B6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
057F2:  MOVLW  00
057F4:  BTFSC  xCB.5
057F6:  MOVLW  01
057F8:  MOVLB  B
057FA:  MOVWF  x54
057FC:  MOVLW  00
057FE:  MOVLB  A
05800:  BTFSC  xCF.5
05802:  MOVLW  01
05804:  MOVLB  B
05806:  XORWF  x54,W
05808:  SUBLW  01
0580A:  BNZ   58AE
....................       {
....................          Output.B6 = 0;
0580C:  MOVLB  A
0580E:  BCF    xCD.5
....................          // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
05810:  BTFSC  xE7.5
05812:  BRA    58AA
05814:  BTFSC  30.1
05816:  BRA    58AA
05818:  BTFSC  xD9.5
0581A:  BRA    58AA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0581C:  MOVLW  C4
0581E:  MOVWF  FF6
05820:  MOVLW  06
05822:  MOVWF  FF7
05824:  MOVLB  0
05826:  CALL   4748
....................                putc('\n',CH2);
0582A:  MOVLW  0A
0582C:  MOVLB  B
0582E:  MOVWF  x55
05830:  MOVLB  0
05832:  CALL   4702
....................                delay_ms(10);
05836:  MOVLW  0A
05838:  MOVLB  B
0583A:  MOVWF  x54
0583C:  MOVLB  0
0583E:  CALL   07DC
....................                
....................                SendSMS.B6 =1;
05842:  MOVLB  A
05844:  BSF    xE7.5
....................                fprintf(CH2,"AT+CMGS=\"");
05846:  MOVLW  CE
05848:  MOVWF  FF6
0584A:  MOVLW  06
0584C:  MOVWF  FF7
0584E:  MOVLB  0
05850:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05854:  MOVLW  09
05856:  MOVWF  FEA
05858:  MOVLW  7C
0585A:  MOVWF  FE9
0585C:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
05860:  MOVLW  22
05862:  MOVLB  B
05864:  MOVWF  x55
05866:  MOVLB  0
05868:  CALL   4702
....................                putc('\n',CH2);
0586C:  MOVLW  0A
0586E:  MOVLB  B
05870:  MOVWF  x55
05872:  MOVLB  0
05874:  CALL   4702
....................                delay_ms(50);
05878:  MOVLW  32
0587A:  MOVLB  B
0587C:  MOVWF  x54
0587E:  MOVLB  0
05880:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage6);
05884:  MOVLW  0A
05886:  MOVWF  FEA
05888:  MOVLW  2B
0588A:  MOVWF  FE9
0588C:  CALL   4768
....................               putc('\n',CH2);
05890:  MOVLW  0A
05892:  MOVLB  B
05894:  MOVWF  x55
05896:  MOVLB  0
05898:  CALL   4702
....................              putc(26,CH2);
0589C:  MOVLW  1A
0589E:  MOVLB  B
058A0:  MOVWF  x55
058A2:  MOVLB  0
058A4:  CALL   4702
058A8:  MOVLB  A
....................             }
....................       }
058AA:  BRA    58B6
058AC:  MOVLB  B
....................       else
....................       {
....................          Output.B6 = 1;
058AE:  MOVLB  A
058B0:  BSF    xCD.5
....................          SendSMS.B6 =0;
058B2:  BCF    xE7.5
....................          functointest_f =0;
058B4:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
058B6:  BTFSS  xD7.6
058B8:  BRA    59C6
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
058BA:  MOVLW  00
058BC:  BTFSC  xCB.6
058BE:  MOVLW  01
058C0:  MOVLB  B
058C2:  MOVWF  x54
058C4:  MOVLW  00
058C6:  MOVLB  A
058C8:  BTFSC  xCF.6
058CA:  MOVLW  01
058CC:  MOVLB  B
058CE:  XORWF  x54,W
058D0:  SUBLW  01
058D2:  BNZ   58DA
058D4:  MOVLB  A
058D6:  BTFSC  xD1.6
058D8:  BRA    58E0
058DA:  MOVLB  A
058DC:  BTFSS  xDB.6
058DE:  BRA    59BE
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
058E0:  BTFSC  xD9.6
058E2:  BRA    59BC
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
058E4:  BTFSC  xDB.6
058E6:  BRA    58F6
058E8:  MOVF   5E,W
058EA:  SUBLW  0F
058EC:  BNZ   58F6
....................             {
....................                TimeBase1s = 100 ;            //reload again
058EE:  MOVLW  64
058F0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
058F2:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
058F6:  BSF    xDB.6
....................             if(FlashingFlag == 0)
058F8:  BTFSC  1A.1
058FA:  BRA    5900
....................             {
....................                Output.B7 = 0;           //Flash output1
058FC:  BCF    xCD.6
....................             }
058FE:  BRA    5902
....................             else
....................             {
....................                Output.B7 = 1;
05900:  BSF    xCD.6
....................             }
.................... 
....................             if (~AutoTestFlag)
05902:  BTFSC  1A.4
05904:  BRA    5922
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
05906:  BTFSC  xD5.6
05908:  BRA    5914
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0590A:  BSF    F89.4
0590C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0590E:  BSF    F89.3
05910:  BCF    F92.3
....................                }
05912:  BRA    5922
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
05914:  BTFSS  xD3.6
05916:  BRA    591E
05918:  BSF    F89.4
0591A:  BCF    F92.4
0591C:  BRA    5922
....................                   else output_bit(Pbell,1);                          //Bell
0591E:  BSF    F89.3
05920:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
05922:  BTFSC  xE7.6
05924:  BRA    59BC
05926:  BTFSC  30.1
05928:  BRA    59BC
0592A:  BTFSC  xD9.6
0592C:  BRA    59BC
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0592E:  MOVLW  D8
05930:  MOVWF  FF6
05932:  MOVLW  06
05934:  MOVWF  FF7
05936:  MOVLB  0
05938:  CALL   4748
....................                putc('\n',CH2);
0593C:  MOVLW  0A
0593E:  MOVLB  B
05940:  MOVWF  x55
05942:  MOVLB  0
05944:  CALL   4702
....................                delay_ms(10);
05948:  MOVLW  0A
0594A:  MOVLB  B
0594C:  MOVWF  x54
0594E:  MOVLB  0
05950:  CALL   07DC
....................                
....................                SendSMS.B7 =1;
05954:  MOVLB  A
05956:  BSF    xE7.6
....................                fprintf(CH2,"AT+CMGS=\"");
05958:  MOVLW  E2
0595A:  MOVWF  FF6
0595C:  MOVLW  06
0595E:  MOVWF  FF7
05960:  MOVLB  0
05962:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05966:  MOVLW  09
05968:  MOVWF  FEA
0596A:  MOVLW  7C
0596C:  MOVWF  FE9
0596E:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
05972:  MOVLW  22
05974:  MOVLB  B
05976:  MOVWF  x55
05978:  MOVLB  0
0597A:  CALL   4702
....................                putc('\n',CH2);
0597E:  MOVLW  0A
05980:  MOVLB  B
05982:  MOVWF  x55
05984:  MOVLB  0
05986:  CALL   4702
....................                delay_ms(50);
0598A:  MOVLW  32
0598C:  MOVLB  B
0598E:  MOVWF  x54
05990:  MOVLB  0
05992:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage7);  
05996:  MOVLW  0A
05998:  MOVWF  FEA
0599A:  MOVLW  4B
0599C:  MOVWF  FE9
0599E:  CALL   4768
....................               putc('\n',CH2);
059A2:  MOVLW  0A
059A4:  MOVLB  B
059A6:  MOVWF  x55
059A8:  MOVLB  0
059AA:  CALL   4702
....................              putc(26,CH2);
059AE:  MOVLW  1A
059B0:  MOVLB  B
059B2:  MOVWF  x55
059B4:  MOVLB  0
059B6:  CALL   4702
059BA:  MOVLB  A
....................             }
....................           }
.................... 
....................       }
059BC:  BRA    59C4
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
059BE:  BTFSS  xD1.6
059C0:  BRA    59C4
059C2:  BCF    xD9.6
....................    }
059C4:  BRA    5A8A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
059C6:  MOVLW  00
059C8:  BTFSC  xCB.6
059CA:  MOVLW  01
059CC:  MOVLB  B
059CE:  MOVWF  x54
059D0:  MOVLW  00
059D2:  MOVLB  A
059D4:  BTFSC  xCF.6
059D6:  MOVLW  01
059D8:  MOVLB  B
059DA:  XORWF  x54,W
059DC:  SUBLW  01
059DE:  BNZ   5A82
....................       {
....................          Output.B7 = 0;
059E0:  MOVLB  A
059E2:  BCF    xCD.6
....................          // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
059E4:  BTFSC  xE7.6
059E6:  BRA    5A7E
059E8:  BTFSC  30.1
059EA:  BRA    5A7E
059EC:  BTFSC  xD9.6
059EE:  BRA    5A7E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
059F0:  MOVLW  EC
059F2:  MOVWF  FF6
059F4:  MOVLW  06
059F6:  MOVWF  FF7
059F8:  MOVLB  0
059FA:  CALL   4748
....................                putc('\n',CH2);
059FE:  MOVLW  0A
05A00:  MOVLB  B
05A02:  MOVWF  x55
05A04:  MOVLB  0
05A06:  CALL   4702
....................                delay_ms(10);
05A0A:  MOVLW  0A
05A0C:  MOVLB  B
05A0E:  MOVWF  x54
05A10:  MOVLB  0
05A12:  CALL   07DC
....................                
....................                SendSMS.B7 =1;
05A16:  MOVLB  A
05A18:  BSF    xE7.6
....................                fprintf(CH2,"AT+CMGS=\"");
05A1A:  MOVLW  F6
05A1C:  MOVWF  FF6
05A1E:  MOVLW  06
05A20:  MOVWF  FF7
05A22:  MOVLB  0
05A24:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05A28:  MOVLW  09
05A2A:  MOVWF  FEA
05A2C:  MOVLW  7C
05A2E:  MOVWF  FE9
05A30:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
05A34:  MOVLW  22
05A36:  MOVLB  B
05A38:  MOVWF  x55
05A3A:  MOVLB  0
05A3C:  CALL   4702
....................                putc('\n',CH2);
05A40:  MOVLW  0A
05A42:  MOVLB  B
05A44:  MOVWF  x55
05A46:  MOVLB  0
05A48:  CALL   4702
....................                delay_ms(50);
05A4C:  MOVLW  32
05A4E:  MOVLB  B
05A50:  MOVWF  x54
05A52:  MOVLB  0
05A54:  CALL   07DC
....................               
....................               fprintf(CH2,SMS_Massage7);  
05A58:  MOVLW  0A
05A5A:  MOVWF  FEA
05A5C:  MOVLW  4B
05A5E:  MOVWF  FE9
05A60:  CALL   4768
....................               putc('\n',CH2);
05A64:  MOVLW  0A
05A66:  MOVLB  B
05A68:  MOVWF  x55
05A6A:  MOVLB  0
05A6C:  CALL   4702
....................              putc(26,CH2);
05A70:  MOVLW  1A
05A72:  MOVLB  B
05A74:  MOVWF  x55
05A76:  MOVLB  0
05A78:  CALL   4702
05A7C:  MOVLB  A
....................             }
....................       }
05A7E:  BRA    5A8A
05A80:  MOVLB  B
....................       else
....................       {
....................          Output.B7 = 1;
05A82:  MOVLB  A
05A84:  BSF    xCD.6
....................          SendSMS.B7 =0;
05A86:  BCF    xE7.6
....................          functointest_f =0;
05A88:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
05A8A:  BTFSS  xD7.7
05A8C:  BRA    5B9A
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
05A8E:  MOVLW  00
05A90:  BTFSC  xCB.7
05A92:  MOVLW  01
05A94:  MOVLB  B
05A96:  MOVWF  x54
05A98:  MOVLW  00
05A9A:  MOVLB  A
05A9C:  BTFSC  xCF.7
05A9E:  MOVLW  01
05AA0:  MOVLB  B
05AA2:  XORWF  x54,W
05AA4:  SUBLW  01
05AA6:  BNZ   5AAE
05AA8:  MOVLB  A
05AAA:  BTFSC  xD1.7
05AAC:  BRA    5AB4
05AAE:  MOVLB  A
05AB0:  BTFSS  xDB.7
05AB2:  BRA    5B92
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
05AB4:  BTFSC  xD9.7
05AB6:  BRA    5B90
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05AB8:  BTFSC  xDB.7
05ABA:  BRA    5ACA
05ABC:  MOVF   5E,W
05ABE:  SUBLW  0F
05AC0:  BNZ   5ACA
....................             {
....................                TimeBase1s = 100 ;            //reload again
05AC2:  MOVLW  64
05AC4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05AC6:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
05ACA:  BSF    xDB.7
....................             if(FlashingFlag == 0)
05ACC:  BTFSC  1A.1
05ACE:  BRA    5AD4
....................             {
....................                Output.B8 = 0;           //Flash output1
05AD0:  BCF    xCD.7
....................             }
05AD2:  BRA    5AD6
....................             else
....................             {
....................                Output.B8 = 1;
05AD4:  BSF    xCD.7
....................             }
.................... 
....................             if (~AutoTestFlag)
05AD6:  BTFSC  1A.4
05AD8:  BRA    5AF6
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
05ADA:  BTFSC  xD5.7
05ADC:  BRA    5AE8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05ADE:  BSF    F89.4
05AE0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05AE2:  BSF    F89.3
05AE4:  BCF    F92.3
....................                }
05AE6:  BRA    5AF6
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
05AE8:  BTFSS  xD3.7
05AEA:  BRA    5AF2
05AEC:  BSF    F89.4
05AEE:  BCF    F92.4
05AF0:  BRA    5AF6
....................                   else output_bit(Pbell,1);                          //Bell
05AF2:  BSF    F89.3
05AF4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05AF6:  BTFSC  xE7.7
05AF8:  BRA    5B90
05AFA:  BTFSC  30.1
05AFC:  BRA    5B90
05AFE:  BTFSC  xD9.7
05B00:  BRA    5B90
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05B02:  MOVLW  00
05B04:  MOVWF  FF6
05B06:  MOVLW  07
05B08:  MOVWF  FF7
05B0A:  MOVLB  0
05B0C:  CALL   4748
....................             putc('\n',CH2);
05B10:  MOVLW  0A
05B12:  MOVLB  B
05B14:  MOVWF  x55
05B16:  MOVLB  0
05B18:  CALL   4702
....................             delay_ms(10);
05B1C:  MOVLW  0A
05B1E:  MOVLB  B
05B20:  MOVWF  x54
05B22:  MOVLB  0
05B24:  CALL   07DC
....................             
....................             SendSMS.B8 =1;
05B28:  MOVLB  A
05B2A:  BSF    xE7.7
....................             fprintf(CH2,"AT+CMGS=\"");
05B2C:  MOVLW  0A
05B2E:  MOVWF  FF6
05B30:  MOVLW  07
05B32:  MOVWF  FF7
05B34:  MOVLB  0
05B36:  CALL   4748
....................             fprintf(CH2,sms_phonenumber);
05B3A:  MOVLW  09
05B3C:  MOVWF  FEA
05B3E:  MOVLW  7C
05B40:  MOVWF  FE9
05B42:  CALL   4768
....................             
....................             fprintf(CH2,"\"");
05B46:  MOVLW  22
05B48:  MOVLB  B
05B4A:  MOVWF  x55
05B4C:  MOVLB  0
05B4E:  CALL   4702
....................             putc('\n',CH2);
05B52:  MOVLW  0A
05B54:  MOVLB  B
05B56:  MOVWF  x55
05B58:  MOVLB  0
05B5A:  CALL   4702
....................             delay_ms(50);
05B5E:  MOVLW  32
05B60:  MOVLB  B
05B62:  MOVWF  x54
05B64:  MOVLB  0
05B66:  CALL   07DC
....................            
....................            printf(SMS_Massage8);  
05B6A:  MOVLW  0A
05B6C:  MOVWF  FEA
05B6E:  MOVLW  6B
05B70:  MOVWF  FE9
05B72:  CALL   4768
....................            putc('\n',CH2);
05B76:  MOVLW  0A
05B78:  MOVLB  B
05B7A:  MOVWF  x55
05B7C:  MOVLB  0
05B7E:  CALL   4702
....................           putc(26,CH2);
05B82:  MOVLW  1A
05B84:  MOVLB  B
05B86:  MOVWF  x55
05B88:  MOVLB  0
05B8A:  CALL   4702
05B8E:  MOVLB  A
....................          }
....................        }
.................... 
....................       }
05B90:  BRA    5B98
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
05B92:  BTFSS  xD1.7
05B94:  BRA    5B98
05B96:  BCF    xD9.7
....................    }
05B98:  BRA    5C5E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
05B9A:  MOVLW  00
05B9C:  BTFSC  xCB.7
05B9E:  MOVLW  01
05BA0:  MOVLB  B
05BA2:  MOVWF  x54
05BA4:  MOVLW  00
05BA6:  MOVLB  A
05BA8:  BTFSC  xCF.7
05BAA:  MOVLW  01
05BAC:  MOVLB  B
05BAE:  XORWF  x54,W
05BB0:  SUBLW  01
05BB2:  BNZ   5C56
....................       {
....................          Output.B8 = 0;
05BB4:  MOVLB  A
05BB6:  BCF    xCD.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05BB8:  BTFSC  xE7.7
05BBA:  BRA    5C52
05BBC:  BTFSC  30.1
05BBE:  BRA    5C52
05BC0:  BTFSC  xD9.7
05BC2:  BRA    5C52
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05BC4:  MOVLW  14
05BC6:  MOVWF  FF6
05BC8:  MOVLW  07
05BCA:  MOVWF  FF7
05BCC:  MOVLB  0
05BCE:  CALL   4748
....................             putc('\n',CH2);
05BD2:  MOVLW  0A
05BD4:  MOVLB  B
05BD6:  MOVWF  x55
05BD8:  MOVLB  0
05BDA:  CALL   4702
....................             delay_ms(10);
05BDE:  MOVLW  0A
05BE0:  MOVLB  B
05BE2:  MOVWF  x54
05BE4:  MOVLB  0
05BE6:  CALL   07DC
....................             
....................             SendSMS.B8 =1;
05BEA:  MOVLB  A
05BEC:  BSF    xE7.7
....................             fprintf(CH2,"AT+CMGS=\"");
05BEE:  MOVLW  1E
05BF0:  MOVWF  FF6
05BF2:  MOVLW  07
05BF4:  MOVWF  FF7
05BF6:  MOVLB  0
05BF8:  CALL   4748
....................             fprintf(CH2,sms_phonenumber);
05BFC:  MOVLW  09
05BFE:  MOVWF  FEA
05C00:  MOVLW  7C
05C02:  MOVWF  FE9
05C04:  CALL   4768
....................             
....................             fprintf(CH2,"\"");
05C08:  MOVLW  22
05C0A:  MOVLB  B
05C0C:  MOVWF  x55
05C0E:  MOVLB  0
05C10:  CALL   4702
....................             putc('\n',CH2);
05C14:  MOVLW  0A
05C16:  MOVLB  B
05C18:  MOVWF  x55
05C1A:  MOVLB  0
05C1C:  CALL   4702
....................             delay_ms(50);
05C20:  MOVLW  32
05C22:  MOVLB  B
05C24:  MOVWF  x54
05C26:  MOVLB  0
05C28:  CALL   07DC
....................            
....................            printf(SMS_Massage8);  
05C2C:  MOVLW  0A
05C2E:  MOVWF  FEA
05C30:  MOVLW  6B
05C32:  MOVWF  FE9
05C34:  CALL   4768
....................            putc('\n',CH2);
05C38:  MOVLW  0A
05C3A:  MOVLB  B
05C3C:  MOVWF  x55
05C3E:  MOVLB  0
05C40:  CALL   4702
....................           putc(26,CH2);
05C44:  MOVLW  1A
05C46:  MOVLB  B
05C48:  MOVWF  x55
05C4A:  MOVLB  0
05C4C:  CALL   4702
05C50:  MOVLB  A
....................          }
....................       }
05C52:  BRA    5C5E
05C54:  MOVLB  B
....................       else
....................       {
....................          Output.B8 = 1;
05C56:  MOVLB  A
05C58:  BSF    xCD.7
....................          SendSMS.B8 =0;
05C5A:  BCF    xE7.7
....................          functointest_f =0;
05C5C:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
05C5E:  BTFSS  xD8.0
05C60:  BRA    5D6E
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
05C62:  MOVLW  00
05C64:  BTFSC  xCC.0
05C66:  MOVLW  01
05C68:  MOVLB  B
05C6A:  MOVWF  x54
05C6C:  MOVLW  00
05C6E:  MOVLB  A
05C70:  BTFSC  xD0.0
05C72:  MOVLW  01
05C74:  MOVLB  B
05C76:  XORWF  x54,W
05C78:  SUBLW  01
05C7A:  BNZ   5C82
05C7C:  MOVLB  A
05C7E:  BTFSC  xD2.0
05C80:  BRA    5C88
05C82:  MOVLB  A
05C84:  BTFSS  xDC.0
05C86:  BRA    5D66
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
05C88:  BTFSC  xDA.0
05C8A:  BRA    5D64
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05C8C:  BTFSC  xDC.0
05C8E:  BRA    5C9E
05C90:  MOVF   5E,W
05C92:  SUBLW  0F
05C94:  BNZ   5C9E
....................             {
....................                TimeBase1s = 100 ;            //reload again
05C96:  MOVLW  64
05C98:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05C9A:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
05C9E:  BSF    xDC.0
....................             if(FlashingFlag == 0)
05CA0:  BTFSC  1A.1
05CA2:  BRA    5CA8
....................             {
....................                Output.B9 = 0;           //Flash output1
05CA4:  BCF    xCE.0
....................             }
05CA6:  BRA    5CAA
....................             else
....................             {
....................                Output.B9 = 1;
05CA8:  BSF    xCE.0
....................             }
.................... 
....................             if (~AutoTestFlag)
05CAA:  BTFSC  1A.4
05CAC:  BRA    5CCA
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
05CAE:  BTFSC  xD6.0
05CB0:  BRA    5CBC
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05CB2:  BSF    F89.4
05CB4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05CB6:  BSF    F89.3
05CB8:  BCF    F92.3
....................                }
05CBA:  BRA    5CCA
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
05CBC:  BTFSS  xD4.0
05CBE:  BRA    5CC6
05CC0:  BSF    F89.4
05CC2:  BCF    F92.4
05CC4:  BRA    5CCA
....................                   else output_bit(Pbell,1);                          //Bell
05CC6:  BSF    F89.3
05CC8:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
05CCA:  BTFSC  xE8.0
05CCC:  BRA    5D64
05CCE:  BTFSC  30.1
05CD0:  BRA    5D64
05CD2:  BTFSC  xDA.0
05CD4:  BRA    5D64
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05CD6:  MOVLW  28
05CD8:  MOVWF  FF6
05CDA:  MOVLW  07
05CDC:  MOVWF  FF7
05CDE:  MOVLB  0
05CE0:  CALL   4748
....................                putc('\n',CH2);
05CE4:  MOVLW  0A
05CE6:  MOVLB  B
05CE8:  MOVWF  x55
05CEA:  MOVLB  0
05CEC:  CALL   4702
....................                delay_ms(10);
05CF0:  MOVLW  0A
05CF2:  MOVLB  B
05CF4:  MOVWF  x54
05CF6:  MOVLB  0
05CF8:  CALL   07DC
....................                
....................                SendSMS.B9 =1;
05CFC:  MOVLB  A
05CFE:  BSF    xE8.0
....................                fprintf(CH2,"AT+CMGS=\"");
05D00:  MOVLW  32
05D02:  MOVWF  FF6
05D04:  MOVLW  07
05D06:  MOVWF  FF7
05D08:  MOVLB  0
05D0A:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05D0E:  MOVLW  09
05D10:  MOVWF  FEA
05D12:  MOVLW  7C
05D14:  MOVWF  FE9
05D16:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
05D1A:  MOVLW  22
05D1C:  MOVLB  B
05D1E:  MOVWF  x55
05D20:  MOVLB  0
05D22:  CALL   4702
....................                putc('\n',CH2);
05D26:  MOVLW  0A
05D28:  MOVLB  B
05D2A:  MOVWF  x55
05D2C:  MOVLB  0
05D2E:  CALL   4702
....................                delay_ms(50);
05D32:  MOVLW  32
05D34:  MOVLB  B
05D36:  MOVWF  x54
05D38:  MOVLB  0
05D3A:  CALL   07DC
....................               
....................               printf(SMS_Massage9);  
05D3E:  MOVLW  0A
05D40:  MOVWF  FEA
05D42:  MOVLW  8B
05D44:  MOVWF  FE9
05D46:  CALL   4768
....................               putc('\n',CH2);
05D4A:  MOVLW  0A
05D4C:  MOVLB  B
05D4E:  MOVWF  x55
05D50:  MOVLB  0
05D52:  CALL   4702
....................               putc(26,CH2);
05D56:  MOVLW  1A
05D58:  MOVLB  B
05D5A:  MOVWF  x55
05D5C:  MOVLB  0
05D5E:  CALL   4702
05D62:  MOVLB  A
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
05D64:  BRA    5D6C
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
05D66:  BTFSS  xD2.0
05D68:  BRA    5D6C
05D6A:  BCF    xDA.0
....................    }
05D6C:  BRA    5E32
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
05D6E:  MOVLW  00
05D70:  BTFSC  xCC.0
05D72:  MOVLW  01
05D74:  MOVLB  B
05D76:  MOVWF  x54
05D78:  MOVLW  00
05D7A:  MOVLB  A
05D7C:  BTFSC  xD0.0
05D7E:  MOVLW  01
05D80:  MOVLB  B
05D82:  XORWF  x54,W
05D84:  SUBLW  01
05D86:  BNZ   5E2A
....................       {
....................          Output.B9 = 0;
05D88:  MOVLB  A
05D8A:  BCF    xCE.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
05D8C:  BTFSC  xE8.0
05D8E:  BRA    5E26
05D90:  BTFSC  30.1
05D92:  BRA    5E26
05D94:  BTFSC  xDA.0
05D96:  BRA    5E26
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05D98:  MOVLW  3C
05D9A:  MOVWF  FF6
05D9C:  MOVLW  07
05D9E:  MOVWF  FF7
05DA0:  MOVLB  0
05DA2:  CALL   4748
....................             putc('\n',CH2);
05DA6:  MOVLW  0A
05DA8:  MOVLB  B
05DAA:  MOVWF  x55
05DAC:  MOVLB  0
05DAE:  CALL   4702
....................             delay_ms(10);
05DB2:  MOVLW  0A
05DB4:  MOVLB  B
05DB6:  MOVWF  x54
05DB8:  MOVLB  0
05DBA:  CALL   07DC
....................             
....................             SendSMS.B9 =1;
05DBE:  MOVLB  A
05DC0:  BSF    xE8.0
....................             fprintf(CH2,"AT+CMGS=\"");
05DC2:  MOVLW  46
05DC4:  MOVWF  FF6
05DC6:  MOVLW  07
05DC8:  MOVWF  FF7
05DCA:  MOVLB  0
05DCC:  CALL   4748
....................             fprintf(CH2,sms_phonenumber);
05DD0:  MOVLW  09
05DD2:  MOVWF  FEA
05DD4:  MOVLW  7C
05DD6:  MOVWF  FE9
05DD8:  CALL   4768
....................             
....................             fprintf(CH2,"\"");
05DDC:  MOVLW  22
05DDE:  MOVLB  B
05DE0:  MOVWF  x55
05DE2:  MOVLB  0
05DE4:  CALL   4702
....................             putc('\n',CH2);
05DE8:  MOVLW  0A
05DEA:  MOVLB  B
05DEC:  MOVWF  x55
05DEE:  MOVLB  0
05DF0:  CALL   4702
....................             delay_ms(50);
05DF4:  MOVLW  32
05DF6:  MOVLB  B
05DF8:  MOVWF  x54
05DFA:  MOVLB  0
05DFC:  CALL   07DC
....................            
....................            printf(SMS_Massage9);  
05E00:  MOVLW  0A
05E02:  MOVWF  FEA
05E04:  MOVLW  8B
05E06:  MOVWF  FE9
05E08:  CALL   4768
....................            putc('\n',CH2);
05E0C:  MOVLW  0A
05E0E:  MOVLB  B
05E10:  MOVWF  x55
05E12:  MOVLB  0
05E14:  CALL   4702
....................            putc(26,CH2);
05E18:  MOVLW  1A
05E1A:  MOVLB  B
05E1C:  MOVWF  x55
05E1E:  MOVLB  0
05E20:  CALL   4702
05E24:  MOVLB  A
....................          }
....................          ///////////////////////////////////
....................       }
05E26:  BRA    5E32
05E28:  MOVLB  B
....................       else
....................       {
....................          Output.B9 = 1;
05E2A:  MOVLB  A
05E2C:  BSF    xCE.0
....................          SendSMS.B9 =0;
05E2E:  BCF    xE8.0
....................          functointest_f =0;
05E30:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
05E32:  BTFSS  xD8.1
05E34:  BRA    5F42
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
05E36:  MOVLW  00
05E38:  BTFSC  xCC.1
05E3A:  MOVLW  01
05E3C:  MOVLB  B
05E3E:  MOVWF  x54
05E40:  MOVLW  00
05E42:  MOVLB  A
05E44:  BTFSC  xD0.1
05E46:  MOVLW  01
05E48:  MOVLB  B
05E4A:  XORWF  x54,W
05E4C:  SUBLW  01
05E4E:  BNZ   5E56
05E50:  MOVLB  A
05E52:  BTFSC  xD2.1
05E54:  BRA    5E5C
05E56:  MOVLB  A
05E58:  BTFSS  xDC.1
05E5A:  BRA    5F3A
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
05E5C:  BTFSC  xDA.1
05E5E:  BRA    5F38
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05E60:  BTFSC  xDC.1
05E62:  BRA    5E72
05E64:  MOVF   5E,W
05E66:  SUBLW  0F
05E68:  BNZ   5E72
....................             {
....................                TimeBase1s = 100 ;            //reload again
05E6A:  MOVLW  64
05E6C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05E6E:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
05E72:  BSF    xDC.1
....................             if(FlashingFlag == 0)
05E74:  BTFSC  1A.1
05E76:  BRA    5E7C
....................             {
....................                Output.B10 = 0;           //Flash output1
05E78:  BCF    xCE.1
....................             }
05E7A:  BRA    5E7E
....................             else
....................             {
....................                Output.B10 = 1;
05E7C:  BSF    xCE.1
....................             }
.................... 
....................             if (~AutoTestFlag)
05E7E:  BTFSC  1A.4
05E80:  BRA    5E9E
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
05E82:  BTFSC  xD6.1
05E84:  BRA    5E90
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05E86:  BSF    F89.4
05E88:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05E8A:  BSF    F89.3
05E8C:  BCF    F92.3
....................                }
05E8E:  BRA    5E9E
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
05E90:  BTFSS  xD4.1
05E92:  BRA    5E9A
05E94:  BSF    F89.4
05E96:  BCF    F92.4
05E98:  BRA    5E9E
....................                   else output_bit(Pbell,1);                          //Bell
05E9A:  BSF    F89.3
05E9C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
05E9E:  BTFSC  xE8.1
05EA0:  BRA    5F38
05EA2:  BTFSC  30.1
05EA4:  BRA    5F38
05EA6:  BTFSC  xDA.1
05EA8:  BRA    5F38
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05EAA:  MOVLW  50
05EAC:  MOVWF  FF6
05EAE:  MOVLW  07
05EB0:  MOVWF  FF7
05EB2:  MOVLB  0
05EB4:  CALL   4748
....................                putc('\n',CH2);
05EB8:  MOVLW  0A
05EBA:  MOVLB  B
05EBC:  MOVWF  x55
05EBE:  MOVLB  0
05EC0:  CALL   4702
....................                delay_ms(10);
05EC4:  MOVLW  0A
05EC6:  MOVLB  B
05EC8:  MOVWF  x54
05ECA:  MOVLB  0
05ECC:  CALL   07DC
....................                
....................                SendSMS.B10 =1;
05ED0:  MOVLB  A
05ED2:  BSF    xE8.1
....................                fprintf(CH2,"AT+CMGS=\"");
05ED4:  MOVLW  5A
05ED6:  MOVWF  FF6
05ED8:  MOVLW  07
05EDA:  MOVWF  FF7
05EDC:  MOVLB  0
05EDE:  CALL   4748
....................                fprintf(CH2,sms_phonenumber);
05EE2:  MOVLW  09
05EE4:  MOVWF  FEA
05EE6:  MOVLW  7C
05EE8:  MOVWF  FE9
05EEA:  CALL   4768
....................                
....................                fprintf(CH2,"\"");
05EEE:  MOVLW  22
05EF0:  MOVLB  B
05EF2:  MOVWF  x55
05EF4:  MOVLB  0
05EF6:  CALL   4702
....................                putc('\n',CH2);
05EFA:  MOVLW  0A
05EFC:  MOVLB  B
05EFE:  MOVWF  x55
05F00:  MOVLB  0
05F02:  CALL   4702
....................                delay_ms(50);
05F06:  MOVLW  32
05F08:  MOVLB  B
05F0A:  MOVWF  x54
05F0C:  MOVLB  0
05F0E:  CALL   07DC
....................               
....................               printf(SMS_Massage10);  
05F12:  MOVLW  0A
05F14:  MOVWF  FEA
05F16:  MOVLW  AB
05F18:  MOVWF  FE9
05F1A:  CALL   4768
....................               putc('\n',CH2);
05F1E:  MOVLW  0A
05F20:  MOVLB  B
05F22:  MOVWF  x55
05F24:  MOVLB  0
05F26:  CALL   4702
....................               putc(26,CH2);
05F2A:  MOVLW  1A
05F2C:  MOVLB  B
05F2E:  MOVWF  x55
05F30:  MOVLB  0
05F32:  CALL   4702
05F36:  MOVLB  A
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
05F38:  BRA    5F40
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
05F3A:  BTFSS  xD2.1
05F3C:  BRA    5F40
05F3E:  BCF    xDA.1
....................    }
05F40:  BRA    6006
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
05F42:  MOVLW  00
05F44:  BTFSC  xCC.1
05F46:  MOVLW  01
05F48:  MOVLB  B
05F4A:  MOVWF  x54
05F4C:  MOVLW  00
05F4E:  MOVLB  A
05F50:  BTFSC  xD0.1
05F52:  MOVLW  01
05F54:  MOVLB  B
05F56:  XORWF  x54,W
05F58:  SUBLW  01
05F5A:  BNZ   5FFE
....................       {
....................          Output.B10 = 0;
05F5C:  MOVLB  A
05F5E:  BCF    xCE.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
05F60:  BTFSC  xE8.1
05F62:  BRA    5FFA
05F64:  BTFSC  30.1
05F66:  BRA    5FFA
05F68:  BTFSC  xDA.1
05F6A:  BRA    5FFA
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05F6C:  MOVLW  64
05F6E:  MOVWF  FF6
05F70:  MOVLW  07
05F72:  MOVWF  FF7
05F74:  MOVLB  0
05F76:  CALL   4748
....................             putc('\n',CH2);
05F7A:  MOVLW  0A
05F7C:  MOVLB  B
05F7E:  MOVWF  x55
05F80:  MOVLB  0
05F82:  CALL   4702
....................             delay_ms(10);
05F86:  MOVLW  0A
05F88:  MOVLB  B
05F8A:  MOVWF  x54
05F8C:  MOVLB  0
05F8E:  CALL   07DC
....................             
....................             SendSMS.B10 =1;
05F92:  MOVLB  A
05F94:  BSF    xE8.1
....................             fprintf(CH2,"AT+CMGS=\"");
05F96:  MOVLW  6E
05F98:  MOVWF  FF6
05F9A:  MOVLW  07
05F9C:  MOVWF  FF7
05F9E:  MOVLB  0
05FA0:  CALL   4748
....................             fprintf(CH2,sms_phonenumber);
05FA4:  MOVLW  09
05FA6:  MOVWF  FEA
05FA8:  MOVLW  7C
05FAA:  MOVWF  FE9
05FAC:  CALL   4768
....................             
....................             fprintf(CH2,"\"");
05FB0:  MOVLW  22
05FB2:  MOVLB  B
05FB4:  MOVWF  x55
05FB6:  MOVLB  0
05FB8:  CALL   4702
....................             putc('\n',CH2);
05FBC:  MOVLW  0A
05FBE:  MOVLB  B
05FC0:  MOVWF  x55
05FC2:  MOVLB  0
05FC4:  CALL   4702
....................             delay_ms(50);
05FC8:  MOVLW  32
05FCA:  MOVLB  B
05FCC:  MOVWF  x54
05FCE:  MOVLB  0
05FD0:  CALL   07DC
....................            
....................            printf(SMS_Massage10);  
05FD4:  MOVLW  0A
05FD6:  MOVWF  FEA
05FD8:  MOVLW  AB
05FDA:  MOVWF  FE9
05FDC:  CALL   4768
....................            putc('\n',CH2);
05FE0:  MOVLW  0A
05FE2:  MOVLB  B
05FE4:  MOVWF  x55
05FE6:  MOVLB  0
05FE8:  CALL   4702
....................            putc(26,CH2);
05FEC:  MOVLW  1A
05FEE:  MOVLB  B
05FF0:  MOVWF  x55
05FF2:  MOVLB  0
05FF4:  CALL   4702
05FF8:  MOVLB  A
....................          }
....................          ///////////////////////////////////
....................       }
05FFA:  BRA    6006
05FFC:  MOVLB  B
....................       else
....................       {
....................          Output.B10 = 1;
05FFE:  MOVLB  A
06000:  BSF    xCE.1
....................          SendSMS.B10 =0;
06002:  BCF    xE8.1
....................          functointest_f =0;
06004:  BCF    30.1
....................       }
....................    }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... ////////////////////////////// AUTO RESET ///////////////////////////////////
.................... /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06006:  MOVLW  00
06008:  BTFSC  xCB.0
0600A:  MOVLW  01
0600C:  MOVLB  B
0600E:  MOVWF  x54
06010:  MOVLW  00
06012:  MOVLB  A
06014:  BTFSC  xCF.0
06016:  MOVLW  01
06018:  MOVLB  B
0601A:  XORWF  x54,W
0601C:  SUBLW  01
0601E:  BNZ   6028
06020:  MOVLB  A
06022:  BTFSS  xD1.0
06024:  BRA    602E
06026:  MOVLB  B
06028:  BTFSS  1A.5
0602A:  BRA    60F0
0602C:  MOVLB  A
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
0602E:  BTFSC  xDD.0
06030:  BRA    6044
06032:  MOVF   5E,W
06034:  SUBLW  0F
06036:  BNZ   6044
06038:  BTFSC  xD9.0
0603A:  BRA    6044
....................       {
....................             TimeBase1s = 100 ;            //reload again
0603C:  MOVLW  64
0603E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06040:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B1 = 1;
06044:  BSF    xDD.0
....................       if(Ack.B1 == 0)
06046:  BTFSC  xD9.0
06048:  BRA    6074
....................       {
....................          if(FlashingFlag == 0)
0604A:  BTFSC  1A.1
0604C:  BRA    6052
....................          {
....................             Output.B1 = 0;           //Flash output1
0604E:  BCF    xCD.0
....................          }
06050:  BRA    6054
....................          else
....................          {
....................             Output.B1 = 1;
06052:  BSF    xCD.0
....................          }
....................          if (~AutoTestFlag)
06054:  BTFSC  1A.4
06056:  BRA    6074
....................          {
....................              if(OutputBoth.B1 == 0)        //Both output
06058:  BTFSC  xD5.0
0605A:  BRA    6066
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
0605C:  BSF    F89.4
0605E:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06060:  BSF    F89.3
06062:  BCF    F92.3
....................              }
06064:  BRA    6074
....................              else
....................              {
....................                if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
06066:  BTFSS  xD3.0
06068:  BRA    6070
0606A:  BSF    F89.4
0606C:  BCF    F92.4
0606E:  BRA    6074
....................                else output_bit(Pbell,1);                          //Bell
06070:  BSF    F89.3
06072:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06074:  MOVLW  01
06076:  MOVLB  B
06078:  MOVWF  x48
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
0607A:  MOVLB  A
0607C:  BTFSC  xE7.0
0607E:  BRA    60EE
06080:  BTFSC  30.1
06082:  BRA    60EE
06084:  BTFSC  xD9.0
06086:  BRA    60EE
....................       {
....................          SendSMS.B1 =1;
06088:  BSF    xE7.0
....................          fprintf(CH2,"AT+CMGS=\"");
0608A:  MOVLW  78
0608C:  MOVWF  FF6
0608E:  MOVLW  07
06090:  MOVWF  FF7
06092:  MOVLB  0
06094:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06098:  MOVLW  09
0609A:  MOVWF  FEA
0609C:  MOVLW  7C
0609E:  MOVWF  FE9
060A0:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
060A4:  MOVLW  22
060A6:  MOVLB  B
060A8:  MOVWF  x55
060AA:  MOVLB  0
060AC:  CALL   4702
....................          putc('\n',CH2);
060B0:  MOVLW  0A
060B2:  MOVLB  B
060B4:  MOVWF  x55
060B6:  MOVLB  0
060B8:  CALL   4702
....................          delay_ms(50);
060BC:  MOVLW  32
060BE:  MOVLB  B
060C0:  MOVWF  x54
060C2:  MOVLB  0
060C4:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage1);   
060C8:  MOVLW  09
060CA:  MOVWF  FEA
060CC:  MOVLW  8B
060CE:  MOVWF  FE9
060D0:  CALL   4768
....................         putc('\n',CH2);
060D4:  MOVLW  0A
060D6:  MOVLB  B
060D8:  MOVWF  x55
060DA:  MOVLB  0
060DC:  CALL   4702
....................        putc(26,CH2);
060E0:  MOVLW  1A
060E2:  MOVLB  B
060E4:  MOVWF  x55
060E6:  MOVLB  0
060E8:  CALL   4702
060EC:  MOVLB  A
....................       }
....................    }
060EE:  BRA    6182
....................    else if(FaultType.B1 == 0)
060F0:  MOVLB  A
060F2:  BTFSC  xD1.0
060F4:  BRA    6182
....................    {
....................       In2.B1 = 0x00;
060F6:  BCF    xDD.0
....................       Ack.B1 = 0;
060F8:  BCF    xD9.0
....................       Output.B1 = 1;      //Off LED
060FA:  BSF    xCD.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
060FC:  BCF    xE7.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)       //If Buzzer or Both
060FE:  BTFSC  xD3.0
06100:  BRA    6106
06102:  BTFSC  xD5.0
06104:  BRA    6128
06106:  MOVLB  B
06108:  MOVF   x48,F
0610A:  BTFSC  FD8.2
0610C:  BRA    6112
0610E:  MOVLB  A
06110:  BRA    6128
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06112:  MOVLW  01
06114:  MOVWF  x53
06116:  MOVLB  0
06118:  CALL   478C
0611C:  DECFSZ 01,W
0611E:  BRA    6122
06120:  BRA    6126
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06122:  BCF    F89.4
06124:  BCF    F92.4
06126:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)   //If Bell or Both
06128:  BTFSS  xD3.0
0612A:  BRA    6130
0612C:  BTFSC  xD5.0
0612E:  BRA    6152
06130:  MOVLB  B
06132:  MOVF   x48,F
06134:  BTFSC  FD8.2
06136:  BRA    613C
06138:  MOVLB  A
0613A:  BRA    6152
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0613C:  MOVLW  02
0613E:  MOVWF  x53
06140:  MOVLB  0
06142:  CALL   478C
06146:  DECFSZ 01,W
06148:  BRA    614C
0614A:  BRA    6150
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0614C:  BCF    F89.3
0614E:  BCF    F92.3
06150:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06152:  BTFSC  xDD.0
06154:  BRA    6182
06156:  BTFSC  xDD.1
06158:  BRA    6182
0615A:  BTFSC  xDD.2
0615C:  BRA    6182
0615E:  BTFSC  xDD.3
06160:  BRA    6182
06162:  BTFSC  xDD.4
06164:  BRA    6182
06166:  BTFSC  xDD.5
06168:  BRA    6182
0616A:  BTFSC  xDD.6
0616C:  BRA    6182
0616E:  BTFSC  xDD.7
06170:  BRA    6182
06172:  BTFSC  xDE.0
06174:  BRA    6182
06176:  BTFSC  xDE.1
06178:  BRA    6182
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0617A:  BCF    F89.3
0617C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0617E:  BCF    F89.4
06180:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06182:  MOVLW  00
06184:  BTFSC  xCB.1
06186:  MOVLW  01
06188:  MOVLB  B
0618A:  MOVWF  x54
0618C:  MOVLW  00
0618E:  MOVLB  A
06190:  BTFSC  xCF.1
06192:  MOVLW  01
06194:  MOVLB  B
06196:  XORWF  x54,W
06198:  SUBLW  01
0619A:  BNZ   61A4
0619C:  MOVLB  A
0619E:  BTFSS  xD1.1
061A0:  BRA    61AA
061A2:  MOVLB  B
061A4:  BTFSS  1A.5
061A6:  BRA    626C
061A8:  MOVLB  A
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
061AA:  BTFSC  xDD.1
061AC:  BRA    61C0
061AE:  MOVF   5E,W
061B0:  SUBLW  0F
061B2:  BNZ   61C0
061B4:  BTFSC  xD9.1
061B6:  BRA    61C0
....................       {
....................             TimeBase1s = 100 ;            //reload again
061B8:  MOVLW  64
061BA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
061BC:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B2 = 1;
061C0:  BSF    xDD.1
....................       if(Ack.B2 == 0)
061C2:  BTFSC  xD9.1
061C4:  BRA    61F0
....................       {
....................          if(FlashingFlag == 0)
061C6:  BTFSC  1A.1
061C8:  BRA    61CE
....................             {
....................                Output.B2 = 0;           //Flash output1
061CA:  BCF    xCD.1
....................             }
061CC:  BRA    61D0
....................             else
....................             {
....................                Output.B2 = 1;
061CE:  BSF    xCD.1
....................             }
....................          if (~AutoTestFlag)
061D0:  BTFSC  1A.4
061D2:  BRA    61F0
....................          {
....................              if(OutputBoth.B2 == 0)        //Both output
061D4:  BTFSC  xD5.1
061D6:  BRA    61E2
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
061D8:  BSF    F89.4
061DA:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
061DC:  BSF    F89.3
061DE:  BCF    F92.3
....................              }
061E0:  BRA    61F0
....................              else
....................              {
....................                if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
061E2:  BTFSS  xD3.1
061E4:  BRA    61EC
061E6:  BSF    F89.4
061E8:  BCF    F92.4
061EA:  BRA    61F0
....................                else output_bit(Pbell,1);                          //Bell
061EC:  BSF    F89.3
061EE:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
061F0:  MOVLW  01
061F2:  MOVLB  B
061F4:  MOVWF  x48
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
061F6:  MOVLB  A
061F8:  BTFSC  xE7.1
061FA:  BRA    626A
061FC:  BTFSC  30.1
061FE:  BRA    626A
06200:  BTFSC  xD9.1
06202:  BRA    626A
....................       {
....................          SendSMS.B2 =1;
06204:  BSF    xE7.1
....................          fprintf(CH2,"AT+CMGS=\"");
06206:  MOVLW  82
06208:  MOVWF  FF6
0620A:  MOVLW  07
0620C:  MOVWF  FF7
0620E:  MOVLB  0
06210:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06214:  MOVLW  09
06216:  MOVWF  FEA
06218:  MOVLW  7C
0621A:  MOVWF  FE9
0621C:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
06220:  MOVLW  22
06222:  MOVLB  B
06224:  MOVWF  x55
06226:  MOVLB  0
06228:  CALL   4702
....................          putc('\n',CH2);
0622C:  MOVLW  0A
0622E:  MOVLB  B
06230:  MOVWF  x55
06232:  MOVLB  0
06234:  CALL   4702
....................          delay_ms(50);
06238:  MOVLW  32
0623A:  MOVLB  B
0623C:  MOVWF  x54
0623E:  MOVLB  0
06240:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage2); 
06244:  MOVLW  09
06246:  MOVWF  FEA
06248:  MOVLW  AB
0624A:  MOVWF  FE9
0624C:  CALL   4768
....................         putc('\n',CH2);
06250:  MOVLW  0A
06252:  MOVLB  B
06254:  MOVWF  x55
06256:  MOVLB  0
06258:  CALL   4702
....................        putc(26,CH2);
0625C:  MOVLW  1A
0625E:  MOVLB  B
06260:  MOVWF  x55
06262:  MOVLB  0
06264:  CALL   4702
06268:  MOVLB  A
....................       }
....................    }
0626A:  BRA    62FE
....................    else if(FaultType.B2 == 0)
0626C:  MOVLB  A
0626E:  BTFSC  xD1.1
06270:  BRA    62FE
....................    {
....................       In2.B2 = 0x00;
06272:  BCF    xDD.1
....................       Ack.B2 = 0;
06274:  BCF    xD9.1
....................       Output.B2 = 1;      //Off LED
06276:  BSF    xCD.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
06278:  BCF    xE7.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)       //If Buzzer or Both
0627A:  BTFSC  xD3.1
0627C:  BRA    6282
0627E:  BTFSC  xD5.1
06280:  BRA    62A4
06282:  MOVLB  B
06284:  MOVF   x48,F
06286:  BTFSC  FD8.2
06288:  BRA    628E
0628A:  MOVLB  A
0628C:  BRA    62A4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0628E:  MOVLW  01
06290:  MOVWF  x53
06292:  MOVLB  0
06294:  CALL   478C
06298:  DECFSZ 01,W
0629A:  BRA    629E
0629C:  BRA    62A2
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0629E:  BCF    F89.4
062A0:  BCF    F92.4
062A2:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)   //If Bell or Both
062A4:  BTFSS  xD3.1
062A6:  BRA    62AC
062A8:  BTFSC  xD5.1
062AA:  BRA    62CE
062AC:  MOVLB  B
062AE:  MOVF   x48,F
062B0:  BTFSC  FD8.2
062B2:  BRA    62B8
062B4:  MOVLB  A
062B6:  BRA    62CE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
062B8:  MOVLW  02
062BA:  MOVWF  x53
062BC:  MOVLB  0
062BE:  CALL   478C
062C2:  DECFSZ 01,W
062C4:  BRA    62C8
062C6:  BRA    62CC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
062C8:  BCF    F89.3
062CA:  BCF    F92.3
062CC:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
062CE:  BTFSC  xDD.0
062D0:  BRA    62FE
062D2:  BTFSC  xDD.1
062D4:  BRA    62FE
062D6:  BTFSC  xDD.2
062D8:  BRA    62FE
062DA:  BTFSC  xDD.3
062DC:  BRA    62FE
062DE:  BTFSC  xDD.4
062E0:  BRA    62FE
062E2:  BTFSC  xDD.5
062E4:  BRA    62FE
062E6:  BTFSC  xDD.6
062E8:  BRA    62FE
062EA:  BTFSC  xDD.7
062EC:  BRA    62FE
062EE:  BTFSC  xDE.0
062F0:  BRA    62FE
062F2:  BTFSC  xDE.1
062F4:  BRA    62FE
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
062F6:  BCF    F89.3
062F8:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
062FA:  BCF    F89.4
062FC:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
062FE:  MOVLW  00
06300:  BTFSC  xCB.2
06302:  MOVLW  01
06304:  MOVLB  B
06306:  MOVWF  x54
06308:  MOVLW  00
0630A:  MOVLB  A
0630C:  BTFSC  xCF.2
0630E:  MOVLW  01
06310:  MOVLB  B
06312:  XORWF  x54,W
06314:  SUBLW  01
06316:  BNZ   6320
06318:  MOVLB  A
0631A:  BTFSS  xD1.2
0631C:  BRA    6326
0631E:  MOVLB  B
06320:  BTFSS  1A.5
06322:  BRA    63E8
06324:  MOVLB  A
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
06326:  BTFSC  xDD.2
06328:  BRA    633C
0632A:  MOVF   5E,W
0632C:  SUBLW  0F
0632E:  BNZ   633C
06330:  BTFSC  xD9.2
06332:  BRA    633C
....................       {
....................             TimeBase1s = 100 ;            //reload again
06334:  MOVLW  64
06336:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06338:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B3 = 1;
0633C:  BSF    xDD.2
....................       if(Ack.B3 == 0)
0633E:  BTFSC  xD9.2
06340:  BRA    636C
....................       {
....................          if(FlashingFlag == 0)
06342:  BTFSC  1A.1
06344:  BRA    634A
....................             {
....................                Output.B3 = 0;           //Flash output1
06346:  BCF    xCD.2
....................             }
06348:  BRA    634C
....................             else
....................             {
....................                Output.B3 = 1;
0634A:  BSF    xCD.2
....................             }
....................          if (~AutoTestFlag)
0634C:  BTFSC  1A.4
0634E:  BRA    636C
....................          {
....................              if(OutputBoth.B3 == 0)        //Both output
06350:  BTFSC  xD5.2
06352:  BRA    635E
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06354:  BSF    F89.4
06356:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06358:  BSF    F89.3
0635A:  BCF    F92.3
....................              }
0635C:  BRA    636C
....................              else
....................              {
....................                if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
0635E:  BTFSS  xD3.2
06360:  BRA    6368
06362:  BSF    F89.4
06364:  BCF    F92.4
06366:  BRA    636C
....................                else output_bit(Pbell,1);                          //Bell
06368:  BSF    F89.3
0636A:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
0636C:  MOVLW  01
0636E:  MOVLB  B
06370:  MOVWF  x48
....................       
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
06372:  MOVLB  A
06374:  BTFSC  xE7.2
06376:  BRA    63E6
06378:  BTFSC  30.1
0637A:  BRA    63E6
0637C:  BTFSC  xD9.2
0637E:  BRA    63E6
....................       {
....................          SendSMS.B3 =1;
06380:  BSF    xE7.2
....................          fprintf(CH2,"AT+CMGS=\"");
06382:  MOVLW  8C
06384:  MOVWF  FF6
06386:  MOVLW  07
06388:  MOVWF  FF7
0638A:  MOVLB  0
0638C:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06390:  MOVLW  09
06392:  MOVWF  FEA
06394:  MOVLW  7C
06396:  MOVWF  FE9
06398:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
0639C:  MOVLW  22
0639E:  MOVLB  B
063A0:  MOVWF  x55
063A2:  MOVLB  0
063A4:  CALL   4702
....................          putc('\n',CH2);
063A8:  MOVLW  0A
063AA:  MOVLB  B
063AC:  MOVWF  x55
063AE:  MOVLB  0
063B0:  CALL   4702
....................          delay_ms(50);
063B4:  MOVLW  32
063B6:  MOVLB  B
063B8:  MOVWF  x54
063BA:  MOVLB  0
063BC:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage3); 
063C0:  MOVLW  09
063C2:  MOVWF  FEA
063C4:  MOVLW  CB
063C6:  MOVWF  FE9
063C8:  CALL   4768
....................         putc('\n',CH2);
063CC:  MOVLW  0A
063CE:  MOVLB  B
063D0:  MOVWF  x55
063D2:  MOVLB  0
063D4:  CALL   4702
....................        putc(26,CH2);
063D8:  MOVLW  1A
063DA:  MOVLB  B
063DC:  MOVWF  x55
063DE:  MOVLB  0
063E0:  CALL   4702
063E4:  MOVLB  A
....................       }
....................    }
063E6:  BRA    647A
....................    else if(FaultType.B3 == 0)
063E8:  MOVLB  A
063EA:  BTFSC  xD1.2
063EC:  BRA    647A
....................    {
....................       In2.B3 = 0x00;
063EE:  BCF    xDD.2
....................       Ack.B3 = 0;
063F0:  BCF    xD9.2
....................       Output.B3 = 1;      //Off LED
063F2:  BSF    xCD.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
063F4:  BCF    xE7.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)       //If Buzzer or Both
063F6:  BTFSC  xD3.2
063F8:  BRA    63FE
063FA:  BTFSC  xD5.2
063FC:  BRA    6420
063FE:  MOVLB  B
06400:  MOVF   x48,F
06402:  BTFSC  FD8.2
06404:  BRA    640A
06406:  MOVLB  A
06408:  BRA    6420
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0640A:  MOVLW  01
0640C:  MOVWF  x53
0640E:  MOVLB  0
06410:  CALL   478C
06414:  DECFSZ 01,W
06416:  BRA    641A
06418:  BRA    641E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0641A:  BCF    F89.4
0641C:  BCF    F92.4
0641E:  MOVLB  A
....................          }
....................       }
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)   //If Bell or Both
06420:  BTFSS  xD3.2
06422:  BRA    6428
06424:  BTFSC  xD5.2
06426:  BRA    644A
06428:  MOVLB  B
0642A:  MOVF   x48,F
0642C:  BTFSC  FD8.2
0642E:  BRA    6434
06430:  MOVLB  A
06432:  BRA    644A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06434:  MOVLW  02
06436:  MOVWF  x53
06438:  MOVLB  0
0643A:  CALL   478C
0643E:  DECFSZ 01,W
06440:  BRA    6444
06442:  BRA    6448
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06444:  BCF    F89.3
06446:  BCF    F92.3
06448:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
0644A:  BTFSC  xDD.0
0644C:  BRA    647A
0644E:  BTFSC  xDD.1
06450:  BRA    647A
06452:  BTFSC  xDD.2
06454:  BRA    647A
06456:  BTFSC  xDD.3
06458:  BRA    647A
0645A:  BTFSC  xDD.4
0645C:  BRA    647A
0645E:  BTFSC  xDD.5
06460:  BRA    647A
06462:  BTFSC  xDD.6
06464:  BRA    647A
06466:  BTFSC  xDD.7
06468:  BRA    647A
0646A:  BTFSC  xDE.0
0646C:  BRA    647A
0646E:  BTFSC  xDE.1
06470:  BRA    647A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06472:  BCF    F89.3
06474:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06476:  BCF    F89.4
06478:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0647A:  MOVLW  00
0647C:  BTFSC  xCB.3
0647E:  MOVLW  01
06480:  MOVLB  B
06482:  MOVWF  x54
06484:  MOVLW  00
06486:  MOVLB  A
06488:  BTFSC  xCF.3
0648A:  MOVLW  01
0648C:  MOVLB  B
0648E:  XORWF  x54,W
06490:  SUBLW  01
06492:  BNZ   649C
06494:  MOVLB  A
06496:  BTFSS  xD1.3
06498:  BRA    64A2
0649A:  MOVLB  B
0649C:  BTFSS  1A.5
0649E:  BRA    6564
064A0:  MOVLB  A
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
064A2:  BTFSC  xDD.3
064A4:  BRA    64B8
064A6:  MOVF   5E,W
064A8:  SUBLW  0F
064AA:  BNZ   64B8
064AC:  BTFSC  xD9.3
064AE:  BRA    64B8
....................       {
....................             TimeBase1s = 100 ;            //reload again
064B0:  MOVLW  64
064B2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
064B4:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B4 = 1;
064B8:  BSF    xDD.3
....................       if(Ack.B4 == 0)
064BA:  BTFSC  xD9.3
064BC:  BRA    64E8
....................       {
....................          if(FlashingFlag == 0)
064BE:  BTFSC  1A.1
064C0:  BRA    64C6
....................             {
....................                Output.B4 = 0;           //Flash output1
064C2:  BCF    xCD.3
....................             }
064C4:  BRA    64C8
....................             else
....................             {
....................                Output.B4 = 1;
064C6:  BSF    xCD.3
....................             }
....................          if (~AutoTestFlag)
064C8:  BTFSC  1A.4
064CA:  BRA    64E8
....................          {
....................              if(OutputBoth.B4 == 0)        //Both output
064CC:  BTFSC  xD5.3
064CE:  BRA    64DA
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
064D0:  BSF    F89.4
064D2:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
064D4:  BSF    F89.3
064D6:  BCF    F92.3
....................              }
064D8:  BRA    64E8
....................              else
....................              {
....................                if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
064DA:  BTFSS  xD3.3
064DC:  BRA    64E4
064DE:  BSF    F89.4
064E0:  BCF    F92.4
064E2:  BRA    64E8
....................                else output_bit(Pbell,1);                          //Bell
064E4:  BSF    F89.3
064E6:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
064E8:  MOVLW  01
064EA:  MOVLB  B
064EC:  MOVWF  x48
....................       
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
064EE:  MOVLB  A
064F0:  BTFSC  xE7.3
064F2:  BRA    6562
064F4:  BTFSC  30.1
064F6:  BRA    6562
064F8:  BTFSC  xD9.3
064FA:  BRA    6562
....................       {
....................          SendSMS.B4 =1;
064FC:  BSF    xE7.3
....................          fprintf(CH2,"AT+CMGS=\"");
064FE:  MOVLW  96
06500:  MOVWF  FF6
06502:  MOVLW  07
06504:  MOVWF  FF7
06506:  MOVLB  0
06508:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
0650C:  MOVLW  09
0650E:  MOVWF  FEA
06510:  MOVLW  7C
06512:  MOVWF  FE9
06514:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
06518:  MOVLW  22
0651A:  MOVLB  B
0651C:  MOVWF  x55
0651E:  MOVLB  0
06520:  CALL   4702
....................          putc('\n',CH2);
06524:  MOVLW  0A
06526:  MOVLB  B
06528:  MOVWF  x55
0652A:  MOVLB  0
0652C:  CALL   4702
....................          delay_ms(50);
06530:  MOVLW  32
06532:  MOVLB  B
06534:  MOVWF  x54
06536:  MOVLB  0
06538:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage4); 
0653C:  MOVLW  09
0653E:  MOVWF  FEA
06540:  MOVLW  EB
06542:  MOVWF  FE9
06544:  CALL   4768
....................         putc('\n',CH2);
06548:  MOVLW  0A
0654A:  MOVLB  B
0654C:  MOVWF  x55
0654E:  MOVLB  0
06550:  CALL   4702
....................        putc(26,CH2);
06554:  MOVLW  1A
06556:  MOVLB  B
06558:  MOVWF  x55
0655A:  MOVLB  0
0655C:  CALL   4702
06560:  MOVLB  A
....................       }
....................    }
06562:  BRA    65F6
....................    else if(FaultType.B4 == 0)
06564:  MOVLB  A
06566:  BTFSC  xD1.3
06568:  BRA    65F6
....................    {
....................       In2.B4 = 0x00;
0656A:  BCF    xDD.3
....................       Ack.B4 = 0;
0656C:  BCF    xD9.3
....................       Output.B4 = 1;      //Off LED
0656E:  BSF    xCD.3
....................       
....................       SendSMS.B4 =0;// Clear SMS
06570:  BCF    xE7.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)       //If Buzzer or Both
06572:  BTFSC  xD3.3
06574:  BRA    657A
06576:  BTFSC  xD5.3
06578:  BRA    659C
0657A:  MOVLB  B
0657C:  MOVF   x48,F
0657E:  BTFSC  FD8.2
06580:  BRA    6586
06582:  MOVLB  A
06584:  BRA    659C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06586:  MOVLW  01
06588:  MOVWF  x53
0658A:  MOVLB  0
0658C:  CALL   478C
06590:  DECFSZ 01,W
06592:  BRA    6596
06594:  BRA    659A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06596:  BCF    F89.4
06598:  BCF    F92.4
0659A:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)   //If Bell or Both
0659C:  BTFSS  xD3.3
0659E:  BRA    65A4
065A0:  BTFSC  xD5.3
065A2:  BRA    65C6
065A4:  MOVLB  B
065A6:  MOVF   x48,F
065A8:  BTFSC  FD8.2
065AA:  BRA    65B0
065AC:  MOVLB  A
065AE:  BRA    65C6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
065B0:  MOVLW  02
065B2:  MOVWF  x53
065B4:  MOVLB  0
065B6:  CALL   478C
065BA:  DECFSZ 01,W
065BC:  BRA    65C0
065BE:  BRA    65C4
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
065C0:  BCF    F89.3
065C2:  BCF    F92.3
065C4:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
065C6:  BTFSC  xDD.0
065C8:  BRA    65F6
065CA:  BTFSC  xDD.1
065CC:  BRA    65F6
065CE:  BTFSC  xDD.2
065D0:  BRA    65F6
065D2:  BTFSC  xDD.3
065D4:  BRA    65F6
065D6:  BTFSC  xDD.4
065D8:  BRA    65F6
065DA:  BTFSC  xDD.5
065DC:  BRA    65F6
065DE:  BTFSC  xDD.6
065E0:  BRA    65F6
065E2:  BTFSC  xDD.7
065E4:  BRA    65F6
065E6:  BTFSC  xDE.0
065E8:  BRA    65F6
065EA:  BTFSC  xDE.1
065EC:  BRA    65F6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
065EE:  BCF    F89.3
065F0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
065F2:  BCF    F89.4
065F4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
065F6:  MOVLW  00
065F8:  BTFSC  xCB.4
065FA:  MOVLW  01
065FC:  MOVLB  B
065FE:  MOVWF  x54
06600:  MOVLW  00
06602:  MOVLB  A
06604:  BTFSC  xCF.4
06606:  MOVLW  01
06608:  MOVLB  B
0660A:  XORWF  x54,W
0660C:  SUBLW  01
0660E:  BNZ   6618
06610:  MOVLB  A
06612:  BTFSS  xD1.4
06614:  BRA    661E
06616:  MOVLB  B
06618:  BTFSS  1A.5
0661A:  BRA    66E0
0661C:  MOVLB  A
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
0661E:  BTFSC  xDD.4
06620:  BRA    6634
06622:  MOVF   5E,W
06624:  SUBLW  0F
06626:  BNZ   6634
06628:  BTFSC  xD9.4
0662A:  BRA    6634
....................       {
....................             TimeBase1s = 100 ;            //reload again
0662C:  MOVLW  64
0662E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06630:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B5 = 1;
06634:  BSF    xDD.4
....................       if(Ack.B5 == 0)
06636:  BTFSC  xD9.4
06638:  BRA    6664
....................       {
....................          if(FlashingFlag == 0)
0663A:  BTFSC  1A.1
0663C:  BRA    6642
....................             {
....................                Output.B5 = 0;           //Flash output1
0663E:  BCF    xCD.4
....................             }
06640:  BRA    6644
....................             else
....................             {
....................                Output.B5 = 1;
06642:  BSF    xCD.4
....................             }
....................          if (~AutoTestFlag)
06644:  BTFSC  1A.4
06646:  BRA    6664
....................          {
....................              if(OutputBoth.B5 == 0)        //Both output
06648:  BTFSC  xD5.4
0664A:  BRA    6656
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
0664C:  BSF    F89.4
0664E:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06650:  BSF    F89.3
06652:  BCF    F92.3
....................              }
06654:  BRA    6664
....................              else
....................              {
....................                if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
06656:  BTFSS  xD3.4
06658:  BRA    6660
0665A:  BSF    F89.4
0665C:  BCF    F92.4
0665E:  BRA    6664
....................                else output_bit(Pbell,1);                          //Bell
06660:  BSF    F89.3
06662:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06664:  MOVLW  01
06666:  MOVLB  B
06668:  MOVWF  x48
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
0666A:  MOVLB  A
0666C:  BTFSC  xE7.4
0666E:  BRA    66DE
06670:  BTFSC  30.1
06672:  BRA    66DE
06674:  BTFSC  xD9.4
06676:  BRA    66DE
....................       {
....................          SendSMS.B5 =1;
06678:  BSF    xE7.4
....................          fprintf(CH2,"AT+CMGS=\"");
0667A:  MOVLW  A0
0667C:  MOVWF  FF6
0667E:  MOVLW  07
06680:  MOVWF  FF7
06682:  MOVLB  0
06684:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06688:  MOVLW  09
0668A:  MOVWF  FEA
0668C:  MOVLW  7C
0668E:  MOVWF  FE9
06690:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
06694:  MOVLW  22
06696:  MOVLB  B
06698:  MOVWF  x55
0669A:  MOVLB  0
0669C:  CALL   4702
....................          putc('\n',CH2);
066A0:  MOVLW  0A
066A2:  MOVLB  B
066A4:  MOVWF  x55
066A6:  MOVLB  0
066A8:  CALL   4702
....................          delay_ms(50);
066AC:  MOVLW  32
066AE:  MOVLB  B
066B0:  MOVWF  x54
066B2:  MOVLB  0
066B4:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage5); 
066B8:  MOVLW  0A
066BA:  MOVWF  FEA
066BC:  MOVLW  0B
066BE:  MOVWF  FE9
066C0:  CALL   4768
....................         putc('\n',CH2);
066C4:  MOVLW  0A
066C6:  MOVLB  B
066C8:  MOVWF  x55
066CA:  MOVLB  0
066CC:  CALL   4702
....................        putc(26,CH2);
066D0:  MOVLW  1A
066D2:  MOVLB  B
066D4:  MOVWF  x55
066D6:  MOVLB  0
066D8:  CALL   4702
066DC:  MOVLB  A
....................       }
....................    }
066DE:  BRA    6772
....................    else if(FaultType.B5 == 0)
066E0:  MOVLB  A
066E2:  BTFSC  xD1.4
066E4:  BRA    6772
....................    {
....................       In2.B5 = 0x00;
066E6:  BCF    xDD.4
....................       Ack.B5 = 0;
066E8:  BCF    xD9.4
....................       Output.B5 = 1;      //Off LED
066EA:  BSF    xCD.4
....................       
....................       SendSMS.B5 =0;// Clear SMS
066EC:  BCF    xE7.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)       //If Buzzer or Both
066EE:  BTFSC  xD3.4
066F0:  BRA    66F6
066F2:  BTFSC  xD5.4
066F4:  BRA    6718
066F6:  MOVLB  B
066F8:  MOVF   x48,F
066FA:  BTFSC  FD8.2
066FC:  BRA    6702
066FE:  MOVLB  A
06700:  BRA    6718
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06702:  MOVLW  01
06704:  MOVWF  x53
06706:  MOVLB  0
06708:  CALL   478C
0670C:  DECFSZ 01,W
0670E:  BRA    6712
06710:  BRA    6716
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06712:  BCF    F89.4
06714:  BCF    F92.4
06716:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)   //If Bell or Both
06718:  BTFSS  xD3.4
0671A:  BRA    6720
0671C:  BTFSC  xD5.4
0671E:  BRA    6742
06720:  MOVLB  B
06722:  MOVF   x48,F
06724:  BTFSC  FD8.2
06726:  BRA    672C
06728:  MOVLB  A
0672A:  BRA    6742
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0672C:  MOVLW  02
0672E:  MOVWF  x53
06730:  MOVLB  0
06732:  CALL   478C
06736:  DECFSZ 01,W
06738:  BRA    673C
0673A:  BRA    6740
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
0673C:  BCF    F89.3
0673E:  BCF    F92.3
06740:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06742:  BTFSC  xDD.0
06744:  BRA    6772
06746:  BTFSC  xDD.1
06748:  BRA    6772
0674A:  BTFSC  xDD.2
0674C:  BRA    6772
0674E:  BTFSC  xDD.3
06750:  BRA    6772
06752:  BTFSC  xDD.4
06754:  BRA    6772
06756:  BTFSC  xDD.5
06758:  BRA    6772
0675A:  BTFSC  xDD.6
0675C:  BRA    6772
0675E:  BTFSC  xDD.7
06760:  BRA    6772
06762:  BTFSC  xDE.0
06764:  BRA    6772
06766:  BTFSC  xDE.1
06768:  BRA    6772
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0676A:  BCF    F89.3
0676C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0676E:  BCF    F89.4
06770:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06772:  MOVLW  00
06774:  BTFSC  xCB.5
06776:  MOVLW  01
06778:  MOVLB  B
0677A:  MOVWF  x54
0677C:  MOVLW  00
0677E:  MOVLB  A
06780:  BTFSC  xCF.5
06782:  MOVLW  01
06784:  MOVLB  B
06786:  XORWF  x54,W
06788:  SUBLW  01
0678A:  BNZ   6794
0678C:  MOVLB  A
0678E:  BTFSS  xD1.5
06790:  BRA    679A
06792:  MOVLB  B
06794:  BTFSS  1A.5
06796:  BRA    685C
06798:  MOVLB  A
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
0679A:  BTFSC  xDD.5
0679C:  BRA    67B0
0679E:  MOVF   5E,W
067A0:  SUBLW  0F
067A2:  BNZ   67B0
067A4:  BTFSC  xD9.5
067A6:  BRA    67B0
....................       {
....................             TimeBase1s = 100 ;            //reload again
067A8:  MOVLW  64
067AA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
067AC:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B6 = 1;
067B0:  BSF    xDD.5
....................       if(Ack.B6 == 0)
067B2:  BTFSC  xD9.5
067B4:  BRA    67E0
....................       {
....................          if(FlashingFlag == 0)
067B6:  BTFSC  1A.1
067B8:  BRA    67BE
....................             {
....................                Output.B6 = 0;           //Flash output1
067BA:  BCF    xCD.5
....................             }
067BC:  BRA    67C0
....................             else
....................             {
....................                Output.B6 = 1;
067BE:  BSF    xCD.5
....................             }
....................          if (~AutoTestFlag)
067C0:  BTFSC  1A.4
067C2:  BRA    67E0
....................          {
....................              if(OutputBoth.B6 == 0)        //Both output
067C4:  BTFSC  xD5.5
067C6:  BRA    67D2
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
067C8:  BSF    F89.4
067CA:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
067CC:  BSF    F89.3
067CE:  BCF    F92.3
....................              }
067D0:  BRA    67E0
....................              else
....................              {
....................                if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
067D2:  BTFSS  xD3.5
067D4:  BRA    67DC
067D6:  BSF    F89.4
067D8:  BCF    F92.4
067DA:  BRA    67E0
....................                else output_bit(Pbell,1);                          //Bell
067DC:  BSF    F89.3
067DE:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
067E0:  MOVLW  01
067E2:  MOVLB  B
067E4:  MOVWF  x48
....................       
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
067E6:  MOVLB  A
067E8:  BTFSC  xE7.5
067EA:  BRA    685A
067EC:  BTFSC  30.1
067EE:  BRA    685A
067F0:  BTFSC  xD9.5
067F2:  BRA    685A
....................       {
....................          SendSMS.B6 =1;
067F4:  BSF    xE7.5
....................          fprintf(CH2,"AT+CMGS=\"");
067F6:  MOVLW  AA
067F8:  MOVWF  FF6
067FA:  MOVLW  07
067FC:  MOVWF  FF7
067FE:  MOVLB  0
06800:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06804:  MOVLW  09
06806:  MOVWF  FEA
06808:  MOVLW  7C
0680A:  MOVWF  FE9
0680C:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
06810:  MOVLW  22
06812:  MOVLB  B
06814:  MOVWF  x55
06816:  MOVLB  0
06818:  CALL   4702
....................          putc('\n',CH2);
0681C:  MOVLW  0A
0681E:  MOVLB  B
06820:  MOVWF  x55
06822:  MOVLB  0
06824:  CALL   4702
....................          delay_ms(50);
06828:  MOVLW  32
0682A:  MOVLB  B
0682C:  MOVWF  x54
0682E:  MOVLB  0
06830:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage6);  
06834:  MOVLW  0A
06836:  MOVWF  FEA
06838:  MOVLW  2B
0683A:  MOVWF  FE9
0683C:  CALL   4768
....................         putc('\n',CH2);
06840:  MOVLW  0A
06842:  MOVLB  B
06844:  MOVWF  x55
06846:  MOVLB  0
06848:  CALL   4702
....................        putc(26,CH2);
0684C:  MOVLW  1A
0684E:  MOVLB  B
06850:  MOVWF  x55
06852:  MOVLB  0
06854:  CALL   4702
06858:  MOVLB  A
....................       }
....................    }
0685A:  BRA    68EE
....................    else if(FaultType.B6 == 0)
0685C:  MOVLB  A
0685E:  BTFSC  xD1.5
06860:  BRA    68EE
....................    {
....................       In2.B6 = 0x00;
06862:  BCF    xDD.5
....................       Ack.B6 = 0;
06864:  BCF    xD9.5
....................       Output.B6 = 1;      //Off LED
06866:  BSF    xCD.5
....................       
....................       SendSMS.B6 =0;// Clear SMS
06868:  BCF    xE7.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)       //If Buzzer or Both
0686A:  BTFSC  xD3.5
0686C:  BRA    6872
0686E:  BTFSC  xD5.5
06870:  BRA    6894
06872:  MOVLB  B
06874:  MOVF   x48,F
06876:  BTFSC  FD8.2
06878:  BRA    687E
0687A:  MOVLB  A
0687C:  BRA    6894
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0687E:  MOVLW  01
06880:  MOVWF  x53
06882:  MOVLB  0
06884:  CALL   478C
06888:  DECFSZ 01,W
0688A:  BRA    688E
0688C:  BRA    6892
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0688E:  BCF    F89.4
06890:  BCF    F92.4
06892:  MOVLB  A
....................          }
....................       }
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)   //If Bell or Both
06894:  BTFSS  xD3.5
06896:  BRA    689C
06898:  BTFSC  xD5.5
0689A:  BRA    68BE
0689C:  MOVLB  B
0689E:  MOVF   x48,F
068A0:  BTFSC  FD8.2
068A2:  BRA    68A8
068A4:  MOVLB  A
068A6:  BRA    68BE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
068A8:  MOVLW  02
068AA:  MOVWF  x53
068AC:  MOVLB  0
068AE:  CALL   478C
068B2:  DECFSZ 01,W
068B4:  BRA    68B8
068B6:  BRA    68BC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
068B8:  BCF    F89.3
068BA:  BCF    F92.3
068BC:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
068BE:  BTFSC  xDD.0
068C0:  BRA    68EE
068C2:  BTFSC  xDD.1
068C4:  BRA    68EE
068C6:  BTFSC  xDD.2
068C8:  BRA    68EE
068CA:  BTFSC  xDD.3
068CC:  BRA    68EE
068CE:  BTFSC  xDD.4
068D0:  BRA    68EE
068D2:  BTFSC  xDD.5
068D4:  BRA    68EE
068D6:  BTFSC  xDD.6
068D8:  BRA    68EE
068DA:  BTFSC  xDD.7
068DC:  BRA    68EE
068DE:  BTFSC  xDE.0
068E0:  BRA    68EE
068E2:  BTFSC  xDE.1
068E4:  BRA    68EE
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
068E6:  BCF    F89.3
068E8:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
068EA:  BCF    F89.4
068EC:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
068EE:  MOVLW  00
068F0:  BTFSC  xCB.6
068F2:  MOVLW  01
068F4:  MOVLB  B
068F6:  MOVWF  x54
068F8:  MOVLW  00
068FA:  MOVLB  A
068FC:  BTFSC  xCF.6
068FE:  MOVLW  01
06900:  MOVLB  B
06902:  XORWF  x54,W
06904:  SUBLW  01
06906:  BNZ   6910
06908:  MOVLB  A
0690A:  BTFSS  xD1.6
0690C:  BRA    6916
0690E:  MOVLB  B
06910:  BTFSS  1A.5
06912:  BRA    69D8
06914:  MOVLB  A
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
06916:  BTFSC  xDD.6
06918:  BRA    692C
0691A:  MOVF   5E,W
0691C:  SUBLW  0F
0691E:  BNZ   692C
06920:  BTFSC  xD9.6
06922:  BRA    692C
....................       {
....................             TimeBase1s = 100 ;            //reload again
06924:  MOVLW  64
06926:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06928:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B7 = 1;
0692C:  BSF    xDD.6
....................       if(Ack.B7 == 0)
0692E:  BTFSC  xD9.6
06930:  BRA    695C
....................       {
....................          if(FlashingFlag == 0)
06932:  BTFSC  1A.1
06934:  BRA    693A
....................             {
....................                Output.B7 = 0;           //Flash output1
06936:  BCF    xCD.6
....................             }
06938:  BRA    693C
....................             else
....................             {
....................                Output.B7 = 1;
0693A:  BSF    xCD.6
....................             }
....................          if (~AutoTestFlag)
0693C:  BTFSC  1A.4
0693E:  BRA    695C
....................          {
....................              if(OutputBoth.B7 == 0)        //Both output
06940:  BTFSC  xD5.6
06942:  BRA    694E
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06944:  BSF    F89.4
06946:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06948:  BSF    F89.3
0694A:  BCF    F92.3
....................              }
0694C:  BRA    695C
....................              else
....................              {
....................                if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
0694E:  BTFSS  xD3.6
06950:  BRA    6958
06952:  BSF    F89.4
06954:  BCF    F92.4
06956:  BRA    695C
....................                else output_bit(Pbell,1);                          //Bell
06958:  BSF    F89.3
0695A:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
0695C:  MOVLW  01
0695E:  MOVLB  B
06960:  MOVWF  x48
....................       
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
06962:  MOVLB  A
06964:  BTFSC  xE7.6
06966:  BRA    69D6
06968:  BTFSC  30.1
0696A:  BRA    69D6
0696C:  BTFSC  xD9.6
0696E:  BRA    69D6
....................       {
....................          SendSMS.B7 =1;
06970:  BSF    xE7.6
....................          fprintf(CH2,"AT+CMGS=\"");
06972:  MOVLW  B4
06974:  MOVWF  FF6
06976:  MOVLW  07
06978:  MOVWF  FF7
0697A:  MOVLB  0
0697C:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06980:  MOVLW  09
06982:  MOVWF  FEA
06984:  MOVLW  7C
06986:  MOVWF  FE9
06988:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
0698C:  MOVLW  22
0698E:  MOVLB  B
06990:  MOVWF  x55
06992:  MOVLB  0
06994:  CALL   4702
....................          putc('\n',CH2);
06998:  MOVLW  0A
0699A:  MOVLB  B
0699C:  MOVWF  x55
0699E:  MOVLB  0
069A0:  CALL   4702
....................          delay_ms(50);
069A4:  MOVLW  32
069A6:  MOVLB  B
069A8:  MOVWF  x54
069AA:  MOVLB  0
069AC:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage7);  
069B0:  MOVLW  0A
069B2:  MOVWF  FEA
069B4:  MOVLW  4B
069B6:  MOVWF  FE9
069B8:  CALL   4768
....................         putc('\n',CH2);
069BC:  MOVLW  0A
069BE:  MOVLB  B
069C0:  MOVWF  x55
069C2:  MOVLB  0
069C4:  CALL   4702
....................        putc(26,CH2);
069C8:  MOVLW  1A
069CA:  MOVLB  B
069CC:  MOVWF  x55
069CE:  MOVLB  0
069D0:  CALL   4702
069D4:  MOVLB  A
....................       }
....................    }
069D6:  BRA    6A6A
....................    else if(FaultType.B7 == 0)
069D8:  MOVLB  A
069DA:  BTFSC  xD1.6
069DC:  BRA    6A6A
....................    {
....................       In2.B7 = 0x00;
069DE:  BCF    xDD.6
....................       Ack.B7 = 0;
069E0:  BCF    xD9.6
....................       Output.B7 = 1;      //Off LED
069E2:  BSF    xCD.6
....................       
....................       SendSMS.B7 =0;// Clear SMS
069E4:  BCF    xE7.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)       //If Buzzer or Both
069E6:  BTFSC  xD3.6
069E8:  BRA    69EE
069EA:  BTFSC  xD5.6
069EC:  BRA    6A10
069EE:  MOVLB  B
069F0:  MOVF   x48,F
069F2:  BTFSC  FD8.2
069F4:  BRA    69FA
069F6:  MOVLB  A
069F8:  BRA    6A10
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
069FA:  MOVLW  01
069FC:  MOVWF  x53
069FE:  MOVLB  0
06A00:  CALL   478C
06A04:  DECFSZ 01,W
06A06:  BRA    6A0A
06A08:  BRA    6A0E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06A0A:  BCF    F89.4
06A0C:  BCF    F92.4
06A0E:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)   //If Bell or Both
06A10:  BTFSS  xD3.6
06A12:  BRA    6A18
06A14:  BTFSC  xD5.6
06A16:  BRA    6A3A
06A18:  MOVLB  B
06A1A:  MOVF   x48,F
06A1C:  BTFSC  FD8.2
06A1E:  BRA    6A24
06A20:  MOVLB  A
06A22:  BRA    6A3A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06A24:  MOVLW  02
06A26:  MOVWF  x53
06A28:  MOVLB  0
06A2A:  CALL   478C
06A2E:  DECFSZ 01,W
06A30:  BRA    6A34
06A32:  BRA    6A38
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06A34:  BCF    F89.3
06A36:  BCF    F92.3
06A38:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06A3A:  BTFSC  xDD.0
06A3C:  BRA    6A6A
06A3E:  BTFSC  xDD.1
06A40:  BRA    6A6A
06A42:  BTFSC  xDD.2
06A44:  BRA    6A6A
06A46:  BTFSC  xDD.3
06A48:  BRA    6A6A
06A4A:  BTFSC  xDD.4
06A4C:  BRA    6A6A
06A4E:  BTFSC  xDD.5
06A50:  BRA    6A6A
06A52:  BTFSC  xDD.6
06A54:  BRA    6A6A
06A56:  BTFSC  xDD.7
06A58:  BRA    6A6A
06A5A:  BTFSC  xDE.0
06A5C:  BRA    6A6A
06A5E:  BTFSC  xDE.1
06A60:  BRA    6A6A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06A62:  BCF    F89.3
06A64:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06A66:  BCF    F89.4
06A68:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06A6A:  MOVLW  00
06A6C:  BTFSC  xCB.7
06A6E:  MOVLW  01
06A70:  MOVLB  B
06A72:  MOVWF  x54
06A74:  MOVLW  00
06A76:  MOVLB  A
06A78:  BTFSC  xCF.7
06A7A:  MOVLW  01
06A7C:  MOVLB  B
06A7E:  XORWF  x54,W
06A80:  SUBLW  01
06A82:  BNZ   6A8C
06A84:  MOVLB  A
06A86:  BTFSS  xD1.7
06A88:  BRA    6A92
06A8A:  MOVLB  B
06A8C:  BTFSS  1A.5
06A8E:  BRA    6B54
06A90:  MOVLB  A
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
06A92:  BTFSC  xDD.7
06A94:  BRA    6AA8
06A96:  MOVF   5E,W
06A98:  SUBLW  0F
06A9A:  BNZ   6AA8
06A9C:  BTFSC  xD9.7
06A9E:  BRA    6AA8
....................       {
....................             TimeBase1s = 100 ;            //reload again
06AA0:  MOVLW  64
06AA2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06AA4:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B8 = 1;
06AA8:  BSF    xDD.7
....................       if(Ack.B8 == 0)
06AAA:  BTFSC  xD9.7
06AAC:  BRA    6AD8
....................       {
....................          if(FlashingFlag == 0)
06AAE:  BTFSC  1A.1
06AB0:  BRA    6AB6
....................             {
....................                Output.B8 = 0;           //Flash output1
06AB2:  BCF    xCD.7
....................             }
06AB4:  BRA    6AB8
....................             else
....................             {
....................                Output.B8 = 1;
06AB6:  BSF    xCD.7
....................             }
....................          if (~AutoTestFlag)
06AB8:  BTFSC  1A.4
06ABA:  BRA    6AD8
....................          {
....................              if(OutputBoth.B8 == 0)        //Both output
06ABC:  BTFSC  xD5.7
06ABE:  BRA    6ACA
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06AC0:  BSF    F89.4
06AC2:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06AC4:  BSF    F89.3
06AC6:  BCF    F92.3
....................              }
06AC8:  BRA    6AD8
....................              else
....................              {
....................                if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
06ACA:  BTFSS  xD3.7
06ACC:  BRA    6AD4
06ACE:  BSF    F89.4
06AD0:  BCF    F92.4
06AD2:  BRA    6AD8
....................                else output_bit(Pbell,1);                          //Bell
06AD4:  BSF    F89.3
06AD6:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06AD8:  MOVLW  01
06ADA:  MOVLB  B
06ADC:  MOVWF  x48
....................       
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
06ADE:  MOVLB  A
06AE0:  BTFSC  xE7.7
06AE2:  BRA    6B52
06AE4:  BTFSC  30.1
06AE6:  BRA    6B52
06AE8:  BTFSC  xD9.7
06AEA:  BRA    6B52
....................       {
....................          SendSMS.B8 =1;
06AEC:  BSF    xE7.7
....................          fprintf(CH2,"AT+CMGS=\"");
06AEE:  MOVLW  BE
06AF0:  MOVWF  FF6
06AF2:  MOVLW  07
06AF4:  MOVWF  FF7
06AF6:  MOVLB  0
06AF8:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06AFC:  MOVLW  09
06AFE:  MOVWF  FEA
06B00:  MOVLW  7C
06B02:  MOVWF  FE9
06B04:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
06B08:  MOVLW  22
06B0A:  MOVLB  B
06B0C:  MOVWF  x55
06B0E:  MOVLB  0
06B10:  CALL   4702
....................          putc('\n',CH2);
06B14:  MOVLW  0A
06B16:  MOVLB  B
06B18:  MOVWF  x55
06B1A:  MOVLB  0
06B1C:  CALL   4702
....................          delay_ms(50);
06B20:  MOVLW  32
06B22:  MOVLB  B
06B24:  MOVWF  x54
06B26:  MOVLB  0
06B28:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage8);   
06B2C:  MOVLW  0A
06B2E:  MOVWF  FEA
06B30:  MOVLW  6B
06B32:  MOVWF  FE9
06B34:  CALL   4768
....................         putc('\n',CH2);
06B38:  MOVLW  0A
06B3A:  MOVLB  B
06B3C:  MOVWF  x55
06B3E:  MOVLB  0
06B40:  CALL   4702
....................         putc(26,CH2);
06B44:  MOVLW  1A
06B46:  MOVLB  B
06B48:  MOVWF  x55
06B4A:  MOVLB  0
06B4C:  CALL   4702
06B50:  MOVLB  A
....................       }
....................    }
06B52:  BRA    6BE6
....................    else if(FaultType.B8 == 0)
06B54:  MOVLB  A
06B56:  BTFSC  xD1.7
06B58:  BRA    6BE6
....................    {
....................       In2.B8 = 0x00;
06B5A:  BCF    xDD.7
....................       Ack.B8 = 0;
06B5C:  BCF    xD9.7
....................       Output.B8 = 1;      //Off LED
06B5E:  BSF    xCD.7
....................       
....................       SendSMS.B8 =0;// Clear SMS
06B60:  BCF    xE7.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)       //If Buzzer or Both
06B62:  BTFSC  xD3.7
06B64:  BRA    6B6A
06B66:  BTFSC  xD5.7
06B68:  BRA    6B8C
06B6A:  MOVLB  B
06B6C:  MOVF   x48,F
06B6E:  BTFSC  FD8.2
06B70:  BRA    6B76
06B72:  MOVLB  A
06B74:  BRA    6B8C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06B76:  MOVLW  01
06B78:  MOVWF  x53
06B7A:  MOVLB  0
06B7C:  CALL   478C
06B80:  DECFSZ 01,W
06B82:  BRA    6B86
06B84:  BRA    6B8A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06B86:  BCF    F89.4
06B88:  BCF    F92.4
06B8A:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)   //If Bell or Both
06B8C:  BTFSS  xD3.7
06B8E:  BRA    6B94
06B90:  BTFSC  xD5.7
06B92:  BRA    6BB6
06B94:  MOVLB  B
06B96:  MOVF   x48,F
06B98:  BTFSC  FD8.2
06B9A:  BRA    6BA0
06B9C:  MOVLB  A
06B9E:  BRA    6BB6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06BA0:  MOVLW  02
06BA2:  MOVWF  x53
06BA4:  MOVLB  0
06BA6:  CALL   478C
06BAA:  DECFSZ 01,W
06BAC:  BRA    6BB0
06BAE:  BRA    6BB4
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06BB0:  BCF    F89.3
06BB2:  BCF    F92.3
06BB4:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06BB6:  BTFSC  xDD.0
06BB8:  BRA    6BE6
06BBA:  BTFSC  xDD.1
06BBC:  BRA    6BE6
06BBE:  BTFSC  xDD.2
06BC0:  BRA    6BE6
06BC2:  BTFSC  xDD.3
06BC4:  BRA    6BE6
06BC6:  BTFSC  xDD.4
06BC8:  BRA    6BE6
06BCA:  BTFSC  xDD.5
06BCC:  BRA    6BE6
06BCE:  BTFSC  xDD.6
06BD0:  BRA    6BE6
06BD2:  BTFSC  xDD.7
06BD4:  BRA    6BE6
06BD6:  BTFSC  xDE.0
06BD8:  BRA    6BE6
06BDA:  BTFSC  xDE.1
06BDC:  BRA    6BE6
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06BDE:  BCF    F89.3
06BE0:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06BE2:  BCF    F89.4
06BE4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06BE6:  MOVLW  00
06BE8:  BTFSC  xCC.0
06BEA:  MOVLW  01
06BEC:  MOVLB  B
06BEE:  MOVWF  x54
06BF0:  MOVLW  00
06BF2:  MOVLB  A
06BF4:  BTFSC  xD0.0
06BF6:  MOVLW  01
06BF8:  MOVLB  B
06BFA:  XORWF  x54,W
06BFC:  SUBLW  01
06BFE:  BNZ   6C08
06C00:  MOVLB  A
06C02:  BTFSS  xD2.0
06C04:  BRA    6C0E
06C06:  MOVLB  B
06C08:  BTFSS  1A.5
06C0A:  BRA    6CD0
06C0C:  MOVLB  A
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
06C0E:  BTFSC  xDE.0
06C10:  BRA    6C24
06C12:  MOVF   5E,W
06C14:  SUBLW  0F
06C16:  BNZ   6C24
06C18:  BTFSC  xDA.0
06C1A:  BRA    6C24
....................       {
....................             TimeBase1s = 100 ;            //reload again
06C1C:  MOVLW  64
06C1E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06C20:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B9 = 1;
06C24:  BSF    xDE.0
....................       if(Ack.B9 == 0)
06C26:  BTFSC  xDA.0
06C28:  BRA    6C54
....................       {
....................          if(FlashingFlag == 0)
06C2A:  BTFSC  1A.1
06C2C:  BRA    6C32
....................             {
....................                Output.B9 = 0;           //Flash output1
06C2E:  BCF    xCE.0
....................             }
06C30:  BRA    6C34
....................             else
....................             {
....................                Output.B9 = 1;
06C32:  BSF    xCE.0
....................             }
....................          if (~AutoTestFlag)
06C34:  BTFSC  1A.4
06C36:  BRA    6C54
....................          {
....................              if(OutputBoth.B9 == 0)        //Both output
06C38:  BTFSC  xD6.0
06C3A:  BRA    6C46
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06C3C:  BSF    F89.4
06C3E:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06C40:  BSF    F89.3
06C42:  BCF    F92.3
....................              }
06C44:  BRA    6C54
....................              else
....................              {
....................                if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
06C46:  BTFSS  xD4.0
06C48:  BRA    6C50
06C4A:  BSF    F89.4
06C4C:  BCF    F92.4
06C4E:  BRA    6C54
....................                else output_bit(Pbell,1);                          //Bell
06C50:  BSF    F89.3
06C52:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06C54:  MOVLW  01
06C56:  MOVLB  B
06C58:  MOVWF  x48
....................       
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
06C5A:  MOVLB  A
06C5C:  BTFSC  xE8.0
06C5E:  BRA    6CCE
06C60:  BTFSC  30.1
06C62:  BRA    6CCE
06C64:  BTFSC  xDA.0
06C66:  BRA    6CCE
....................       {
....................          SendSMS.B9 =1;
06C68:  BSF    xE8.0
....................          fprintf(CH2,"AT+CMGS=\"");
06C6A:  MOVLW  C8
06C6C:  MOVWF  FF6
06C6E:  MOVLW  07
06C70:  MOVWF  FF7
06C72:  MOVLB  0
06C74:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06C78:  MOVLW  09
06C7A:  MOVWF  FEA
06C7C:  MOVLW  7C
06C7E:  MOVWF  FE9
06C80:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
06C84:  MOVLW  22
06C86:  MOVLB  B
06C88:  MOVWF  x55
06C8A:  MOVLB  0
06C8C:  CALL   4702
....................          putc('\n',CH2);
06C90:  MOVLW  0A
06C92:  MOVLB  B
06C94:  MOVWF  x55
06C96:  MOVLB  0
06C98:  CALL   4702
....................          delay_ms(50);
06C9C:  MOVLW  32
06C9E:  MOVLB  B
06CA0:  MOVWF  x54
06CA2:  MOVLB  0
06CA4:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage9);   
06CA8:  MOVLW  0A
06CAA:  MOVWF  FEA
06CAC:  MOVLW  8B
06CAE:  MOVWF  FE9
06CB0:  CALL   4768
....................         putc('\n',CH2);
06CB4:  MOVLW  0A
06CB6:  MOVLB  B
06CB8:  MOVWF  x55
06CBA:  MOVLB  0
06CBC:  CALL   4702
....................         putc(26,CH2);
06CC0:  MOVLW  1A
06CC2:  MOVLB  B
06CC4:  MOVWF  x55
06CC6:  MOVLB  0
06CC8:  CALL   4702
06CCC:  MOVLB  A
....................       }
....................    }
06CCE:  BRA    6D62
....................    else if(FaultType.B9 == 0)
06CD0:  MOVLB  A
06CD2:  BTFSC  xD2.0
06CD4:  BRA    6D62
....................    {
....................       In2.B9 = 0x00;
06CD6:  BCF    xDE.0
....................       Ack.B9 = 0;
06CD8:  BCF    xDA.0
....................       Output.B9 = 1;      //Off LED
06CDA:  BSF    xCE.0
....................       
....................       SendSMS.B9 =0;// Clear SMS
06CDC:  BCF    xE8.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)       //If Buzzer or Both
06CDE:  BTFSC  xD4.0
06CE0:  BRA    6CE6
06CE2:  BTFSC  xD6.0
06CE4:  BRA    6D08
06CE6:  MOVLB  B
06CE8:  MOVF   x48,F
06CEA:  BTFSC  FD8.2
06CEC:  BRA    6CF2
06CEE:  MOVLB  A
06CF0:  BRA    6D08
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06CF2:  MOVLW  01
06CF4:  MOVWF  x53
06CF6:  MOVLB  0
06CF8:  CALL   478C
06CFC:  DECFSZ 01,W
06CFE:  BRA    6D02
06D00:  BRA    6D06
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06D02:  BCF    F89.4
06D04:  BCF    F92.4
06D06:  MOVLB  A
....................          }
....................       }
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)   //If Bell or Both
06D08:  BTFSS  xD4.0
06D0A:  BRA    6D10
06D0C:  BTFSC  xD6.0
06D0E:  BRA    6D32
06D10:  MOVLB  B
06D12:  MOVF   x48,F
06D14:  BTFSC  FD8.2
06D16:  BRA    6D1C
06D18:  MOVLB  A
06D1A:  BRA    6D32
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06D1C:  MOVLW  02
06D1E:  MOVWF  x53
06D20:  MOVLB  0
06D22:  CALL   478C
06D26:  DECFSZ 01,W
06D28:  BRA    6D2C
06D2A:  BRA    6D30
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06D2C:  BCF    F89.3
06D2E:  BCF    F92.3
06D30:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06D32:  BTFSC  xDD.0
06D34:  BRA    6D62
06D36:  BTFSC  xDD.1
06D38:  BRA    6D62
06D3A:  BTFSC  xDD.2
06D3C:  BRA    6D62
06D3E:  BTFSC  xDD.3
06D40:  BRA    6D62
06D42:  BTFSC  xDD.4
06D44:  BRA    6D62
06D46:  BTFSC  xDD.5
06D48:  BRA    6D62
06D4A:  BTFSC  xDD.6
06D4C:  BRA    6D62
06D4E:  BTFSC  xDD.7
06D50:  BRA    6D62
06D52:  BTFSC  xDE.0
06D54:  BRA    6D62
06D56:  BTFSC  xDE.1
06D58:  BRA    6D62
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06D5A:  BCF    F89.3
06D5C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06D5E:  BCF    F89.4
06D60:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06D62:  MOVLW  00
06D64:  BTFSC  xCC.1
06D66:  MOVLW  01
06D68:  MOVLB  B
06D6A:  MOVWF  x54
06D6C:  MOVLW  00
06D6E:  MOVLB  A
06D70:  BTFSC  xD0.1
06D72:  MOVLW  01
06D74:  MOVLB  B
06D76:  XORWF  x54,W
06D78:  SUBLW  01
06D7A:  BNZ   6D84
06D7C:  MOVLB  A
06D7E:  BTFSS  xD2.1
06D80:  BRA    6D8A
06D82:  MOVLB  B
06D84:  BTFSS  1A.5
06D86:  BRA    6E4C
06D88:  MOVLB  A
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
06D8A:  BTFSC  xDE.1
06D8C:  BRA    6DA0
06D8E:  MOVF   5E,W
06D90:  SUBLW  0F
06D92:  BNZ   6DA0
06D94:  BTFSC  xDA.1
06D96:  BRA    6DA0
....................       {
....................             TimeBase1s = 100 ;            //reload again
06D98:  MOVLW  64
06D9A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06D9C:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B10 = 1;
06DA0:  BSF    xDE.1
....................       if(Ack.B10 == 0)
06DA2:  BTFSC  xDA.1
06DA4:  BRA    6DD0
....................       {
....................          if(FlashingFlag == 0)
06DA6:  BTFSC  1A.1
06DA8:  BRA    6DAE
....................          {
....................             Output.B10 = 0;           //Flash output1
06DAA:  BCF    xCE.1
....................          }
06DAC:  BRA    6DB0
....................          else
....................          {
....................             Output.B10 = 1;
06DAE:  BSF    xCE.1
....................          }
....................          if (~AutoTestFlag)
06DB0:  BTFSC  1A.4
06DB2:  BRA    6DD0
....................          {
....................              if(OutputBoth.B10 == 0)        //Both output
06DB4:  BTFSC  xD6.1
06DB6:  BRA    6DC2
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06DB8:  BSF    F89.4
06DBA:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06DBC:  BSF    F89.3
06DBE:  BCF    F92.3
....................              }
06DC0:  BRA    6DD0
....................              else
....................              {
....................                if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
06DC2:  BTFSS  xD4.1
06DC4:  BRA    6DCC
06DC6:  BSF    F89.4
06DC8:  BCF    F92.4
06DCA:  BRA    6DD0
....................                else output_bit(Pbell,1);                          //Bell
06DCC:  BSF    F89.3
06DCE:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06DD0:  MOVLW  01
06DD2:  MOVLB  B
06DD4:  MOVWF  x48
....................       
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
06DD6:  MOVLB  A
06DD8:  BTFSC  xE8.1
06DDA:  BRA    6E4A
06DDC:  BTFSC  30.1
06DDE:  BRA    6E4A
06DE0:  BTFSC  xDA.1
06DE2:  BRA    6E4A
....................       {
....................          SendSMS.B10 =1;
06DE4:  BSF    xE8.1
....................          fprintf(CH2,"AT+CMGS=\"");
06DE6:  MOVLW  D2
06DE8:  MOVWF  FF6
06DEA:  MOVLW  07
06DEC:  MOVWF  FF7
06DEE:  MOVLB  0
06DF0:  CALL   4748
....................          fprintf(CH2,sms_phonenumber);
06DF4:  MOVLW  09
06DF6:  MOVWF  FEA
06DF8:  MOVLW  7C
06DFA:  MOVWF  FE9
06DFC:  CALL   4768
....................          
....................          fprintf(CH2,"\"");
06E00:  MOVLW  22
06E02:  MOVLB  B
06E04:  MOVWF  x55
06E06:  MOVLB  0
06E08:  CALL   4702
....................          putc('\n',CH2);
06E0C:  MOVLW  0A
06E0E:  MOVLB  B
06E10:  MOVWF  x55
06E12:  MOVLB  0
06E14:  CALL   4702
....................          delay_ms(50);
06E18:  MOVLW  32
06E1A:  MOVLB  B
06E1C:  MOVWF  x54
06E1E:  MOVLB  0
06E20:  CALL   07DC
....................         
....................         fprintf(CH2,SMS_Massage10);   
06E24:  MOVLW  0A
06E26:  MOVWF  FEA
06E28:  MOVLW  AB
06E2A:  MOVWF  FE9
06E2C:  CALL   4768
....................         putc('\n',CH2);
06E30:  MOVLW  0A
06E32:  MOVLB  B
06E34:  MOVWF  x55
06E36:  MOVLB  0
06E38:  CALL   4702
....................         putc(26,CH2);
06E3C:  MOVLW  1A
06E3E:  MOVLB  B
06E40:  MOVWF  x55
06E42:  MOVLB  0
06E44:  CALL   4702
06E48:  MOVLB  A
....................       }
....................    }
06E4A:  BRA    6EDE
....................    else if(FaultType.B10 == 0)
06E4C:  MOVLB  A
06E4E:  BTFSC  xD2.1
06E50:  BRA    6EDE
....................    {
....................       In2.B10 = 0x00;
06E52:  BCF    xDE.1
....................       Ack.B10 = 0;
06E54:  BCF    xDA.1
....................       Output.B10 = 1;      //Off LED
06E56:  BSF    xCE.1
....................       
....................       SendSMS.B10 =0;// Clear SMS
06E58:  BCF    xE8.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)       //If Buzzer or Both
06E5A:  BTFSC  xD4.1
06E5C:  BRA    6E62
06E5E:  BTFSC  xD6.1
06E60:  BRA    6E84
06E62:  MOVLB  B
06E64:  MOVF   x48,F
06E66:  BTFSC  FD8.2
06E68:  BRA    6E6E
06E6A:  MOVLB  A
06E6C:  BRA    6E84
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06E6E:  MOVLW  01
06E70:  MOVWF  x53
06E72:  MOVLB  0
06E74:  CALL   478C
06E78:  DECFSZ 01,W
06E7A:  BRA    6E7E
06E7C:  BRA    6E82
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06E7E:  BCF    F89.4
06E80:  BCF    F92.4
06E82:  MOVLB  A
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)   //If Bell or Both
06E84:  BTFSS  xD4.1
06E86:  BRA    6E8C
06E88:  BTFSC  xD6.1
06E8A:  BRA    6EAE
06E8C:  MOVLB  B
06E8E:  MOVF   x48,F
06E90:  BTFSC  FD8.2
06E92:  BRA    6E98
06E94:  MOVLB  A
06E96:  BRA    6EAE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06E98:  MOVLW  02
06E9A:  MOVWF  x53
06E9C:  MOVLB  0
06E9E:  CALL   478C
06EA2:  DECFSZ 01,W
06EA4:  BRA    6EA8
06EA6:  BRA    6EAC
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06EA8:  BCF    F89.3
06EAA:  BCF    F92.3
06EAC:  MOVLB  A
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06EAE:  BTFSC  xDD.0
06EB0:  BRA    6EDE
06EB2:  BTFSC  xDD.1
06EB4:  BRA    6EDE
06EB6:  BTFSC  xDD.2
06EB8:  BRA    6EDE
06EBA:  BTFSC  xDD.3
06EBC:  BRA    6EDE
06EBE:  BTFSC  xDD.4
06EC0:  BRA    6EDE
06EC2:  BTFSC  xDD.5
06EC4:  BRA    6EDE
06EC6:  BTFSC  xDD.6
06EC8:  BRA    6EDE
06ECA:  BTFSC  xDD.7
06ECC:  BRA    6EDE
06ECE:  BTFSC  xDE.0
06ED0:  BRA    6EDE
06ED2:  BTFSC  xDE.1
06ED4:  BRA    6EDE
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06ED6:  BCF    F89.3
06ED8:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06EDA:  BCF    F89.4
06EDC:  BCF    F92.4
....................       }
....................    }
06EDE:  MOVLB  0
06EE0:  RETURN 0
....................    
.................... 
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Send_Ouput(void)
.................... {
.................... 
....................    if(T_test == 0x00)
*
0214E:  MOVF   2F,F
02150:  BTFSS  FD8.2
02152:  BRA    2382
....................    {
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
02154:  MOVLB  A
02156:  BTFSS  xCD.0
02158:  BRA    2160
....................            {
....................              bit_clear(Green1_8,0); bit_clear(Red1_8,0);
0215A:  BCF    52.0
0215C:  BCF    4E.0
....................            }
0215E:  BRA    2188
....................            else
....................            {
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
02160:  BTFSS  xE3.0
02162:  BRA    216E
02164:  BTFSC  xE5.0
02166:  BRA    216E
....................              {
....................                bit_set(Red1_8,0); bit_clear(Green1_8,0);
02168:  BSF    4E.0
0216A:  BCF    52.0
....................              }
0216C:  BRA    2188
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
0216E:  BTFSC  xE3.0
02170:  BRA    217C
02172:  BTFSS  xE5.0
02174:  BRA    217C
....................              {
....................                bit_clear(Red1_8,0); bit_set(Green1_8,0); 
02176:  BCF    4E.0
02178:  BSF    52.0
....................              }
0217A:  BRA    2188
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
0217C:  BTFSS  xE3.0
0217E:  BRA    2188
02180:  BTFSS  xE5.0
02182:  BRA    2188
....................              {
....................                bit_set(Red1_8,0); bit_set(Green1_8,0) ; 
02184:  BSF    4E.0
02186:  BSF    52.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
02188:  BTFSS  xCD.1
0218A:  BRA    2192
....................            {
....................              bit_clear(Green1_8,1); bit_clear(Red1_8,1);
0218C:  BCF    52.1
0218E:  BCF    4E.1
....................            }
02190:  BRA    21BA
....................            else
....................            {
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
02192:  BTFSS  xE3.1
02194:  BRA    21A0
02196:  BTFSC  xE5.1
02198:  BRA    21A0
....................              {
....................                bit_set(Red1_8,1); bit_clear(Green1_8,1);
0219A:  BSF    4E.1
0219C:  BCF    52.1
....................              }
0219E:  BRA    21BA
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
021A0:  BTFSC  xE3.1
021A2:  BRA    21AE
021A4:  BTFSS  xE5.1
021A6:  BRA    21AE
....................              {
....................                bit_clear(Red1_8,1); bit_set(Green1_8,1); 
021A8:  BCF    4E.1
021AA:  BSF    52.1
....................              }
021AC:  BRA    21BA
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
021AE:  BTFSS  xE3.1
021B0:  BRA    21BA
021B2:  BTFSS  xE5.1
021B4:  BRA    21BA
....................              {
....................                bit_set(Red1_8,1); bit_set(Green1_8,1) ; 
021B6:  BSF    4E.1
021B8:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
021BA:  BTFSS  xCD.2
021BC:  BRA    21C4
....................            {
....................              bit_clear(Green1_8,2); bit_clear(Red1_8,2);
021BE:  BCF    52.2
021C0:  BCF    4E.2
....................            }
021C2:  BRA    21EC
....................            else
....................            {
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
021C4:  BTFSS  xE3.2
021C6:  BRA    21D2
021C8:  BTFSC  xE5.2
021CA:  BRA    21D2
....................              {
....................                bit_set(Red1_8,2); bit_clear(Green1_8,2);
021CC:  BSF    4E.2
021CE:  BCF    52.2
....................              }
021D0:  BRA    21EC
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
021D2:  BTFSC  xE3.2
021D4:  BRA    21E0
021D6:  BTFSS  xE5.2
021D8:  BRA    21E0
....................              {
....................                bit_clear(Red1_8,2); bit_set(Green1_8,2); 
021DA:  BCF    4E.2
021DC:  BSF    52.2
....................              }
021DE:  BRA    21EC
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
021E0:  BTFSS  xE3.2
021E2:  BRA    21EC
021E4:  BTFSS  xE5.2
021E6:  BRA    21EC
....................              {
....................                bit_set(Red1_8,2); bit_set(Green1_8,2) ; 
021E8:  BSF    4E.2
021EA:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
021EC:  BTFSS  xCD.3
021EE:  BRA    21F6
....................            {
....................              bit_clear(Green1_8,3); bit_clear(Red1_8,3);
021F0:  BCF    52.3
021F2:  BCF    4E.3
....................            }
021F4:  BRA    221E
....................            else
....................            {
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
021F6:  BTFSS  xE3.3
021F8:  BRA    2204
021FA:  BTFSC  xE5.3
021FC:  BRA    2204
....................              {
....................                bit_set(Red1_8,3); bit_clear(Green1_8,3);
021FE:  BSF    4E.3
02200:  BCF    52.3
....................              }
02202:  BRA    221E
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
02204:  BTFSC  xE3.3
02206:  BRA    2212
02208:  BTFSS  xE5.3
0220A:  BRA    2212
....................              {
....................                bit_clear(Red1_8,3); bit_set(Green1_8,3); 
0220C:  BCF    4E.3
0220E:  BSF    52.3
....................              }
02210:  BRA    221E
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
02212:  BTFSS  xE3.3
02214:  BRA    221E
02216:  BTFSS  xE5.3
02218:  BRA    221E
....................              {
....................                bit_set(Red1_8,3); bit_set(Green1_8,3) ; 
0221A:  BSF    4E.3
0221C:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
0221E:  BTFSS  xCD.4
02220:  BRA    2228
....................            {
....................              bit_clear(Green1_8,4); bit_clear(Red1_8,4);
02222:  BCF    52.4
02224:  BCF    4E.4
....................            }
02226:  BRA    2250
....................            else
....................            {
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
02228:  BTFSS  xE3.4
0222A:  BRA    2236
0222C:  BTFSC  xE5.4
0222E:  BRA    2236
....................              {
....................                bit_set(Red1_8,4); bit_clear(Green1_8,4);
02230:  BSF    4E.4
02232:  BCF    52.4
....................              }
02234:  BRA    2250
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
02236:  BTFSC  xE3.4
02238:  BRA    2244
0223A:  BTFSS  xE5.4
0223C:  BRA    2244
....................              {
....................                bit_clear(Red1_8,4); bit_set(Green1_8,4); 
0223E:  BCF    4E.4
02240:  BSF    52.4
....................              }
02242:  BRA    2250
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
02244:  BTFSS  xE3.4
02246:  BRA    2250
02248:  BTFSS  xE5.4
0224A:  BRA    2250
....................              {
....................                bit_set(Red1_8,4); bit_set(Green1_8,4) ; 
0224C:  BSF    4E.4
0224E:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
02250:  BTFSS  xCD.5
02252:  BRA    225A
....................            {
....................              bit_clear(Green1_8,5); bit_clear(Red1_8,5);
02254:  BCF    52.5
02256:  BCF    4E.5
....................            }
02258:  BRA    2282
....................            else
....................            {
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
0225A:  BTFSS  xE3.5
0225C:  BRA    2268
0225E:  BTFSC  xE5.5
02260:  BRA    2268
....................              {
....................                bit_set(Red1_8,5); bit_clear(Green1_8,5);
02262:  BSF    4E.5
02264:  BCF    52.5
....................              }
02266:  BRA    2282
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
02268:  BTFSC  xE3.5
0226A:  BRA    2276
0226C:  BTFSS  xE5.5
0226E:  BRA    2276
....................              {
....................                bit_clear(Red1_8,5); bit_set(Green1_8,5); 
02270:  BCF    4E.5
02272:  BSF    52.5
....................              }
02274:  BRA    2282
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
02276:  BTFSS  xE3.5
02278:  BRA    2282
0227A:  BTFSS  xE5.5
0227C:  BRA    2282
....................              {
....................                bit_set(Red1_8,5); bit_set(Green1_8,5) ; 
0227E:  BSF    4E.5
02280:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
02282:  BTFSS  xCD.6
02284:  BRA    228C
....................            {
....................              bit_clear(Green1_8,6); bit_clear(Red1_8,6);
02286:  BCF    52.6
02288:  BCF    4E.6
....................            }
0228A:  BRA    22B4
....................            else
....................            {
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
0228C:  BTFSS  xE3.6
0228E:  BRA    229A
02290:  BTFSC  xE5.6
02292:  BRA    229A
....................              {
....................                bit_set(Red1_8,6); bit_clear(Green1_8,6);
02294:  BSF    4E.6
02296:  BCF    52.6
....................              }
02298:  BRA    22B4
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
0229A:  BTFSC  xE3.6
0229C:  BRA    22A8
0229E:  BTFSS  xE5.6
022A0:  BRA    22A8
....................              {
....................                bit_clear(Red1_8,6); bit_set(Green1_8,6); 
022A2:  BCF    4E.6
022A4:  BSF    52.6
....................              }
022A6:  BRA    22B4
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
022A8:  BTFSS  xE3.6
022AA:  BRA    22B4
022AC:  BTFSS  xE5.6
022AE:  BRA    22B4
....................              {
....................                bit_set(Red1_8,6); bit_set(Green
022B0:  BSF    4E.6
022B2:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
022B4:  BTFSS  xCD.7
022B6:  BRA    22BE
....................            {
....................              bit_clear(Green1_8,7); bit_clear(Red1_8,7);
022B8:  BCF    52.7
022BA:  BCF    4E.7
....................            }
022BC:  BRA    22E6
....................            else
....................            {
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
022BE:  BTFSS  xE3.7
022C0:  BRA    22CC
022C2:  BTFSC  xE5.7
022C4:  BRA    22CC
....................              {
....................                bit_set(Red1_8,7); bit_clear(Green1_8,7);
022C6:  BSF    4E.7
022C8:  BCF    52.7
....................              }
022CA:  BRA    22E6
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
022CC:  BTFSC  xE3.7
022CE:  BRA    22DA
022D0:  BTFSS  xE5.7
022D2:  BRA    22DA
....................              {
....................                bit_clear(Red1_8,7); bit_set(Green1_8,7); 
022D4:  BCF    4E.7
022D6:  BSF    52.7
....................              }
022D8:  BRA    22E6
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
022DA:  BTFSS  xE3.7
022DC:  BRA    22E6
022DE:  BTFSS  xE5.7
022E0:  BRA    22E6
....................              {
....................                bit_set(Red1_8,7); bit_set(Green1_8,7) ; 
022E2:  BSF    4E.7
022E4:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
022E6:  BTFSS  xCE.0
022E8:  BRA    22F0
....................            {
....................              bit_clear(Green9_10,0); bit_clear(Red9_10,0);
022EA:  BCF    53.0
022EC:  BCF    4F.0
....................            }
022EE:  BRA    2318
....................            else
....................            {
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
022F0:  BTFSS  xE4.0
022F2:  BRA    22FE
022F4:  BTFSC  xE6.0
022F6:  BRA    22FE
....................              {
....................                bit_set(Red9_10,0); bit_clear(Green9_10,0);
022F8:  BSF    4F.0
022FA:  BCF    53.0
....................              }
022FC:  BRA    2318
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
022FE:  BTFSC  xE4.0
02300:  BRA    230C
02302:  BTFSS  xE6.0
02304:  BRA    230C
....................              {
....................                bit_clear(Red9_10,0); bit_set(Green9_10,0); 
02306:  BCF    4F.0
02308:  BSF    53.0
....................              }
0230A:  BRA    2318
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
0230C:  BTFSS  xE4.0
0230E:  BRA    2318
02310:  BTFSS  xE6.0
02312:  BRA    2318
....................              {
....................                bit_set(Red9_10,0); bit_set(Green9_10,0) ; 
02314:  BSF    4F.0
02316:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
02318:  BTFSS  xCE.1
0231A:  BRA    2322
....................            {
....................              bit_clear(Green9_10,1); bit_clear(Red9_10,1);
0231C:  BCF    53.1
0231E:  BCF    4F.1
....................            }
02320:  BRA    234A
....................            else
....................            {
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
02322:  BTFSS  xE4.1
02324:  BRA    2330
02326:  BTFSC  xE6.1
02328:  BRA    2330
....................              {
....................                bit_set(Red9_10,1); bit_clear(Green9_10,1);
0232A:  BSF    4F.1
0232C:  BCF    53.1
....................              }
0232E:  BRA    234A
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
02330:  BTFSC  xE4.1
02332:  BRA    233E
02334:  BTFSS  xE6.1
02336:  BRA    233E
....................              {
....................                bit_clear(Red9_10,1); bit_set(Green9_10,1); 
02338:  BCF    4F.1
0233A:  BSF    53.1
....................              }
0233C:  BRA    234A
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
0233E:  BTFSS  xE4.1
02340:  BRA    234A
02342:  BTFSS  xE6.1
02344:  BRA    234A
....................              {
....................                bit_set(Red9_10,1); bit_set(Green9_10,1) ; 
02346:  BSF    4F.1
02348:  BSF    53.1
....................              }  
....................            }
....................              
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_8);
0234A:  MOVLW  04
0234C:  MOVLB  B
0234E:  MOVWF  x4B
02350:  MOVFF  4E,B4C
02354:  MOVLB  0
02356:  RCALL  2122
....................            IO_OUTPUT_B(IO_DEVICE_2, Red9_10);
02358:  MOVLW  04
0235A:  MOVLB  B
0235C:  MOVWF  x4B
0235E:  MOVFF  4F,B4C
02362:  MOVLB  0
02364:  RCALL  2138
....................                    
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_8);
02366:  MOVLW  06
02368:  MOVLB  B
0236A:  MOVWF  x4B
0236C:  MOVFF  52,B4C
02370:  MOVLB  0
02372:  RCALL  2122
....................            IO_OUTPUT_B(IO_DEVICE_3, Green9_10);                                             
02374:  MOVLW  06
02376:  MOVLB  B
02378:  MOVWF  x4B
0237A:  MOVFF  53,B4C
0237E:  MOVLB  0
02380:  RCALL  2138
....................    }
02382:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 10)
*
046A0:  MOVF   x61,W
046A2:  SUBLW  0A
046A4:  BNZ   46E6
....................    {
....................       Inputt.B1 = ~InputType.B1;
046A6:  MOVLB  A
046A8:  BCF    xCB.0
046AA:  BTFSS  xCF.0
046AC:  BSF    xCB.0
....................       Inputt.B2 = ~InputType.B2;
046AE:  BCF    xCB.1
046B0:  BTFSS  xCF.1
046B2:  BSF    xCB.1
....................       Inputt.B3 = ~InputType.B3;
046B4:  BCF    xCB.2
046B6:  BTFSS  xCF.2
046B8:  BSF    xCB.2
....................       Inputt.B4 = ~InputType.B4;
046BA:  BCF    xCB.3
046BC:  BTFSS  xCF.3
046BE:  BSF    xCB.3
....................       Inputt.B5 = ~InputType.B5;
046C0:  BCF    xCB.4
046C2:  BTFSS  xCF.4
046C4:  BSF    xCB.4
....................       Inputt.B6 = ~InputType.B6;
046C6:  BCF    xCB.5
046C8:  BTFSS  xCF.5
046CA:  BSF    xCB.5
....................       Inputt.B7 = ~InputType.B7;
046CC:  BCF    xCB.6
046CE:  BTFSS  xCF.6
046D0:  BSF    xCB.6
....................       Inputt.B8 = ~InputType.B8;
046D2:  BCF    xCB.7
046D4:  BTFSS  xCF.7
046D6:  BSF    xCB.7
....................       Inputt.B9 = ~InputType.B9;
046D8:  BCF    xCC.0
046DA:  BTFSS  xD0.0
046DC:  BSF    xCC.0
....................       Inputt.B10 = ~InputType.B10;
046DE:  BCF    xCC.1
046E0:  BTFSS  xD0.1
046E2:  BSF    xCC.1
046E4:  MOVLB  0
....................    } 
.................... 
....................    Ack.B1 = 0;
046E6:  MOVLB  A
046E8:  BCF    xD9.0
....................    Ack.B2 = 0;
046EA:  BCF    xD9.1
....................    Ack.B3 = 0;
046EC:  BCF    xD9.2
....................    Ack.B4 = 0;
046EE:  BCF    xD9.3
....................    Ack.B5 = 0;
046F0:  BCF    xD9.4
....................    Ack.B6 = 0;
046F2:  BCF    xD9.5
....................    Ack.B7 = 0;
046F4:  BCF    xD9.6
....................    Ack.B8 = 0;
046F6:  BCF    xD9.7
....................    Ack.B9 = 0;
046F8:  BCF    xDA.0
....................    Ack.B10 = 0;
046FA:  BCF    xDA.1
046FC:  MOVLB  0
046FE:  GOTO   6F46 (RETURN)
.................... 
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
06EE2:  MOVFF  33,B4B
....................    output_temp[1] = output9_16;
06EE6:  MOVFF  34,B4C
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
06EEA:  BSF    F94.2
06EEC:  BTFSC  F82.2
06EEE:  BRA    6EF4
06EF0:  BTFSS  1A.6
06EF2:  BRA    6EF8
06EF4:  BTFSS  1A.4
06EF6:  BRA    6F04
06EF8:  MOVLW  32
06EFA:  MOVLB  B
06EFC:  MOVWF  x54
06EFE:  MOVLB  0
06F00:  CALL   07DC
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
06F04:  BSF    F94.2
06F06:  BTFSC  F82.2
06F08:  BRA    6F0E
06F0A:  BTFSS  1A.6
06F0C:  BRA    6F12
06F0E:  BTFSS  1A.4
06F10:  BRA    6F2E
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
06F12:  BSF    F94.2
06F14:  BTFSC  F82.2
06F16:  BRA    6F1C
06F18:  BTFSS  1A.6
06F1A:  BRA    6F20
06F1C:  BTFSS  1A.4
06F1E:  BRA    6F2C
....................            {
....................              restart_wdt();
06F20:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
06F22:  MOVF   2F,F
06F24:  BNZ   6F2A
06F26:  MOVLW  06
06F28:  MOVWF  2F
....................               Test = 1;
06F2A:  BSF    1A.6
....................              
....................            }
....................        }
06F2C:  BRA    6F3E
....................        else if(input(Ptest) == 1 && Test == 1)
06F2E:  BSF    F94.2
06F30:  BTFSS  F82.2
06F32:  BRA    6F3E
06F34:  BTFSS  1A.6
06F36:  BRA    6F3E
....................        {
....................            T_test = 0x00;
06F38:  CLRF   2F
....................            Test = 0;
06F3A:  BCF    1A.6
....................            Test_fault = 0;
06F3C:  BCF    1A.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
06F3E:  BTFSS  1A.5
06F40:  BRA    6F54
....................        {
....................           ForceAllAlarm();
06F42:  GOTO   46A0
....................           Anal_Function();
06F46:  CALL   4DD4
....................           //Test_fault = 0;
....................           if(Input(Ptest) == 1)
06F4A:  BSF    F94.2
06F4C:  BTFSS  F82.2
06F4E:  BRA    6F52
....................           {
....................             Test_fault = 0;
06F50:  BCF    1A.5
....................           }
....................        }
06F52:  BRA    6F6A
....................        else if(input(Ptest) == 1 && Test == 1)
06F54:  BSF    F94.2
06F56:  BTFSS  F82.2
06F58:  BRA    6F6A
06F5A:  BTFSS  1A.6
06F5C:  BRA    6F6A
....................        {
....................           if(NoOfPoint >= 16)
06F5E:  MOVF   x61,W
06F60:  SUBLW  0F
06F62:  BC    6F64
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
06F64:  CLRF   2F
....................           Test = 0;
06F66:  BCF    1A.6
....................           Test_fault = 0;
06F68:  BCF    1A.5
....................        }
06F6A:  GOTO   76AA (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
043DC:  BSF    F94.0
043DE:  BTFSC  F82.0
043E0:  BRA    43E6
043E2:  BTFSS  1A.7
043E4:  BRA    43EA
043E6:  BTFSS  1A.2
043E8:  BRA    43F6
043EA:  MOVLW  32
043EC:  MOVLB  B
043EE:  MOVWF  x54
043F0:  MOVLB  0
043F2:  CALL   07DC
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
043F6:  BSF    F94.0
043F8:  BTFSC  F82.0
043FA:  BRA    4400
043FC:  BTFSS  1A.7
043FE:  BRA    4404
04400:  BTFSS  1A.2
04402:  BRA    44B8
....................    {
....................             AutoAckFlag = 0;
04404:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
04406:  CLRF   1D
....................       
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
04408:  MOVLB  A
0440A:  BTFSC  xDB.0
0440C:  BRA    4412
0440E:  BTFSS  xDD.0
04410:  BRA    441A
....................            {
....................              Ack.B1 = 1;
04412:  BSF    xD9.0
....................              In.B1 = 0;
04414:  BCF    xDB.0
....................              In2.B1 = 0;      //for auto reset
04416:  BCF    xDD.0
....................              Output.B1 = 0;
04418:  BCF    xCD.0
....................            }
.................... 
....................            if((In.B2 == 1)||(In2.B2 == 1))
0441A:  BTFSC  xDB.1
0441C:  BRA    4422
0441E:  BTFSS  xDD.1
04420:  BRA    442A
....................            {
....................              Ack.B2 = 1;
04422:  BSF    xD9.1
....................              In.B2 = 0;
04424:  BCF    xDB.1
....................              In2.B2 = 0;      //for auto reset
04426:  BCF    xDD.1
....................              Output.B2 = 0;
04428:  BCF    xCD.1
....................            }
.................... 
....................            if((In.B3 == 1)||(In2.B3 == 1))
0442A:  BTFSC  xDB.2
0442C:  BRA    4432
0442E:  BTFSS  xDD.2
04430:  BRA    443A
....................            {
....................              Ack.B3 = 1;
04432:  BSF    xD9.2
....................              In.B3 = 0;
04434:  BCF    xDB.2
....................              In2.B3 = 0;      //for auto reset
04436:  BCF    xDD.2
....................              Output.B3 = 0;
04438:  BCF    xCD.2
....................            }
.................... 
....................            if((In.B4 == 1)||(In2.B4 == 1))
0443A:  BTFSC  xDB.3
0443C:  BRA    4442
0443E:  BTFSS  xDD.3
04440:  BRA    444A
....................            {
....................              Ack.B4 = 1;
04442:  BSF    xD9.3
....................              In.B4 = 0;
04444:  BCF    xDB.3
....................              In2.B4 = 0;      //for auto reset
04446:  BCF    xDD.3
....................              Output.B4 = 0;
04448:  BCF    xCD.3
....................            }
.................... 
....................            if((In.B5 == 1)||(In2.B5 == 1))
0444A:  BTFSC  xDB.4
0444C:  BRA    4452
0444E:  BTFSS  xDD.4
04450:  BRA    445A
....................            {
....................              Ack.B5 = 1;
04452:  BSF    xD9.4
....................              In.B5 = 0;
04454:  BCF    xDB.4
....................              In2.B5 = 0;      //for auto reset
04456:  BCF    xDD.4
....................              Output.B5 = 0;
04458:  BCF    xCD.4
....................            }
.................... 
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
0445A:  BTFSC  xDB.5
0445C:  BRA    4462
0445E:  BTFSS  xDD.5
04460:  BRA    446A
....................            {
....................              Ack.B6 = 1;
04462:  BSF    xD9.5
....................              In.B6 = 0;
04464:  BCF    xDB.5
....................              In2.B6 = 0;      //for auto reset
04466:  BCF    xDD.5
....................              Output.B6 = 0;
04468:  BCF    xCD.5
....................            }
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
0446A:  BTFSC  xDB.6
0446C:  BRA    4472
0446E:  BTFSS  xDD.6
04470:  BRA    447A
....................            {
....................              Ack.B7 = 1;
04472:  BSF    xD9.6
....................              In.B7 = 0;
04474:  BCF    xDB.6
....................              In2.B7 = 0;      //for auto reset
04476:  BCF    xDD.6
....................              Output.B7 = 0;
04478:  BCF    xCD.6
....................            }
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
0447A:  BTFSC  xDB.7
0447C:  BRA    4482
0447E:  BTFSS  xDD.7
04480:  BRA    448A
....................            {
....................              Ack.B8 = 1;
04482:  BSF    xD9.7
....................              In.B8 = 0;
04484:  BCF    xDB.7
....................              In2.B8 = 0;      //for auto reset
04486:  BCF    xDD.7
....................              Output.B8 = 0;
04488:  BCF    xCD.7
....................            }
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
0448A:  BTFSC  xDC.0
0448C:  BRA    4492
0448E:  BTFSS  xDE.0
04490:  BRA    449A
....................            {
....................              Ack.B9 = 1;
04492:  BSF    xDA.0
....................              In.B9 = 0;
04494:  BCF    xDC.0
....................              In2.B9 = 0;      //for auto reset
04496:  BCF    xDE.0
....................              Output.B9 = 0;
04498:  BCF    xCE.0
....................            }
....................            if((In.B10 == 1)||(In2.B10 == 1))
0449A:  BTFSC  xDC.1
0449C:  BRA    44A2
0449E:  BTFSS  xDE.1
044A0:  BRA    44AA
....................            {
....................              Ack.B10 = 1;
044A2:  BSF    xDA.1
....................              In.B10 = 0;
044A4:  BCF    xDC.1
....................              In2.B10 = 0;      //for auto reset
044A6:  BCF    xDE.1
....................              Output.B10 = 0;
044A8:  BCF    xCE.1
....................            }
....................           
....................             Ack_F = 1;
044AA:  BSF    1A.7
....................             output_bit(Pbuzzer,0);   //Buzzer
044AC:  BCF    F89.4
044AE:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
044B0:  BCF    F89.3
044B2:  BCF    F92.3
....................    }
044B4:  BRA    44C6
044B6:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
044B8:  BSF    F94.0
044BA:  BTFSS  F82.0
044BC:  BRA    44C4
044BE:  BTFSS  1A.7
044C0:  BRA    44C4
....................    {
....................       Ack_F = 0;
044C2:  BCF    1A.7
044C4:  MOVLB  A
....................    }
044C6:  MOVLB  0
044C8:  GOTO   76A4 (RETURN)
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
044CC:  BSF    F94.1
044CE:  BTFSC  F82.1
044D0:  BRA    44D6
044D2:  BTFSS  30.0
044D4:  BRA    44DA
044D6:  BTFSS  1A.3
044D8:  BRA    44E6
044DA:  MOVLW  32
044DC:  MOVLB  B
044DE:  MOVWF  x54
044E0:  MOVLB  0
044E2:  CALL   07DC
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
044E6:  BSF    F94.1
044E8:  BTFSC  F82.1
044EA:  BRA    44F0
044EC:  BTFSS  30.0
044EE:  BRA    44F4
044F0:  BTFSS  1A.3
044F2:  BRA    468C
....................     {
....................        AutoResetFlag = 0;
044F4:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
044F6:  MOVLW  00
044F8:  MOVLB  A
044FA:  BTFSC  xCB.0
044FC:  MOVLW  01
044FE:  MOVLB  B
04500:  MOVWF  x4C
04502:  MOVLW  00
04504:  MOVLB  A
04506:  BTFSC  xCF.0
04508:  MOVLW  01
0450A:  MOVLB  B
0450C:  XORWF  x4C,W
0450E:  BNZ   451E
04510:  MOVLB  A
04512:  BTFSS  xDB.0
04514:  BRA    451A
04516:  MOVLB  B
04518:  BRA    451E
0451A:  BSF    xCD.0
0451C:  MOVLB  B
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
0451E:  MOVLW  00
04520:  MOVLB  A
04522:  BTFSC  xCB.1
04524:  MOVLW  01
04526:  MOVLB  B
04528:  MOVWF  x4C
0452A:  MOVLW  00
0452C:  MOVLB  A
0452E:  BTFSC  xCF.1
04530:  MOVLW  01
04532:  MOVLB  B
04534:  XORWF  x4C,W
04536:  BNZ   4546
04538:  MOVLB  A
0453A:  BTFSS  xDB.1
0453C:  BRA    4542
0453E:  MOVLB  B
04540:  BRA    4546
04542:  BSF    xCD.1
04544:  MOVLB  B
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
04546:  MOVLW  00
04548:  MOVLB  A
0454A:  BTFSC  xCB.2
0454C:  MOVLW  01
0454E:  MOVLB  B
04550:  MOVWF  x4C
04552:  MOVLW  00
04554:  MOVLB  A
04556:  BTFSC  xCF.2
04558:  MOVLW  01
0455A:  MOVLB  B
0455C:  XORWF  x4C,W
0455E:  BNZ   456E
04560:  MOVLB  A
04562:  BTFSS  xDB.2
04564:  BRA    456A
04566:  MOVLB  B
04568:  BRA    456E
0456A:  BSF    xCD.2
0456C:  MOVLB  B
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
0456E:  MOVLW  00
04570:  MOVLB  A
04572:  BTFSC  xCB.3
04574:  MOVLW  01
04576:  MOVLB  B
04578:  MOVWF  x4C
0457A:  MOVLW  00
0457C:  MOVLB  A
0457E:  BTFSC  xCF.3
04580:  MOVLW  01
04582:  MOVLB  B
04584:  XORWF  x4C,W
04586:  BNZ   4596
04588:  MOVLB  A
0458A:  BTFSS  xDB.3
0458C:  BRA    4592
0458E:  MOVLB  B
04590:  BRA    4596
04592:  BSF    xCD.3
04594:  MOVLB  B
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
04596:  MOVLW  00
04598:  MOVLB  A
0459A:  BTFSC  xCB.4
0459C:  MOVLW  01
0459E:  MOVLB  B
045A0:  MOVWF  x4C
045A2:  MOVLW  00
045A4:  MOVLB  A
045A6:  BTFSC  xCF.4
045A8:  MOVLW  01
045AA:  MOVLB  B
045AC:  XORWF  x4C,W
045AE:  BNZ   45BE
045B0:  MOVLB  A
045B2:  BTFSS  xDB.4
045B4:  BRA    45BA
045B6:  MOVLB  B
045B8:  BRA    45BE
045BA:  BSF    xCD.4
045BC:  MOVLB  B
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
045BE:  MOVLW  00
045C0:  MOVLB  A
045C2:  BTFSC  xCB.5
045C4:  MOVLW  01
045C6:  MOVLB  B
045C8:  MOVWF  x4C
045CA:  MOVLW  00
045CC:  MOVLB  A
045CE:  BTFSC  xCF.5
045D0:  MOVLW  01
045D2:  MOVLB  B
045D4:  XORWF  x4C,W
045D6:  BNZ   45E6
045D8:  MOVLB  A
045DA:  BTFSS  xDB.5
045DC:  BRA    45E2
045DE:  MOVLB  B
045E0:  BRA    45E6
045E2:  BSF    xCD.5
045E4:  MOVLB  B
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
045E6:  MOVLW  00
045E8:  MOVLB  A
045EA:  BTFSC  xCB.6
045EC:  MOVLW  01
045EE:  MOVLB  B
045F0:  MOVWF  x4C
045F2:  MOVLW  00
045F4:  MOVLB  A
045F6:  BTFSC  xCF.6
045F8:  MOVLW  01
045FA:  MOVLB  B
045FC:  XORWF  x4C,W
045FE:  BNZ   460E
04600:  MOVLB  A
04602:  BTFSS  xDB.6
04604:  BRA    460A
04606:  MOVLB  B
04608:  BRA    460E
0460A:  BSF    xCD.6
0460C:  MOVLB  B
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
0460E:  MOVLW  00
04610:  MOVLB  A
04612:  BTFSC  xCB.7
04614:  MOVLW  01
04616:  MOVLB  B
04618:  MOVWF  x4C
0461A:  MOVLW  00
0461C:  MOVLB  A
0461E:  BTFSC  xCF.7
04620:  MOVLW  01
04622:  MOVLB  B
04624:  XORWF  x4C,W
04626:  BNZ   4636
04628:  MOVLB  A
0462A:  BTFSS  xDB.7
0462C:  BRA    4632
0462E:  MOVLB  B
04630:  BRA    4636
04632:  BSF    xCD.7
04634:  MOVLB  B
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
04636:  MOVLW  00
04638:  MOVLB  A
0463A:  BTFSC  xCC.0
0463C:  MOVLW  01
0463E:  MOVLB  B
04640:  MOVWF  x4C
04642:  MOVLW  00
04644:  MOVLB  A
04646:  BTFSC  xD0.0
04648:  MOVLW  01
0464A:  MOVLB  B
0464C:  XORWF  x4C,W
0464E:  BNZ   465E
04650:  MOVLB  A
04652:  BTFSS  xDC.0
04654:  BRA    465A
04656:  MOVLB  B
04658:  BRA    465E
0465A:  BSF    xCE.0
0465C:  MOVLB  B
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
0465E:  MOVLW  00
04660:  MOVLB  A
04662:  BTFSC  xCC.1
04664:  MOVLW  01
04666:  MOVLB  B
04668:  MOVWF  x4C
0466A:  MOVLW  00
0466C:  MOVLB  A
0466E:  BTFSC  xD0.1
04670:  MOVLW  01
04672:  MOVLB  B
04674:  XORWF  x4C,W
04676:  BNZ   4686
04678:  MOVLB  A
0467A:  BTFSS  xDC.1
0467C:  BRA    4682
0467E:  MOVLB  B
04680:  BRA    4686
04682:  BSF    xCE.1
04684:  MOVLB  B
.................... 
....................        Reset_F = 1;
04686:  BSF    30.0
....................     }
04688:  BRA    469A
0468A:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
0468C:  BSF    F94.1
0468E:  BTFSS  F82.1
04690:  BRA    4698
04692:  BTFSS  30.0
04694:  BRA    4698
....................     {
....................        Reset_F = 0;
04696:  BCF    30.0
04698:  MOVLB  B
....................     }
0469A:  MOVLB  0
0469C:  GOTO   76A8 (RETURN)
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
0478C:  MOVLB  B
0478E:  DECFSZ x53,W
04790:  BRA    4AAA
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
04792:  MOVLW  00
04794:  MOVLB  A
04796:  BTFSC  xDB.0
04798:  MOVLW  01
0479A:  MOVLB  B
0479C:  MOVWF  x56
0479E:  MOVLW  00
047A0:  MOVLB  A
047A2:  BTFSC  xDD.0
047A4:  MOVLW  01
047A6:  MOVLB  B
047A8:  IORWF  x56,W
047AA:  MOVWF  x55
047AC:  MOVLW  00
047AE:  MOVLB  A
047B0:  BTFSS  xD9.0
047B2:  MOVLW  01
047B4:  MOVLB  B
047B6:  ANDWF  x55,F
047B8:  MOVLW  00
047BA:  MOVLB  A
047BC:  BTFSC  xD3.0
047BE:  MOVLW  01
047C0:  MOVLB  B
047C2:  MOVWF  x58
047C4:  MOVLW  00
047C6:  MOVLB  A
047C8:  BTFSC  xD5.0
047CA:  MOVLW  01
047CC:  MOVLB  B
047CE:  IORWF  x58,W
047D0:  ANDWF  x55,W
047D2:  BCF    x54.0
047D4:  BTFSC  FE8.0
047D6:  BSF    x54.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
047D8:  MOVLW  00
047DA:  BTFSC  x54.0
047DC:  MOVLW  01
047DE:  MOVWF  x55
047E0:  MOVLW  00
047E2:  MOVLB  A
047E4:  BTFSC  xDB.1
047E6:  MOVLW  01
047E8:  MOVLB  B
047EA:  MOVWF  x57
047EC:  MOVLW  00
047EE:  MOVLB  A
047F0:  BTFSC  xDD.1
047F2:  MOVLW  01
047F4:  MOVLB  B
047F6:  IORWF  x57,W
047F8:  MOVWF  x56
047FA:  MOVLW  00
047FC:  MOVLB  A
047FE:  BTFSS  xD9.1
04800:  MOVLW  01
04802:  MOVLB  B
04804:  ANDWF  x56,F
04806:  MOVLW  00
04808:  MOVLB  A
0480A:  BTFSC  xD3.1
0480C:  MOVLW  01
0480E:  MOVLB  B
04810:  MOVWF  x59
04812:  MOVLW  00
04814:  MOVLB  A
04816:  BTFSC  xD5.1
04818:  MOVLW  01
0481A:  MOVLB  B
0481C:  IORWF  x59,W
0481E:  ANDWF  x56,W
04820:  IORWF  x55,W
04822:  BCF    x54.0
04824:  BTFSC  FE8.0
04826:  BSF    x54.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
04828:  MOVLW  00
0482A:  BTFSC  x54.0
0482C:  MOVLW  01
0482E:  MOVWF  x55
04830:  MOVLW  00
04832:  MOVLB  A
04834:  BTFSC  xDB.2
04836:  MOVLW  01
04838:  MOVLB  B
0483A:  MOVWF  x57
0483C:  MOVLW  00
0483E:  MOVLB  A
04840:  BTFSC  xDD.2
04842:  MOVLW  01
04844:  MOVLB  B
04846:  IORWF  x57,W
04848:  MOVWF  x56
0484A:  MOVLW  00
0484C:  MOVLB  A
0484E:  BTFSS  xD9.2
04850:  MOVLW  01
04852:  MOVLB  B
04854:  ANDWF  x56,F
04856:  MOVLW  00
04858:  MOVLB  A
0485A:  BTFSC  xD3.2
0485C:  MOVLW  01
0485E:  MOVLB  B
04860:  MOVWF  x59
04862:  MOVLW  00
04864:  MOVLB  A
04866:  BTFSC  xD5.2
04868:  MOVLW  01
0486A:  MOVLB  B
0486C:  IORWF  x59,W
0486E:  ANDWF  x56,W
04870:  IORWF  x55,W
04872:  BCF    x54.0
04874:  BTFSC  FE8.0
04876:  BSF    x54.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
04878:  MOVLW  00
0487A:  BTFSC  x54.0
0487C:  MOVLW  01
0487E:  MOVWF  x55
04880:  MOVLW  00
04882:  MOVLB  A
04884:  BTFSC  xDB.3
04886:  MOVLW  01
04888:  MOVLB  B
0488A:  MOVWF  x57
0488C:  MOVLW  00
0488E:  MOVLB  A
04890:  BTFSC  xDD.3
04892:  MOVLW  01
04894:  MOVLB  B
04896:  IORWF  x57,W
04898:  MOVWF  x56
0489A:  MOVLW  00
0489C:  MOVLB  A
0489E:  BTFSS  xD9.3
048A0:  MOVLW  01
048A2:  MOVLB  B
048A4:  ANDWF  x56,F
048A6:  MOVLW  00
048A8:  MOVLB  A
048AA:  BTFSC  xD3.3
048AC:  MOVLW  01
048AE:  MOVLB  B
048B0:  MOVWF  x59
048B2:  MOVLW  00
048B4:  MOVLB  A
048B6:  BTFSC  xD5.3
048B8:  MOVLW  01
048BA:  MOVLB  B
048BC:  IORWF  x59,W
048BE:  ANDWF  x56,W
048C0:  IORWF  x55,W
048C2:  BCF    x54.0
048C4:  BTFSC  FE8.0
048C6:  BSF    x54.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
048C8:  MOVLW  00
048CA:  BTFSC  x54.0
048CC:  MOVLW  01
048CE:  MOVWF  x55
048D0:  MOVLW  00
048D2:  MOVLB  A
048D4:  BTFSC  xDB.4
048D6:  MOVLW  01
048D8:  MOVLB  B
048DA:  MOVWF  x57
048DC:  MOVLW  00
048DE:  MOVLB  A
048E0:  BTFSC  xDD.4
048E2:  MOVLW  01
048E4:  MOVLB  B
048E6:  IORWF  x57,W
048E8:  MOVWF  x56
048EA:  MOVLW  00
048EC:  MOVLB  A
048EE:  BTFSS  xD9.4
048F0:  MOVLW  01
048F2:  MOVLB  B
048F4:  ANDWF  x56,F
048F6:  MOVLW  00
048F8:  MOVLB  A
048FA:  BTFSC  xD3.4
048FC:  MOVLW  01
048FE:  MOVLB  B
04900:  MOVWF  x59
04902:  MOVLW  00
04904:  MOVLB  A
04906:  BTFSC  xD5.4
04908:  MOVLW  01
0490A:  MOVLB  B
0490C:  IORWF  x59,W
0490E:  ANDWF  x56,W
04910:  IORWF  x55,W
04912:  BCF    x54.0
04914:  BTFSC  FE8.0
04916:  BSF    x54.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
04918:  MOVLW  00
0491A:  BTFSC  x54.0
0491C:  MOVLW  01
0491E:  MOVWF  x55
04920:  MOVLW  00
04922:  MOVLB  A
04924:  BTFSC  xDB.5
04926:  MOVLW  01
04928:  MOVLB  B
0492A:  MOVWF  x57
0492C:  MOVLW  00
0492E:  MOVLB  A
04930:  BTFSC  xDD.5
04932:  MOVLW  01
04934:  MOVLB  B
04936:  IORWF  x57,W
04938:  MOVWF  x56
0493A:  MOVLW  00
0493C:  MOVLB  A
0493E:  BTFSS  xD9.5
04940:  MOVLW  01
04942:  MOVLB  B
04944:  ANDWF  x56,F
04946:  MOVLW  00
04948:  MOVLB  A
0494A:  BTFSC  xD3.5
0494C:  MOVLW  01
0494E:  MOVLB  B
04950:  MOVWF  x59
04952:  MOVLW  00
04954:  MOVLB  A
04956:  BTFSC  xD5.5
04958:  MOVLW  01
0495A:  MOVLB  B
0495C:  IORWF  x59,W
0495E:  ANDWF  x56,W
04960:  IORWF  x55,W
04962:  BCF    x54.0
04964:  BTFSC  FE8.0
04966:  BSF    x54.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
04968:  MOVLW  00
0496A:  BTFSC  x54.0
0496C:  MOVLW  01
0496E:  MOVWF  x55
04970:  MOVLW  00
04972:  MOVLB  A
04974:  BTFSC  xDB.6
04976:  MOVLW  01
04978:  MOVLB  B
0497A:  MOVWF  x57
0497C:  MOVLW  00
0497E:  MOVLB  A
04980:  BTFSC  xDD.6
04982:  MOVLW  01
04984:  MOVLB  B
04986:  IORWF  x57,W
04988:  MOVWF  x56
0498A:  MOVLW  00
0498C:  MOVLB  A
0498E:  BTFSS  xD9.6
04990:  MOVLW  01
04992:  MOVLB  B
04994:  ANDWF  x56,F
04996:  MOVLW  00
04998:  MOVLB  A
0499A:  BTFSC  xD3.6
0499C:  MOVLW  01
0499E:  MOVLB  B
049A0:  MOVWF  x59
049A2:  MOVLW  00
049A4:  MOVLB  A
049A6:  BTFSC  xD5.6
049A8:  MOVLW  01
049AA:  MOVLB  B
049AC:  IORWF  x59,W
049AE:  ANDWF  x56,W
049B0:  IORWF  x55,W
049B2:  BCF    x54.0
049B4:  BTFSC  FE8.0
049B6:  BSF    x54.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
049B8:  MOVLW  00
049BA:  BTFSC  x54.0
049BC:  MOVLW  01
049BE:  MOVWF  x55
049C0:  MOVLW  00
049C2:  MOVLB  A
049C4:  BTFSC  xDB.7
049C6:  MOVLW  01
049C8:  MOVLB  B
049CA:  MOVWF  x57
049CC:  MOVLW  00
049CE:  MOVLB  A
049D0:  BTFSC  xDD.7
049D2:  MOVLW  01
049D4:  MOVLB  B
049D6:  IORWF  x57,W
049D8:  MOVWF  x56
049DA:  MOVLW  00
049DC:  MOVLB  A
049DE:  BTFSS  xD9.7
049E0:  MOVLW  01
049E2:  MOVLB  B
049E4:  ANDWF  x56,F
049E6:  MOVLW  00
049E8:  MOVLB  A
049EA:  BTFSC  xD3.7
049EC:  MOVLW  01
049EE:  MOVLB  B
049F0:  MOVWF  x59
049F2:  MOVLW  00
049F4:  MOVLB  A
049F6:  BTFSC  xD5.7
049F8:  MOVLW  01
049FA:  MOVLB  B
049FC:  IORWF  x59,W
049FE:  ANDWF  x56,W
04A00:  IORWF  x55,W
04A02:  BCF    x54.0
04A04:  BTFSC  FE8.0
04A06:  BSF    x54.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
04A08:  MOVLW  00
04A0A:  BTFSC  x54.0
04A0C:  MOVLW  01
04A0E:  MOVWF  x55
04A10:  MOVLW  00
04A12:  MOVLB  A
04A14:  BTFSC  xDC.0
04A16:  MOVLW  01
04A18:  MOVLB  B
04A1A:  MOVWF  x57
04A1C:  MOVLW  00
04A1E:  MOVLB  A
04A20:  BTFSC  xDE.0
04A22:  MOVLW  01
04A24:  MOVLB  B
04A26:  IORWF  x57,W
04A28:  MOVWF  x56
04A2A:  MOVLW  00
04A2C:  MOVLB  A
04A2E:  BTFSS  xDA.0
04A30:  MOVLW  01
04A32:  MOVLB  B
04A34:  ANDWF  x56,F
04A36:  MOVLW  00
04A38:  MOVLB  A
04A3A:  BTFSC  xD4.0
04A3C:  MOVLW  01
04A3E:  MOVLB  B
04A40:  MOVWF  x59
04A42:  MOVLW  00
04A44:  MOVLB  A
04A46:  BTFSC  xD6.0
04A48:  MOVLW  01
04A4A:  MOVLB  B
04A4C:  IORWF  x59,W
04A4E:  ANDWF  x56,W
04A50:  IORWF  x55,W
04A52:  BCF    x54.0
04A54:  BTFSC  FE8.0
04A56:  BSF    x54.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
04A58:  MOVLW  00
04A5A:  BTFSC  x54.0
04A5C:  MOVLW  01
04A5E:  MOVWF  x55
04A60:  MOVLW  00
04A62:  MOVLB  A
04A64:  BTFSC  xDC.1
04A66:  MOVLW  01
04A68:  MOVLB  B
04A6A:  MOVWF  x57
04A6C:  MOVLW  00
04A6E:  MOVLB  A
04A70:  BTFSC  xDE.1
04A72:  MOVLW  01
04A74:  MOVLB  B
04A76:  IORWF  x57,W
04A78:  MOVWF  x56
04A7A:  MOVLW  00
04A7C:  MOVLB  A
04A7E:  BTFSS  xDA.1
04A80:  MOVLW  01
04A82:  MOVLB  B
04A84:  ANDWF  x56,F
04A86:  MOVLW  00
04A88:  MOVLB  A
04A8A:  BTFSC  xD4.1
04A8C:  MOVLW  01
04A8E:  MOVLB  B
04A90:  MOVWF  x59
04A92:  MOVLW  00
04A94:  MOVLB  A
04A96:  BTFSC  xD6.1
04A98:  MOVLW  01
04A9A:  MOVLB  B
04A9C:  IORWF  x59,W
04A9E:  ANDWF  x56,W
04AA0:  IORWF  x55,W
04AA2:  BCF    x54.0
04AA4:  BTFSC  FE8.0
04AA6:  BSF    x54.0
.................... 
....................    }
04AA8:  BRA    4DC8
....................    else if(DatType == 0x02)             //Bell
04AAA:  MOVF   x53,W
04AAC:  SUBLW  02
04AAE:  BTFSS  FD8.2
04AB0:  BRA    4DC8
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
04AB2:  MOVLW  00
04AB4:  MOVLB  A
04AB6:  BTFSC  xDB.0
04AB8:  MOVLW  01
04ABA:  MOVLB  B
04ABC:  MOVWF  x56
04ABE:  MOVLW  00
04AC0:  MOVLB  A
04AC2:  BTFSC  xDD.0
04AC4:  MOVLW  01
04AC6:  MOVLB  B
04AC8:  IORWF  x56,W
04ACA:  MOVWF  x55
04ACC:  MOVLW  00
04ACE:  MOVLB  A
04AD0:  BTFSS  xD9.0
04AD2:  MOVLW  01
04AD4:  MOVLB  B
04AD6:  ANDWF  x55,F
04AD8:  MOVLW  00
04ADA:  MOVLB  A
04ADC:  BTFSS  xD3.0
04ADE:  MOVLW  01
04AE0:  MOVLB  B
04AE2:  MOVWF  x58
04AE4:  MOVLW  00
04AE6:  MOVLB  A
04AE8:  BTFSC  xD5.0
04AEA:  MOVLW  01
04AEC:  MOVLB  B
04AEE:  IORWF  x58,W
04AF0:  ANDWF  x55,W
04AF2:  BCF    x54.0
04AF4:  BTFSC  FE8.0
04AF6:  BSF    x54.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
04AF8:  MOVLW  00
04AFA:  BTFSC  x54.0
04AFC:  MOVLW  01
04AFE:  MOVWF  x55
04B00:  MOVLW  00
04B02:  MOVLB  A
04B04:  BTFSC  xDB.1
04B06:  MOVLW  01
04B08:  MOVLB  B
04B0A:  MOVWF  x57
04B0C:  MOVLW  00
04B0E:  MOVLB  A
04B10:  BTFSC  xDD.1
04B12:  MOVLW  01
04B14:  MOVLB  B
04B16:  IORWF  x57,W
04B18:  MOVWF  x56
04B1A:  MOVLW  00
04B1C:  MOVLB  A
04B1E:  BTFSS  xD9.1
04B20:  MOVLW  01
04B22:  MOVLB  B
04B24:  ANDWF  x56,F
04B26:  MOVLW  00
04B28:  MOVLB  A
04B2A:  BTFSS  xD3.1
04B2C:  MOVLW  01
04B2E:  MOVLB  B
04B30:  MOVWF  x59
04B32:  MOVLW  00
04B34:  MOVLB  A
04B36:  BTFSC  xD5.1
04B38:  MOVLW  01
04B3A:  MOVLB  B
04B3C:  IORWF  x59,W
04B3E:  ANDWF  x56,W
04B40:  IORWF  x55,W
04B42:  BCF    x54.0
04B44:  BTFSC  FE8.0
04B46:  BSF    x54.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
04B48:  MOVLW  00
04B4A:  BTFSC  x54.0
04B4C:  MOVLW  01
04B4E:  MOVWF  x55
04B50:  MOVLW  00
04B52:  MOVLB  A
04B54:  BTFSC  xDB.2
04B56:  MOVLW  01
04B58:  MOVLB  B
04B5A:  MOVWF  x57
04B5C:  MOVLW  00
04B5E:  MOVLB  A
04B60:  BTFSC  xDD.2
04B62:  MOVLW  01
04B64:  MOVLB  B
04B66:  IORWF  x57,W
04B68:  MOVWF  x56
04B6A:  MOVLW  00
04B6C:  MOVLB  A
04B6E:  BTFSS  xD9.2
04B70:  MOVLW  01
04B72:  MOVLB  B
04B74:  ANDWF  x56,F
04B76:  MOVLW  00
04B78:  MOVLB  A
04B7A:  BTFSS  xD3.2
04B7C:  MOVLW  01
04B7E:  MOVLB  B
04B80:  MOVWF  x59
04B82:  MOVLW  00
04B84:  MOVLB  A
04B86:  BTFSC  xD5.2
04B88:  MOVLW  01
04B8A:  MOVLB  B
04B8C:  IORWF  x59,W
04B8E:  ANDWF  x56,W
04B90:  IORWF  x55,W
04B92:  BCF    x54.0
04B94:  BTFSC  FE8.0
04B96:  BSF    x54.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
04B98:  MOVLW  00
04B9A:  BTFSC  x54.0
04B9C:  MOVLW  01
04B9E:  MOVWF  x55
04BA0:  MOVLW  00
04BA2:  MOVLB  A
04BA4:  BTFSC  xDB.3
04BA6:  MOVLW  01
04BA8:  MOVLB  B
04BAA:  MOVWF  x57
04BAC:  MOVLW  00
04BAE:  MOVLB  A
04BB0:  BTFSC  xDD.3
04BB2:  MOVLW  01
04BB4:  MOVLB  B
04BB6:  IORWF  x57,W
04BB8:  MOVWF  x56
04BBA:  MOVLW  00
04BBC:  MOVLB  A
04BBE:  BTFSS  xD9.3
04BC0:  MOVLW  01
04BC2:  MOVLB  B
04BC4:  ANDWF  x56,F
04BC6:  MOVLW  00
04BC8:  MOVLB  A
04BCA:  BTFSS  xD3.3
04BCC:  MOVLW  01
04BCE:  MOVLB  B
04BD0:  MOVWF  x59
04BD2:  MOVLW  00
04BD4:  MOVLB  A
04BD6:  BTFSC  xD5.3
04BD8:  MOVLW  01
04BDA:  MOVLB  B
04BDC:  IORWF  x59,W
04BDE:  ANDWF  x56,W
04BE0:  IORWF  x55,W
04BE2:  BCF    x54.0
04BE4:  BTFSC  FE8.0
04BE6:  BSF    x54.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
04BE8:  MOVLW  00
04BEA:  BTFSC  x54.0
04BEC:  MOVLW  01
04BEE:  MOVWF  x55
04BF0:  MOVLW  00
04BF2:  MOVLB  A
04BF4:  BTFSC  xDB.4
04BF6:  MOVLW  01
04BF8:  MOVLB  B
04BFA:  MOVWF  x57
04BFC:  MOVLW  00
04BFE:  MOVLB  A
04C00:  BTFSC  xDD.4
04C02:  MOVLW  01
04C04:  MOVLB  B
04C06:  IORWF  x57,W
04C08:  MOVWF  x56
04C0A:  MOVLW  00
04C0C:  MOVLB  A
04C0E:  BTFSS  xD9.4
04C10:  MOVLW  01
04C12:  MOVLB  B
04C14:  ANDWF  x56,F
04C16:  MOVLW  00
04C18:  MOVLB  A
04C1A:  BTFSS  xD3.4
04C1C:  MOVLW  01
04C1E:  MOVLB  B
04C20:  MOVWF  x59
04C22:  MOVLW  00
04C24:  MOVLB  A
04C26:  BTFSC  xD5.4
04C28:  MOVLW  01
04C2A:  MOVLB  B
04C2C:  IORWF  x59,W
04C2E:  ANDWF  x56,W
04C30:  IORWF  x55,W
04C32:  BCF    x54.0
04C34:  BTFSC  FE8.0
04C36:  BSF    x54.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
04C38:  MOVLW  00
04C3A:  BTFSC  x54.0
04C3C:  MOVLW  01
04C3E:  MOVWF  x55
04C40:  MOVLW  00
04C42:  MOVLB  A
04C44:  BTFSC  xDB.5
04C46:  MOVLW  01
04C48:  MOVLB  B
04C4A:  MOVWF  x57
04C4C:  MOVLW  00
04C4E:  MOVLB  A
04C50:  BTFSC  xDD.5
04C52:  MOVLW  01
04C54:  MOVLB  B
04C56:  IORWF  x57,W
04C58:  MOVWF  x56
04C5A:  MOVLW  00
04C5C:  MOVLB  A
04C5E:  BTFSS  xD9.5
04C60:  MOVLW  01
04C62:  MOVLB  B
04C64:  ANDWF  x56,F
04C66:  MOVLW  00
04C68:  MOVLB  A
04C6A:  BTFSS  xD3.5
04C6C:  MOVLW  01
04C6E:  MOVLB  B
04C70:  MOVWF  x59
04C72:  MOVLW  00
04C74:  MOVLB  A
04C76:  BTFSC  xD5.5
04C78:  MOVLW  01
04C7A:  MOVLB  B
04C7C:  IORWF  x59,W
04C7E:  ANDWF  x56,W
04C80:  IORWF  x55,W
04C82:  BCF    x54.0
04C84:  BTFSC  FE8.0
04C86:  BSF    x54.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
04C88:  MOVLW  00
04C8A:  BTFSC  x54.0
04C8C:  MOVLW  01
04C8E:  MOVWF  x55
04C90:  MOVLW  00
04C92:  MOVLB  A
04C94:  BTFSC  xDB.6
04C96:  MOVLW  01
04C98:  MOVLB  B
04C9A:  MOVWF  x57
04C9C:  MOVLW  00
04C9E:  MOVLB  A
04CA0:  BTFSC  xDD.6
04CA2:  MOVLW  01
04CA4:  MOVLB  B
04CA6:  IORWF  x57,W
04CA8:  MOVWF  x56
04CAA:  MOVLW  00
04CAC:  MOVLB  A
04CAE:  BTFSS  xD9.6
04CB0:  MOVLW  01
04CB2:  MOVLB  B
04CB4:  ANDWF  x56,F
04CB6:  MOVLW  00
04CB8:  MOVLB  A
04CBA:  BTFSS  xD3.6
04CBC:  MOVLW  01
04CBE:  MOVLB  B
04CC0:  MOVWF  x59
04CC2:  MOVLW  00
04CC4:  MOVLB  A
04CC6:  BTFSC  xD5.6
04CC8:  MOVLW  01
04CCA:  MOVLB  B
04CCC:  IORWF  x59,W
04CCE:  ANDWF  x56,W
04CD0:  IORWF  x55,W
04CD2:  BCF    x54.0
04CD4:  BTFSC  FE8.0
04CD6:  BSF    x54.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
04CD8:  MOVLW  00
04CDA:  BTFSC  x54.0
04CDC:  MOVLW  01
04CDE:  MOVWF  x55
04CE0:  MOVLW  00
04CE2:  MOVLB  A
04CE4:  BTFSC  xDB.7
04CE6:  MOVLW  01
04CE8:  MOVLB  B
04CEA:  MOVWF  x57
04CEC:  MOVLW  00
04CEE:  MOVLB  A
04CF0:  BTFSC  xDD.7
04CF2:  MOVLW  01
04CF4:  MOVLB  B
04CF6:  IORWF  x57,W
04CF8:  MOVWF  x56
04CFA:  MOVLW  00
04CFC:  MOVLB  A
04CFE:  BTFSS  xD9.7
04D00:  MOVLW  01
04D02:  MOVLB  B
04D04:  ANDWF  x56,F
04D06:  MOVLW  00
04D08:  MOVLB  A
04D0A:  BTFSS  xD3.7
04D0C:  MOVLW  01
04D0E:  MOVLB  B
04D10:  MOVWF  x59
04D12:  MOVLW  00
04D14:  MOVLB  A
04D16:  BTFSC  xD5.7
04D18:  MOVLW  01
04D1A:  MOVLB  B
04D1C:  IORWF  x59,W
04D1E:  ANDWF  x56,W
04D20:  IORWF  x55,W
04D22:  BCF    x54.0
04D24:  BTFSC  FE8.0
04D26:  BSF    x54.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
04D28:  MOVLW  00
04D2A:  BTFSC  x54.0
04D2C:  MOVLW  01
04D2E:  MOVWF  x55
04D30:  MOVLW  00
04D32:  MOVLB  A
04D34:  BTFSC  xDC.0
04D36:  MOVLW  01
04D38:  MOVLB  B
04D3A:  MOVWF  x57
04D3C:  MOVLW  00
04D3E:  MOVLB  A
04D40:  BTFSC  xDE.0
04D42:  MOVLW  01
04D44:  MOVLB  B
04D46:  IORWF  x57,W
04D48:  MOVWF  x56
04D4A:  MOVLW  00
04D4C:  MOVLB  A
04D4E:  BTFSS  xDA.0
04D50:  MOVLW  01
04D52:  MOVLB  B
04D54:  ANDWF  x56,F
04D56:  MOVLW  00
04D58:  MOVLB  A
04D5A:  BTFSS  xD4.0
04D5C:  MOVLW  01
04D5E:  MOVLB  B
04D60:  MOVWF  x59
04D62:  MOVLW  00
04D64:  MOVLB  A
04D66:  BTFSC  xD6.0
04D68:  MOVLW  01
04D6A:  MOVLB  B
04D6C:  IORWF  x59,W
04D6E:  ANDWF  x56,W
04D70:  IORWF  x55,W
04D72:  BCF    x54.0
04D74:  BTFSC  FE8.0
04D76:  BSF    x54.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
04D78:  MOVLW  00
04D7A:  BTFSC  x54.0
04D7C:  MOVLW  01
04D7E:  MOVWF  x55
04D80:  MOVLW  00
04D82:  MOVLB  A
04D84:  BTFSC  xDC.1
04D86:  MOVLW  01
04D88:  MOVLB  B
04D8A:  MOVWF  x57
04D8C:  MOVLW  00
04D8E:  MOVLB  A
04D90:  BTFSC  xDE.1
04D92:  MOVLW  01
04D94:  MOVLB  B
04D96:  IORWF  x57,W
04D98:  MOVWF  x56
04D9A:  MOVLW  00
04D9C:  MOVLB  A
04D9E:  BTFSS  xDA.1
04DA0:  MOVLW  01
04DA2:  MOVLB  B
04DA4:  ANDWF  x56,F
04DA6:  MOVLW  00
04DA8:  MOVLB  A
04DAA:  BTFSS  xD4.1
04DAC:  MOVLW  01
04DAE:  MOVLB  B
04DB0:  MOVWF  x59
04DB2:  MOVLW  00
04DB4:  MOVLB  A
04DB6:  BTFSC  xD6.1
04DB8:  MOVLW  01
04DBA:  MOVLB  B
04DBC:  IORWF  x59,W
04DBE:  ANDWF  x56,W
04DC0:  IORWF  x55,W
04DC2:  BCF    x54.0
04DC4:  BTFSC  FE8.0
04DC6:  BSF    x54.0
.................... 
....................    }
....................    return(check);
04DC8:  MOVLW  00
04DCA:  BTFSC  x54.0
04DCC:  MOVLW  01
04DCE:  MOVWF  01
04DD0:  MOVLB  0
04DD2:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void main()
*
07080:  CLRF   FF8
07082:  BCF    FD0.7
07084:  BSF    07.7
07086:  MOVLW  70
07088:  MOVWF  FD3
0708A:  BCF    F9B.6
0708C:  BCF    F9B.7
0708E:  BSF    FB8.3
07090:  MOVLW  A0
07092:  MOVWF  FAF
07094:  MOVLW  01
07096:  MOVWF  FB0
07098:  MOVLW  A6
0709A:  MOVWF  FAC
0709C:  MOVLW  90
0709E:  MOVWF  FAB
070A0:  BCF    F93.0
070A2:  BSF    F8A.0
070A4:  CLRF   19
070A6:  BCF    1A.0
070A8:  MOVLW  19
070AA:  MOVWF  1B
070AC:  BCF    1A.1
070AE:  MOVLW  64
070B0:  MOVWF  1C
070B2:  CLRF   1D
070B4:  BCF    1A.2
070B6:  BCF    1A.3
070B8:  BCF    1A.4
070BA:  CLRF   2E
070BC:  BCF    1A.5
070BE:  CLRF   2F
070C0:  BCF    1A.6
070C2:  BCF    1A.7
070C4:  BCF    30.0
070C6:  BCF    30.1
070C8:  BCF    30.2
070CA:  BCF    30.3
070CC:  CLRF   31
070CE:  BCF    30.4
070D0:  MOVLW  11
070D2:  MOVWF  x63
070D4:  MOVLW  12
070D6:  MOVWF  x64
070D8:  MOVLW  13
070DA:  MOVWF  x65
070DC:  MOVLW  14
070DE:  MOVWF  x66
070E0:  MOVLW  16
070E2:  MOVWF  x67
070E4:  MOVLW  17
070E6:  MOVWF  x68
070E8:  MOVLW  19
070EA:  MOVWF  x69
070EC:  MOVLW  20
070EE:  MOVWF  x6A
070F0:  BCF    30.5
070F2:  CLRF   x6D
070F4:  MOVLW  01
070F6:  MOVLB  5
070F8:  MOVWF  x71
070FA:  MOVLW  F4
070FC:  MOVWF  x70
070FE:  CLRF   x73
07100:  CLRF   x72
07102:  CLRF   x75
07104:  CLRF   x74
07106:  CLRF   x76
07108:  MOVLB  9
0710A:  CLRF   x7A
0710C:  CLRF   x7B
0710E:  MOVLB  B
07110:  CLRF   x47
07112:  CLRF   x46
07114:  MOVLB  F
07116:  CLRF   x38
07118:  CLRF   x39
0711A:  CLRF   x3A
0711C:  CLRF   F77
0711E:  CLRF   F78
07120:  CLRF   F79
07122:  MOVLB  B
07124:  CLRF   x48
.................... {
....................    
....................    
....................    delay_ms(50);
07126:  MOVLW  32
07128:  MOVWF  x54
0712A:  MOVLB  0
0712C:  CALL   07DC
....................    output_bit(Pled,0);   //power on watchdog signal
07130:  BCF    F8A.5
07132:  BCF    F93.5
.................... 
....................    //jj
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD);
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0);
....................    
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
07134:  MOVLW  80
07136:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
07138:  MOVLW  78
0713A:  IORLW  06
0713C:  MOVWF  FBA
0713E:  MOVLW  C4
07140:  MOVWF  FBB
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);    //104ms
07142:  MOVLW  37
07144:  MOVWF  FCD
07146:  CLRF   FCC
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................   // enable_interrupts(INT_TIMER1);
....................    enable_interrupts(INT_TIMER2);
07148:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0714A:  BSF    F9D.5
....................    
.................... 
....................    
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1
0714C:  BCF    FC6.5
0714E:  BCF    F94.5
07150:  BSF    F94.4
07152:  BCF    F94.3
07154:  MOVLW  20
07156:  MOVWF  FC6
07158:  MOVLW  40
0715A:  MOVWF  FC7
....................  
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0715C:  GOTO   083E
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
07160:  MOVLB  B
07162:  CLRF   x4B
07164:  SETF   x4C
07166:  MOVLB  0
07168:  CALL   08D4
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0716C:  MOVLB  B
0716E:  CLRF   x4B
07170:  SETF   x4C
07172:  MOVLB  0
07174:  CALL   08E6
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
07178:  MOVLW  02
0717A:  MOVLB  B
0717C:  MOVWF  x4B
0717E:  SETF   x4C
07180:  MOVLB  0
07182:  CALL   08D4
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
07186:  MOVLW  02
07188:  MOVLB  B
0718A:  MOVWF  x4B
0718C:  SETF   x4C
0718E:  MOVLB  0
07190:  CALL   08E6
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
07194:  MOVLB  B
07196:  CLRF   x4D
07198:  MOVLW  06
0719A:  MOVWF  x4E
0719C:  SETF   x4F
0719E:  MOVLB  0
071A0:  CALL   080C
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
071A4:  MOVLB  B
071A6:  CLRF   x4D
071A8:  MOVLW  16
071AA:  MOVWF  x4E
071AC:  SETF   x4F
071AE:  MOVLB  0
071B0:  CALL   080C
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
071B4:  MOVLW  02
071B6:  MOVLB  B
071B8:  MOVWF  x4D
071BA:  MOVLW  06
071BC:  MOVWF  x4E
071BE:  SETF   x4F
071C0:  MOVLB  0
071C2:  CALL   080C
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
071C6:  MOVLW  02
071C8:  MOVLB  B
071CA:  MOVWF  x4D
071CC:  MOVLW  16
071CE:  MOVWF  x4E
071D0:  SETF   x4F
071D2:  MOVLB  0
071D4:  CALL   080C
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
071D8:  MOVLW  04
071DA:  MOVLB  B
071DC:  MOVWF  x4B
071DE:  CLRF   x4C
071E0:  MOVLB  0
071E2:  CALL   08D4
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
071E6:  MOVLW  04
071E8:  MOVLB  B
071EA:  MOVWF  x4B
071EC:  CLRF   x4C
071EE:  MOVLB  0
071F0:  CALL   08E6
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
071F4:  MOVLW  06
071F6:  MOVLB  B
071F8:  MOVWF  x4B
071FA:  CLRF   x4C
071FC:  MOVLB  0
071FE:  CALL   08D4
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
07202:  MOVLW  06
07204:  MOVLB  B
07206:  MOVWF  x4B
07208:  CLRF   x4C
0720A:  MOVLB  0
0720C:  CALL   08E6
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
07210:  MOVLW  08
07212:  MOVLB  B
07214:  MOVWF  x4B
07216:  CLRF   x4C
07218:  MOVLB  0
0721A:  CALL   08D4
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0721E:  MOVLW  08
07220:  MOVLB  B
07222:  MOVWF  x4B
07224:  CLRF   x4C
07226:  MOVLB  0
07228:  CALL   08E6
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0722C:  MOVLW  0A
0722E:  MOVLB  B
07230:  MOVWF  x4B
07232:  CLRF   x4C
07234:  MOVLB  0
07236:  CALL   08D4
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0723A:  MOVLW  0A
0723C:  MOVLB  B
0723E:  MOVWF  x4B
07240:  CLRF   x4C
07242:  MOVLB  0
07244:  CALL   08E6
....................    
....................    FlashingFlag = 1;
07248:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
0724A:  MOVFF  63,6B
....................    Address = 1;
0724E:  MOVLW  01
07250:  MOVWF  x6C
.................... 
....................    Output.B1 = 1;
07252:  MOVLB  A
07254:  BSF    xCD.0
....................    Output.B2 = 1;
07256:  BSF    xCD.1
....................    Output.B3 = 1;
07258:  BSF    xCD.2
....................    Output.B4 = 1;
0725A:  BSF    xCD.3
....................    Output.B5 = 1;
0725C:  BSF    xCD.4
....................    Output.B6 = 1;
0725E:  BSF    xCD.5
....................    Output.B7 = 1;
07260:  BSF    xCD.6
....................    Output.B8 = 1;
07262:  BSF    xCD.7
....................    Output.B9 = 1;
07264:  BSF    xCE.0
....................    Output.B10 = 1;
07266:  BSF    xCE.1
.................... 
....................    ////////////////////
....................    In.B1 = 0;
07268:  BCF    xDB.0
....................    In.B2 = 0;
0726A:  BCF    xDB.1
....................    In.B3 = 0;
0726C:  BCF    xDB.2
....................    In.B4 = 0;
0726E:  BCF    xDB.3
....................    In.B5 = 0;
07270:  BCF    xDB.4
....................    In.B6 = 0;
07272:  BCF    xDB.5
....................    In.B7 = 0;
07274:  BCF    xDB.6
....................    In.B8 = 0;
07276:  BCF    xDB.7
....................    In.B9 = 0;
07278:  BCF    xDC.0
....................    In.B10 = 0;
0727A:  BCF    xDC.1
.................... 
....................    ////////////////////////
....................    Ack.B1 = 0;
0727C:  BCF    xD9.0
....................    Ack.B2 = 0;
0727E:  BCF    xD9.1
....................    Ack.B3 = 0;
07280:  BCF    xD9.2
....................    Ack.B4 = 0;
07282:  BCF    xD9.3
....................    Ack.B5 = 0;
07284:  BCF    xD9.4
....................    Ack.B6 = 0;
07286:  BCF    xD9.5
....................    Ack.B7 = 0;
07288:  BCF    xD9.6
....................    Ack.B8 = 0;
0728A:  BCF    xD9.7
....................    Ack.B9 = 0;
0728C:  BCF    xDA.0
....................    Ack.B10 = 0;
0728E:  BCF    xDA.1
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
07290:  MOVFF  FF2,B4B
07294:  BCF    FF2.7
07296:  CLRF   FAA
07298:  CLRF   FA9
0729A:  BCF    FA6.6
0729C:  BCF    FA6.7
0729E:  BSF    FA6.0
072A0:  MOVF   FA8,W
072A2:  MOVLB  B
072A4:  BTFSC  x4B.7
072A6:  BSF    FF2.7
072A8:  SUBLW  0F
072AA:  BNZ   72B6
....................    {
....................       Read_Config();
072AC:  MOVLB  0
072AE:  CALL   08FA
....................    }
072B2:  BRA    74EE
072B4:  MOVLB  B
....................    else
....................    {
....................       FlashingRateTime = 25;
072B6:  MOVLW  19
072B8:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
072BA:  MOVLW  F0
072BC:  MOVWF  5E
....................       Address = 0x01;
072BE:  MOVLW  01
072C0:  MOVLB  0
072C2:  MOVWF  x6C
.................... 
....................       AutoAckTime = 5;
072C4:  MOVLW  05
072C6:  MOVWF  5F
....................       FlashingRate = 25;
072C8:  MOVLW  19
072CA:  MOVWF  x60
....................       NoOfPoint = 10;
072CC:  MOVLW  0A
072CE:  MOVWF  x61
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
072D0:  MOVLB  B
072D2:  CLRF   x49
072D4:  MOVF   x49,W
072D6:  MOVLB  0
072D8:  SUBWF  x61,W
072DA:  BNC   72FA
....................       {
....................          FaultDelayTime[i] = 0;
072DC:  BCF    FD8.0
072DE:  MOVLB  B
072E0:  RLCF   x49,W
072E2:  CLRF   03
072E4:  ADDLW  19
072E6:  MOVWF  FE9
072E8:  MOVLW  0B
072EA:  ADDWFC 03,W
072EC:  MOVWF  FEA
072EE:  CLRF   FEC
072F0:  MOVF   FED,F
072F2:  CLRF   FEF
072F4:  INCF   x49,F
072F6:  BRA    72D4
072F8:  MOVLB  0
....................       }
.................... 
.................... 
....................       InputType.B1 = 1;
072FA:  MOVLB  A
072FC:  BSF    xCF.0
....................       InputType.B2 = 1;
072FE:  BSF    xCF.1
....................       InputType.B3 = 1;
07300:  BSF    xCF.2
....................       InputType.B4 = 1;
07302:  BSF    xCF.3
....................       InputType.B5 = 1;
07304:  BSF    xCF.4
....................       InputType.B6 = 1;
07306:  BSF    xCF.5
....................       InputType.B7 = 1;
07308:  BSF    xCF.6
....................       InputType.B8 = 1;
0730A:  BSF    xCF.7
....................       InputType.B9 = 1;
0730C:  BSF    xD0.0
....................       InputType.B10 = 1;
0730E:  BSF    xD0.1
.................... 
....................       FaultNCNO[1] = 1;
07310:  MOVLB  B
07312:  BSF    x43.1
....................       FaultNCNO[2] = 1;
07314:  BSF    x43.2
....................       FaultNCNO[3] = 1;
07316:  BSF    x43.3
....................       FaultNCNO[4] = 1;
07318:  BSF    x43.4
....................       FaultNCNO[5] = 1;
0731A:  BSF    x43.5
....................       FaultNCNO[6] = 1;
0731C:  BSF    x43.6
....................       FaultNCNO[7] = 1;
0731E:  BSF    x43.7
....................       FaultNCNO[8] = 1;
07320:  BSF    x44.0
....................       FaultNCNO[9] = 1;
07322:  BSF    x44.1
....................       FaultNCNO[10] = 1;
07324:  BSF    x44.2
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
07326:  MOVLB  A
07328:  BSF    xD1.0
....................       FaultType.B2= 1;
0732A:  BSF    xD1.1
....................       FaultType.B3 = 1;
0732C:  BSF    xD1.2
....................       FaultType.B4 = 1;
0732E:  BSF    xD1.3
....................       FaultType.B5 = 1;
07330:  BSF    xD1.4
....................       FaultType.B6 = 1;
07332:  BSF    xD1.5
....................       FaultType.B7 = 1;
07334:  BSF    xD1.6
....................       FaultType.B8 = 1;
07336:  BSF    xD1.7
....................       FaultType.B9 = 1;
07338:  BSF    xD2.0
....................       FaultType.B10 = 1;
0733A:  BSF    xD2.1
.................... 
....................       ////////////////////////////
....................       OutputType.B1 = 1;
0733C:  BSF    xD3.0
....................       OutputType.B2 = 1;
0733E:  BSF    xD3.1
....................       OutputType.B3 = 1;
07340:  BSF    xD3.2
....................       OutputType.B4 = 1;
07342:  BSF    xD3.3
....................       OutputType.B5 = 1;
07344:  BSF    xD3.4
....................       OutputType.B6 = 1;
07346:  BSF    xD3.5
....................       OutputType.B7 = 1;
07348:  BSF    xD3.6
....................       OutputType.B8 = 1;
0734A:  BSF    xD3.7
....................       OutputType.B9 = 1;
0734C:  BSF    xD4.0
....................       OutputType.B10 = 1;
0734E:  BSF    xD4.1
.................... 
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
07350:  BSF    xD5.0
....................       OutputBoth.B2 = 1;
07352:  BSF    xD5.1
....................       OutputBoth.B3 = 1;
07354:  BSF    xD5.2
....................       OutputBoth.B4 = 1;
07356:  BSF    xD5.3
....................       OutputBoth.B5 = 1;
07358:  BSF    xD5.4
....................       OutputBoth.B6 = 1;
0735A:  BSF    xD5.5
....................       OutputBoth.B7 = 1;
0735C:  BSF    xD5.6
....................       OutputBoth.B8 = 1;
0735E:  BSF    xD5.7
....................       OutputBoth.B9 = 1;
07360:  BSF    xD6.0
....................       OutputBoth.B10 = 1;
07362:  BSF    xD6.1
.................... 
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
07364:  BSF    xD7.0
....................       AlarmIndicator.B2 = 1;
07366:  BSF    xD7.1
....................       AlarmIndicator.B3 = 1;
07368:  BSF    xD7.2
....................       AlarmIndicator.B4 = 1;
0736A:  BSF    xD7.3
....................       AlarmIndicator.B5 = 1;
0736C:  BSF    xD7.4
....................       AlarmIndicator.B6 = 1;
0736E:  BSF    xD7.5
....................       AlarmIndicator.B7 = 1;
07370:  BSF    xD7.6
....................       AlarmIndicator.B8 = 1;
07372:  BSF    xD7.7
....................       AlarmIndicator.B9 = 1;
07374:  BSF    xD8.0
....................       AlarmIndicator.B10 = 1;
07376:  BSF    xD8.1
.................... 
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
07378:  MOVFF  FF2,B4B
0737C:  BCF    FF2.7
0737E:  CLRF   FAA
07380:  MOVLW  10
07382:  MOVWF  FA9
07384:  BCF    FA6.6
07386:  BCF    FA6.7
07388:  BSF    FA6.0
0738A:  MOVF   FA8,W
0738C:  MOVLB  B
0738E:  BTFSC  x4B.7
07390:  BSF    FF2.7
07392:  MOVWF  3A
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
07394:  MOVLB  A
07396:  BCF    xE3.0
07398:  BTFSC  3A.0
0739A:  BSF    xE3.0
....................    RED_Colour.B2 = EEpDat >> 1;
0739C:  BCF    FD8.0
0739E:  RRCF   3A,W
073A0:  BCF    xE3.1
073A2:  BTFSC  FE8.0
073A4:  BSF    xE3.1
....................    RED_Colour.B3 = EEpDat >> 2;
073A6:  RRCF   3A,W
073A8:  MOVWF  00
073AA:  RRCF   00,F
073AC:  MOVLW  3F
073AE:  ANDWF  00,F
073B0:  BCF    xE3.2
073B2:  BTFSC  00.0
073B4:  BSF    xE3.2
....................    RED_Colour.B4 = EEpDat >> 3;
073B6:  RRCF   3A,W
073B8:  MOVWF  00
073BA:  RRCF   00,F
073BC:  RRCF   00,F
073BE:  MOVLW  1F
073C0:  ANDWF  00,F
073C2:  BCF    xE3.3
073C4:  BTFSC  00.0
073C6:  BSF    xE3.3
....................    RED_Colour.B5 = EEpDat >> 4;
073C8:  SWAPF  3A,W
073CA:  MOVWF  00
073CC:  MOVLW  0F
073CE:  ANDWF  00,F
073D0:  BCF    xE3.4
073D2:  BTFSC  00.0
073D4:  BSF    xE3.4
....................    RED_Colour.B6 = EEpDat >> 5;
073D6:  SWAPF  3A,W
073D8:  MOVWF  00
073DA:  RRCF   00,F
073DC:  MOVLW  07
073DE:  ANDWF  00,F
073E0:  BCF    xE3.5
073E2:  BTFSC  00.0
073E4:  BSF    xE3.5
....................    RED_Colour.B7 = EEpDat >> 6;
073E6:  SWAPF  3A,W
073E8:  MOVWF  00
073EA:  RRCF   00,F
073EC:  RRCF   00,F
073EE:  MOVLW  03
073F0:  ANDWF  00,F
073F2:  BCF    xE3.6
073F4:  BTFSC  00.0
073F6:  BSF    xE3.6
....................    RED_Colour.B8 = EEpDat >> 7;
073F8:  CLRF   00
073FA:  BTFSC  3A.7
073FC:  BSF    00.0
073FE:  BCF    xE3.7
07400:  BTFSC  00.0
07402:  BSF    xE3.7
....................    
....................    EEpDat = read_eeprom(0x11);
07404:  MOVFF  FF2,B4B
07408:  BCF    FF2.7
0740A:  CLRF   FAA
0740C:  MOVLW  11
0740E:  MOVWF  FA9
07410:  BCF    FA6.6
07412:  BCF    FA6.7
07414:  BSF    FA6.0
07416:  MOVF   FA8,W
07418:  MOVLB  B
0741A:  BTFSC  x4B.7
0741C:  BSF    FF2.7
0741E:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
07420:  MOVLB  A
07422:  BCF    xE4.0
07424:  BTFSC  3A.0
07426:  BSF    xE4.0
....................    RED_Colour.B10 = EEpDat >> 1;
07428:  BCF    FD8.0
0742A:  RRCF   3A,W
0742C:  BCF    xE4.1
0742E:  BTFSC  FE8.0
07430:  BSF    xE4.1
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
07432:  MOVFF  FF2,B4B
07436:  BCF    FF2.7
07438:  CLRF   FAA
0743A:  MOVLW  14
0743C:  MOVWF  FA9
0743E:  BCF    FA6.6
07440:  BCF    FA6.7
07442:  BSF    FA6.0
07444:  MOVF   FA8,W
07446:  MOVLB  B
07448:  BTFSC  x4B.7
0744A:  BSF    FF2.7
0744C:  MOVWF  3A
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
0744E:  MOVLB  A
07450:  BCF    xE5.0
07452:  BTFSC  3A.0
07454:  BSF    xE5.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
07456:  BCF    FD8.0
07458:  RRCF   3A,W
0745A:  BCF    xE5.1
0745C:  BTFSC  FE8.0
0745E:  BSF    xE5.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
07460:  RRCF   3A,W
07462:  MOVWF  00
07464:  RRCF   00,F
07466:  MOVLW  3F
07468:  ANDWF  00,F
0746A:  BCF    xE5.2
0746C:  BTFSC  00.0
0746E:  BSF    xE5.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
07470:  RRCF   3A,W
07472:  MOVWF  00
07474:  RRCF   00,F
07476:  RRCF   00,F
07478:  MOVLW  1F
0747A:  ANDWF  00,F
0747C:  BCF    xE5.3
0747E:  BTFSC  00.0
07480:  BSF    xE5.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
07482:  SWAPF  3A,W
07484:  MOVWF  00
07486:  MOVLW  0F
07488:  ANDWF  00,F
0748A:  BCF    xE5.4
0748C:  BTFSC  00.0
0748E:  BSF    xE5.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
07490:  SWAPF  3A,W
07492:  MOVWF  00
07494:  RRCF   00,F
07496:  MOVLW  07
07498:  ANDWF  00,F
0749A:  BCF    xE5.5
0749C:  BTFSC  00.0
0749E:  BSF    xE5.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
074A0:  SWAPF  3A,W
074A2:  MOVWF  00
074A4:  RRCF   00,F
074A6:  RRCF   00,F
074A8:  MOVLW  03
074AA:  ANDWF  00,F
074AC:  BCF    xE5.6
074AE:  BTFSC  00.0
074B0:  BSF    xE5.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
074B2:  CLRF   00
074B4:  BTFSC  3A.7
074B6:  BSF    00.0
074B8:  BCF    xE5.7
074BA:  BTFSC  00.0
074BC:  BSF    xE5.7
....................    
....................    EEpDat = read_eeprom(0x15);
074BE:  MOVFF  FF2,B4B
074C2:  BCF    FF2.7
074C4:  CLRF   FAA
074C6:  MOVLW  15
074C8:  MOVWF  FA9
074CA:  BCF    FA6.6
074CC:  BCF    FA6.7
074CE:  BSF    FA6.0
074D0:  MOVF   FA8,W
074D2:  MOVLB  B
074D4:  BTFSC  x4B.7
074D6:  BSF    FF2.7
074D8:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
074DA:  MOVLB  A
074DC:  BCF    xE6.0
074DE:  BTFSC  3A.0
074E0:  BSF    xE6.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
074E2:  BCF    FD8.0
074E4:  RRCF   3A,W
074E6:  BCF    xE6.1
074E8:  BTFSC  FE8.0
074EA:  BSF    xE6.1
074EC:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................   
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
074EE:  MOVLW  00
074F0:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
074F2:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
074F4:  MOVLW  C0
074F6:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
074F8:  BSF    FD1.0
....................    Read_input(); restart_wdt();
074FA:  CALL   18B8
074FE:  CLRWDT
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
07500:  BCF    F89.4
07502:  BCF    F92.4
....................    output_bit(Pbell,0);     //Clear Bell
07504:  BCF    F89.3
07506:  BCF    F92.3
....................    output_bit(P485ctrl,0);
07508:  BCF    F8A.3
0750A:  BCF    F93.3
....................    output_bit(PIN_B4,1); //jj
0750C:  BSF    F8A.4
0750E:  BCF    F93.4
....................    Send_Ouput();
07510:  CALL   214E
....................    
....................    delay_ms(500);
07514:  MOVLW  02
07516:  MOVLB  B
07518:  MOVWF  x4B
0751A:  MOVLW  FA
0751C:  MOVWF  x54
0751E:  MOVLB  0
07520:  CALL   07DC
07524:  MOVLB  B
07526:  DECFSZ x4B,F
07528:  BRA    751A
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=10;i++)
0752A:  MOVLW  01
0752C:  MOVWF  x4A
0752E:  MOVF   x4A,W
07530:  SUBLW  0A
07532:  BTFSS  FD8.0
07534:  BRA    7662
....................    {
....................       FaultAgo[i] = 0;
07536:  MOVFF  B4A,B4F
0753A:  CLRF   x50
0753C:  MOVLW  0A
0753E:  MOVWF  x52
07540:  MOVLW  E9
07542:  MOVWF  x51
07544:  MOVLB  0
07546:  CALL   181A
....................       FaultNow[i] = 0;
0754A:  MOVFF  B4A,B4F
0754E:  MOVLB  B
07550:  CLRF   x50
07552:  MOVLW  0A
07554:  MOVWF  x52
07556:  MOVLW  EC
07558:  MOVWF  x51
0755A:  MOVLB  0
0755C:  CALL   181A
....................       ReleaseTime[i] = 0;
07560:  BCF    FD8.0
07562:  MOVLB  B
07564:  RLCF   x4A,W
07566:  CLRF   03
07568:  ADDLW  EF
0756A:  MOVWF  FE9
0756C:  MOVLW  0A
0756E:  ADDWFC 03,W
07570:  MOVWF  FEA
07572:  CLRF   FEC
07574:  MOVF   FED,F
07576:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
07578:  MOVFF  B4A,B4F
0757C:  MOVLW  0B
0757E:  MOVWF  x51
07580:  MOVLW  43
07582:  MOVWF  x50
07584:  MOVLB  0
07586:  CALL   17C2
0758A:  MOVF   01,W
0758C:  ANDLW  01
0758E:  SUBLW  01
07590:  BNZ   75FA
....................       {
....................          switch(i)
07592:  MOVLW  01
07594:  MOVLB  B
07596:  SUBWF  x4A,W
07598:  ADDLW  F6
0759A:  BC    75F6
0759C:  ADDLW  0A
0759E:  MOVLB  0
075A0:  GOTO   77BE
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
075A4:  MOVLB  A
075A6:  BSF    xCB.0
....................             break;
075A8:  MOVLB  B
075AA:  BRA    75F6
....................             case 2:
....................                Inputt.B2 = 1; 
075AC:  MOVLB  A
075AE:  BSF    xCB.1
....................             break;
075B0:  MOVLB  B
075B2:  BRA    75F6
....................             case 3:
....................                Inputt.B3 = 1; 
075B4:  MOVLB  A
075B6:  BSF    xCB.2
....................             break;
075B8:  MOVLB  B
075BA:  BRA    75F6
....................             case 4:
....................                Inputt.B4 = 1; 
075BC:  MOVLB  A
075BE:  BSF    xCB.3
....................             break;
075C0:  MOVLB  B
075C2:  BRA    75F6
....................             case 5:
....................                Inputt.B5 = 1; 
075C4:  MOVLB  A
075C6:  BSF    xCB.4
....................             break;
075C8:  MOVLB  B
075CA:  BRA    75F6
....................             case 6:
....................                Inputt.B6 = 1; 
075CC:  MOVLB  A
075CE:  BSF    xCB.5
....................             break;
075D0:  MOVLB  B
075D2:  BRA    75F6
....................             case 7:
....................                Inputt.B7 = 1; 
075D4:  MOVLB  A
075D6:  BSF    xCB.6
....................              break;
075D8:  MOVLB  B
075DA:  BRA    75F6
....................              case 8:
....................                Inputt.B8 = 1; 
075DC:  MOVLB  A
075DE:  BSF    xCB.7
....................             break;
075E0:  MOVLB  B
075E2:  BRA    75F6
....................             case 9:
....................                Inputt.B9 = 1; 
075E4:  MOVLB  A
075E6:  BSF    xCC.0
....................             break;
075E8:  MOVLB  B
075EA:  BRA    75F6
....................             case 10:
....................                Inputt.B10 = 1; 
075EC:  MOVLB  A
075EE:  BSF    xCC.1
....................             break;
075F0:  MOVLB  B
075F2:  BRA    75F6
075F4:  MOVLB  B
....................           
....................          }                 
....................       }
075F6:  BRA    765E
075F8:  MOVLB  0
....................       else
....................       {
....................          switch(i)
075FA:  MOVLW  01
075FC:  MOVLB  B
075FE:  SUBWF  x4A,W
07600:  ADDLW  F6
07602:  BC    765E
07604:  ADDLW  0A
07606:  MOVLB  0
07608:  GOTO   77EC
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
0760C:  MOVLB  A
0760E:  BCF    xCB.0
....................             break;
07610:  MOVLB  B
07612:  BRA    765E
....................             case 2:
....................                Inputt.B2 = 0; 
07614:  MOVLB  A
07616:  BCF    xCB.1
....................             break;
07618:  MOVLB  B
0761A:  BRA    765E
....................             case 3:
....................                Inputt.B3 = 0; 
0761C:  MOVLB  A
0761E:  BCF    xCB.2
....................             break;
07620:  MOVLB  B
07622:  BRA    765E
....................             case 4:
....................                Inputt.B4 = 0; 
07624:  MOVLB  A
07626:  BCF    xCB.3
....................             break;
07628:  MOVLB  B
0762A:  BRA    765E
....................             case 5:
....................                Inputt.B5 = 0; 
0762C:  MOVLB  A
0762E:  BCF    xCB.4
....................             break;
07630:  MOVLB  B
07632:  BRA    765E
....................             case 6:
....................                Inputt.B6 = 0; 
07634:  MOVLB  A
07636:  BCF    xCB.5
....................             break;
07638:  MOVLB  B
0763A:  BRA    765E
....................             case 7:
....................                Inputt.B7 = 0; 
0763C:  MOVLB  A
0763E:  BCF    xCB.6
....................              break;
07640:  MOVLB  B
07642:  BRA    765E
....................              case 8:
....................                Inputt.B8 = 0; 
07644:  MOVLB  A
07646:  BCF    xCB.7
....................             break;
07648:  MOVLB  B
0764A:  BRA    765E
....................             case 9:
....................                Inputt.B9 = 0; 
0764C:  MOVLB  A
0764E:  BCF    xCC.0
....................             break;
07650:  MOVLB  B
07652:  BRA    765E
....................             case 10:
....................                Inputt.B10 = 0; 
07654:  MOVLB  A
07656:  BCF    xCC.1
....................             break;
07658:  MOVLB  B
0765A:  BRA    765E
0765C:  MOVLB  B
....................        
....................          }                 
....................       } 
0765E:  INCF   x4A,F
07660:  BRA    752E
....................    }
....................    
....................    while(TRUE)
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
07662:  CLRF   x4B
07664:  SETF   x4C
07666:  MOVLB  0
07668:  CALL   2122
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
0766C:  MOVLB  B
0766E:  CLRF   x4B
07670:  SETF   x4C
07672:  MOVLB  0
07674:  CALL   2138
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
07678:  MOVLW  02
0767A:  MOVLB  B
0767C:  MOVWF  x4B
0767E:  SETF   x4C
07680:  MOVLB  0
07682:  CALL   2122
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
07686:  MOVLW  02
07688:  MOVLB  B
0768A:  MOVWF  x4B
0768C:  SETF   x4C
0768E:  MOVLB  0
07690:  CALL   2138
....................       restart_wdt();
07694:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
07696:  BTFSS  30.5
07698:  BRA    76A0
....................       {
....................          Modbus_Function();
0769A:  GOTO   25EC
....................          recieve_completed = 0 ;
0769E:  BCF    30.5
....................       }
....................       
....................    
....................       check_ack();
076A0:  GOTO   43DC
....................       check_reset();
076A4:  GOTO   44CC
....................       check_test();
076A8:  BRA    6EE2
....................       
....................       restart_wdt();
076AA:  CLRWDT
....................       
....................       
....................       Read_input(); restart_wdt();//Must be first
076AC:  CALL   18B8
076B0:  CLRWDT
....................       Anal_Function(); restart_wdt();
076B2:  CALL   4DD4
076B6:  CLRWDT
....................       Send_Ouput(); restart_wdt();
076B8:  CALL   214E
076BC:  CLRWDT
....................       Driver595(); restart_wdt();
076BE:  BRA    6F6E
076C0:  CLRWDT
....................       
....................       
....................       output_toggle(PIN_A0);
076C2:  BCF    F92.0
076C4:  BTG    F89.0
....................       
....................       if(RefreshConfigData)
076C6:  BTFSS  30.4
076C8:  BRA    77B8
....................       {
....................          RefreshConfigData =0;
076CA:  BCF    30.4
....................          Read_Config();
076CC:  CALL   08FA
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
076D0:  MOVLB  B
076D2:  CLRF   x4B
076D4:  SETF   x4C
076D6:  MOVLB  0
076D8:  CALL   08D4
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
076DC:  MOVLB  B
076DE:  CLRF   x4B
076E0:  SETF   x4C
076E2:  MOVLB  0
076E4:  CALL   08E6
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
076E8:  MOVLW  02
076EA:  MOVLB  B
076EC:  MOVWF  x4B
076EE:  SETF   x4C
076F0:  MOVLB  0
076F2:  CALL   08D4
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
076F6:  MOVLW  02
076F8:  MOVLB  B
076FA:  MOVWF  x4B
076FC:  SETF   x4C
076FE:  MOVLB  0
07700:  CALL   08E6
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
07704:  MOVLB  B
07706:  CLRF   x4D
07708:  MOVLW  06
0770A:  MOVWF  x4E
0770C:  SETF   x4F
0770E:  MOVLB  0
07710:  CALL   080C
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
07714:  MOVLB  B
07716:  CLRF   x4D
07718:  MOVLW  16
0771A:  MOVWF  x4E
0771C:  SETF   x4F
0771E:  MOVLB  0
07720:  CALL   080C
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
07724:  MOVLW  02
07726:  MOVLB  B
07728:  MOVWF  x4D
0772A:  MOVLW  06
0772C:  MOVWF  x4E
0772E:  SETF   x4F
07730:  MOVLB  0
07732:  CALL   080C
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
07736:  MOVLW  02
07738:  MOVLB  B
0773A:  MOVWF  x4D
0773C:  MOVLW  16
0773E:  MOVWF  x4E
07740:  SETF   x4F
07742:  MOVLB  0
07744:  CALL   080C
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
07748:  MOVLW  04
0774A:  MOVLB  B
0774C:  MOVWF  x4B
0774E:  CLRF   x4C
07750:  MOVLB  0
07752:  CALL   08D4
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
07756:  MOVLW  04
07758:  MOVLB  B
0775A:  MOVWF  x4B
0775C:  CLRF   x4C
0775E:  MOVLB  0
07760:  CALL   08E6
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
07764:  MOVLW  06
07766:  MOVLB  B
07768:  MOVWF  x4B
0776A:  CLRF   x4C
0776C:  MOVLB  0
0776E:  CALL   08D4
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
07772:  MOVLW  06
07774:  MOVLB  B
07776:  MOVWF  x4B
07778:  CLRF   x4C
0777A:  MOVLB  0
0777C:  CALL   08E6
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
07780:  MOVLW  08
07782:  MOVLB  B
07784:  MOVWF  x4B
07786:  CLRF   x4C
07788:  MOVLB  0
0778A:  CALL   08D4
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0778E:  MOVLW  08
07790:  MOVLB  B
07792:  MOVWF  x4B
07794:  CLRF   x4C
07796:  MOVLB  0
07798:  CALL   08E6
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0779C:  MOVLW  0A
0779E:  MOVLB  B
077A0:  MOVWF  x4B
077A2:  CLRF   x4C
077A4:  MOVLB  0
077A6:  CALL   08D4
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
077AA:  MOVLW  0A
077AC:  MOVLB  B
077AE:  MOVWF  x4B
077B0:  CLRF   x4C
077B2:  MOVLB  0
077B4:  CALL   08E6
....................       }
077B8:  MOVLB  B
077BA:  BRA    7662
....................       
....................    }
....................    
.................... }
077BC:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
