CCS PCH C Compiler, Version 5.091, 5967               11-¡.Â.-21 21:15

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_10 - Delay - SP - SMD -SMS\ESPAN-04_test_faultDelayTime.lst

               ROM used:   30742 bytes (47%)
                           Largest free fragment is 34790
               RAM used:   1876 (48%) at main() level
                           1893 (49%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   7006
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.0
00056:  GOTO   0060
0005A:  BTFSC  F9E.0
0005C:  GOTO   05B2
00060:  BTFSS  F9D.1
00062:  GOTO   006C
00066:  BTFSC  F9E.1
00068:  GOTO   05B8
0006C:  BTFSS  F9D.5
0006E:  GOTO   0078
00072:  BTFSC  F9E.5
00074:  GOTO   05A2
00078:  MOVFF  0E,00
0007C:  MOVFF  0F,01
00080:  MOVFF  10,02
00084:  MOVFF  11,03
00088:  MOVFF  0C,FE9
0008C:  MOVFF  07,FEA
00090:  BSF    07.7
00092:  MOVFF  08,FE1
00096:  MOVFF  09,FE2
0009A:  MOVFF  0A,FD9
0009E:  MOVFF  0B,FDA
000A2:  MOVFF  12,FF3
000A6:  MOVFF  13,FF4
000AA:  MOVFF  14,FFA
000AE:  MOVFF  15,FF5
000B2:  MOVFF  16,FF6
000B6:  MOVFF  17,FF7
000BA:  MOVF   04,W
000BC:  MOVFF  06,FE0
000C0:  MOVFF  05,FD8
000C4:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000C6:  CLRF   FF7
000C8:  ADDLW  D6
000CA:  MOVWF  FF6
000CC:  MOVLW  00
000CE:  ADDWFC FF7,F
000D0:  TBLRD*+
000D2:  MOVF   FF5,W
000D4:  RETURN 0
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 01,C0
000E0:  DATA 80,41
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 00,C1
000EC:  DATA 81,40
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 01,C0
000F4:  DATA 80,41
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 00,C1
00100:  DATA 81,40
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 01,C0
00110:  DATA 80,41
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 00,C1
00120:  DATA 81,40
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 01,C0
0012C:  DATA 80,41
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 00,C1
00134:  DATA 81,40
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 01,C0
00140:  DATA 80,41
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 00,C1
0014C:  DATA 81,40
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 01,C0
00154:  DATA 80,41
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 00,C1
00160:  DATA 81,40
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 01,C0
0016C:  DATA 80,41
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 00,C1
00174:  DATA 81,40
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 01,C0
00180:  DATA 80,41
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 00,C1
00190:  DATA 81,40
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 01,C0
001A0:  DATA 80,41
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 00,C1
001AC:  DATA 81,40
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 01,C0
001B4:  DATA 80,41
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 00,C1
001C0:  DATA 81,40
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  DATA 01,C0
001CC:  DATA 80,41
001CE:  DATA 01,C0
001D0:  DATA 80,41
001D2:  DATA 00,C1
001D4:  DATA 81,40
001D6:  CLRF   FF7
001D8:  ADDLW  E6
001DA:  MOVWF  FF6
001DC:  MOVLW  01
001DE:  ADDWFC FF7,F
001E0:  TBLRD*+
001E2:  MOVF   FF5,W
001E4:  RETURN 0
001E6:  DATA 00,C0
001E8:  DATA C1,01
001EA:  DATA C3,03
001EC:  DATA 02,C2
001EE:  DATA C6,06
001F0:  DATA 07,C7
001F2:  DATA 05,C5
001F4:  DATA C4,04
001F6:  DATA CC,0C
001F8:  DATA 0D,CD
001FA:  DATA 0F,CF
001FC:  DATA CE,0E
001FE:  DATA 0A,CA
00200:  DATA CB,0B
00202:  DATA C9,09
00204:  DATA 08,C8
00206:  DATA D8,18
00208:  DATA 19,D9
0020A:  DATA 1B,DB
0020C:  DATA DA,1A
0020E:  DATA 1E,DE
00210:  DATA DF,1F
00212:  DATA DD,1D
00214:  DATA 1C,DC
00216:  DATA 14,D4
00218:  DATA D5,15
0021A:  DATA D7,17
0021C:  DATA 16,D6
0021E:  DATA D2,12
00220:  DATA 13,D3
00222:  DATA 11,D1
00224:  DATA D0,10
00226:  DATA F0,30
00228:  DATA 31,F1
0022A:  DATA 33,F3
0022C:  DATA F2,32
0022E:  DATA 36,F6
00230:  DATA F7,37
00232:  DATA F5,35
00234:  DATA 34,F4
00236:  DATA 3C,FC
00238:  DATA FD,3D
0023A:  DATA FF,3F
0023C:  DATA 3E,FE
0023E:  DATA FA,3A
00240:  DATA 3B,FB
00242:  DATA 39,F9
00244:  DATA F8,38
00246:  DATA 28,E8
00248:  DATA E9,29
0024A:  DATA EB,2B
0024C:  DATA 2A,EA
0024E:  DATA EE,2E
00250:  DATA 2F,EF
00252:  DATA 2D,ED
00254:  DATA EC,2C
00256:  DATA E4,24
00258:  DATA 25,E5
0025A:  DATA 27,E7
0025C:  DATA E6,26
0025E:  DATA 22,E2
00260:  DATA E3,23
00262:  DATA E1,21
00264:  DATA 20,E0
00266:  DATA A0,60
00268:  DATA 61,A1
0026A:  DATA 63,A3
0026C:  DATA A2,62
0026E:  DATA 66,A6
00270:  DATA A7,67
00272:  DATA A5,65
00274:  DATA 64,A4
00276:  DATA 6C,AC
00278:  DATA AD,6D
0027A:  DATA AF,6F
0027C:  DATA 6E,AE
0027E:  DATA AA,6A
00280:  DATA 6B,AB
00282:  DATA 69,A9
00284:  DATA A8,68
00286:  DATA 78,B8
00288:  DATA B9,79
0028A:  DATA BB,7B
0028C:  DATA 7A,BA
0028E:  DATA BE,7E
00290:  DATA 7F,BF
00292:  DATA 7D,BD
00294:  DATA BC,7C
00296:  DATA B4,74
00298:  DATA 75,B5
0029A:  DATA 77,B7
0029C:  DATA B6,76
0029E:  DATA 72,B2
002A0:  DATA B3,73
002A2:  DATA B1,71
002A4:  DATA 70,B0
002A6:  DATA 50,90
002A8:  DATA 91,51
002AA:  DATA 93,53
002AC:  DATA 52,92
002AE:  DATA 96,56
002B0:  DATA 57,97
002B2:  DATA 55,95
002B4:  DATA 94,54
002B6:  DATA 9C,5C
002B8:  DATA 5D,9D
002BA:  DATA 5F,9F
002BC:  DATA 9E,5E
002BE:  DATA 5A,9A
002C0:  DATA 9B,5B
002C2:  DATA 99,59
002C4:  DATA 58,98
002C6:  DATA 88,48
002C8:  DATA 49,89
002CA:  DATA 4B,8B
002CC:  DATA 8A,4A
002CE:  DATA 4E,8E
002D0:  DATA 8F,4F
002D2:  DATA 8D,4D
002D4:  DATA 4C,8C
002D6:  DATA 44,84
002D8:  DATA 85,45
002DA:  DATA 87,47
002DC:  DATA 46,86
002DE:  DATA 82,42
002E0:  DATA 43,83
002E2:  DATA 41,81
002E4:  DATA 80,40
*
0064A:  DATA 41,54
0064C:  DATA 2B,43
0064E:  DATA 4D,47
00650:  DATA 46,3D
00652:  DATA 31,00
00654:  DATA 41,54
00656:  DATA 2B,43
00658:  DATA 4D,47
0065A:  DATA 53,3D
0065C:  DATA 22,00
0065E:  DATA 41,54
00660:  DATA 2B,43
00662:  DATA 4D,47
00664:  DATA 46,3D
00666:  DATA 31,00
00668:  DATA 41,54
0066A:  DATA 2B,43
0066C:  DATA 4D,47
0066E:  DATA 53,3D
00670:  DATA 22,00
00672:  DATA 41,54
00674:  DATA 2B,43
00676:  DATA 4D,47
00678:  DATA 46,3D
0067A:  DATA 31,00
0067C:  DATA 41,54
0067E:  DATA 2B,43
00680:  DATA 4D,47
00682:  DATA 53,3D
00684:  DATA 22,00
00686:  DATA 41,54
00688:  DATA 2B,43
0068A:  DATA 4D,47
0068C:  DATA 46,3D
0068E:  DATA 31,00
00690:  DATA 41,54
00692:  DATA 2B,43
00694:  DATA 4D,47
00696:  DATA 53,3D
00698:  DATA 22,00
0069A:  DATA 41,54
0069C:  DATA 2B,43
0069E:  DATA 4D,47
006A0:  DATA 46,3D
006A2:  DATA 31,00
006A4:  DATA 41,54
006A6:  DATA 2B,43
006A8:  DATA 4D,47
006AA:  DATA 53,3D
006AC:  DATA 22,00
006AE:  DATA 41,54
006B0:  DATA 2B,43
006B2:  DATA 4D,47
006B4:  DATA 46,3D
006B6:  DATA 31,00
006B8:  DATA 41,54
006BA:  DATA 2B,43
006BC:  DATA 4D,47
006BE:  DATA 53,3D
006C0:  DATA 22,00
006C2:  DATA 41,54
006C4:  DATA 2B,43
006C6:  DATA 4D,47
006C8:  DATA 46,3D
006CA:  DATA 31,00
006CC:  DATA 41,54
006CE:  DATA 2B,43
006D0:  DATA 4D,47
006D2:  DATA 53,3D
006D4:  DATA 22,00
006D6:  DATA 41,54
006D8:  DATA 2B,43
006DA:  DATA 4D,47
006DC:  DATA 46,3D
006DE:  DATA 31,00
006E0:  DATA 41,54
006E2:  DATA 2B,43
006E4:  DATA 4D,47
006E6:  DATA 53,3D
006E8:  DATA 22,00
006EA:  DATA 41,54
006EC:  DATA 2B,43
006EE:  DATA 4D,47
006F0:  DATA 46,3D
006F2:  DATA 31,00
006F4:  DATA 41,54
006F6:  DATA 2B,43
006F8:  DATA 4D,47
006FA:  DATA 53,3D
006FC:  DATA 22,00
006FE:  DATA 41,54
00700:  DATA 2B,43
00702:  DATA 4D,47
00704:  DATA 46,3D
00706:  DATA 31,00
00708:  DATA 41,54
0070A:  DATA 2B,43
0070C:  DATA 4D,47
0070E:  DATA 53,3D
00710:  DATA 22,00
00712:  DATA 41,54
00714:  DATA 2B,43
00716:  DATA 4D,47
00718:  DATA 46,3D
0071A:  DATA 31,00
0071C:  DATA 41,54
0071E:  DATA 2B,43
00720:  DATA 4D,47
00722:  DATA 53,3D
00724:  DATA 22,00
00726:  DATA 41,54
00728:  DATA 2B,43
0072A:  DATA 4D,47
0072C:  DATA 46,3D
0072E:  DATA 31,00
00730:  DATA 41,54
00732:  DATA 2B,43
00734:  DATA 4D,47
00736:  DATA 53,3D
00738:  DATA 22,00
0073A:  DATA 41,54
0073C:  DATA 2B,43
0073E:  DATA 4D,47
00740:  DATA 46,3D
00742:  DATA 31,00
00744:  DATA 41,54
00746:  DATA 2B,43
00748:  DATA 4D,47
0074A:  DATA 53,3D
0074C:  DATA 22,00
0074E:  DATA 41,54
00750:  DATA 2B,43
00752:  DATA 4D,47
00754:  DATA 46,3D
00756:  DATA 31,00
00758:  DATA 41,54
0075A:  DATA 2B,43
0075C:  DATA 4D,47
0075E:  DATA 53,3D
00760:  DATA 22,00
00762:  DATA 41,54
00764:  DATA 2B,43
00766:  DATA 4D,47
00768:  DATA 46,3D
0076A:  DATA 31,00
0076C:  DATA 41,54
0076E:  DATA 2B,43
00770:  DATA 4D,47
00772:  DATA 53,3D
00774:  DATA 22,00
00776:  DATA 41,54
00778:  DATA 2B,43
0077A:  DATA 4D,47
0077C:  DATA 46,3D
0077E:  DATA 31,00
00780:  DATA 41,54
00782:  DATA 2B,43
00784:  DATA 4D,47
00786:  DATA 53,3D
00788:  DATA 22,00
0078A:  DATA 41,54
0078C:  DATA 2B,43
0078E:  DATA 4D,47
00790:  DATA 46,3D
00792:  DATA 31,00
00794:  DATA 41,54
00796:  DATA 2B,43
00798:  DATA 4D,47
0079A:  DATA 53,3D
0079C:  DATA 22,00
0079E:  DATA 41,54
007A0:  DATA 2B,43
007A2:  DATA 4D,47
007A4:  DATA 46,3D
007A6:  DATA 31,00
007A8:  DATA 41,54
007AA:  DATA 2B,43
007AC:  DATA 4D,47
007AE:  DATA 53,3D
007B0:  DATA 22,00
007B2:  DATA 41,54
007B4:  DATA 2B,43
007B6:  DATA 4D,47
007B8:  DATA 46,3D
007BA:  DATA 31,00
007BC:  DATA 41,54
007BE:  DATA 2B,43
007C0:  DATA 4D,47
007C2:  DATA 53,3D
007C4:  DATA 22,00
007C6:  DATA 41,54
007C8:  DATA 2B,43
007CA:  DATA 4D,47
007CC:  DATA 46,3D
007CE:  DATA 31,00
007D0:  DATA 41,54
007D2:  DATA 2B,43
007D4:  DATA 4D,47
007D6:  DATA 53,3D
007D8:  DATA 22,00
007DA:  DATA 41,54
007DC:  DATA 2B,43
007DE:  DATA 4D,47
007E0:  DATA 53,3D
007E2:  DATA 22,00
007E4:  DATA 41,54
007E6:  DATA 2B,43
007E8:  DATA 4D,47
007EA:  DATA 53,3D
007EC:  DATA 22,00
007EE:  DATA 41,54
007F0:  DATA 2B,43
007F2:  DATA 4D,47
007F4:  DATA 53,3D
007F6:  DATA 22,00
007F8:  DATA 41,54
007FA:  DATA 2B,43
007FC:  DATA 4D,47
007FE:  DATA 53,3D
00800:  DATA 22,00
00802:  DATA 41,54
00804:  DATA 2B,43
00806:  DATA 4D,47
00808:  DATA 53,3D
0080A:  DATA 22,00
0080C:  DATA 41,54
0080E:  DATA 2B,43
00810:  DATA 4D,47
00812:  DATA 53,3D
00814:  DATA 22,00
00816:  DATA 41,54
00818:  DATA 2B,43
0081A:  DATA 4D,47
0081C:  DATA 53,3D
0081E:  DATA 22,00
00820:  DATA 41,54
00822:  DATA 2B,43
00824:  DATA 4D,47
00826:  DATA 53,3D
00828:  DATA 22,00
0082A:  DATA 41,54
0082C:  DATA 2B,43
0082E:  DATA 4D,47
00830:  DATA 53,3D
00832:  DATA 22,00
00834:  DATA 41,54
00836:  DATA 2B,43
00838:  DATA 4D,47
0083A:  DATA 53,3D
0083C:  DATA 22,00
0083E:  DATA 41,54
00840:  DATA 2B,43
00842:  DATA 4D,47
00844:  DATA 46,3D
00846:  DATA 31,00
*
0182E:  MOVLB  7
01830:  MOVF   x54,W
01832:  ANDLW  07
01834:  MOVWF  00
01836:  RRCF   x54,W
01838:  MOVWF  01
0183A:  RRCF   01,F
0183C:  RRCF   01,F
0183E:  MOVLW  1F
01840:  ANDWF  01,F
01842:  MOVF   01,W
01844:  ADDWF  x55,W
01846:  MOVWF  FE9
01848:  MOVLW  00
0184A:  ADDWFC x56,W
0184C:  MOVWF  FEA
0184E:  MOVFF  FEF,01
01852:  INCF   00,F
01854:  BRA    1858
01856:  RRCF   01,F
01858:  DECFSZ 00,F
0185A:  BRA    1856
0185C:  MOVLW  01
0185E:  ANDWF  01,F
01860:  MOVLB  0
01862:  RETURN 0
01864:  MOVLB  7
01866:  MOVF   x55,W
01868:  MULWF  x57
0186A:  MOVFF  FF3,01
0186E:  MOVFF  FF4,00
01872:  MULWF  x58
01874:  MOVF   FF3,W
01876:  ADDWF  00,F
01878:  MOVF   x56,W
0187A:  MULWF  x57
0187C:  MOVF   FF3,W
0187E:  ADDWFC 00,W
01880:  MOVWF  02
01882:  MOVLB  0
01884:  RETURN 0
01886:  MOVLB  7
01888:  MOVF   x54,W
0188A:  ANDLW  07
0188C:  MOVWF  00
0188E:  RRCF   x54,W
01890:  MOVWF  01
01892:  RRCF   01,F
01894:  RRCF   01,F
01896:  MOVLW  1F
01898:  ANDWF  01,F
0189A:  MOVF   01,W
0189C:  ADDWF  x56,W
0189E:  MOVWF  FE9
018A0:  MOVLW  00
018A2:  ADDWFC x57,W
018A4:  MOVWF  FEA
018A6:  CLRF   01
018A8:  INCF   01,F
018AA:  INCF   00,F
018AC:  BRA    18B0
018AE:  RLCF   01,F
018B0:  DECFSZ 00,F
018B2:  BRA    18AE
018B4:  MOVF   x55,F
018B6:  BZ    18BE
018B8:  MOVF   01,W
018BA:  IORWF  FEF,F
018BC:  BRA    18C4
018BE:  COMF   01,F
018C0:  MOVF   01,W
018C2:  ANDWF  FEF,F
018C4:  MOVLB  0
018C6:  RETURN 0
*
020D6:  ADDWF  FE8,W
020D8:  CLRF   FF7
020DA:  RLCF   FF7,F
020DC:  ADDLW  F1
020DE:  MOVWF  FF6
020E0:  MOVLW  20
020E2:  ADDWFC FF7,F
020E4:  TBLRD*-
020E6:  MOVF   FF5,W
020E8:  MOVWF  FFA
020EA:  TBLRD*
020EC:  MOVF   FF5,W
020EE:  MOVWF  FF9
020F0:  DATA DA,1B
020F2:  DATA E2,1B
020F4:  DATA EA,1B
020F6:  DATA F2,1B
020F8:  DATA FA,1B
020FA:  DATA 02,1C
020FC:  DATA 0A,1C
020FE:  DATA 12,1C
02100:  DATA 1A,1C
02102:  DATA 22,1C
02104:  ADDWF  FE8,W
02106:  CLRF   FF7
02108:  RLCF   FF7,F
0210A:  ADDLW  1F
0210C:  MOVWF  FF6
0210E:  MOVLW  21
02110:  ADDWFC FF7,F
02112:  TBLRD*-
02114:  MOVF   FF5,W
02116:  MOVWF  FFA
02118:  TBLRD*
0211A:  MOVF   FF5,W
0211C:  MOVWF  FF9
0211E:  DATA 0A,1D
02120:  DATA 12,1D
02122:  DATA 1A,1D
02124:  DATA 22,1D
02126:  DATA 2A,1D
02128:  DATA 32,1D
0212A:  DATA 3A,1D
0212C:  DATA 42,1D
0212E:  DATA 4A,1D
02130:  DATA 52,1D
02132:  ADDWF  FE8,W
02134:  CLRF   FF7
02136:  RLCF   FF7,F
02138:  ADDLW  4D
0213A:  MOVWF  FF6
0213C:  MOVLW  21
0213E:  ADDWFC FF7,F
02140:  TBLRD*-
02142:  MOVF   FF5,W
02144:  MOVWF  FFA
02146:  TBLRD*
02148:  MOVF   FF5,W
0214A:  MOVWF  FF9
0214C:  DATA 6E,1E
0214E:  DATA 76,1E
02150:  DATA 7E,1E
02152:  DATA 86,1E
02154:  DATA 8E,1E
02156:  DATA 96,1E
02158:  DATA 9E,1E
0215A:  DATA A6,1E
0215C:  DATA AE,1E
0215E:  DATA B6,1E
02160:  ADDWF  FE8,W
02162:  CLRF   FF7
02164:  RLCF   FF7,F
02166:  ADDLW  7B
02168:  MOVWF  FF6
0216A:  MOVLW  21
0216C:  ADDWFC FF7,F
0216E:  TBLRD*-
02170:  MOVF   FF5,W
02172:  MOVWF  FFA
02174:  TBLRD*
02176:  MOVF   FF5,W
02178:  MOVWF  FF9
0217A:  DATA 9C,1F
0217C:  DATA A4,1F
0217E:  DATA AC,1F
02180:  DATA B4,1F
02182:  DATA BC,1F
02184:  DATA C4,1F
02186:  DATA CC,1F
02188:  DATA D4,1F
0218A:  DATA DC,1F
0218C:  DATA E4,1F
*
02436:  TBLRD*+
02438:  MOVF   FF5,F
0243A:  BZ    2454
0243C:  MOVFF  FF6,758
02440:  MOVFF  FF7,759
02444:  MOVFF  FF5,75A
02448:  RCALL  23F0
0244A:  MOVFF  758,FF6
0244E:  MOVFF  759,FF7
02452:  BRA    2436
02454:  RETURN 0
*
047EC:  MOVF   FEF,F
047EE:  BZ    4810
047F0:  MOVFF  FEA,759
047F4:  MOVFF  FE9,758
047F8:  MOVFF  FEF,75A
047FC:  CALL   23F0
04800:  MOVFF  759,FEA
04804:  MOVFF  758,FE9
04808:  INCF   FE9,F
0480A:  BTFSC  FD8.2
0480C:  INCF   FEA,F
0480E:  BRA    47EC
04810:  RETURN 0
*
077BE:  ADDWF  FE8,W
077C0:  CLRF   FF7
077C2:  RLCF   FF7,F
077C4:  ADDLW  D9
077C6:  MOVWF  FF6
077C8:  MOVLW  77
077CA:  ADDWFC FF7,F
077CC:  TBLRD*-
077CE:  MOVF   FF5,W
077D0:  MOVWF  FFA
077D2:  TBLRD*
077D4:  MOVF   FF5,W
077D6:  MOVWF  FF9
077D8:  DATA FC,74
077DA:  DATA 04,75
077DC:  DATA 0C,75
077DE:  DATA 14,75
077E0:  DATA 1C,75
077E2:  DATA 24,75
077E4:  DATA 2C,75
077E6:  DATA 34,75
077E8:  DATA 3C,75
077EA:  DATA 44,75
077EC:  ADDWF  FE8,W
077EE:  CLRF   FF7
077F0:  RLCF   FF7,F
077F2:  ADDLW  07
077F4:  MOVWF  FF6
077F6:  MOVLW  78
077F8:  ADDWFC FF7,F
077FA:  TBLRD*-
077FC:  MOVF   FF5,W
077FE:  MOVWF  FFA
07800:  TBLRD*
07802:  MOVF   FF5,W
07804:  MOVWF  FF9
07806:  DATA 64,75
07808:  DATA 6C,75
0780A:  DATA 74,75
0780C:  DATA 7C,75
0780E:  DATA 84,75
07810:  DATA 8C,75
07812:  DATA 94,75
07814:  DATA 9C,75
07816:  DATA A4,75
07818:  DATA AC,75
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00848:  MOVLW  07
0084A:  MOVWF  FEA
0084C:  MOVLW  59
0084E:  MOVWF  FE9
00850:  MOVF   FEF,W
00852:  BZ    0876
00854:  MOVLW  05
00856:  MOVWF  01
00858:  MOVLW  BF
0085A:  MOVWF  00
0085C:  CLRWDT
0085E:  DECFSZ 00,F
00860:  BRA    085C
00862:  DECFSZ 01,F
00864:  BRA    0858
00866:  MOVLW  2E
00868:  MOVWF  00
0086A:  DECFSZ 00,F
0086C:  BRA    086A
0086E:  NOP   
00870:  CLRWDT
00872:  DECFSZ FEF,F
00874:  BRA    0854
00876:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
008AA:  BCF    F92.5
008AC:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
008AE:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
008B0:  MOVLB  7
008B2:  CLRF   x52
008B4:  MOVLW  0A
008B6:  MOVWF  x53
008B8:  MOVLW  AA
008BA:  MOVWF  x54
008BC:  MOVLB  0
008BE:  RCALL  0878
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
008C0:  MOVLW  02
008C2:  MOVLB  7
008C4:  MOVWF  x52
008C6:  MOVLW  0A
008C8:  MOVWF  x53
008CA:  MOVLW  AA
008CC:  MOVWF  x54
008CE:  MOVLB  0
008D0:  RCALL  0878
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
008D2:  MOVLW  04
008D4:  MOVLB  7
008D6:  MOVWF  x52
008D8:  MOVLW  0A
008DA:  MOVWF  x53
008DC:  MOVLW  AA
008DE:  MOVWF  x54
008E0:  MOVLB  0
008E2:  RCALL  0878
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
008E4:  MOVLW  06
008E6:  MOVLB  7
008E8:  MOVWF  x52
008EA:  MOVLW  0A
008EC:  MOVWF  x53
008EE:  MOVLW  AA
008F0:  MOVWF  x54
008F2:  MOVLB  0
008F4:  RCALL  0878
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
008F6:  MOVLW  08
008F8:  MOVLB  7
008FA:  MOVWF  x52
008FC:  MOVLW  0A
008FE:  MOVWF  x53
00900:  MOVLW  AA
00902:  MOVWF  x54
00904:  MOVLB  0
00906:  RCALL  0878
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00908:  MOVLW  0A
0090A:  MOVLB  7
0090C:  MOVWF  x52
0090E:  MOVWF  x53
00910:  MOVLW  AA
00912:  MOVWF  x54
00914:  MOVLB  0
00916:  RCALL  0878
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00918:  MOVLW  0C
0091A:  MOVLB  7
0091C:  MOVWF  x52
0091E:  MOVLW  0A
00920:  MOVWF  x53
00922:  MOVLW  AA
00924:  MOVWF  x54
00926:  MOVLB  0
00928:  RCALL  0878
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
0092A:  MOVLW  0E
0092C:  MOVLB  7
0092E:  MOVWF  x52
00930:  MOVLW  0A
00932:  MOVWF  x53
00934:  MOVLW  AA
00936:  MOVWF  x54
00938:  MOVLB  0
0093A:  RCALL  0878
....................    #endif
0093C:  GOTO   70F0 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00878:  BCF    F92.5
0087A:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
0087C:  MOVLB  7
0087E:  MOVF   x52,W
00880:  IORLW  40
00882:  MOVWF  x55
00884:  MOVF   FC9,W
00886:  MOVFF  755,FC9
0088A:  RRCF   FC7,W
0088C:  BNC   088A
....................    #endif
....................    
....................    spi_write(reg);
0088E:  MOVF   FC9,W
00890:  MOVFF  753,FC9
00894:  RRCF   FC7,W
00896:  BNC   0894
....................    spi_write(data);
00898:  MOVF   FC9,W
0089A:  MOVFF  754,FC9
0089E:  RRCF   FC7,W
008A0:  BNC   089E
....................    
....................    output_high(IO_CS_PIN);
008A2:  BCF    F92.5
008A4:  BSF    F89.5
008A6:  MOVLB  0
008A8:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
017BE:  BCF    F92.5
017C0:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
017C2:  MOVLB  7
017C4:  MOVF   x53,W
017C6:  IORLW  41
017C8:  MOVWF  x56
017CA:  MOVF   FC9,W
017CC:  MOVFF  756,FC9
017D0:  RRCF   FC7,W
017D2:  BNC   17D0
....................    #endif
....................    
....................    spi_write(reg);
017D4:  MOVF   FC9,W
017D6:  MOVFF  754,FC9
017DA:  RRCF   FC7,W
017DC:  BNC   17DA
....................    retVal = spi_read(0);
017DE:  MOVF   FC9,W
017E0:  CLRF   FC9
017E2:  RRCF   FC7,W
017E4:  BNC   17E2
017E6:  MOVFF  FC9,755
....................    
....................    output_high(IO_CS_PIN);
017EA:  BCF    F92.5
017EC:  BSF    F89.5
....................    
....................    return retVal;
017EE:  MOVFF  755,01
017F2:  MOVLB  0
017F4:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
0218E:  MOVFF  750,752
02192:  MOVLW  0A
02194:  MOVLB  7
02196:  MOVWF  x53
02198:  MOVFF  751,754
0219C:  MOVLB  0
0219E:  CALL   0878
....................    #endif
021A2:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
021A4:  MOVFF  750,752
021A8:  MOVLW  1A
021AA:  MOVLB  7
021AC:  MOVWF  x53
021AE:  MOVFF  751,754
021B2:  MOVLB  0
021B4:  CALL   0878
....................    #endif
021B8:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
017F6:  MOVFF  751,753
017FA:  MOVLW  09
017FC:  MOVLB  7
017FE:  MOVWF  x54
01800:  MOVLB  0
01802:  RCALL  17BE
01804:  MOVFF  01,752
....................    #endif
....................    
....................    return retVal;
01808:  MOVLB  7
0180A:  MOVFF  752,01
0180E:  MOVLB  0
01810:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
01812:  MOVFF  751,753
01816:  MOVLW  19
01818:  MOVLB  7
0181A:  MOVWF  x54
0181C:  MOVLB  0
0181E:  RCALL  17BE
01820:  MOVFF  01,752
....................    #endif
....................    
....................    return retVal;
01824:  MOVLB  7
01826:  MOVFF  752,01
0182A:  MOVLB  0
0182C:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00940:  MOVFF  750,752
00944:  MOVLB  7
00946:  CLRF   x53
00948:  MOVFF  751,754
0094C:  MOVLB  0
0094E:  RCALL  0878
....................    #endif
00950:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00952:  MOVFF  750,752
00956:  MOVLW  10
00958:  MOVLB  7
0095A:  MOVWF  x53
0095C:  MOVFF  751,754
00960:  MOVLB  0
00962:  RCALL  0878
....................    #endif
00964:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
024AC:  BTFSS  F9E.4
024AE:  BRA    24AC
024B0:  MOVWF  FAD
024B2:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
023F0:  BCF    F93.0
023F2:  BCF    F8A.0
023F4:  MOVLW  08
023F6:  MOVWF  01
023F8:  BRA    23FA
023FA:  NOP   
023FC:  BSF    01.7
023FE:  BRA    2420
02400:  BCF    01.7
02402:  MOVLB  7
02404:  RRCF   x5A,F
02406:  MOVLB  0
02408:  BTFSC  FD8.0
0240A:  BSF    F8A.0
0240C:  BTFSS  FD8.0
0240E:  BCF    F8A.0
02410:  BSF    01.6
02412:  BRA    2420
02414:  BCF    01.6
02416:  DECFSZ 01,F
02418:  BRA    2402
0241A:  BRA    241C
0241C:  NOP   
0241E:  BSF    F8A.0
02420:  MOVLW  84
02422:  MOVWF  FE9
02424:  DECFSZ FE9,F
02426:  BRA    2424
02428:  BRA    242A
0242A:  NOP   
0242C:  BTFSC  01.7
0242E:  BRA    2400
02430:  BTFSC  01.6
02432:  BRA    2414
02434:  RETURN 0
.................... 
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... //int8 Input1_8;
.................... int8 Input9_16;
.................... 
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... int8 Green1_8 ;
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17, second_numofdata = 0x18,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned int16 RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[256];
.................... unsigned char RxD_Buff[512];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[512];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;   //use for calculate RxD timeout
.................... unsigned int16 index = 0x00;         //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... //unsigned char SMS_Massage[20][20];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... } ; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Input
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    //int1 B11,B12,B13,B14,B15,B16,B17,B18,B19,B20;
....................    //int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
.................... struct Bit64 Inputt,Output,InputType,FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void StoreReleaseFault()
*
018C8:  MOVLB  7
018CA:  CLRF   x51
.................... {
....................    Signed int8 i=0;
....................    for(i=0;i<=10;i++)
018CC:  CLRF   x51
018CE:  BTFSC  x51.7
018D0:  BRA    18D8
018D2:  MOVF   x51,W
018D4:  SUBLW  0A
018D6:  BNC   191E
....................    {
....................       FaultAgo[i] = FaultNow[i];
018D8:  CLRF   03
018DA:  MOVF   x51,W
018DC:  MOVWF  00
018DE:  BTFSC  FE8.7
018E0:  DECF   03,F
018E2:  MOVWF  x52
018E4:  MOVFF  03,753
018E8:  CLRF   03
018EA:  MOVF   x51,W
018EC:  MOVWF  00
018EE:  BTFSC  FE8.7
018F0:  DECF   03,F
018F2:  MOVWF  x54
018F4:  MOVLW  06
018F6:  MOVWF  x56
018F8:  MOVLW  EF
018FA:  MOVWF  x55
018FC:  MOVLB  0
018FE:  RCALL  182E
01900:  MOVFF  752,754
01904:  MOVLB  7
01906:  CLRF   x55
01908:  BTFSC  01.0
0190A:  INCF   x55,F
0190C:  MOVLW  06
0190E:  MOVWF  x57
01910:  MOVLW  EC
01912:  MOVWF  x56
01914:  MOVLB  0
01916:  RCALL  1886
01918:  MOVLB  7
0191A:  INCF   x51,F
0191C:  BRA    18CE
....................    }
0191E:  MOVLB  0
01920:  GOTO   2016 (RETURN)
.................... }
.................... 
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02456:  MOVLB  3
02458:  SETF   x71
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
0245A:  SETF   x70
.................... 
....................    for(i = 0;i < usDataLen;i++)
0245C:  MOVLB  7
0245E:  CLRF   x5F
02460:  MOVF   x5D,W
02462:  SUBWF  x5F,W
02464:  BC    24A8
....................    {
....................       restart_wdt() ;
02466:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02468:  MOVF   x5F,W
0246A:  ADDWF  x5B,W
0246C:  MOVWF  FE9
0246E:  MOVLW  00
02470:  ADDWFC x5C,W
02472:  MOVWF  FEA
02474:  MOVF   FEF,W
02476:  MOVLB  3
02478:  XORWF  x71,W
0247A:  MOVLB  7
0247C:  MOVWF  x5E
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
0247E:  CLRF   03
02480:  MOVF   x5E,W
02482:  MOVLB  0
02484:  CALL   00C6
02488:  MOVWF  01
0248A:  MOVLB  3
0248C:  MOVF   x70,W
0248E:  XORWF  01,W
02490:  MOVWF  x71
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02492:  CLRF   03
02494:  MOVLB  7
02496:  MOVF   x5E,W
02498:  MOVLB  0
0249A:  CALL   01D6
0249E:  MOVFF  FE8,370
024A2:  MOVLB  7
024A4:  INCF   x5F,F
024A6:  BRA    2460
....................    }
024A8:  MOVLB  0
024AA:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................    
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  // } 
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
024B4:  CLRF   1E
....................    Input9_16_Send = 0x00;
024B6:  CLRF   1F
....................    
....................    
....................    Ack1_8_Send = 0x00;
024B8:  CLRF   26
....................    Ack9_16_Send = 0x00;
024BA:  CLRF   27
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
024BC:  MOVLB  6
024BE:  BTFSC  xDE.0
024C0:  BRA    24CA
024C2:  BTFSC  xD0.0
024C4:  BRA    24CA
....................       AckSend.B1 = 1;
024C6:  BSF    xE4.0
024C8:  BRA    24CC
....................    else
....................       AckSend.B1 = 0;
024CA:  BCF    xE4.0
....................    if((In.B2 == 0) && (Output.B2 ==0))
024CC:  BTFSC  xDE.1
024CE:  BRA    24D8
024D0:  BTFSC  xD0.1
024D2:  BRA    24D8
....................       AckSend.B2 = 1;
024D4:  BSF    xE4.1
024D6:  BRA    24DA
....................    else
....................       AckSend.B2 = 0;
024D8:  BCF    xE4.1
....................    if((In.B3 == 0) && (Output.B3 ==0))
024DA:  BTFSC  xDE.2
024DC:  BRA    24E6
024DE:  BTFSC  xD0.2
024E0:  BRA    24E6
....................       AckSend.B3 = 1;
024E2:  BSF    xE4.2
024E4:  BRA    24E8
....................    else
....................       AckSend.B3 = 0;
024E6:  BCF    xE4.2
....................    if((In.B4 == 0) && (Output.B4 ==0))
024E8:  BTFSC  xDE.3
024EA:  BRA    24F4
024EC:  BTFSC  xD0.3
024EE:  BRA    24F4
....................       AckSend.B4 = 1;
024F0:  BSF    xE4.3
024F2:  BRA    24F6
....................    else
....................       AckSend.B4 = 0;
024F4:  BCF    xE4.3
....................    if((In.B5 == 0) && (Output.B5 ==0))
024F6:  BTFSC  xDE.4
024F8:  BRA    2502
024FA:  BTFSC  xD0.4
024FC:  BRA    2502
....................       AckSend.B5 = 1;
024FE:  BSF    xE4.4
02500:  BRA    2504
....................    else
....................       AckSend.B5 = 0;
02502:  BCF    xE4.4
....................    if((In.B6 == 0) && (Output.B6 ==0))
02504:  BTFSC  xDE.5
02506:  BRA    2510
02508:  BTFSC  xD0.5
0250A:  BRA    2510
....................       AckSend.B6 = 1;
0250C:  BSF    xE4.5
0250E:  BRA    2512
....................    else
....................       AckSend.B6 = 0;
02510:  BCF    xE4.5
....................    if((In.B7 == 0) && (Output.B7 ==0))
02512:  BTFSC  xDE.6
02514:  BRA    251E
02516:  BTFSC  xD0.6
02518:  BRA    251E
....................       AckSend.B7 = 1;
0251A:  BSF    xE4.6
0251C:  BRA    2520
....................    else
....................       AckSend.B7 = 0;
0251E:  BCF    xE4.6
....................    if((In.B8 == 0) && (Output.B8 ==0))
02520:  BTFSC  xDE.7
02522:  BRA    252C
02524:  BTFSC  xD0.7
02526:  BRA    252C
....................       AckSend.B8 = 1;
02528:  BSF    xE4.7
0252A:  BRA    252E
....................    else
....................       AckSend.B8 = 0;
0252C:  BCF    xE4.7
....................    if((In.B9 == 0) && (Output.B9 ==0))
0252E:  BTFSC  xDF.0
02530:  BRA    253A
02532:  BTFSC  xD1.0
02534:  BRA    253A
....................       AckSend.B9 = 1;
02536:  BSF    xE5.0
02538:  BRA    253C
....................    else
....................       AckSend.B9 = 0;
0253A:  BCF    xE5.0
....................    if((In.B10 == 0) && (Output.B10 ==0))
0253C:  BTFSC  xDF.1
0253E:  BRA    2548
02540:  BTFSC  xD1.1
02542:  BRA    2548
....................       AckSend.B10 = 1;
02544:  BSF    xE5.1
02546:  BRA    254A
....................    else
....................       AckSend.B10 = 0;
02548:  BCF    xE5.1
.................... 
.................... 
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
0254A:  MOVLW  00
0254C:  BTFSC  xE4.7
0254E:  MOVLW  01
02550:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
02552:  BCF    FD8.0
02554:  RLCF   26,W
02556:  MOVLB  7
02558:  MOVWF  x5A
0255A:  MOVLW  00
0255C:  MOVLB  6
0255E:  BTFSC  xE4.6
02560:  MOVLW  01
02562:  MOVLB  7
02564:  IORWF  x5A,W
02566:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
02568:  BCF    FD8.0
0256A:  RLCF   26,W
0256C:  MOVWF  x5A
0256E:  MOVLW  00
02570:  MOVLB  6
02572:  BTFSC  xE4.5
02574:  MOVLW  01
02576:  MOVLB  7
02578:  IORWF  x5A,W
0257A:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
0257C:  BCF    FD8.0
0257E:  RLCF   26,W
02580:  MOVWF  x5A
02582:  MOVLW  00
02584:  MOVLB  6
02586:  BTFSC  xE4.4
02588:  MOVLW  01
0258A:  MOVLB  7
0258C:  IORWF  x5A,W
0258E:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
02590:  BCF    FD8.0
02592:  RLCF   26,W
02594:  MOVWF  x5A
02596:  MOVLW  00
02598:  MOVLB  6
0259A:  BTFSC  xE4.3
0259C:  MOVLW  01
0259E:  MOVLB  7
025A0:  IORWF  x5A,W
025A2:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
025A4:  BCF    FD8.0
025A6:  RLCF   26,W
025A8:  MOVWF  x5A
025AA:  MOVLW  00
025AC:  MOVLB  6
025AE:  BTFSC  xE4.2
025B0:  MOVLW  01
025B2:  MOVLB  7
025B4:  IORWF  x5A,W
025B6:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
025B8:  BCF    FD8.0
025BA:  RLCF   26,W
025BC:  MOVWF  x5A
025BE:  MOVLW  00
025C0:  MOVLB  6
025C2:  BTFSC  xE4.1
025C4:  MOVLW  01
025C6:  MOVLB  7
025C8:  IORWF  x5A,W
025CA:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
025CC:  BCF    FD8.0
025CE:  RLCF   26,W
025D0:  MOVWF  x5A
025D2:  MOVLW  00
025D4:  MOVLB  6
025D6:  BTFSC  xE4.0
025D8:  MOVLW  01
025DA:  MOVLB  7
025DC:  IORWF  x5A,W
025DE:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B10;
025E0:  MOVLW  00
025E2:  MOVLB  6
025E4:  BTFSC  xE5.1
025E6:  MOVLW  01
025E8:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
025EA:  BCF    FD8.0
025EC:  RLCF   27,W
025EE:  MOVLB  7
025F0:  MOVWF  x5A
025F2:  MOVLW  00
025F4:  MOVLB  6
025F6:  BTFSC  xE5.0
025F8:  MOVLW  01
025FA:  MOVLB  7
025FC:  IORWF  x5A,W
025FE:  MOVWF  27
....................   
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
02600:  MOVLW  00
02602:  MOVLB  6
02604:  BTFSC  xDE.7
02606:  MOVLW  01
02608:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
0260A:  BCF    FD8.0
0260C:  RLCF   1E,W
0260E:  MOVLB  7
02610:  MOVWF  x5A
02612:  MOVLW  00
02614:  MOVLB  6
02616:  BTFSC  xDE.6
02618:  MOVLW  01
0261A:  MOVLB  7
0261C:  IORWF  x5A,W
0261E:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
02620:  BCF    FD8.0
02622:  RLCF   1E,W
02624:  MOVWF  x5A
02626:  MOVLW  00
02628:  MOVLB  6
0262A:  BTFSC  xDE.5
0262C:  MOVLW  01
0262E:  MOVLB  7
02630:  IORWF  x5A,W
02632:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
02634:  BCF    FD8.0
02636:  RLCF   1E,W
02638:  MOVWF  x5A
0263A:  MOVLW  00
0263C:  MOVLB  6
0263E:  BTFSC  xDE.4
02640:  MOVLW  01
02642:  MOVLB  7
02644:  IORWF  x5A,W
02646:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
02648:  BCF    FD8.0
0264A:  RLCF   1E,W
0264C:  MOVWF  x5A
0264E:  MOVLW  00
02650:  MOVLB  6
02652:  BTFSC  xDE.3
02654:  MOVLW  01
02656:  MOVLB  7
02658:  IORWF  x5A,W
0265A:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0265C:  BCF    FD8.0
0265E:  RLCF   1E,W
02660:  MOVWF  x5A
02662:  MOVLW  00
02664:  MOVLB  6
02666:  BTFSC  xDE.2
02668:  MOVLW  01
0266A:  MOVLB  7
0266C:  IORWF  x5A,W
0266E:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
02670:  BCF    FD8.0
02672:  RLCF   1E,W
02674:  MOVWF  x5A
02676:  MOVLW  00
02678:  MOVLB  6
0267A:  BTFSC  xDE.1
0267C:  MOVLW  01
0267E:  MOVLB  7
02680:  IORWF  x5A,W
02682:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
02684:  BCF    FD8.0
02686:  RLCF   1E,W
02688:  MOVWF  x5A
0268A:  MOVLW  00
0268C:  MOVLB  6
0268E:  BTFSC  xDE.0
02690:  MOVLW  01
02692:  MOVLB  7
02694:  IORWF  x5A,W
02696:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B10;
02698:  MOVLW  00
0269A:  MOVLB  6
0269C:  BTFSC  xDF.1
0269E:  MOVLW  01
026A0:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
026A2:  BCF    FD8.0
026A4:  RLCF   1F,W
026A6:  MOVLB  7
026A8:  MOVWF  x5A
026AA:  MOVLW  00
026AC:  MOVLB  6
026AE:  BTFSC  xDF.0
026B0:  MOVLW  01
026B2:  MOVLB  7
026B4:  IORWF  x5A,W
026B6:  MOVWF  1F
026B8:  MOVLB  0
026BA:  GOTO   2E22 (RETURN)
.................... 
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    static int8 count_bytecount =0;
....................    restart_wdt();
*
002E6:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002E8:  MOVF   x63,W
002EA:  SUBWF  x6C,W
002EC:  BNZ   031C
....................    {
....................      RxD_DataLen = 0x00 ;
002EE:  CLRF   x6F
002F0:  CLRF   x6E
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002F2:  MOVLW  70
002F4:  ADDWF  x6E,W
002F6:  MOVWF  FE9
002F8:  MOVLW  01
002FA:  ADDWFC x6F,W
002FC:  MOVWF  FEA
002FE:  MOVFF  2E,FEF
....................      restart_wdt();
00302:  CLRWDT
....................      RxD_DataLen ++ ;
00304:  INCF   x6E,F
00306:  BTFSC  FD8.2
00308:  INCF   x6F,F
....................      sequence = addr_sq;
0030A:  MOVLW  10
0030C:  MOVWF  x6C
....................      count_bytecount =0; // bytecount = 2 Byte //jj10092564
0030E:  MOVLB  7
00310:  CLRF   x49
....................      
....................      T_timeout = 0x14; //200ms
00312:  MOVLW  14
00314:  MOVLB  5
00316:  MOVWF  x7B
....................    }
00318:  BRA    059C
0031A:  MOVLB  0
....................    else if(sequence == addr_sq)
0031C:  MOVF   x6C,W
0031E:  SUBLW  10
00320:  BNZ   03C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
00322:  MOVLW  70
00324:  ADDWF  x6E,W
00326:  MOVWF  FE9
00328:  MOVLW  01
0032A:  ADDWFC x6F,W
0032C:  MOVWF  FEA
0032E:  MOVFF  2E,FEF
....................       restart_wdt();
00332:  CLRWDT
....................       RxD_DataLen ++ ;
00334:  INCF   x6E,F
00336:  BTFSC  FD8.2
00338:  INCF   x6F,F
.................... 
....................        if(RxD_Buff[1] < 0x17)   //Function Code Must be less than 0x20
0033A:  MOVLB  1
0033C:  MOVF   x71,W
0033E:  SUBLW  16
00340:  BNC   0350
....................        {
....................            sequence = code_sq;
00342:  MOVFF  64,6C
....................            T_timeout = 0x14; //200ms
00346:  MOVLW  14
00348:  MOVLB  5
0034A:  MOVWF  x7B
....................        }
0034C:  BRA    03C2
0034E:  MOVLB  1
....................        else if(RxD_Buff[1] == 0x20)   /////Read Setting//////
00350:  MOVF   x71,W
00352:  SUBLW  20
00354:  BNZ   0364
....................        {
....................           sequence = ubyte_lo_sq;
00356:  MOVFF  67,6C
....................           T_timeout = 0x14; //200ms
0035A:  MOVLW  14
0035C:  MOVLB  5
0035E:  MOVWF  x7B
....................        }
00360:  BRA    03C2
00362:  MOVLB  1
....................        else if(RxD_Buff[1] == 0x21)   /////Write setting/////
00364:  MOVF   x71,W
00366:  SUBLW  21
00368:  BNZ   0376
....................        { 
....................           sequence = byte_count_sq ;
0036A:  MOVFF  6A,6C
....................           T_timeout = 0x14; //200ms
0036E:  MOVLW  14
00370:  MOVLB  5
00372:  MOVWF  x7B
....................        }
00374:  BRA    03C2
....................        //   SMS     
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00376:  MOVLW  01
00378:  MOVLB  0
0037A:  SUBWF  x6E,W
0037C:  MOVLB  7
0037E:  MOVWF  x62
00380:  MOVLW  00
00382:  MOVLB  0
00384:  SUBWFB x6F,W
00386:  MOVLB  7
00388:  MOVWF  x63
0038A:  MOVLW  70
0038C:  ADDWF  x62,W
0038E:  MOVWF  FE9
00390:  MOVLW  01
00392:  ADDWFC x63,W
00394:  MOVWF  FEA
00396:  MOVF   FEF,W
00398:  SUBLW  22
0039A:  BNZ   03AA
....................        {
....................           sequence = second_numofdata ;
0039C:  MOVFF  69,6C
....................           T_timeout = 0x14; //200ms
003A0:  MOVLW  14
003A2:  MOVLB  5
003A4:  MOVWF  x7B
....................        }
003A6:  BRA    03C2
003A8:  MOVLB  7
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003AA:  MOVLB  0
003AC:  CLRF   x6F
003AE:  CLRF   x6E
....................           sequence = end_sq;
003B0:  MOVFF  63,6C
....................           T_timeout = 0x00; 
003B4:  MOVLB  5
003B6:  CLRF   x7B
....................           output_bit(P485ctrl,0);
003B8:  BCF    F8A.3
003BA:  BCF    F93.3
....................           count_bytecount =0; // bytecount = 2 Byte //jj10092564
003BC:  MOVLB  7
003BE:  CLRF   x49
003C0:  MOVLB  5
....................        }
....................    }
003C2:  BRA    059C
003C4:  MOVLB  0
....................    ////////////////////////////////
....................    else if(sequence == second_numofdata)
003C6:  MOVF   x69,W
003C8:  SUBWF  x6C,W
003CA:  BNZ   03F2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003CC:  MOVLW  70
003CE:  ADDWF  x6E,W
003D0:  MOVWF  FE9
003D2:  MOVLW  01
003D4:  ADDWFC x6F,W
003D6:  MOVWF  FEA
003D8:  MOVFF  2E,FEF
....................       restart_wdt();
003DC:  CLRWDT
....................       RxD_DataLen ++ ;
003DE:  INCF   x6E,F
003E0:  BTFSC  FD8.2
003E2:  INCF   x6F,F
....................       sequence = byte_count_sq;
003E4:  MOVFF  6A,6C
....................       T_timeout = 0x14; //200ms
003E8:  MOVLW  14
003EA:  MOVLB  5
003EC:  MOVWF  x7B
.................... 
....................    }
003EE:  BRA    059C
003F0:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003F2:  MOVF   x6A,W
003F4:  SUBWF  x6C,W
003F6:  BNZ   045E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003F8:  MOVLW  70
003FA:  ADDWF  x6E,W
003FC:  MOVWF  FE9
003FE:  MOVLW  01
00400:  ADDWFC x6F,W
00402:  MOVWF  FEA
00404:  MOVFF  2E,FEF
....................       restart_wdt();
00408:  CLRWDT
....................       RxD_DataLen ++ ;
0040A:  INCF   x6E,F
0040C:  BTFSC  FD8.2
0040E:  INCF   x6F,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
00410:  MOVLB  1
00412:  MOVF   x71,W
00414:  SUBLW  22
00416:  BNZ   042A
....................       {
....................          index = (RxD_Buff[2] * 0x64) + RxD_Buff[3];
00418:  MOVF   x72,W
0041A:  MULLW  64
0041C:  MOVF   FF3,W
0041E:  ADDWF  x73,W
00420:  MOVLB  5
00422:  MOVWF  x7C
00424:  CLRF   x7D
....................       }
00426:  BRA    0452
00428:  MOVLB  1
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
0042A:  MOVLW  01
0042C:  MOVLB  0
0042E:  SUBWF  x6E,W
00430:  MOVLB  7
00432:  MOVWF  x62
00434:  MOVLW  00
00436:  MOVLB  0
00438:  SUBWFB x6F,W
0043A:  MOVLB  7
0043C:  MOVWF  x63
0043E:  MOVLW  70
00440:  ADDWF  x62,W
00442:  MOVWF  FE9
00444:  MOVLW  01
00446:  ADDWFC x63,W
00448:  MOVWF  FEA
0044A:  MOVLB  5
0044C:  CLRF   x7D
0044E:  MOVFF  FEF,57C
....................       }
....................       
....................       T_timeout = 0x14; //200ms
00452:  MOVLW  14
00454:  MOVWF  x7B
....................       sequence = data_sq ;
00456:  MOVFF  6B,6C
....................    }
0045A:  BRA    059C
0045C:  MOVLB  0
....................    else if(sequence == data_sq)
0045E:  MOVF   x6B,W
00460:  SUBWF  x6C,W
00462:  BNZ   049A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00464:  MOVLW  70
00466:  ADDWF  x6E,W
00468:  MOVWF  FE9
0046A:  MOVLW  01
0046C:  ADDWFC x6F,W
0046E:  MOVWF  FEA
00470:  MOVFF  2E,FEF
....................       restart_wdt();
00474:  CLRWDT
....................       RxD_DataLen ++ ;
00476:  INCF   x6E,F
00478:  BTFSC  FD8.2
0047A:  INCF   x6F,F
....................       index -- ;                     //Data Byte Count
0047C:  MOVLB  5
0047E:  MOVF   x7C,W
00480:  BTFSC  FD8.2
00482:  DECF   x7D,F
00484:  DECF   x7C,F
....................       if(index == 0x00)
00486:  MOVF   x7C,F
00488:  BNZ   0492
0048A:  MOVF   x7D,F
0048C:  BNZ   0492
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0048E:  MOVFF  67,6C
....................       }
....................       T_timeout = 0x14; //200ms
00492:  MOVLW  14
00494:  MOVWF  x7B
....................    }
00496:  BRA    059C
00498:  MOVLB  0
....................    else if(sequence == code_sq)
0049A:  MOVF   x64,W
0049C:  SUBWF  x6C,W
0049E:  BNZ   04C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
004A0:  MOVLW  70
004A2:  ADDWF  x6E,W
004A4:  MOVWF  FE9
004A6:  MOVLW  01
004A8:  ADDWFC x6F,W
004AA:  MOVWF  FEA
004AC:  MOVFF  2E,FEF
....................       restart_wdt();
004B0:  CLRWDT
....................       RxD_DataLen ++ ;
004B2:  INCF   x6E,F
004B4:  BTFSC  FD8.2
004B6:  INCF   x6F,F
....................       sequence = start_addr_hi_sq;
004B8:  MOVFF  65,6C
....................       T_timeout = 0x14; //200ms
004BC:  MOVLW  14
004BE:  MOVLB  5
004C0:  MOVWF  x7B
.................... 
....................    }
004C2:  BRA    059C
004C4:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
004C6:  MOVF   x65,W
004C8:  SUBWF  x6C,W
004CA:  BNZ   04F2
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
004CC:  MOVLW  70
004CE:  ADDWF  x6E,W
004D0:  MOVWF  FE9
004D2:  MOVLW  01
004D4:  ADDWFC x6F,W
004D6:  MOVWF  FEA
004D8:  MOVFF  2E,FEF
....................       restart_wdt();
004DC:  CLRWDT
....................       RxD_DataLen ++ ;
004DE:  INCF   x6E,F
004E0:  BTFSC  FD8.2
004E2:  INCF   x6F,F
....................       sequence = start_addr_lo_sq;
004E4:  MOVFF  66,6C
....................       T_timeout = 0x14; //200ms
004E8:  MOVLW  14
004EA:  MOVLB  5
004EC:  MOVWF  x7B
....................    }
004EE:  BRA    059C
004F0:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004F2:  MOVF   x66,W
004F4:  SUBWF  x6C,W
004F6:  BNZ   051E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004F8:  MOVLW  70
004FA:  ADDWF  x6E,W
004FC:  MOVWF  FE9
004FE:  MOVLW  01
00500:  ADDWFC x6F,W
00502:  MOVWF  FEA
00504:  MOVFF  2E,FEF
....................       restart_wdt();
00508:  CLRWDT
....................       RxD_DataLen ++ ;
0050A:  INCF   x6E,F
0050C:  BTFSC  FD8.2
0050E:  INCF   x6F,F
....................       sequence = ubyte_hi_sq;
00510:  MOVLW  15
00512:  MOVWF  x6C
....................       T_timeout = 0x14; //200ms
00514:  MOVLW  14
00516:  MOVLB  5
00518:  MOVWF  x7B
....................    }
0051A:  BRA    059C
0051C:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
0051E:  MOVF   x6C,W
00520:  SUBLW  15
00522:  BNZ   054A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
00524:  MOVLW  70
00526:  ADDWF  x6E,W
00528:  MOVWF  FE9
0052A:  MOVLW  01
0052C:  ADDWFC x6F,W
0052E:  MOVWF  FEA
00530:  MOVFF  2E,FEF
....................       restart_wdt();
00534:  CLRWDT
....................       RxD_DataLen ++ ;
00536:  INCF   x6E,F
00538:  BTFSC  FD8.2
0053A:  INCF   x6F,F
....................       sequence = ubyte_lo_sq;
0053C:  MOVFF  67,6C
....................       T_timeout = 0x14; //200ms
00540:  MOVLW  14
00542:  MOVLB  5
00544:  MOVWF  x7B
....................    }
00546:  BRA    059C
00548:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
0054A:  MOVF   x67,W
0054C:  SUBWF  x6C,W
0054E:  BNZ   0576
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00550:  MOVLW  70
00552:  ADDWF  x6E,W
00554:  MOVWF  FE9
00556:  MOVLW  01
00558:  ADDWFC x6F,W
0055A:  MOVWF  FEA
0055C:  MOVFF  2E,FEF
....................       restart_wdt();
00560:  CLRWDT
....................       RxD_DataLen ++ ;
00562:  INCF   x6E,F
00564:  BTFSC  FD8.2
00566:  INCF   x6F,F
....................       sequence = crc_hi_sq;
00568:  MOVFF  68,6C
....................       T_timeout = 0x14; //200ms
0056C:  MOVLW  14
0056E:  MOVLB  5
00570:  MOVWF  x7B
....................    }
00572:  BRA    059C
00574:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00576:  MOVF   x68,W
00578:  SUBWF  x6C,W
0057A:  BNZ   059C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
0057C:  MOVLW  70
0057E:  ADDWF  x6E,W
00580:  MOVWF  FE9
00582:  MOVLW  01
00584:  ADDWFC x6F,W
00586:  MOVWF  FEA
00588:  MOVFF  2E,FEF
....................       restart_wdt();
0058C:  CLRWDT
....................       sequence = end_sq;
0058E:  MOVFF  63,6C
....................       T_timeout = 0x00;
00592:  MOVLB  5
00594:  CLRF   x7B
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
00596:  BSF    30.5
....................       output_bit(P485ctrl,0);
00598:  BCF    F8A.3
0059A:  BCF    F93.3
0059C:  MOVLB  0
....................    }
0059E:  GOTO   05AC (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
026BE:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
026C0:  MOVLW  01
026C2:  SUBWF  x6E,W
026C4:  MOVLB  7
026C6:  MOVWF  x59
026C8:  MOVLW  00
026CA:  MOVLB  0
026CC:  SUBWFB x6F,W
026CE:  MOVLB  7
026D0:  MOVWF  x5A
026D2:  MOVLW  01
026D4:  MOVWF  x5C
026D6:  MOVLW  70
026D8:  MOVWF  x5B
026DA:  MOVFF  759,75D
026DE:  MOVLB  0
026E0:  RCALL  2456
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
026E2:  MOVLW  01
026E4:  SUBWF  x6E,W
026E6:  MOVLB  7
026E8:  MOVWF  x59
026EA:  MOVLW  00
026EC:  MOVLB  0
026EE:  SUBWFB x6F,W
026F0:  MOVLB  7
026F2:  MOVWF  x5A
026F4:  MOVLW  70
026F6:  ADDWF  x59,W
026F8:  MOVWF  FE9
026FA:  MOVLW  01
026FC:  ADDWFC x5A,W
026FE:  MOVWF  FEA
02700:  MOVF   FEF,W
02702:  MOVLB  3
02704:  SUBWF  x71,W
02706:  BTFSS  FD8.2
02708:  GOTO   44AE
0270C:  MOVLW  70
0270E:  MOVLB  0
02710:  ADDWF  x6E,W
02712:  MOVWF  FE9
02714:  MOVLW  01
02716:  ADDWFC x6F,W
02718:  MOVWF  FEA
0271A:  MOVF   FEF,W
0271C:  MOVLB  3
0271E:  SUBWF  x70,W
02720:  BTFSS  FD8.2
02722:  GOTO   44AE
....................    {
....................    
....................          
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
02726:  MOVLB  1
02728:  MOVF   x70,W
0272A:  SUBLW  AA
0272C:  BTFSS  FD8.2
0272E:  BRA    29EC
02730:  MOVF   x71,W
02732:  SUBLW  20
02734:  BTFSS  FD8.2
02736:  BRA    29EC
....................       {
....................          TxD_Buff[0] = Address ;         //Address
02738:  MOVFF  6D,70
....................          TxD_Buff[1] = 0x20 ;            //function code
0273C:  MOVLW  20
0273E:  MOVLB  0
02740:  MOVWF  x71
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
02742:  MOVLW  1C
02744:  MOVWF  x72
....................          TxD_Buff[3] = InputType1_8 ;    //1
02746:  MOVFF  3B,73
....................          TxD_Buff[4] = InputType9_16 ;  //2
0274A:  MOVFF  3C,74
....................          TxD_Buff[5] = InputType17_24 ;//3
0274E:  MOVFF  3D,75
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
02752:  MOVFF  3E,76
....................          TxD_Buff[7] = FaultType9_16 ; //5
02756:  MOVFF  3F,77
....................          TxD_Buff[8] = FaultType17_24 ;   //6
0275A:  MOVFF  40,78
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
0275E:  MOVFF  41,79
....................          TxD_Buff[10] = OutputType9_16 ;  //8
02762:  MOVFF  42,7A
....................          TxD_Buff[11] = OutputType17_24 ; //9
02766:  MOVFF  43,7B
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
0276A:  MOVFF  44,7C
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
0276E:  MOVFF  45,7D
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
02772:  MOVFF  46,7E
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
02776:  MOVFF  47,7F
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
0277A:  MOVFF  48,80
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
0277E:  MOVFF  49,81
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
02782:  MOVFF  FF2,759
02786:  BCF    FF2.7
02788:  CLRF   FAA
0278A:  MOVLW  10
0278C:  MOVWF  FA9
0278E:  BCF    FA6.6
02790:  BCF    FA6.7
02792:  BSF    FA6.0
02794:  MOVF   FA8,W
02796:  MOVLB  7
02798:  BTFSC  x59.7
0279A:  BSF    FF2.7
0279C:  MOVLB  0
0279E:  MOVWF  x82
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
027A0:  MOVFF  FF2,759
027A4:  BCF    FF2.7
027A6:  CLRF   FAA
027A8:  MOVLW  11
027AA:  MOVWF  FA9
027AC:  BCF    FA6.6
027AE:  BCF    FA6.7
027B0:  BSF    FA6.0
027B2:  MOVF   FA8,W
027B4:  MOVLB  7
027B6:  BTFSC  x59.7
027B8:  BSF    FF2.7
027BA:  MOVLB  0
027BC:  MOVWF  x83
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
027BE:  MOVFF  FF2,759
027C2:  BCF    FF2.7
027C4:  CLRF   FAA
027C6:  MOVLW  12
027C8:  MOVWF  FA9
027CA:  BCF    FA6.6
027CC:  BCF    FA6.7
027CE:  BSF    FA6.0
027D0:  MOVF   FA8,W
027D2:  MOVLB  7
027D4:  BTFSC  x59.7
027D6:  BSF    FF2.7
027D8:  MOVLB  0
027DA:  MOVWF  x84
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
027DC:  MOVFF  FF2,759
027E0:  BCF    FF2.7
027E2:  CLRF   FAA
027E4:  MOVLW  13
027E6:  MOVWF  FA9
027E8:  BCF    FA6.6
027EA:  BCF    FA6.7
027EC:  BSF    FA6.0
027EE:  MOVF   FA8,W
027F0:  MOVLB  7
027F2:  BTFSC  x59.7
027F4:  BSF    FF2.7
027F6:  MOVLB  0
027F8:  MOVWF  x85
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
027FA:  MOVFF  FF2,759
027FE:  BCF    FF2.7
02800:  CLRF   FAA
02802:  MOVLW  14
02804:  MOVWF  FA9
02806:  BCF    FA6.6
02808:  BCF    FA6.7
0280A:  BSF    FA6.0
0280C:  MOVF   FA8,W
0280E:  MOVLB  7
02810:  BTFSC  x59.7
02812:  BSF    FF2.7
02814:  MOVLB  0
02816:  MOVWF  x86
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
02818:  MOVFF  FF2,759
0281C:  BCF    FF2.7
0281E:  CLRF   FAA
02820:  MOVLW  15
02822:  MOVWF  FA9
02824:  BCF    FA6.6
02826:  BCF    FA6.7
02828:  BSF    FA6.0
0282A:  MOVF   FA8,W
0282C:  MOVLB  7
0282E:  BTFSC  x59.7
02830:  BSF    FF2.7
02832:  MOVLB  0
02834:  MOVWF  x87
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
02836:  MOVFF  FF2,759
0283A:  BCF    FF2.7
0283C:  CLRF   FAA
0283E:  MOVLW  16
02840:  MOVWF  FA9
02842:  BCF    FA6.6
02844:  BCF    FA6.7
02846:  BSF    FA6.0
02848:  MOVF   FA8,W
0284A:  MOVLB  7
0284C:  BTFSC  x59.7
0284E:  BSF    FF2.7
02850:  MOVLB  0
02852:  MOVWF  x88
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
02854:  MOVFF  FF2,759
02858:  BCF    FF2.7
0285A:  CLRF   FAA
0285C:  MOVLW  17
0285E:  MOVWF  FA9
02860:  BCF    FA6.6
02862:  BCF    FA6.7
02864:  BSF    FA6.0
02866:  MOVF   FA8,W
02868:  MOVLB  7
0286A:  BTFSC  x59.7
0286C:  BSF    FF2.7
0286E:  MOVLB  0
02870:  MOVWF  x89
....................        
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
02872:  MOVFF  5E,8A
....................          TxD_Buff[27] = AutoAckTime ;        //25
02876:  MOVFF  5F,8B
....................          TxD_Buff[28] = FlashingRate ;       //26
0287A:  MOVFF  60,8C
....................          TxD_Buff[29] = NoOfPoint ;          //27
0287E:  MOVFF  61,8D
....................          TxD_Buff[30] = FaultDelayTime ;    //28
02882:  MOVLW  1C
02884:  MOVWF  x8E
....................          TxD_Buff[31] = Address ;            //29
02886:  MOVFF  6D,8F
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
0288A:  MOVFF  71E,90
....................          TxD_Buff[33] = FaultDelayTime[2] ;
0288E:  MOVFF  720,91
....................          TxD_Buff[34] = FaultDelayTime[3] ;
02892:  MOVFF  722,92
....................          TxD_Buff[35] = FaultDelayTime[4] ;
02896:  MOVFF  724,93
....................          TxD_Buff[36] = FaultDelayTime[5] ;
0289A:  MOVFF  726,94
....................          TxD_Buff[37] = FaultDelayTime[6] ;
0289E:  MOVFF  728,95
....................          TxD_Buff[38] = FaultDelayTime[7] ;
028A2:  MOVFF  72A,96
....................          TxD_Buff[39] = FaultDelayTime[8] ;
028A6:  MOVFF  72C,97
....................          TxD_Buff[40] = FaultDelayTime[9] ;
028AA:  MOVFF  72E,98
....................          TxD_Buff[41] = FaultDelayTime[10] ;
028AE:  MOVFF  730,99
....................          TxD_Buff[42] = FaultDelayTime[11] ;
028B2:  MOVFF  732,9A
....................          TxD_Buff[43] = FaultDelayTime[12] ;
028B6:  MOVFF  734,9B
....................          TxD_Buff[44] = FaultDelayTime[13] ;
028BA:  MOVFF  736,9C
....................          TxD_Buff[45] = FaultDelayTime[14] ;
028BE:  MOVFF  738,9D
....................          TxD_Buff[46] = FaultDelayTime[15] ;
028C2:  MOVFF  73A,9E
....................          TxD_Buff[47] = FaultDelayTime[16] ;
028C6:  MOVFF  73C,9F
....................          TxD_Buff[48] = FaultDelayTime[17] ;
028CA:  MOVFF  73E,A0
....................          TxD_Buff[49] = FaultDelayTime[18] ;
028CE:  MOVFF  740,A1
....................          TxD_Buff[50] = FaultDelayTime[19] ;
028D2:  MOVFF  742,A2
....................          TxD_Buff[51] = FaultDelayTime[20] ;
028D6:  MOVFF  744,A3
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
028DA:  MOVLB  7
028DC:  CLRF   x5C
028DE:  MOVLW  70
028E0:  MOVWF  x5B
028E2:  MOVLW  34
028E4:  MOVWF  x5D
028E6:  MOVLB  0
028E8:  RCALL  2456
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
028EA:  MOVFF  371,A4
....................          TxD_Buff[53] = CRC_Lo ;
028EE:  MOVFF  370,A5
.................... 
....................          output_bit(P485ctrl,1);
028F2:  BSF    F8A.3
028F4:  BCF    F93.3
....................          delay_ms(10);
028F6:  MOVLW  0A
028F8:  MOVLB  7
028FA:  MOVWF  x59
028FC:  MOVLB  0
028FE:  CALL   0848
.................... 
....................          putc(Txd_Buff[0]);
02902:  MOVF   x70,W
02904:  RCALL  24AC
....................          putc(Txd_Buff[1]);
02906:  MOVF   x71,W
02908:  RCALL  24AC
....................          putc(Txd_Buff[2]);
0290A:  MOVF   x72,W
0290C:  RCALL  24AC
....................          putc(Txd_Buff[3]);
0290E:  MOVF   x73,W
02910:  RCALL  24AC
....................          putc(Txd_Buff[4]);
02912:  MOVF   x74,W
02914:  RCALL  24AC
....................          putc(Txd_Buff[5]);
02916:  MOVF   x75,W
02918:  RCALL  24AC
....................          putc(Txd_Buff[6]);
0291A:  MOVF   x76,W
0291C:  RCALL  24AC
....................          putc(Txd_Buff[7]);
0291E:  MOVF   x77,W
02920:  RCALL  24AC
....................          putc(Txd_Buff[8]);
02922:  MOVF   x78,W
02924:  RCALL  24AC
....................          putc(Txd_Buff[9]);
02926:  MOVF   x79,W
02928:  RCALL  24AC
....................          putc(Txd_Buff[10]);
0292A:  MOVF   x7A,W
0292C:  RCALL  24AC
....................          putc(Txd_Buff[11]);
0292E:  MOVF   x7B,W
02930:  RCALL  24AC
....................          putc(Txd_Buff[12]);
02932:  MOVF   x7C,W
02934:  RCALL  24AC
....................          putc(Txd_Buff[13]);
02936:  MOVF   x7D,W
02938:  RCALL  24AC
....................          putc(Txd_Buff[14]);
0293A:  MOVF   x7E,W
0293C:  RCALL  24AC
....................          putc(Txd_Buff[15]);
0293E:  MOVF   x7F,W
02940:  RCALL  24AC
....................          putc(Txd_Buff[16]);
02942:  MOVF   x80,W
02944:  RCALL  24AC
....................          putc(Txd_Buff[17]);
02946:  MOVF   x81,W
02948:  RCALL  24AC
....................          putc(Txd_Buff[18]);
0294A:  MOVF   x82,W
0294C:  RCALL  24AC
....................          putc(Txd_Buff[19]);
0294E:  MOVF   x83,W
02950:  RCALL  24AC
....................          putc(Txd_Buff[20]);
02952:  MOVF   x84,W
02954:  RCALL  24AC
....................          putc(Txd_Buff[21]);
02956:  MOVF   x85,W
02958:  RCALL  24AC
....................          putc(Txd_Buff[22]);
0295A:  MOVF   x86,W
0295C:  RCALL  24AC
....................          putc(Txd_Buff[23]);
0295E:  MOVF   x87,W
02960:  RCALL  24AC
....................          putc(Txd_Buff[24]);
02962:  MOVF   x88,W
02964:  RCALL  24AC
....................          putc(Txd_Buff[25]);
02966:  MOVF   x89,W
02968:  RCALL  24AC
....................          putc(Txd_Buff[26]);
0296A:  MOVF   x8A,W
0296C:  RCALL  24AC
....................          putc(Txd_Buff[27]);
0296E:  MOVF   x8B,W
02970:  RCALL  24AC
....................          putc(Txd_Buff[28]);
02972:  MOVF   x8C,W
02974:  RCALL  24AC
....................          putc(Txd_Buff[29]);
02976:  MOVF   x8D,W
02978:  RCALL  24AC
....................          putc(Txd_Buff[30]);
0297A:  MOVF   x8E,W
0297C:  RCALL  24AC
....................          putc(Txd_Buff[31]);
0297E:  MOVF   x8F,W
02980:  RCALL  24AC
....................          
....................          putc(Txd_Buff[32]);
02982:  MOVF   x90,W
02984:  RCALL  24AC
....................          putc(Txd_Buff[33]);
02986:  MOVF   x91,W
02988:  RCALL  24AC
....................          putc(Txd_Buff[34]);
0298A:  MOVF   x92,W
0298C:  RCALL  24AC
....................          putc(Txd_Buff[35]);
0298E:  MOVF   x93,W
02990:  RCALL  24AC
....................          putc(Txd_Buff[36]);
02992:  MOVF   x94,W
02994:  RCALL  24AC
....................          putc(Txd_Buff[37]);
02996:  MOVF   x95,W
02998:  RCALL  24AC
....................          putc(Txd_Buff[38]);
0299A:  MOVF   x96,W
0299C:  RCALL  24AC
....................          putc(Txd_Buff[39]);
0299E:  MOVF   x97,W
029A0:  RCALL  24AC
....................          putc(Txd_Buff[40]);
029A2:  MOVF   x98,W
029A4:  RCALL  24AC
....................          putc(Txd_Buff[41]);
029A6:  MOVF   x99,W
029A8:  RCALL  24AC
....................          
....................          putc(Txd_Buff[42]);
029AA:  MOVF   x9A,W
029AC:  RCALL  24AC
....................          putc(Txd_Buff[43]);
029AE:  MOVF   x9B,W
029B0:  RCALL  24AC
....................          putc(Txd_Buff[44]);
029B2:  MOVF   x9C,W
029B4:  RCALL  24AC
....................          putc(Txd_Buff[45]);
029B6:  MOVF   x9D,W
029B8:  RCALL  24AC
....................          putc(Txd_Buff[46]);
029BA:  MOVF   x9E,W
029BC:  RCALL  24AC
....................          putc(Txd_Buff[47]);
029BE:  MOVF   x9F,W
029C0:  RCALL  24AC
....................          putc(Txd_Buff[48]);
029C2:  MOVF   xA0,W
029C4:  RCALL  24AC
....................          putc(Txd_Buff[49]);
029C6:  MOVF   xA1,W
029C8:  RCALL  24AC
....................          putc(Txd_Buff[50]);
029CA:  MOVF   xA2,W
029CC:  RCALL  24AC
....................          putc(Txd_Buff[51]);
029CE:  MOVF   xA3,W
029D0:  RCALL  24AC
....................          
....................          putc(Txd_Buff[52]);
029D2:  MOVF   xA4,W
029D4:  RCALL  24AC
....................          putc(Txd_Buff[53]);
029D6:  MOVF   xA5,W
029D8:  RCALL  24AC
....................        
....................          delay_ms(3);
029DA:  MOVLW  03
029DC:  MOVLB  7
029DE:  MOVWF  x59
029E0:  MOVLB  0
029E2:  CALL   0848
....................          output_bit(P485ctrl,0);
029E6:  BCF    F8A.3
029E8:  BCF    F93.3
029EA:  MOVLB  1
....................          
....................       }
....................    
....................    
....................    ///////////////////////////////////////////////////////////////
....................       if(RxD_Buff[0] == Address)
029EC:  MOVLB  0
029EE:  MOVF   x6D,W
029F0:  MOVLB  1
029F2:  SUBWF  x70,W
029F4:  BTFSS  FD8.2
029F6:  GOTO   44A4
....................       {
....................       
....................          if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
029FA:  DECFSZ x71,W
029FC:  BRA    2E14
....................          {
....................                //Do Read Coil
....................                Start_Address = RxD_Buff[2] ;
029FE:  MOVLB  3
02A00:  CLRF   x75
02A02:  MOVFF  172,374
....................                Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
02A06:  MOVFF  374,375
02A0A:  MOVLB  7
02A0C:  CLRF   x59
02A0E:  MOVF   x59,W
02A10:  MOVLB  1
02A12:  IORWF  x73,W
02A14:  MOVLB  3
02A16:  MOVWF  x74
02A18:  MOVLB  3
....................                No_PointCount = RxD_Buff[4] ;
02A1A:  CLRF   x77
02A1C:  MOVFF  174,376
....................                No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
02A20:  MOVFF  376,377
02A24:  MOVLB  7
02A26:  CLRF   x59
02A28:  MOVF   x59,W
02A2A:  MOVLB  1
02A2C:  IORWF  x75,W
02A2E:  MOVLB  3
02A30:  MOVWF  x76
02A32:  MOVLB  3
....................    
....................                if(Start_Address < 0x10 && (Start_Address + No_PointCount) < 0x11)  //Valid point 0-15
02A34:  MOVF   x75,F
02A36:  BTFSS  FD8.2
02A38:  BRA    2DA2
02A3A:  MOVF   x74,W
02A3C:  SUBLW  0F
02A3E:  BTFSS  FD8.0
02A40:  BRA    2DA2
02A42:  MOVF   x76,W
02A44:  ADDWF  x74,W
02A46:  MOVLB  7
02A48:  MOVWF  x59
02A4A:  MOVLB  3
02A4C:  MOVF   x77,W
02A4E:  ADDWFC x75,W
02A50:  MOVLB  7
02A52:  MOVWF  x5A
02A54:  MOVF   x5A,F
02A56:  BTFSC  FD8.2
02A58:  BRA    2A5E
02A5A:  MOVLB  3
02A5C:  BRA    2DA2
02A5E:  MOVF   x59,W
02A60:  SUBLW  10
02A62:  BTFSC  FD8.0
02A64:  BRA    2A6A
02A66:  MOVLB  3
02A68:  BRA    2DA2
....................                {
....................                   if(No_PointCount < 9) Data_ByteCount = 0x01 ;
02A6A:  MOVLB  3
02A6C:  MOVF   x77,F
02A6E:  BNZ   2A7C
02A70:  MOVF   x76,W
02A72:  SUBLW  08
02A74:  BNC   2A7C
02A76:  MOVLW  01
02A78:  MOVWF  x78
02A7A:  BRA    2AA0
....................                   else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
02A7C:  MOVF   x77,F
02A7E:  BNZ   2A8C
02A80:  MOVF   x76,W
02A82:  SUBLW  10
02A84:  BNC   2A8C
02A86:  MOVLW  02
02A88:  MOVWF  x78
02A8A:  BRA    2AA0
....................                   else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
02A8C:  MOVF   x77,F
02A8E:  BNZ   2A9C
02A90:  MOVF   x76,W
02A92:  SUBLW  18
02A94:  BNC   2A9C
02A96:  MOVLW  03
02A98:  MOVWF  x78
02A9A:  BRA    2AA0
....................                   else   Data_ByteCount = 0x01 ; //----Jack
02A9C:  MOVLW  01
02A9E:  MOVWF  x78
....................    
....................                   if(Data_ByteCount == 0x01)
02AA0:  DECFSZ x78,W
02AA2:  BRA    2BDA
....................                   {
....................    
....................                      if(Start_Address < 0x09)
02AA4:  MOVF   x75,F
02AA6:  BNZ   2AC2
02AA8:  MOVF   x74,W
02AAA:  SUBLW  08
02AAC:  BNC   2AC2
....................                      {
....................                         //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                         //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                         //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                          Data_Buff[0] = Input1_8 >> Start_Address ;
02AAE:  MOVFF  4A,379
02AB2:  MOVF   x74,W
02AB4:  MOVWF  01
02AB6:  BZ    2AC0
02AB8:  BCF    FD8.0
02ABA:  RRCF   x79,F
02ABC:  DECFSZ 01,F
02ABE:  BRA    2AB8
....................                          //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                          //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                      }
02AC0:  BRA    2AF6
....................                      else if(Start_Address > 0x08 && Start_Address < 0x10)
02AC2:  MOVF   x75,F
02AC4:  BNZ   2ACC
02AC6:  MOVF   x74,W
02AC8:  SUBLW  08
02ACA:  BC    2AF6
02ACC:  MOVF   x75,F
02ACE:  BNZ   2AF6
02AD0:  MOVF   x74,W
02AD2:  SUBLW  0F
02AD4:  BNC   2AF6
....................                      {
....................                         //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                         Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
02AD6:  MOVLW  08
02AD8:  SUBWF  x74,W
02ADA:  MOVWF  00
02ADC:  MOVLW  00
02ADE:  SUBWFB x75,W
02AE0:  MOVWF  03
02AE2:  MOVFF  00,01
02AE6:  MOVFF  32,379
02AEA:  MOVF   01,F
02AEC:  BZ    2AF6
02AEE:  BCF    FD8.0
02AF0:  RRCF   x79,F
02AF2:  DECFSZ 01,F
02AF4:  BRA    2AEE
....................                      }
....................    
....................    
....................                      if(No_PointCount == 0x08)
02AF6:  MOVF   x76,W
02AF8:  SUBLW  08
02AFA:  BNZ   2B02
02AFC:  MOVF   x77,F
02AFE:  BNZ   2B02
....................                      {
....................                         Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                      }
02B00:  BRA    2B6C
....................                      else if(No_PointCount == 0x07)
02B02:  MOVF   x76,W
02B04:  SUBLW  07
02B06:  BNZ   2B10
02B08:  MOVF   x77,F
02B0A:  BNZ   2B10
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
02B0C:  BCF    x79.7
....................                      }
02B0E:  BRA    2B6C
....................                      else if(No_PointCount == 0x06)
02B10:  MOVF   x76,W
02B12:  SUBLW  06
02B14:  BNZ   2B20
02B16:  MOVF   x77,F
02B18:  BNZ   2B20
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
02B1A:  MOVLW  3F
02B1C:  ANDWF  x79,F
....................                      }
02B1E:  BRA    2B6C
....................                      else if(No_PointCount == 0x05)
02B20:  MOVF   x76,W
02B22:  SUBLW  05
02B24:  BNZ   2B30
02B26:  MOVF   x77,F
02B28:  BNZ   2B30
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
02B2A:  MOVLW  1F
02B2C:  ANDWF  x79,F
....................                      }
02B2E:  BRA    2B6C
....................                      else if(No_PointCount == 0x04)
02B30:  MOVF   x76,W
02B32:  SUBLW  04
02B34:  BNZ   2B40
02B36:  MOVF   x77,F
02B38:  BNZ   2B40
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
02B3A:  MOVLW  0F
02B3C:  ANDWF  x79,F
....................                      }
02B3E:  BRA    2B6C
....................                      else if(No_PointCount == 0x03)
02B40:  MOVF   x76,W
02B42:  SUBLW  03
02B44:  BNZ   2B50
02B46:  MOVF   x77,F
02B48:  BNZ   2B50
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
02B4A:  MOVLW  07
02B4C:  ANDWF  x79,F
....................                      }
02B4E:  BRA    2B6C
....................                      else if(No_PointCount == 0x02)
02B50:  MOVF   x76,W
02B52:  SUBLW  02
02B54:  BNZ   2B60
02B56:  MOVF   x77,F
02B58:  BNZ   2B60
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
02B5A:  MOVLW  03
02B5C:  ANDWF  x79,F
....................                      }
02B5E:  BRA    2B6C
....................                      else if(No_PointCount == 0x01)
02B60:  DECFSZ x76,W
02B62:  BRA    2B6C
02B64:  MOVF   x77,F
02B66:  BNZ   2B6C
....................                      {
....................                         Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
02B68:  MOVLW  01
02B6A:  ANDWF  x79,F
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
02B6C:  MOVFF  6D,70
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
02B70:  MOVLW  01
02B72:  MOVLB  0
02B74:  MOVWF  x71
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02B76:  MOVFF  378,72
....................                      TxD_Buff[3] = Data_Buff[0] ;   //Data
02B7A:  MOVFF  379,73
....................    
....................                      CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
02B7E:  MOVLB  7
02B80:  CLRF   x5C
02B82:  MOVLW  70
02B84:  MOVWF  x5B
02B86:  MOVLW  04
02B88:  MOVWF  x5D
02B8A:  MOVLB  0
02B8C:  RCALL  2456
....................    
....................                      TxD_Buff[4] = CRC_Hi ;
02B8E:  MOVFF  371,74
....................                      TxD_Buff[5] = CRC_Lo ;
02B92:  MOVFF  370,75
.................... 
....................                      output_bit(P485ctrl,1);
02B96:  BSF    F8A.3
02B98:  BCF    F93.3
....................                      restart_wdt();
02B9A:  CLRWDT
....................                      delay_ms(4);
02B9C:  MOVLW  04
02B9E:  MOVLB  7
02BA0:  MOVWF  x59
02BA2:  MOVLB  0
02BA4:  CALL   0848
....................                      restart_wdt();
02BA8:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
02BAA:  MOVF   x70,W
02BAC:  RCALL  24AC
....................                      putc(TxD_Buff[1]) ;               //Function Code
02BAE:  MOVF   x71,W
02BB0:  RCALL  24AC
....................                      putc(TxD_Buff[2]) ;               //Byte Count
02BB2:  MOVF   x72,W
02BB4:  RCALL  24AC
....................                      putc(TxD_Buff[3]) ;
02BB6:  MOVF   x73,W
02BB8:  RCALL  24AC
....................                      putc(TxD_Buff[4]) ;
02BBA:  MOVF   x74,W
02BBC:  RCALL  24AC
....................                      putc(TxD_Buff[5]) ;
02BBE:  MOVF   x75,W
02BC0:  RCALL  24AC
....................                   
....................                      restart_wdt();
02BC2:  CLRWDT
....................                      delay_ms(3);
02BC4:  MOVLW  03
02BC6:  MOVLB  7
02BC8:  MOVWF  x59
02BCA:  MOVLB  0
02BCC:  CALL   0848
....................                      restart_wdt();
02BD0:  CLRWDT
....................                      output_bit(P485ctrl,0);
02BD2:  BCF    F8A.3
02BD4:  BCF    F93.3
....................                  
....................                   }
02BD6:  BRA    2D9E
02BD8:  MOVLB  3
....................                   else if(Data_ByteCount == 0x02)
02BDA:  MOVF   x78,W
02BDC:  SUBLW  02
02BDE:  BTFSS  FD8.2
02BE0:  BRA    2DA0
....................                   {
....................                      Data_Buff[0] = Input1_8 >> Start_Address ;
02BE2:  MOVFF  4A,379
02BE6:  MOVF   x74,W
02BE8:  MOVWF  01
02BEA:  BZ    2BF4
02BEC:  BCF    FD8.0
02BEE:  RRCF   x79,F
02BF0:  DECFSZ 01,F
02BF2:  BRA    2BEC
....................                      Data_Buff[1] = Input9_10 ;// >> Start_Address ;
02BF4:  MOVFF  4B,37A
....................    
....................    
....................                      if((No_PointCount - 0x07) == 0x08)
02BF8:  MOVLW  07
02BFA:  SUBWF  x76,W
02BFC:  MOVLB  7
02BFE:  MOVWF  x59
02C00:  MOVLW  00
02C02:  MOVLB  3
02C04:  SUBWFB x77,W
02C06:  MOVLB  7
02C08:  MOVWF  x5A
02C0A:  MOVF   x59,W
02C0C:  SUBLW  08
02C0E:  BNZ   2C16
02C10:  MOVF   x5A,F
02C12:  BNZ   2C16
....................                      {
....................                         Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                      }
02C14:  BRA    2D1C
....................                      else if((No_PointCount - 0x07) == 0x07)
02C16:  MOVLW  07
02C18:  MOVLB  3
02C1A:  SUBWF  x76,W
02C1C:  MOVLB  7
02C1E:  MOVWF  x59
02C20:  MOVLW  00
02C22:  MOVLB  3
02C24:  SUBWFB x77,W
02C26:  MOVLB  7
02C28:  MOVWF  x5A
02C2A:  MOVF   x59,W
02C2C:  SUBLW  07
02C2E:  BNZ   2C3A
02C30:  MOVF   x5A,F
02C32:  BNZ   2C3A
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
02C34:  MOVLB  3
02C36:  BCF    x7A.7
....................                      }
02C38:  BRA    2D1A
....................                      else if((No_PointCount - 0x07) == 0x06)
02C3A:  MOVLW  07
02C3C:  MOVLB  3
02C3E:  SUBWF  x76,W
02C40:  MOVLB  7
02C42:  MOVWF  x59
02C44:  MOVLW  00
02C46:  MOVLB  3
02C48:  SUBWFB x77,W
02C4A:  MOVLB  7
02C4C:  MOVWF  x5A
02C4E:  MOVF   x59,W
02C50:  SUBLW  06
02C52:  BNZ   2C60
02C54:  MOVF   x5A,F
02C56:  BNZ   2C60
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
02C58:  MOVLW  3F
02C5A:  MOVLB  3
02C5C:  ANDWF  x7A,F
....................                      }
02C5E:  BRA    2D1A
....................                      else if((No_PointCount - 0x07) == 0x05)
02C60:  MOVLW  07
02C62:  MOVLB  3
02C64:  SUBWF  x76,W
02C66:  MOVLB  7
02C68:  MOVWF  x59
02C6A:  MOVLW  00
02C6C:  MOVLB  3
02C6E:  SUBWFB x77,W
02C70:  MOVLB  7
02C72:  MOVWF  x5A
02C74:  MOVF   x59,W
02C76:  SUBLW  05
02C78:  BNZ   2C86
02C7A:  MOVF   x5A,F
02C7C:  BNZ   2C86
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
02C7E:  MOVLW  1F
02C80:  MOVLB  3
02C82:  ANDWF  x7A,F
....................                      }
02C84:  BRA    2D1A
....................                      else if((No_PointCount - 0x07) == 0x04)
02C86:  MOVLW  07
02C88:  MOVLB  3
02C8A:  SUBWF  x76,W
02C8C:  MOVLB  7
02C8E:  MOVWF  x59
02C90:  MOVLW  00
02C92:  MOVLB  3
02C94:  SUBWFB x77,W
02C96:  MOVLB  7
02C98:  MOVWF  x5A
02C9A:  MOVF   x59,W
02C9C:  SUBLW  04
02C9E:  BNZ   2CAC
02CA0:  MOVF   x5A,F
02CA2:  BNZ   2CAC
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
02CA4:  MOVLW  0F
02CA6:  MOVLB  3
02CA8:  ANDWF  x7A,F
....................                      }
02CAA:  BRA    2D1A
....................                      else if((No_PointCount - 0x07) == 0x03)
02CAC:  MOVLW  07
02CAE:  MOVLB  3
02CB0:  SUBWF  x76,W
02CB2:  MOVLB  7
02CB4:  MOVWF  x59
02CB6:  MOVLW  00
02CB8:  MOVLB  3
02CBA:  SUBWFB x77,W
02CBC:  MOVLB  7
02CBE:  MOVWF  x5A
02CC0:  MOVF   x59,W
02CC2:  SUBLW  03
02CC4:  BNZ   2CD2
02CC6:  MOVF   x5A,F
02CC8:  BNZ   2CD2
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
02CCA:  MOVLW  07
02CCC:  MOVLB  3
02CCE:  ANDWF  x7A,F
....................                      }
02CD0:  BRA    2D1A
....................                      else if((No_PointCount - 0x07) == 0x02)
02CD2:  MOVLW  07
02CD4:  MOVLB  3
02CD6:  SUBWF  x76,W
02CD8:  MOVLB  7
02CDA:  MOVWF  x59
02CDC:  MOVLW  00
02CDE:  MOVLB  3
02CE0:  SUBWFB x77,W
02CE2:  MOVLB  7
02CE4:  MOVWF  x5A
02CE6:  MOVF   x59,W
02CE8:  SUBLW  02
02CEA:  BNZ   2CF8
02CEC:  MOVF   x5A,F
02CEE:  BNZ   2CF8
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
02CF0:  MOVLW  03
02CF2:  MOVLB  3
02CF4:  ANDWF  x7A,F
....................                      }
02CF6:  BRA    2D1A
....................                      else if((No_PointCount - 0x07) == 0x01)
02CF8:  MOVLW  07
02CFA:  MOVLB  3
02CFC:  SUBWF  x76,W
02CFE:  MOVLB  7
02D00:  MOVWF  x59
02D02:  MOVLW  00
02D04:  MOVLB  3
02D06:  SUBWFB x77,W
02D08:  MOVLB  7
02D0A:  MOVWF  x5A
02D0C:  DECFSZ x59,W
02D0E:  BRA    2D1C
02D10:  MOVF   x5A,F
02D12:  BNZ   2D1C
....................                      {
....................                         Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
02D14:  MOVLW  01
02D16:  MOVLB  3
02D18:  ANDWF  x7A,F
02D1A:  MOVLB  7
....................                      }
....................    
....................                      TxD_Buff[0] = Address ;         //Address
02D1C:  MOVFF  6D,70
....................                      TxD_Buff[1] = 0x01 ;         //Function Code
02D20:  MOVLW  01
02D22:  MOVLB  0
02D24:  MOVWF  x71
....................                      TxD_Buff[2] = Data_ByteCount ;   //Byte Count
02D26:  MOVFF  378,72
....................                      TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02D2A:  MOVFF  379,73
....................                      TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02D2E:  MOVFF  37A,74
....................    
....................                      CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
02D32:  MOVLB  7
02D34:  CLRF   x5C
02D36:  MOVLW  70
02D38:  MOVWF  x5B
02D3A:  MOVLW  05
02D3C:  MOVWF  x5D
02D3E:  MOVLB  0
02D40:  CALL   2456
....................    
....................                      TxD_Buff[5] = CRC_Hi ;
02D44:  MOVFF  371,75
....................                      TxD_Buff[6] = CRC_Lo ;
02D48:  MOVFF  370,76
.................... 
....................                      output_bit(P485ctrl,1);
02D4C:  BSF    F8A.3
02D4E:  BCF    F93.3
....................                      restart_wdt();
02D50:  CLRWDT
....................                      delay_ms(4);
02D52:  MOVLW  04
02D54:  MOVLB  7
02D56:  MOVWF  x59
02D58:  MOVLB  0
02D5A:  CALL   0848
....................                      restart_wdt();
02D5E:  CLRWDT
....................    
....................                      putc(TxD_Buff[0]) ;               //Address
02D60:  MOVF   x70,W
02D62:  CALL   24AC
....................                      putc(TxD_Buff[1]) ;               //Function Code
02D66:  MOVF   x71,W
02D68:  CALL   24AC
....................                      putc(TxD_Buff[2]) ;               //Byte Count
02D6C:  MOVF   x72,W
02D6E:  CALL   24AC
....................                      putc(TxD_Buff[3]) ;
02D72:  MOVF   x73,W
02D74:  CALL   24AC
....................                      putc(TxD_Buff[4]) ;
02D78:  MOVF   x74,W
02D7A:  CALL   24AC
....................                      putc(TxD_Buff[5]) ;
02D7E:  MOVF   x75,W
02D80:  CALL   24AC
....................                      putc(TxD_Buff[6]) ;
02D84:  MOVF   x76,W
02D86:  CALL   24AC
....................    
....................                      restart_wdt();
02D8A:  CLRWDT
....................                      delay_ms(3);
02D8C:  MOVLW  03
02D8E:  MOVLB  7
02D90:  MOVWF  x59
02D92:  MOVLB  0
02D94:  CALL   0848
....................                      restart_wdt();
02D98:  CLRWDT
....................                      output_bit(P485ctrl,0);
02D9A:  BCF    F8A.3
02D9C:  BCF    F93.3
02D9E:  MOVLB  3
....................                  
....................                   }
....................                }
02DA0:  BRA    2E12
....................                else
....................                {
....................                   //invalid parameter
....................                   TxD_Buff[0] = Address ;         //Address
02DA2:  MOVFF  6D,70
....................                   TxD_Buff[1] = 0x81 ;         //Function Code
02DA6:  MOVLW  81
02DA8:  MOVLB  0
02DAA:  MOVWF  x71
....................                   TxD_Buff[2] = 0x02 ;         //illegal data address
02DAC:  MOVLW  02
02DAE:  MOVWF  x72
....................    
....................                   CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
02DB0:  MOVLB  7
02DB2:  CLRF   x5C
02DB4:  MOVLW  70
02DB6:  MOVWF  x5B
02DB8:  MOVLW  03
02DBA:  MOVWF  x5D
02DBC:  MOVLB  0
02DBE:  CALL   2456
....................    
....................                   TxD_Buff[3] = CRC_Hi ;
02DC2:  MOVFF  371,73
....................                   TxD_Buff[4] = CRC_Lo ;
02DC6:  MOVFF  370,74
.................... 
....................                   output_bit(P485ctrl,1);
02DCA:  BSF    F8A.3
02DCC:  BCF    F93.3
....................                   restart_wdt();
02DCE:  CLRWDT
....................                   delay_ms(4);
02DD0:  MOVLW  04
02DD2:  MOVLB  7
02DD4:  MOVWF  x59
02DD6:  MOVLB  0
02DD8:  CALL   0848
....................                   restart_wdt();
02DDC:  CLRWDT
....................    
....................                   putc(TxD_Buff[0]) ;               //Address
02DDE:  MOVF   x70,W
02DE0:  CALL   24AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
02DE4:  MOVF   x71,W
02DE6:  CALL   24AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
02DEA:  MOVF   x72,W
02DEC:  CALL   24AC
....................                   putc(TxD_Buff[3]) ;
02DF0:  MOVF   x73,W
02DF2:  CALL   24AC
....................                   putc(TxD_Buff[4]) ;
02DF6:  MOVF   x74,W
02DF8:  CALL   24AC
....................    
....................                   restart_wdt();
02DFC:  CLRWDT
....................                   delay_ms(3);
02DFE:  MOVLW  03
02E00:  MOVLB  7
02E02:  MOVWF  x59
02E04:  MOVLB  0
02E06:  CALL   0848
....................                   restart_wdt();
02E0A:  CLRWDT
....................                   output_bit(P485ctrl,0);
02E0C:  BCF    F8A.3
02E0E:  BCF    F93.3
02E10:  MOVLB  3
02E12:  MOVLB  1
....................                   
....................                }
....................             }
.................... 
.................... 
....................               /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
02E14:  MOVF   x71,W
02E16:  SUBLW  07
02E18:  BTFSS  FD8.2
02E1A:  BRA    2F7E
....................       {
....................          alarmtosend();
02E1C:  MOVLB  0
02E1E:  GOTO   24B4
....................          
....................          disable_interrupts(INT_TIMER2);
02E22:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
02E24:  MOVFF  1E,379
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
02E28:  MOVFF  1F,37A
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
02E2C:  MOVFF  20,37B
....................             Data_Buff[3] = Input25_32_Send ;
02E30:  MOVFF  21,37C
....................             Data_Buff[4] = Input33_40_Send ;
02E34:  MOVFF  22,37D
....................             Data_Buff[5] = Input41_48_Send ;
02E38:  MOVFF  23,37E
....................             Data_Buff[6] = Input49_56_Send ;
02E3C:  MOVFF  24,37F
....................             Data_Buff[7] = Input57_64_Send ;
02E40:  MOVFF  25,380
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
02E44:  MOVFF  26,381
....................             Data_Buff[9] = Ack9_16_Send ;
02E48:  MOVFF  27,382
....................             Data_Buff[10] = Ack17_24_Send ;
02E4C:  MOVFF  28,383
....................             Data_Buff[11] = Ack25_32_Send ;
02E50:  MOVFF  29,384
....................             Data_Buff[12] = Ack33_40_Send ;
02E54:  MOVFF  2A,385
....................             Data_Buff[13] = Ack41_48_Send ;
02E58:  MOVFF  2B,386
....................             Data_Buff[14] = Ack49_56_Send ;
02E5C:  MOVFF  2C,387
....................             Data_Buff[15] = Ack57_64_Send ;
02E60:  MOVFF  2D,388
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
02E64:  MOVFF  6D,70
....................             TxD_Buff[1] = 0x07 ;         //Function Code
02E68:  MOVLW  07
02E6A:  MOVWF  x71
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
02E6C:  MOVLW  10
02E6E:  MOVLB  3
02E70:  MOVWF  x78
02E72:  MOVFF  378,72
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
02E76:  MOVFF  379,73
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
02E7A:  MOVFF  37A,74
....................             TxD_Buff[5] = Data_Buff[2] ;  
02E7E:  MOVFF  37B,75
....................             TxD_Buff[6] = Data_Buff[3] ;
02E82:  MOVFF  37C,76
....................             TxD_Buff[7] = Data_Buff[4] ;
02E86:  MOVFF  37D,77
....................             TxD_Buff[8] = Data_Buff[5] ;
02E8A:  MOVFF  37E,78
....................             TxD_Buff[9] = Data_Buff[6] ;
02E8E:  MOVFF  37F,79
....................             TxD_Buff[10] = Data_Buff[7] ;
02E92:  MOVFF  380,7A
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
02E96:  MOVFF  381,7B
....................            TxD_Buff[12] = Data_Buff[9] ;
02E9A:  MOVFF  382,7C
....................            TxD_Buff[13] = Data_Buff[10] ;
02E9E:  MOVFF  383,7D
....................            TxD_Buff[14] = Data_Buff[11] ;
02EA2:  MOVFF  384,7E
....................            TxD_Buff[15] = Data_Buff[12] ;
02EA6:  MOVFF  385,7F
....................            TxD_Buff[16] = Data_Buff[13] ;
02EAA:  MOVFF  386,80
....................            TxD_Buff[17] = Data_Buff[14] ;
02EAE:  MOVFF  387,81
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
02EB2:  MOVFF  388,82
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
02EB6:  MOVLB  7
02EB8:  CLRF   x5C
02EBA:  MOVLW  70
02EBC:  MOVWF  x5B
02EBE:  MOVLW  13
02EC0:  MOVWF  x5D
02EC2:  MOVLB  0
02EC4:  CALL   2456
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
02EC8:  MOVFF  371,83
....................           TxD_Buff[20] = CRC_Lo ;
02ECC:  MOVFF  370,84
.................... 
....................         
....................          output_bit(P485ctrl,1);
02ED0:  BSF    F8A.3
02ED2:  BCF    F93.3
....................          restart_wdt();
02ED4:  CLRWDT
....................          delay_ms(4);
02ED6:  MOVLW  04
02ED8:  MOVLB  7
02EDA:  MOVWF  x59
02EDC:  MOVLB  0
02EDE:  CALL   0848
....................          restart_wdt();
02EE2:  CLRWDT
....................          
....................          
....................          
....................          putc(TxD_Buff[0]) ;               //Address
02EE4:  MOVF   x70,W
02EE6:  CALL   24AC
....................          putc(TxD_Buff[1]) ;               //Function Code
02EEA:  MOVF   x71,W
02EEC:  CALL   24AC
....................          putc(TxD_Buff[2]) ;               //Byte Count
02EF0:  MOVF   x72,W
02EF2:  CALL   24AC
....................          putc(TxD_Buff[3]) ;
02EF6:  MOVF   x73,W
02EF8:  CALL   24AC
....................          putc(TxD_Buff[4]) ;
02EFC:  MOVF   x74,W
02EFE:  CALL   24AC
....................          putc(TxD_Buff[5]) ;
02F02:  MOVF   x75,W
02F04:  CALL   24AC
....................          putc(TxD_Buff[6]) ;
02F08:  MOVF   x76,W
02F0A:  CALL   24AC
....................          putc(TxD_Buff[7]) ;
02F0E:  MOVF   x77,W
02F10:  CALL   24AC
....................          putc(TxD_Buff[8]) ;
02F14:  MOVF   x78,W
02F16:  CALL   24AC
....................          putc(TxD_Buff[9]) ;
02F1A:  MOVF   x79,W
02F1C:  CALL   24AC
....................          putc(TxD_Buff[10]) ;
02F20:  MOVF   x7A,W
02F22:  CALL   24AC
....................          putc(TxD_Buff[11]) ;
02F26:  MOVF   x7B,W
02F28:  CALL   24AC
....................          putc(TxD_Buff[12]) ;
02F2C:  MOVF   x7C,W
02F2E:  CALL   24AC
....................          putc(TxD_Buff[13]) ;
02F32:  MOVF   x7D,W
02F34:  CALL   24AC
....................          putc(TxD_Buff[14]) ;
02F38:  MOVF   x7E,W
02F3A:  CALL   24AC
....................          putc(TxD_Buff[15]) ;
02F3E:  MOVF   x7F,W
02F40:  CALL   24AC
....................          putc(TxD_Buff[16]) ;
02F44:  MOVF   x80,W
02F46:  CALL   24AC
....................          putc(TxD_Buff[17]) ;
02F4A:  MOVF   x81,W
02F4C:  CALL   24AC
....................          putc(TxD_Buff[18]) ;
02F50:  MOVF   x82,W
02F52:  CALL   24AC
....................          putc(TxD_Buff[19]) ;
02F56:  MOVF   x83,W
02F58:  CALL   24AC
....................          putc(TxD_Buff[20]) ;
02F5C:  MOVF   x84,W
02F5E:  CALL   24AC
.................... 
....................          restart_wdt();
02F62:  CLRWDT
....................          delay_ms(3);
02F64:  MOVLW  03
02F66:  MOVLB  7
02F68:  MOVWF  x59
02F6A:  MOVLB  0
02F6C:  CALL   0848
....................          restart_wdt();
02F70:  CLRWDT
....................          output_bit(P485ctrl,0);
02F72:  BCF    F8A.3
02F74:  BCF    F93.3
....................            
....................         
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
02F76:  BSF    F9D.1
....................      
....................        }
02F78:  GOTO   4410
02F7C:  MOVLB  1
....................      
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
02F7E:  MOVF   x71,W
02F80:  SUBLW  21
02F82:  BTFSS  FD8.2
02F84:  GOTO   38EC
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
02F88:  MOVF   FF2,W
02F8A:  MOVWF  00
02F8C:  BCF    FF2.7
02F8E:  CLRF   FAA
02F90:  CLRF   FA9
02F92:  MOVLW  0F
02F94:  MOVWF  FA8
02F96:  BCF    FA6.6
02F98:  BCF    FA6.7
02F9A:  BSF    FA6.2
02F9C:  MOVLB  F
02F9E:  MOVLW  55
02FA0:  MOVWF  FA7
02FA2:  MOVLW  AA
02FA4:  MOVWF  FA7
02FA6:  BSF    FA6.1
02FA8:  BTFSC  FA6.1
02FAA:  BRA    2FA8
02FAC:  BCF    FA6.2
02FAE:  MOVF   00,W
02FB0:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Input Type
02FB2:  MOVFF  FF2,00
02FB6:  BCF    FF2.7
02FB8:  CLRF   FAA
02FBA:  MOVLW  01
02FBC:  MOVWF  FA9
02FBE:  MOVFF  173,FA8
02FC2:  BCF    FA6.6
02FC4:  BCF    FA6.7
02FC6:  BSF    FA6.2
02FC8:  MOVLW  55
02FCA:  MOVWF  FA7
02FCC:  MOVLW  AA
02FCE:  MOVWF  FA7
02FD0:  BSF    FA6.1
02FD2:  BTFSC  FA6.1
02FD4:  BRA    2FD2
02FD6:  BCF    FA6.2
02FD8:  MOVF   00,W
02FDA:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
02FDC:  MOVFF  FF2,00
02FE0:  BCF    FF2.7
02FE2:  CLRF   FAA
02FE4:  MOVLW  02
02FE6:  MOVWF  FA9
02FE8:  MOVFF  174,FA8
02FEC:  BCF    FA6.6
02FEE:  BCF    FA6.7
02FF0:  BSF    FA6.2
02FF2:  MOVLW  55
02FF4:  MOVWF  FA7
02FF6:  MOVLW  AA
02FF8:  MOVWF  FA7
02FFA:  BSF    FA6.1
02FFC:  BTFSC  FA6.1
02FFE:  BRA    2FFC
03000:  BCF    FA6.2
03002:  MOVF   00,W
03004:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
03006:  MOVFF  FF2,00
0300A:  BCF    FF2.7
0300C:  CLRF   FAA
0300E:  MOVLW  03
03010:  MOVWF  FA9
03012:  MOVFF  175,FA8
03016:  BCF    FA6.6
03018:  BCF    FA6.7
0301A:  BSF    FA6.2
0301C:  MOVLW  55
0301E:  MOVWF  FA7
03020:  MOVLW  AA
03022:  MOVWF  FA7
03024:  BSF    FA6.1
03026:  BTFSC  FA6.1
03028:  BRA    3026
0302A:  BCF    FA6.2
0302C:  MOVF   00,W
0302E:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
03030:  MOVFF  FF2,00
03034:  BCF    FF2.7
03036:  CLRF   FAA
03038:  MOVLW  04
0303A:  MOVWF  FA9
0303C:  MOVFF  176,FA8
03040:  BCF    FA6.6
03042:  BCF    FA6.7
03044:  BSF    FA6.2
03046:  MOVLW  55
03048:  MOVWF  FA7
0304A:  MOVLW  AA
0304C:  MOVWF  FA7
0304E:  BSF    FA6.1
03050:  BTFSC  FA6.1
03052:  BRA    3050
03054:  BCF    FA6.2
03056:  MOVF   00,W
03058:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
0305A:  MOVFF  FF2,00
0305E:  BCF    FF2.7
03060:  CLRF   FAA
03062:  MOVLW  05
03064:  MOVWF  FA9
03066:  MOVFF  177,FA8
0306A:  BCF    FA6.6
0306C:  BCF    FA6.7
0306E:  BSF    FA6.2
03070:  MOVLW  55
03072:  MOVWF  FA7
03074:  MOVLW  AA
03076:  MOVWF  FA7
03078:  BSF    FA6.1
0307A:  BTFSC  FA6.1
0307C:  BRA    307A
0307E:  BCF    FA6.2
03080:  MOVF   00,W
03082:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
03084:  MOVFF  FF2,00
03088:  BCF    FF2.7
0308A:  CLRF   FAA
0308C:  MOVLW  06
0308E:  MOVWF  FA9
03090:  MOVFF  178,FA8
03094:  BCF    FA6.6
03096:  BCF    FA6.7
03098:  BSF    FA6.2
0309A:  MOVLW  55
0309C:  MOVWF  FA7
0309E:  MOVLW  AA
030A0:  MOVWF  FA7
030A2:  BSF    FA6.1
030A4:  BTFSC  FA6.1
030A6:  BRA    30A4
030A8:  BCF    FA6.2
030AA:  MOVF   00,W
030AC:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
030AE:  MOVFF  FF2,00
030B2:  BCF    FF2.7
030B4:  CLRF   FAA
030B6:  MOVLW  07
030B8:  MOVWF  FA9
030BA:  MOVFF  179,FA8
030BE:  BCF    FA6.6
030C0:  BCF    FA6.7
030C2:  BSF    FA6.2
030C4:  MOVLW  55
030C6:  MOVWF  FA7
030C8:  MOVLW  AA
030CA:  MOVWF  FA7
030CC:  BSF    FA6.1
030CE:  BTFSC  FA6.1
030D0:  BRA    30CE
030D2:  BCF    FA6.2
030D4:  MOVF   00,W
030D6:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
030D8:  MOVFF  FF2,00
030DC:  BCF    FF2.7
030DE:  CLRF   FAA
030E0:  MOVLW  08
030E2:  MOVWF  FA9
030E4:  MOVFF  17A,FA8
030E8:  BCF    FA6.6
030EA:  BCF    FA6.7
030EC:  BSF    FA6.2
030EE:  MOVLW  55
030F0:  MOVWF  FA7
030F2:  MOVLW  AA
030F4:  MOVWF  FA7
030F6:  BSF    FA6.1
030F8:  BTFSC  FA6.1
030FA:  BRA    30F8
030FC:  BCF    FA6.2
030FE:  MOVF   00,W
03100:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
03102:  MOVFF  FF2,00
03106:  BCF    FF2.7
03108:  CLRF   FAA
0310A:  MOVLW  09
0310C:  MOVWF  FA9
0310E:  MOVFF  17B,FA8
03112:  BCF    FA6.6
03114:  BCF    FA6.7
03116:  BSF    FA6.2
03118:  MOVLW  55
0311A:  MOVWF  FA7
0311C:  MOVLW  AA
0311E:  MOVWF  FA7
03120:  BSF    FA6.1
03122:  BTFSC  FA6.1
03124:  BRA    3122
03126:  BCF    FA6.2
03128:  MOVF   00,W
0312A:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
0312C:  MOVFF  FF2,00
03130:  BCF    FF2.7
03132:  CLRF   FAA
03134:  MOVLW  0A
03136:  MOVWF  FA9
03138:  MOVFF  17C,FA8
0313C:  BCF    FA6.6
0313E:  BCF    FA6.7
03140:  BSF    FA6.2
03142:  MOVLW  55
03144:  MOVWF  FA7
03146:  MOVLW  AA
03148:  MOVWF  FA7
0314A:  BSF    FA6.1
0314C:  BTFSC  FA6.1
0314E:  BRA    314C
03150:  BCF    FA6.2
03152:  MOVF   00,W
03154:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
03156:  MOVFF  FF2,00
0315A:  BCF    FF2.7
0315C:  CLRF   FAA
0315E:  MOVLW  0B
03160:  MOVWF  FA9
03162:  MOVFF  17D,FA8
03166:  BCF    FA6.6
03168:  BCF    FA6.7
0316A:  BSF    FA6.2
0316C:  MOVLW  55
0316E:  MOVWF  FA7
03170:  MOVLW  AA
03172:  MOVWF  FA7
03174:  BSF    FA6.1
03176:  BTFSC  FA6.1
03178:  BRA    3176
0317A:  BCF    FA6.2
0317C:  MOVF   00,W
0317E:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
03180:  MOVFF  FF2,00
03184:  BCF    FF2.7
03186:  CLRF   FAA
03188:  MOVLW  0C
0318A:  MOVWF  FA9
0318C:  MOVFF  17E,FA8
03190:  BCF    FA6.6
03192:  BCF    FA6.7
03194:  BSF    FA6.2
03196:  MOVLW  55
03198:  MOVWF  FA7
0319A:  MOVLW  AA
0319C:  MOVWF  FA7
0319E:  BSF    FA6.1
031A0:  BTFSC  FA6.1
031A2:  BRA    31A0
031A4:  BCF    FA6.2
031A6:  MOVF   00,W
031A8:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
031AA:  MOVFF  FF2,00
031AE:  BCF    FF2.7
031B0:  CLRF   FAA
031B2:  MOVLW  0D
031B4:  MOVWF  FA9
031B6:  MOVFF  17F,FA8
031BA:  BCF    FA6.6
031BC:  BCF    FA6.7
031BE:  BSF    FA6.2
031C0:  MOVLW  55
031C2:  MOVWF  FA7
031C4:  MOVLW  AA
031C6:  MOVWF  FA7
031C8:  BSF    FA6.1
031CA:  BTFSC  FA6.1
031CC:  BRA    31CA
031CE:  BCF    FA6.2
031D0:  MOVF   00,W
031D2:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
031D4:  MOVFF  FF2,00
031D8:  BCF    FF2.7
031DA:  CLRF   FAA
031DC:  MOVLW  0E
031DE:  MOVWF  FA9
031E0:  MOVFF  180,FA8
031E4:  BCF    FA6.6
031E6:  BCF    FA6.7
031E8:  BSF    FA6.2
031EA:  MOVLW  55
031EC:  MOVWF  FA7
031EE:  MOVLW  AA
031F0:  MOVWF  FA7
031F2:  BSF    FA6.1
031F4:  BTFSC  FA6.1
031F6:  BRA    31F4
031F8:  BCF    FA6.2
031FA:  MOVF   00,W
031FC:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
031FE:  MOVFF  FF2,00
03202:  BCF    FF2.7
03204:  CLRF   FAA
03206:  MOVLW  0F
03208:  MOVWF  FA9
0320A:  MOVFF  181,FA8
0320E:  BCF    FA6.6
03210:  BCF    FA6.7
03212:  BSF    FA6.2
03214:  MOVLW  55
03216:  MOVWF  FA7
03218:  MOVLW  AA
0321A:  MOVWF  FA7
0321C:  BSF    FA6.1
0321E:  BTFSC  FA6.1
03220:  BRA    321E
03222:  BCF    FA6.2
03224:  MOVF   00,W
03226:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
03228:  MOVFF  FF2,00
0322C:  BCF    FF2.7
0322E:  CLRF   FAA
03230:  MOVLW  10
03232:  MOVWF  FA9
03234:  MOVFF  182,FA8
03238:  BCF    FA6.6
0323A:  BCF    FA6.7
0323C:  BSF    FA6.2
0323E:  MOVLW  55
03240:  MOVWF  FA7
03242:  MOVLW  AA
03244:  MOVWF  FA7
03246:  BSF    FA6.1
03248:  BTFSC  FA6.1
0324A:  BRA    3248
0324C:  BCF    FA6.2
0324E:  MOVF   00,W
03250:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
03252:  MOVFF  FF2,00
03256:  BCF    FF2.7
03258:  CLRF   FAA
0325A:  MOVLW  11
0325C:  MOVWF  FA9
0325E:  MOVFF  183,FA8
03262:  BCF    FA6.6
03264:  BCF    FA6.7
03266:  BSF    FA6.2
03268:  MOVLW  55
0326A:  MOVWF  FA7
0326C:  MOVLW  AA
0326E:  MOVWF  FA7
03270:  BSF    FA6.1
03272:  BTFSC  FA6.1
03274:  BRA    3272
03276:  BCF    FA6.2
03278:  MOVF   00,W
0327A:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
0327C:  MOVFF  FF2,00
03280:  BCF    FF2.7
03282:  CLRF   FAA
03284:  MOVLW  12
03286:  MOVWF  FA9
03288:  MOVFF  184,FA8
0328C:  BCF    FA6.6
0328E:  BCF    FA6.7
03290:  BSF    FA6.2
03292:  MOVLW  55
03294:  MOVWF  FA7
03296:  MOVLW  AA
03298:  MOVWF  FA7
0329A:  BSF    FA6.1
0329C:  BTFSC  FA6.1
0329E:  BRA    329C
032A0:  BCF    FA6.2
032A2:  MOVF   00,W
032A4:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
032A6:  MOVFF  FF2,00
032AA:  BCF    FF2.7
032AC:  CLRF   FAA
032AE:  MOVLW  13
032B0:  MOVWF  FA9
032B2:  MOVFF  185,FA8
032B6:  BCF    FA6.6
032B8:  BCF    FA6.7
032BA:  BSF    FA6.2
032BC:  MOVLW  55
032BE:  MOVWF  FA7
032C0:  MOVLW  AA
032C2:  MOVWF  FA7
032C4:  BSF    FA6.1
032C6:  BTFSC  FA6.1
032C8:  BRA    32C6
032CA:  BCF    FA6.2
032CC:  MOVF   00,W
032CE:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
032D0:  MOVFF  FF2,00
032D4:  BCF    FF2.7
032D6:  CLRF   FAA
032D8:  MOVLW  14
032DA:  MOVWF  FA9
032DC:  MOVFF  186,FA8
032E0:  BCF    FA6.6
032E2:  BCF    FA6.7
032E4:  BSF    FA6.2
032E6:  MOVLW  55
032E8:  MOVWF  FA7
032EA:  MOVLW  AA
032EC:  MOVWF  FA7
032EE:  BSF    FA6.1
032F0:  BTFSC  FA6.1
032F2:  BRA    32F0
032F4:  BCF    FA6.2
032F6:  MOVF   00,W
032F8:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
032FA:  MOVFF  FF2,00
032FE:  BCF    FF2.7
03300:  CLRF   FAA
03302:  MOVLW  15
03304:  MOVWF  FA9
03306:  MOVFF  187,FA8
0330A:  BCF    FA6.6
0330C:  BCF    FA6.7
0330E:  BSF    FA6.2
03310:  MOVLW  55
03312:  MOVWF  FA7
03314:  MOVLW  AA
03316:  MOVWF  FA7
03318:  BSF    FA6.1
0331A:  BTFSC  FA6.1
0331C:  BRA    331A
0331E:  BCF    FA6.2
03320:  MOVF   00,W
03322:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
03324:  MOVFF  FF2,00
03328:  BCF    FF2.7
0332A:  CLRF   FAA
0332C:  MOVLW  16
0332E:  MOVWF  FA9
03330:  MOVFF  188,FA8
03334:  BCF    FA6.6
03336:  BCF    FA6.7
03338:  BSF    FA6.2
0333A:  MOVLW  55
0333C:  MOVWF  FA7
0333E:  MOVLW  AA
03340:  MOVWF  FA7
03342:  BSF    FA6.1
03344:  BTFSC  FA6.1
03346:  BRA    3344
03348:  BCF    FA6.2
0334A:  MOVF   00,W
0334C:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
0334E:  MOVFF  FF2,00
03352:  BCF    FF2.7
03354:  CLRF   FAA
03356:  MOVLW  17
03358:  MOVWF  FA9
0335A:  MOVFF  189,FA8
0335E:  BCF    FA6.6
03360:  BCF    FA6.7
03362:  BSF    FA6.2
03364:  MOVLW  55
03366:  MOVWF  FA7
03368:  MOVLW  AA
0336A:  MOVWF  FA7
0336C:  BSF    FA6.1
0336E:  BTFSC  FA6.1
03370:  BRA    336E
03372:  BCF    FA6.2
03374:  MOVF   00,W
03376:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
03378:  MOVFF  FF2,00
0337C:  BCF    FF2.7
0337E:  CLRF   FAA
03380:  MOVLW  18
03382:  MOVWF  FA9
03384:  MOVFF  18A,FA8
03388:  BCF    FA6.6
0338A:  BCF    FA6.7
0338C:  BSF    FA6.2
0338E:  MOVLW  55
03390:  MOVWF  FA7
03392:  MOVLW  AA
03394:  MOVWF  FA7
03396:  BSF    FA6.1
03398:  BTFSC  FA6.1
0339A:  BRA    3398
0339C:  BCF    FA6.2
0339E:  MOVF   00,W
033A0:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
033A2:  MOVFF  FF2,00
033A6:  BCF    FF2.7
033A8:  CLRF   FAA
033AA:  MOVLW  19
033AC:  MOVWF  FA9
033AE:  MOVFF  18B,FA8
033B2:  BCF    FA6.6
033B4:  BCF    FA6.7
033B6:  BSF    FA6.2
033B8:  MOVLW  55
033BA:  MOVWF  FA7
033BC:  MOVLW  AA
033BE:  MOVWF  FA7
033C0:  BSF    FA6.1
033C2:  BTFSC  FA6.1
033C4:  BRA    33C2
033C6:  BCF    FA6.2
033C8:  MOVF   00,W
033CA:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
033CC:  MOVFF  FF2,00
033D0:  BCF    FF2.7
033D2:  CLRF   FAA
033D4:  MOVLW  1A
033D6:  MOVWF  FA9
033D8:  MOVFF  18C,FA8
033DC:  BCF    FA6.6
033DE:  BCF    FA6.7
033E0:  BSF    FA6.2
033E2:  MOVLW  55
033E4:  MOVWF  FA7
033E6:  MOVLW  AA
033E8:  MOVWF  FA7
033EA:  BSF    FA6.1
033EC:  BTFSC  FA6.1
033EE:  BRA    33EC
033F0:  BCF    FA6.2
033F2:  MOVF   00,W
033F4:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
033F6:  MOVFF  FF2,00
033FA:  BCF    FF2.7
033FC:  CLRF   FAA
033FE:  MOVLW  1B
03400:  MOVWF  FA9
03402:  MOVFF  18D,FA8
03406:  BCF    FA6.6
03408:  BCF    FA6.7
0340A:  BSF    FA6.2
0340C:  MOVLW  55
0340E:  MOVWF  FA7
03410:  MOVLW  AA
03412:  MOVWF  FA7
03414:  BSF    FA6.1
03416:  BTFSC  FA6.1
03418:  BRA    3416
0341A:  BCF    FA6.2
0341C:  MOVF   00,W
0341E:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //FaultDelayTime
03420:  MOVFF  FF2,00
03424:  BCF    FF2.7
03426:  CLRF   FAA
03428:  MOVLW  1C
0342A:  MOVWF  FA9
0342C:  MOVFF  18E,FA8
03430:  BCF    FA6.6
03432:  BCF    FA6.7
03434:  BSF    FA6.2
03436:  MOVLW  55
03438:  MOVWF  FA7
0343A:  MOVLW  AA
0343C:  MOVWF  FA7
0343E:  BSF    FA6.1
03440:  BTFSC  FA6.1
03442:  BRA    3440
03444:  BCF    FA6.2
03446:  MOVF   00,W
03448:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
0344A:  MOVFF  FF2,00
0344E:  BCF    FF2.7
03450:  CLRF   FAA
03452:  MOVLW  1D
03454:  MOVWF  FA9
03456:  MOVFF  18F,FA8
0345A:  BCF    FA6.6
0345C:  BCF    FA6.7
0345E:  BSF    FA6.2
03460:  MOVLW  55
03462:  MOVWF  FA7
03464:  MOVLW  AA
03466:  MOVWF  FA7
03468:  BSF    FA6.1
0346A:  BTFSC  FA6.1
0346C:  BRA    346A
0346E:  BCF    FA6.2
03470:  MOVF   00,W
03472:  IORWF  FF2,F
....................    
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Fault Delay Time 1
03474:  MOVFF  FF2,00
03478:  BCF    FF2.7
0347A:  CLRF   FAA
0347C:  MOVLW  1E
0347E:  MOVWF  FA9
03480:  MOVFF  190,FA8
03484:  BCF    FA6.6
03486:  BCF    FA6.7
03488:  BSF    FA6.2
0348A:  MOVLW  55
0348C:  MOVWF  FA7
0348E:  MOVLW  AA
03490:  MOVWF  FA7
03492:  BSF    FA6.1
03494:  BTFSC  FA6.1
03496:  BRA    3494
03498:  BCF    FA6.2
0349A:  MOVF   00,W
0349C:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Fault Delay Time 2
0349E:  MOVFF  FF2,00
034A2:  BCF    FF2.7
034A4:  CLRF   FAA
034A6:  MOVLW  1F
034A8:  MOVWF  FA9
034AA:  MOVFF  191,FA8
034AE:  BCF    FA6.6
034B0:  BCF    FA6.7
034B2:  BSF    FA6.2
034B4:  MOVLW  55
034B6:  MOVWF  FA7
034B8:  MOVLW  AA
034BA:  MOVWF  FA7
034BC:  BSF    FA6.1
034BE:  BTFSC  FA6.1
034C0:  BRA    34BE
034C2:  BCF    FA6.2
034C4:  MOVF   00,W
034C6:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Fault Delay Time 3
034C8:  MOVFF  FF2,00
034CC:  BCF    FF2.7
034CE:  CLRF   FAA
034D0:  MOVLW  20
034D2:  MOVWF  FA9
034D4:  MOVFF  192,FA8
034D8:  BCF    FA6.6
034DA:  BCF    FA6.7
034DC:  BSF    FA6.2
034DE:  MOVLW  55
034E0:  MOVWF  FA7
034E2:  MOVLW  AA
034E4:  MOVWF  FA7
034E6:  BSF    FA6.1
034E8:  BTFSC  FA6.1
034EA:  BRA    34E8
034EC:  BCF    FA6.2
034EE:  MOVF   00,W
034F0:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Fault Delay Time 4
034F2:  MOVFF  FF2,00
034F6:  BCF    FF2.7
034F8:  CLRF   FAA
034FA:  MOVLW  21
034FC:  MOVWF  FA9
034FE:  MOVFF  193,FA8
03502:  BCF    FA6.6
03504:  BCF    FA6.7
03506:  BSF    FA6.2
03508:  MOVLW  55
0350A:  MOVWF  FA7
0350C:  MOVLW  AA
0350E:  MOVWF  FA7
03510:  BSF    FA6.1
03512:  BTFSC  FA6.1
03514:  BRA    3512
03516:  BCF    FA6.2
03518:  MOVF   00,W
0351A:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Fault Delay Time 5
0351C:  MOVFF  FF2,00
03520:  BCF    FF2.7
03522:  CLRF   FAA
03524:  MOVLW  22
03526:  MOVWF  FA9
03528:  MOVFF  194,FA8
0352C:  BCF    FA6.6
0352E:  BCF    FA6.7
03530:  BSF    FA6.2
03532:  MOVLW  55
03534:  MOVWF  FA7
03536:  MOVLW  AA
03538:  MOVWF  FA7
0353A:  BSF    FA6.1
0353C:  BTFSC  FA6.1
0353E:  BRA    353C
03540:  BCF    FA6.2
03542:  MOVF   00,W
03544:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Fault Delay Time6
03546:  MOVFF  FF2,00
0354A:  BCF    FF2.7
0354C:  CLRF   FAA
0354E:  MOVLW  23
03550:  MOVWF  FA9
03552:  MOVFF  195,FA8
03556:  BCF    FA6.6
03558:  BCF    FA6.7
0355A:  BSF    FA6.2
0355C:  MOVLW  55
0355E:  MOVWF  FA7
03560:  MOVLW  AA
03562:  MOVWF  FA7
03564:  BSF    FA6.1
03566:  BTFSC  FA6.1
03568:  BRA    3566
0356A:  BCF    FA6.2
0356C:  MOVF   00,W
0356E:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Fault Delay Time7
03570:  MOVFF  FF2,00
03574:  BCF    FF2.7
03576:  CLRF   FAA
03578:  MOVLW  24
0357A:  MOVWF  FA9
0357C:  MOVFF  196,FA8
03580:  BCF    FA6.6
03582:  BCF    FA6.7
03584:  BSF    FA6.2
03586:  MOVLW  55
03588:  MOVWF  FA7
0358A:  MOVLW  AA
0358C:  MOVWF  FA7
0358E:  BSF    FA6.1
03590:  BTFSC  FA6.1
03592:  BRA    3590
03594:  BCF    FA6.2
03596:  MOVF   00,W
03598:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Fault Delay Time8
0359A:  MOVFF  FF2,00
0359E:  BCF    FF2.7
035A0:  CLRF   FAA
035A2:  MOVLW  25
035A4:  MOVWF  FA9
035A6:  MOVFF  197,FA8
035AA:  BCF    FA6.6
035AC:  BCF    FA6.7
035AE:  BSF    FA6.2
035B0:  MOVLW  55
035B2:  MOVWF  FA7
035B4:  MOVLW  AA
035B6:  MOVWF  FA7
035B8:  BSF    FA6.1
035BA:  BTFSC  FA6.1
035BC:  BRA    35BA
035BE:  BCF    FA6.2
035C0:  MOVF   00,W
035C2:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Fault Delay Time9
035C4:  MOVFF  FF2,00
035C8:  BCF    FF2.7
035CA:  CLRF   FAA
035CC:  MOVLW  26
035CE:  MOVWF  FA9
035D0:  MOVFF  198,FA8
035D4:  BCF    FA6.6
035D6:  BCF    FA6.7
035D8:  BSF    FA6.2
035DA:  MOVLW  55
035DC:  MOVWF  FA7
035DE:  MOVLW  AA
035E0:  MOVWF  FA7
035E2:  BSF    FA6.1
035E4:  BTFSC  FA6.1
035E6:  BRA    35E4
035E8:  BCF    FA6.2
035EA:  MOVF   00,W
035EC:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Fault Delay Time10
035EE:  MOVFF  FF2,00
035F2:  BCF    FF2.7
035F4:  CLRF   FAA
035F6:  MOVLW  27
035F8:  MOVWF  FA9
035FA:  MOVFF  199,FA8
035FE:  BCF    FA6.6
03600:  BCF    FA6.7
03602:  BSF    FA6.2
03604:  MOVLW  55
03606:  MOVWF  FA7
03608:  MOVLW  AA
0360A:  MOVWF  FA7
0360C:  BSF    FA6.1
0360E:  BTFSC  FA6.1
03610:  BRA    360E
03612:  BCF    FA6.2
03614:  MOVF   00,W
03616:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Fault Delay Time11
03618:  MOVFF  FF2,00
0361C:  BCF    FF2.7
0361E:  CLRF   FAA
03620:  MOVLW  28
03622:  MOVWF  FA9
03624:  MOVFF  19A,FA8
03628:  BCF    FA6.6
0362A:  BCF    FA6.7
0362C:  BSF    FA6.2
0362E:  MOVLW  55
03630:  MOVWF  FA7
03632:  MOVLW  AA
03634:  MOVWF  FA7
03636:  BSF    FA6.1
03638:  BTFSC  FA6.1
0363A:  BRA    3638
0363C:  BCF    FA6.2
0363E:  MOVF   00,W
03640:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Fault Delay Time12
03642:  MOVFF  FF2,00
03646:  BCF    FF2.7
03648:  CLRF   FAA
0364A:  MOVLW  29
0364C:  MOVWF  FA9
0364E:  MOVFF  19B,FA8
03652:  BCF    FA6.6
03654:  BCF    FA6.7
03656:  BSF    FA6.2
03658:  MOVLW  55
0365A:  MOVWF  FA7
0365C:  MOVLW  AA
0365E:  MOVWF  FA7
03660:  BSF    FA6.1
03662:  BTFSC  FA6.1
03664:  BRA    3662
03666:  BCF    FA6.2
03668:  MOVF   00,W
0366A:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Fault Delay Time13
0366C:  MOVFF  FF2,00
03670:  BCF    FF2.7
03672:  CLRF   FAA
03674:  MOVLW  2A
03676:  MOVWF  FA9
03678:  MOVFF  19C,FA8
0367C:  BCF    FA6.6
0367E:  BCF    FA6.7
03680:  BSF    FA6.2
03682:  MOVLW  55
03684:  MOVWF  FA7
03686:  MOVLW  AA
03688:  MOVWF  FA7
0368A:  BSF    FA6.1
0368C:  BTFSC  FA6.1
0368E:  BRA    368C
03690:  BCF    FA6.2
03692:  MOVF   00,W
03694:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Fault Delay Time14
03696:  MOVFF  FF2,00
0369A:  BCF    FF2.7
0369C:  CLRF   FAA
0369E:  MOVLW  2B
036A0:  MOVWF  FA9
036A2:  MOVFF  19D,FA8
036A6:  BCF    FA6.6
036A8:  BCF    FA6.7
036AA:  BSF    FA6.2
036AC:  MOVLW  55
036AE:  MOVWF  FA7
036B0:  MOVLW  AA
036B2:  MOVWF  FA7
036B4:  BSF    FA6.1
036B6:  BTFSC  FA6.1
036B8:  BRA    36B6
036BA:  BCF    FA6.2
036BC:  MOVF   00,W
036BE:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Fault Delay Time15
036C0:  MOVFF  FF2,00
036C4:  BCF    FF2.7
036C6:  CLRF   FAA
036C8:  MOVLW  2C
036CA:  MOVWF  FA9
036CC:  MOVFF  19E,FA8
036D0:  BCF    FA6.6
036D2:  BCF    FA6.7
036D4:  BSF    FA6.2
036D6:  MOVLW  55
036D8:  MOVWF  FA7
036DA:  MOVLW  AA
036DC:  MOVWF  FA7
036DE:  BSF    FA6.1
036E0:  BTFSC  FA6.1
036E2:  BRA    36E0
036E4:  BCF    FA6.2
036E6:  MOVF   00,W
036E8:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Fault Delay Time16
036EA:  MOVFF  FF2,00
036EE:  BCF    FF2.7
036F0:  CLRF   FAA
036F2:  MOVLW  2D
036F4:  MOVWF  FA9
036F6:  MOVFF  19F,FA8
036FA:  BCF    FA6.6
036FC:  BCF    FA6.7
036FE:  BSF    FA6.2
03700:  MOVLW  55
03702:  MOVWF  FA7
03704:  MOVLW  AA
03706:  MOVWF  FA7
03708:  BSF    FA6.1
0370A:  BTFSC  FA6.1
0370C:  BRA    370A
0370E:  BCF    FA6.2
03710:  MOVF   00,W
03712:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Fault Delay Time17
03714:  MOVFF  FF2,00
03718:  BCF    FF2.7
0371A:  CLRF   FAA
0371C:  MOVLW  2E
0371E:  MOVWF  FA9
03720:  MOVFF  1A0,FA8
03724:  BCF    FA6.6
03726:  BCF    FA6.7
03728:  BSF    FA6.2
0372A:  MOVLW  55
0372C:  MOVWF  FA7
0372E:  MOVLW  AA
03730:  MOVWF  FA7
03732:  BSF    FA6.1
03734:  BTFSC  FA6.1
03736:  BRA    3734
03738:  BCF    FA6.2
0373A:  MOVF   00,W
0373C:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Fault Delay Time18
0373E:  MOVFF  FF2,00
03742:  BCF    FF2.7
03744:  CLRF   FAA
03746:  MOVLW  2F
03748:  MOVWF  FA9
0374A:  MOVFF  1A1,FA8
0374E:  BCF    FA6.6
03750:  BCF    FA6.7
03752:  BSF    FA6.2
03754:  MOVLW  55
03756:  MOVWF  FA7
03758:  MOVLW  AA
0375A:  MOVWF  FA7
0375C:  BSF    FA6.1
0375E:  BTFSC  FA6.1
03760:  BRA    375E
03762:  BCF    FA6.2
03764:  MOVF   00,W
03766:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Fault Delay Time19
03768:  MOVFF  FF2,00
0376C:  BCF    FF2.7
0376E:  CLRF   FAA
03770:  MOVLW  30
03772:  MOVWF  FA9
03774:  MOVFF  1A2,FA8
03778:  BCF    FA6.6
0377A:  BCF    FA6.7
0377C:  BSF    FA6.2
0377E:  MOVLW  55
03780:  MOVWF  FA7
03782:  MOVLW  AA
03784:  MOVWF  FA7
03786:  BSF    FA6.1
03788:  BTFSC  FA6.1
0378A:  BRA    3788
0378C:  BCF    FA6.2
0378E:  MOVF   00,W
03790:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Fault Delay Time20
03792:  MOVFF  FF2,00
03796:  BCF    FF2.7
03798:  CLRF   FAA
0379A:  MOVLW  31
0379C:  MOVWF  FA9
0379E:  MOVFF  1A3,FA8
037A2:  BCF    FA6.6
037A4:  BCF    FA6.7
037A6:  BSF    FA6.2
037A8:  MOVLW  55
037AA:  MOVWF  FA7
037AC:  MOVLW  AA
037AE:  MOVWF  FA7
037B0:  BSF    FA6.1
037B2:  BTFSC  FA6.1
037B4:  BRA    37B2
037B6:  BCF    FA6.2
037B8:  MOVF   00,W
037BA:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
037BC:  MOVLB  7
037BE:  CLRF   x51
037C0:  CLRF   x50
....................             for(; ; a++)
....................             {
....................                restart_wdt();
037C2:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
037C4:  MOVLW  A4
037C6:  ADDWF  x50,W
037C8:  MOVWF  FE9
037CA:  MOVLW  01
037CC:  ADDWFC x51,W
037CE:  MOVWF  FEA
037D0:  MOVFF  FEF,752
....................                if((phonenum == 0x0D) || (a > 15))
037D4:  MOVF   x52,W
037D6:  SUBLW  0D
037D8:  BZ    37E4
037DA:  MOVF   x51,F
037DC:  BNZ   37E4
037DE:  MOVF   x50,W
037E0:  SUBLW  0F
037E2:  BC    3832
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
037E4:  MOVLW  7F
037E6:  ADDWF  x50,W
037E8:  MOVWF  FE9
037EA:  MOVLW  05
037EC:  ADDWFC x51,W
037EE:  MOVWF  FEA
037F0:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
037F2:  MOVLW  32
037F4:  ADDWF  x50,W
037F6:  MOVWF  x59
037F8:  MOVLW  00
037FA:  ADDWFC x51,W
037FC:  MOVWF  x5A
037FE:  MOVF   FF2,W
03800:  MOVWF  00
03802:  BCF    FF2.7
03804:  MOVFF  75A,FAA
03808:  MOVFF  759,FA9
0380C:  MOVFF  752,FA8
03810:  BCF    FA6.6
03812:  BCF    FA6.7
03814:  BSF    FA6.2
03816:  MOVLB  F
03818:  MOVLW  55
0381A:  MOVWF  FA7
0381C:  MOVLW  AA
0381E:  MOVWF  FA7
03820:  BSF    FA6.1
03822:  BTFSC  FA6.1
03824:  BRA    3822
03826:  BCF    FA6.2
03828:  MOVF   00,W
0382A:  IORWF  FF2,F
....................                   break;
0382C:  BRA    3888
....................                }
0382E:  BRA    387C
03830:  MOVLB  7
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
03832:  MOVLW  7F
03834:  ADDWF  x50,W
03836:  MOVWF  FE9
03838:  MOVLW  05
0383A:  ADDWFC x51,W
0383C:  MOVWF  FEA
0383E:  MOVFF  752,FEF
....................                   write_eeprom(0x32+a,phonenum);
03842:  MOVLW  32
03844:  ADDWF  x50,W
03846:  MOVWF  x59
03848:  MOVLW  00
0384A:  ADDWFC x51,W
0384C:  MOVWF  x5A
0384E:  MOVF   FF2,W
03850:  MOVWF  00
03852:  BCF    FF2.7
03854:  MOVFF  75A,FAA
03858:  MOVFF  759,FA9
0385C:  MOVFF  752,FA8
03860:  BCF    FA6.6
03862:  BCF    FA6.7
03864:  BSF    FA6.2
03866:  MOVLB  F
03868:  MOVLW  55
0386A:  MOVWF  FA7
0386C:  MOVLW  AA
0386E:  MOVWF  FA7
03870:  BSF    FA6.1
03872:  BTFSC  FA6.1
03874:  BRA    3872
03876:  BCF    FA6.2
03878:  MOVF   00,W
0387A:  IORWF  FF2,F
....................                }
0387C:  MOVLB  7
0387E:  INCF   x50,F
03880:  BTFSC  FD8.2
03882:  INCF   x51,F
03884:  BRA    37C2
03886:  MOVLB  F
....................             }
....................          
....................             TxD_Buff[0] = Address ;         //Address
03888:  MOVFF  6D,70
....................             TxD_Buff[1] = 0x21 ;            //return function code
0388C:  MOVLW  21
0388E:  MOVLB  0
03890:  MOVWF  x71
....................    
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
03892:  MOVLB  7
03894:  CLRF   x5C
03896:  MOVLW  70
03898:  MOVWF  x5B
0389A:  MOVLW  02
0389C:  MOVWF  x5D
0389E:  MOVLB  0
038A0:  CALL   2456
....................    
....................             TxD_Buff[2] = CRC_Hi ;
038A4:  MOVFF  371,72
....................             TxD_Buff[3] = CRC_Lo ;
038A8:  MOVFF  370,73
....................    
....................             output_bit(P485ctrl,1);
038AC:  BSF    F8A.3
038AE:  BCF    F93.3
....................             delay_ms(10);
038B0:  MOVLW  0A
038B2:  MOVLB  7
038B4:  MOVWF  x59
038B6:  MOVLB  0
038B8:  CALL   0848
....................    
....................             putc(Txd_Buff[0]);
038BC:  MOVF   x70,W
038BE:  CALL   24AC
....................             putc(Txd_Buff[1]);
038C2:  MOVF   x71,W
038C4:  CALL   24AC
....................             putc(Txd_Buff[2]);
038C8:  MOVF   x72,W
038CA:  CALL   24AC
....................             putc(Txd_Buff[3]);
038CE:  MOVF   x73,W
038D0:  CALL   24AC
....................    
....................             delay_ms(3);
038D4:  MOVLW  03
038D6:  MOVLB  7
038D8:  MOVWF  x59
038DA:  MOVLB  0
038DC:  CALL   0848
....................             output_bit(P485ctrl,0);           
038E0:  BCF    F8A.3
038E2:  BCF    F93.3
....................             
....................             reset_cpu();
038E4:  RESET
....................             //Read_Config(); //jj
....................          }
038E6:  GOTO   4410
038EA:  MOVLB  1
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
038EC:  MOVF   x71,W
038EE:  SUBLW  22
038F0:  BTFSS  FD8.2
038F2:  GOTO   4412
....................          {
....................             //SMS_Massage
....................             int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
038F6:  MOVLB  7
038F8:  CLRF   x54
038FA:  MOVLW  04
038FC:  MOVWF  x53
038FE:  CLRF   x56
03900:  CLRF   x55
03902:  CLRF   x58
03904:  CLRF   x57
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03906:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
03908:  MOVLW  70
0390A:  ADDWF  x53,W
0390C:  MOVWF  FE9
0390E:  MOVLW  01
03910:  ADDWFC x54,W
03912:  MOVWF  FEA
03914:  MOVF   FEF,W
03916:  SUBLW  0D
03918:  BZ    3924
0391A:  MOVF   x56,F
0391C:  BNZ   3924
0391E:  MOVF   x55,W
03920:  SUBLW  1E
03922:  BC    3974
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03924:  MOVLW  5D
03926:  ADDWF  x53,W
03928:  MOVWF  x59
0392A:  MOVLW  00
0392C:  ADDWFC x54,W
0392E:  MOVWF  x5A
03930:  MOVLW  70
03932:  ADDWF  x53,W
03934:  MOVWF  FE9
03936:  MOVLW  01
03938:  ADDWFC x54,W
0393A:  MOVWF  FEA
0393C:  MOVFF  FEF,75B
03940:  MOVF   FF2,W
03942:  MOVWF  00
03944:  BCF    FF2.7
03946:  MOVFF  75A,FAA
0394A:  MOVFF  759,FA9
0394E:  MOVFF  75B,FA8
03952:  BCF    FA6.6
03954:  BCF    FA6.7
03956:  BSF    FA6.2
03958:  MOVLB  F
0395A:  MOVLW  55
0395C:  MOVWF  FA7
0395E:  MOVLW  AA
03960:  MOVWF  FA7
03962:  BSF    FA6.1
03964:  BTFSC  FA6.1
03966:  BRA    3964
03968:  BCF    FA6.2
0396A:  MOVF   00,W
0396C:  IORWF  FF2,F
....................                   break;
0396E:  BRA    39FE
....................                }
03970:  BRA    39E6
03972:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage1[j] = RxD_Buff[i];
03974:  MOVLW  8E
03976:  ADDWF  x55,W
03978:  MOVWF  01
0397A:  MOVLW  05
0397C:  ADDWFC x56,W
0397E:  MOVWF  03
03980:  MOVLW  70
03982:  ADDWF  x53,W
03984:  MOVWF  FE9
03986:  MOVLW  01
03988:  ADDWFC x54,W
0398A:  MOVWF  FEA
0398C:  MOVFF  FEF,75B
03990:  MOVFF  03,FEA
03994:  MOVFF  01,FE9
03998:  MOVFF  75B,FEF
....................                   
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0399C:  MOVLW  5D
0399E:  ADDWF  x53,W
039A0:  MOVWF  x59
039A2:  MOVLW  00
039A4:  ADDWFC x54,W
039A6:  MOVWF  x5A
039A8:  MOVLW  70
039AA:  ADDWF  x53,W
039AC:  MOVWF  FE9
039AE:  MOVLW  01
039B0:  ADDWFC x54,W
039B2:  MOVWF  FEA
039B4:  MOVFF  FEF,75B
039B8:  MOVF   FF2,W
039BA:  MOVWF  00
039BC:  BCF    FF2.7
039BE:  MOVFF  75A,FAA
039C2:  MOVFF  759,FA9
039C6:  MOVFF  75B,FA8
039CA:  BCF    FA6.6
039CC:  BCF    FA6.7
039CE:  BSF    FA6.2
039D0:  MOVLB  F
039D2:  MOVLW  55
039D4:  MOVWF  FA7
039D6:  MOVLW  AA
039D8:  MOVWF  FA7
039DA:  BSF    FA6.1
039DC:  BTFSC  FA6.1
039DE:  BRA    39DC
039E0:  BCF    FA6.2
039E2:  MOVF   00,W
039E4:  IORWF  FF2,F
....................                }
039E6:  MOVLB  7
039E8:  MOVFF  754,03
039EC:  MOVF   x53,W
039EE:  INCF   x53,F
039F0:  BTFSC  FD8.2
039F2:  INCF   x54,F
039F4:  INCF   x55,F
039F6:  BTFSC  FD8.2
039F8:  INCF   x56,F
039FA:  BRA    3906
039FC:  MOVLB  F
....................             }
....................             SMS_Massage1[j] = '\0' ; // end string
039FE:  MOVLW  8E
03A00:  MOVLB  7
03A02:  ADDWF  x55,W
03A04:  MOVWF  FE9
03A06:  MOVLW  05
03A08:  ADDWFC x56,W
03A0A:  MOVWF  FEA
03A0C:  CLRF   FEF
....................             
....................             j=0;
03A0E:  CLRF   x56
03A10:  CLRF   x55
....................             i++;
03A12:  INCF   x53,F
03A14:  BTFSC  FD8.2
03A16:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03A18:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
03A1A:  MOVLW  70
03A1C:  ADDWF  x53,W
03A1E:  MOVWF  FE9
03A20:  MOVLW  01
03A22:  ADDWFC x54,W
03A24:  MOVWF  FEA
03A26:  MOVF   FEF,W
03A28:  SUBLW  0D
03A2A:  BZ    3A36
03A2C:  MOVF   x56,F
03A2E:  BNZ   3A36
03A30:  MOVF   x55,W
03A32:  SUBLW  1E
03A34:  BC    3A86
....................                {  
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03A36:  MOVLW  5D
03A38:  ADDWF  x53,W
03A3A:  MOVWF  x59
03A3C:  MOVLW  00
03A3E:  ADDWFC x54,W
03A40:  MOVWF  x5A
03A42:  MOVLW  70
03A44:  ADDWF  x53,W
03A46:  MOVWF  FE9
03A48:  MOVLW  01
03A4A:  ADDWFC x54,W
03A4C:  MOVWF  FEA
03A4E:  MOVFF  FEF,75B
03A52:  MOVF   FF2,W
03A54:  MOVWF  00
03A56:  BCF    FF2.7
03A58:  MOVFF  75A,FAA
03A5C:  MOVFF  759,FA9
03A60:  MOVFF  75B,FA8
03A64:  BCF    FA6.6
03A66:  BCF    FA6.7
03A68:  BSF    FA6.2
03A6A:  MOVLB  F
03A6C:  MOVLW  55
03A6E:  MOVWF  FA7
03A70:  MOVLW  AA
03A72:  MOVWF  FA7
03A74:  BSF    FA6.1
03A76:  BTFSC  FA6.1
03A78:  BRA    3A76
03A7A:  BCF    FA6.2
03A7C:  MOVF   00,W
03A7E:  IORWF  FF2,F
....................                   break;
03A80:  BRA    3B10
....................                }
03A82:  BRA    3AF8
03A84:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage2[j] = RxD_Buff[i];
03A86:  MOVLW  AE
03A88:  ADDWF  x55,W
03A8A:  MOVWF  01
03A8C:  MOVLW  05
03A8E:  ADDWFC x56,W
03A90:  MOVWF  03
03A92:  MOVLW  70
03A94:  ADDWF  x53,W
03A96:  MOVWF  FE9
03A98:  MOVLW  01
03A9A:  ADDWFC x54,W
03A9C:  MOVWF  FEA
03A9E:  MOVFF  FEF,75B
03AA2:  MOVFF  03,FEA
03AA6:  MOVFF  01,FE9
03AAA:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03AAE:  MOVLW  5D
03AB0:  ADDWF  x53,W
03AB2:  MOVWF  x59
03AB4:  MOVLW  00
03AB6:  ADDWFC x54,W
03AB8:  MOVWF  x5A
03ABA:  MOVLW  70
03ABC:  ADDWF  x53,W
03ABE:  MOVWF  FE9
03AC0:  MOVLW  01
03AC2:  ADDWFC x54,W
03AC4:  MOVWF  FEA
03AC6:  MOVFF  FEF,75B
03ACA:  MOVF   FF2,W
03ACC:  MOVWF  00
03ACE:  BCF    FF2.7
03AD0:  MOVFF  75A,FAA
03AD4:  MOVFF  759,FA9
03AD8:  MOVFF  75B,FA8
03ADC:  BCF    FA6.6
03ADE:  BCF    FA6.7
03AE0:  BSF    FA6.2
03AE2:  MOVLB  F
03AE4:  MOVLW  55
03AE6:  MOVWF  FA7
03AE8:  MOVLW  AA
03AEA:  MOVWF  FA7
03AEC:  BSF    FA6.1
03AEE:  BTFSC  FA6.1
03AF0:  BRA    3AEE
03AF2:  BCF    FA6.2
03AF4:  MOVF   00,W
03AF6:  IORWF  FF2,F
....................                }
03AF8:  MOVLB  7
03AFA:  MOVFF  754,03
03AFE:  MOVF   x53,W
03B00:  INCF   x53,F
03B02:  BTFSC  FD8.2
03B04:  INCF   x54,F
03B06:  INCF   x55,F
03B08:  BTFSC  FD8.2
03B0A:  INCF   x56,F
03B0C:  BRA    3A18
03B0E:  MOVLB  F
....................             }
....................             SMS_Massage2[j] = '\0' ; // end string
03B10:  MOVLW  AE
03B12:  MOVLB  7
03B14:  ADDWF  x55,W
03B16:  MOVWF  FE9
03B18:  MOVLW  05
03B1A:  ADDWFC x56,W
03B1C:  MOVWF  FEA
03B1E:  CLRF   FEF
....................             
....................             j=0;
03B20:  CLRF   x56
03B22:  CLRF   x55
....................             i++;
03B24:  INCF   x53,F
03B26:  BTFSC  FD8.2
03B28:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03B2A:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
03B2C:  MOVLW  70
03B2E:  ADDWF  x53,W
03B30:  MOVWF  FE9
03B32:  MOVLW  01
03B34:  ADDWFC x54,W
03B36:  MOVWF  FEA
03B38:  MOVF   FEF,W
03B3A:  SUBLW  0D
03B3C:  BZ    3B48
03B3E:  MOVF   x56,F
03B40:  BNZ   3B48
03B42:  MOVF   x55,W
03B44:  SUBLW  1E
03B46:  BC    3B98
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03B48:  MOVLW  5D
03B4A:  ADDWF  x53,W
03B4C:  MOVWF  x59
03B4E:  MOVLW  00
03B50:  ADDWFC x54,W
03B52:  MOVWF  x5A
03B54:  MOVLW  70
03B56:  ADDWF  x53,W
03B58:  MOVWF  FE9
03B5A:  MOVLW  01
03B5C:  ADDWFC x54,W
03B5E:  MOVWF  FEA
03B60:  MOVFF  FEF,75B
03B64:  MOVF   FF2,W
03B66:  MOVWF  00
03B68:  BCF    FF2.7
03B6A:  MOVFF  75A,FAA
03B6E:  MOVFF  759,FA9
03B72:  MOVFF  75B,FA8
03B76:  BCF    FA6.6
03B78:  BCF    FA6.7
03B7A:  BSF    FA6.2
03B7C:  MOVLB  F
03B7E:  MOVLW  55
03B80:  MOVWF  FA7
03B82:  MOVLW  AA
03B84:  MOVWF  FA7
03B86:  BSF    FA6.1
03B88:  BTFSC  FA6.1
03B8A:  BRA    3B88
03B8C:  BCF    FA6.2
03B8E:  MOVF   00,W
03B90:  IORWF  FF2,F
....................                   break;
03B92:  BRA    3C22
....................                }
03B94:  BRA    3C0A
03B96:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage3[j] = RxD_Buff[i];
03B98:  MOVLW  CE
03B9A:  ADDWF  x55,W
03B9C:  MOVWF  01
03B9E:  MOVLW  05
03BA0:  ADDWFC x56,W
03BA2:  MOVWF  03
03BA4:  MOVLW  70
03BA6:  ADDWF  x53,W
03BA8:  MOVWF  FE9
03BAA:  MOVLW  01
03BAC:  ADDWFC x54,W
03BAE:  MOVWF  FEA
03BB0:  MOVFF  FEF,75B
03BB4:  MOVFF  03,FEA
03BB8:  MOVFF  01,FE9
03BBC:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03BC0:  MOVLW  5D
03BC2:  ADDWF  x53,W
03BC4:  MOVWF  x59
03BC6:  MOVLW  00
03BC8:  ADDWFC x54,W
03BCA:  MOVWF  x5A
03BCC:  MOVLW  70
03BCE:  ADDWF  x53,W
03BD0:  MOVWF  FE9
03BD2:  MOVLW  01
03BD4:  ADDWFC x54,W
03BD6:  MOVWF  FEA
03BD8:  MOVFF  FEF,75B
03BDC:  MOVF   FF2,W
03BDE:  MOVWF  00
03BE0:  BCF    FF2.7
03BE2:  MOVFF  75A,FAA
03BE6:  MOVFF  759,FA9
03BEA:  MOVFF  75B,FA8
03BEE:  BCF    FA6.6
03BF0:  BCF    FA6.7
03BF2:  BSF    FA6.2
03BF4:  MOVLB  F
03BF6:  MOVLW  55
03BF8:  MOVWF  FA7
03BFA:  MOVLW  AA
03BFC:  MOVWF  FA7
03BFE:  BSF    FA6.1
03C00:  BTFSC  FA6.1
03C02:  BRA    3C00
03C04:  BCF    FA6.2
03C06:  MOVF   00,W
03C08:  IORWF  FF2,F
....................                }
03C0A:  MOVLB  7
03C0C:  MOVFF  754,03
03C10:  MOVF   x53,W
03C12:  INCF   x53,F
03C14:  BTFSC  FD8.2
03C16:  INCF   x54,F
03C18:  INCF   x55,F
03C1A:  BTFSC  FD8.2
03C1C:  INCF   x56,F
03C1E:  BRA    3B2A
03C20:  MOVLB  F
....................             }
....................             SMS_Massage3[j] = '\0' ; // end string
03C22:  MOVLW  CE
03C24:  MOVLB  7
03C26:  ADDWF  x55,W
03C28:  MOVWF  FE9
03C2A:  MOVLW  05
03C2C:  ADDWFC x56,W
03C2E:  MOVWF  FEA
03C30:  CLRF   FEF
....................             
....................             j=0;
03C32:  CLRF   x56
03C34:  CLRF   x55
....................             i++;
03C36:  INCF   x53,F
03C38:  BTFSC  FD8.2
03C3A:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03C3C:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
03C3E:  MOVLW  70
03C40:  ADDWF  x53,W
03C42:  MOVWF  FE9
03C44:  MOVLW  01
03C46:  ADDWFC x54,W
03C48:  MOVWF  FEA
03C4A:  MOVF   FEF,W
03C4C:  SUBLW  0D
03C4E:  BZ    3C5A
03C50:  MOVF   x56,F
03C52:  BNZ   3C5A
03C54:  MOVF   x55,W
03C56:  SUBLW  1E
03C58:  BC    3CAA
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03C5A:  MOVLW  5D
03C5C:  ADDWF  x53,W
03C5E:  MOVWF  x59
03C60:  MOVLW  00
03C62:  ADDWFC x54,W
03C64:  MOVWF  x5A
03C66:  MOVLW  70
03C68:  ADDWF  x53,W
03C6A:  MOVWF  FE9
03C6C:  MOVLW  01
03C6E:  ADDWFC x54,W
03C70:  MOVWF  FEA
03C72:  MOVFF  FEF,75B
03C76:  MOVF   FF2,W
03C78:  MOVWF  00
03C7A:  BCF    FF2.7
03C7C:  MOVFF  75A,FAA
03C80:  MOVFF  759,FA9
03C84:  MOVFF  75B,FA8
03C88:  BCF    FA6.6
03C8A:  BCF    FA6.7
03C8C:  BSF    FA6.2
03C8E:  MOVLB  F
03C90:  MOVLW  55
03C92:  MOVWF  FA7
03C94:  MOVLW  AA
03C96:  MOVWF  FA7
03C98:  BSF    FA6.1
03C9A:  BTFSC  FA6.1
03C9C:  BRA    3C9A
03C9E:  BCF    FA6.2
03CA0:  MOVF   00,W
03CA2:  IORWF  FF2,F
....................                   break;
03CA4:  BRA    3D34
....................                }
03CA6:  BRA    3D1C
03CA8:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage4[j] = RxD_Buff[i];
03CAA:  MOVLW  EE
03CAC:  ADDWF  x55,W
03CAE:  MOVWF  01
03CB0:  MOVLW  05
03CB2:  ADDWFC x56,W
03CB4:  MOVWF  03
03CB6:  MOVLW  70
03CB8:  ADDWF  x53,W
03CBA:  MOVWF  FE9
03CBC:  MOVLW  01
03CBE:  ADDWFC x54,W
03CC0:  MOVWF  FEA
03CC2:  MOVFF  FEF,75B
03CC6:  MOVFF  03,FEA
03CCA:  MOVFF  01,FE9
03CCE:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03CD2:  MOVLW  5D
03CD4:  ADDWF  x53,W
03CD6:  MOVWF  x59
03CD8:  MOVLW  00
03CDA:  ADDWFC x54,W
03CDC:  MOVWF  x5A
03CDE:  MOVLW  70
03CE0:  ADDWF  x53,W
03CE2:  MOVWF  FE9
03CE4:  MOVLW  01
03CE6:  ADDWFC x54,W
03CE8:  MOVWF  FEA
03CEA:  MOVFF  FEF,75B
03CEE:  MOVF   FF2,W
03CF0:  MOVWF  00
03CF2:  BCF    FF2.7
03CF4:  MOVFF  75A,FAA
03CF8:  MOVFF  759,FA9
03CFC:  MOVFF  75B,FA8
03D00:  BCF    FA6.6
03D02:  BCF    FA6.7
03D04:  BSF    FA6.2
03D06:  MOVLB  F
03D08:  MOVLW  55
03D0A:  MOVWF  FA7
03D0C:  MOVLW  AA
03D0E:  MOVWF  FA7
03D10:  BSF    FA6.1
03D12:  BTFSC  FA6.1
03D14:  BRA    3D12
03D16:  BCF    FA6.2
03D18:  MOVF   00,W
03D1A:  IORWF  FF2,F
....................                }
03D1C:  MOVLB  7
03D1E:  MOVFF  754,03
03D22:  MOVF   x53,W
03D24:  INCF   x53,F
03D26:  BTFSC  FD8.2
03D28:  INCF   x54,F
03D2A:  INCF   x55,F
03D2C:  BTFSC  FD8.2
03D2E:  INCF   x56,F
03D30:  BRA    3C3C
03D32:  MOVLB  F
....................             }
....................             SMS_Massage4[j] = '\0' ; // end string
03D34:  MOVLW  EE
03D36:  MOVLB  7
03D38:  ADDWF  x55,W
03D3A:  MOVWF  FE9
03D3C:  MOVLW  05
03D3E:  ADDWFC x56,W
03D40:  MOVWF  FEA
03D42:  CLRF   FEF
....................             
....................             j=0;
03D44:  CLRF   x56
03D46:  CLRF   x55
....................             i++;
03D48:  INCF   x53,F
03D4A:  BTFSC  FD8.2
03D4C:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03D4E:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
03D50:  MOVLW  70
03D52:  ADDWF  x53,W
03D54:  MOVWF  FE9
03D56:  MOVLW  01
03D58:  ADDWFC x54,W
03D5A:  MOVWF  FEA
03D5C:  MOVF   FEF,W
03D5E:  SUBLW  0D
03D60:  BZ    3D6C
03D62:  MOVF   x56,F
03D64:  BNZ   3D6C
03D66:  MOVF   x55,W
03D68:  SUBLW  1E
03D6A:  BC    3DBC
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03D6C:  MOVLW  5D
03D6E:  ADDWF  x53,W
03D70:  MOVWF  x59
03D72:  MOVLW  00
03D74:  ADDWFC x54,W
03D76:  MOVWF  x5A
03D78:  MOVLW  70
03D7A:  ADDWF  x53,W
03D7C:  MOVWF  FE9
03D7E:  MOVLW  01
03D80:  ADDWFC x54,W
03D82:  MOVWF  FEA
03D84:  MOVFF  FEF,75B
03D88:  MOVF   FF2,W
03D8A:  MOVWF  00
03D8C:  BCF    FF2.7
03D8E:  MOVFF  75A,FAA
03D92:  MOVFF  759,FA9
03D96:  MOVFF  75B,FA8
03D9A:  BCF    FA6.6
03D9C:  BCF    FA6.7
03D9E:  BSF    FA6.2
03DA0:  MOVLB  F
03DA2:  MOVLW  55
03DA4:  MOVWF  FA7
03DA6:  MOVLW  AA
03DA8:  MOVWF  FA7
03DAA:  BSF    FA6.1
03DAC:  BTFSC  FA6.1
03DAE:  BRA    3DAC
03DB0:  BCF    FA6.2
03DB2:  MOVF   00,W
03DB4:  IORWF  FF2,F
....................                   break;
03DB6:  BRA    3E46
....................                }
03DB8:  BRA    3E2E
03DBA:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage5[j] = RxD_Buff[i];
03DBC:  MOVLW  0E
03DBE:  ADDWF  x55,W
03DC0:  MOVWF  01
03DC2:  MOVLW  06
03DC4:  ADDWFC x56,W
03DC6:  MOVWF  03
03DC8:  MOVLW  70
03DCA:  ADDWF  x53,W
03DCC:  MOVWF  FE9
03DCE:  MOVLW  01
03DD0:  ADDWFC x54,W
03DD2:  MOVWF  FEA
03DD4:  MOVFF  FEF,75B
03DD8:  MOVFF  03,FEA
03DDC:  MOVFF  01,FE9
03DE0:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03DE4:  MOVLW  5D
03DE6:  ADDWF  x53,W
03DE8:  MOVWF  x59
03DEA:  MOVLW  00
03DEC:  ADDWFC x54,W
03DEE:  MOVWF  x5A
03DF0:  MOVLW  70
03DF2:  ADDWF  x53,W
03DF4:  MOVWF  FE9
03DF6:  MOVLW  01
03DF8:  ADDWFC x54,W
03DFA:  MOVWF  FEA
03DFC:  MOVFF  FEF,75B
03E00:  MOVF   FF2,W
03E02:  MOVWF  00
03E04:  BCF    FF2.7
03E06:  MOVFF  75A,FAA
03E0A:  MOVFF  759,FA9
03E0E:  MOVFF  75B,FA8
03E12:  BCF    FA6.6
03E14:  BCF    FA6.7
03E16:  BSF    FA6.2
03E18:  MOVLB  F
03E1A:  MOVLW  55
03E1C:  MOVWF  FA7
03E1E:  MOVLW  AA
03E20:  MOVWF  FA7
03E22:  BSF    FA6.1
03E24:  BTFSC  FA6.1
03E26:  BRA    3E24
03E28:  BCF    FA6.2
03E2A:  MOVF   00,W
03E2C:  IORWF  FF2,F
....................                }
03E2E:  MOVLB  7
03E30:  MOVFF  754,03
03E34:  MOVF   x53,W
03E36:  INCF   x53,F
03E38:  BTFSC  FD8.2
03E3A:  INCF   x54,F
03E3C:  INCF   x55,F
03E3E:  BTFSC  FD8.2
03E40:  INCF   x56,F
03E42:  BRA    3D4E
03E44:  MOVLB  F
....................             }
....................             SMS_Massage5[j] = '\0' ; // end string
03E46:  MOVLW  0E
03E48:  MOVLB  7
03E4A:  ADDWF  x55,W
03E4C:  MOVWF  FE9
03E4E:  MOVLW  06
03E50:  ADDWFC x56,W
03E52:  MOVWF  FEA
03E54:  CLRF   FEF
....................             
....................             j=0;
03E56:  CLRF   x56
03E58:  CLRF   x55
....................             i++;
03E5A:  INCF   x53,F
03E5C:  BTFSC  FD8.2
03E5E:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03E60:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
03E62:  MOVLW  70
03E64:  ADDWF  x53,W
03E66:  MOVWF  FE9
03E68:  MOVLW  01
03E6A:  ADDWFC x54,W
03E6C:  MOVWF  FEA
03E6E:  MOVF   FEF,W
03E70:  SUBLW  0D
03E72:  BZ    3E7E
03E74:  MOVF   x56,F
03E76:  BNZ   3E7E
03E78:  MOVF   x55,W
03E7A:  SUBLW  1E
03E7C:  BC    3ECE
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03E7E:  MOVLW  5D
03E80:  ADDWF  x53,W
03E82:  MOVWF  x59
03E84:  MOVLW  00
03E86:  ADDWFC x54,W
03E88:  MOVWF  x5A
03E8A:  MOVLW  70
03E8C:  ADDWF  x53,W
03E8E:  MOVWF  FE9
03E90:  MOVLW  01
03E92:  ADDWFC x54,W
03E94:  MOVWF  FEA
03E96:  MOVFF  FEF,75B
03E9A:  MOVF   FF2,W
03E9C:  MOVWF  00
03E9E:  BCF    FF2.7
03EA0:  MOVFF  75A,FAA
03EA4:  MOVFF  759,FA9
03EA8:  MOVFF  75B,FA8
03EAC:  BCF    FA6.6
03EAE:  BCF    FA6.7
03EB0:  BSF    FA6.2
03EB2:  MOVLB  F
03EB4:  MOVLW  55
03EB6:  MOVWF  FA7
03EB8:  MOVLW  AA
03EBA:  MOVWF  FA7
03EBC:  BSF    FA6.1
03EBE:  BTFSC  FA6.1
03EC0:  BRA    3EBE
03EC2:  BCF    FA6.2
03EC4:  MOVF   00,W
03EC6:  IORWF  FF2,F
....................                   break;
03EC8:  BRA    3F5C
....................                }
03ECA:  BRA    3F44
03ECC:  MOVLB  7
....................                else
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03ECE:  MOVLW  5D
03ED0:  ADDWF  x53,W
03ED2:  MOVWF  x59
03ED4:  MOVLW  00
03ED6:  ADDWFC x54,W
03ED8:  MOVWF  x5A
03EDA:  MOVLW  70
03EDC:  ADDWF  x53,W
03EDE:  MOVWF  FE9
03EE0:  MOVLW  01
03EE2:  ADDWFC x54,W
03EE4:  MOVWF  FEA
03EE6:  MOVFF  FEF,75B
03EEA:  MOVF   FF2,W
03EEC:  MOVWF  00
03EEE:  BCF    FF2.7
03EF0:  MOVFF  75A,FAA
03EF4:  MOVFF  759,FA9
03EF8:  MOVFF  75B,FA8
03EFC:  BCF    FA6.6
03EFE:  BCF    FA6.7
03F00:  BSF    FA6.2
03F02:  MOVLB  F
03F04:  MOVLW  55
03F06:  MOVWF  FA7
03F08:  MOVLW  AA
03F0A:  MOVWF  FA7
03F0C:  BSF    FA6.1
03F0E:  BTFSC  FA6.1
03F10:  BRA    3F0E
03F12:  BCF    FA6.2
03F14:  MOVF   00,W
03F16:  IORWF  FF2,F
....................                   SMS_Massage6[j] = RxD_Buff[i];
03F18:  MOVLW  2E
03F1A:  MOVLB  7
03F1C:  ADDWF  x55,W
03F1E:  MOVWF  01
03F20:  MOVLW  06
03F22:  ADDWFC x56,W
03F24:  MOVWF  03
03F26:  MOVLW  70
03F28:  ADDWF  x53,W
03F2A:  MOVWF  FE9
03F2C:  MOVLW  01
03F2E:  ADDWFC x54,W
03F30:  MOVWF  FEA
03F32:  MOVFF  FEF,75B
03F36:  MOVFF  03,FEA
03F3A:  MOVFF  01,FE9
03F3E:  MOVFF  75B,FEF
03F42:  MOVLB  F
....................                }
03F44:  MOVLB  7
03F46:  MOVFF  754,03
03F4A:  MOVF   x53,W
03F4C:  INCF   x53,F
03F4E:  BTFSC  FD8.2
03F50:  INCF   x54,F
03F52:  INCF   x55,F
03F54:  BTFSC  FD8.2
03F56:  INCF   x56,F
03F58:  BRA    3E60
03F5A:  MOVLB  F
....................             }
....................             SMS_Massage6[j] = '\0' ; // end string
03F5C:  MOVLW  2E
03F5E:  MOVLB  7
03F60:  ADDWF  x55,W
03F62:  MOVWF  FE9
03F64:  MOVLW  06
03F66:  ADDWFC x56,W
03F68:  MOVWF  FEA
03F6A:  CLRF   FEF
....................             
....................             j=0;
03F6C:  CLRF   x56
03F6E:  CLRF   x55
....................             i++;
03F70:  INCF   x53,F
03F72:  BTFSC  FD8.2
03F74:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
03F76:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
03F78:  MOVLW  70
03F7A:  ADDWF  x53,W
03F7C:  MOVWF  FE9
03F7E:  MOVLW  01
03F80:  ADDWFC x54,W
03F82:  MOVWF  FEA
03F84:  MOVF   FEF,W
03F86:  SUBLW  0D
03F88:  BZ    3F94
03F8A:  MOVF   x56,F
03F8C:  BNZ   3F94
03F8E:  MOVF   x55,W
03F90:  SUBLW  1E
03F92:  BC    3FE4
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
03F94:  MOVLW  5D
03F96:  ADDWF  x53,W
03F98:  MOVWF  x59
03F9A:  MOVLW  00
03F9C:  ADDWFC x54,W
03F9E:  MOVWF  x5A
03FA0:  MOVLW  70
03FA2:  ADDWF  x53,W
03FA4:  MOVWF  FE9
03FA6:  MOVLW  01
03FA8:  ADDWFC x54,W
03FAA:  MOVWF  FEA
03FAC:  MOVFF  FEF,75B
03FB0:  MOVF   FF2,W
03FB2:  MOVWF  00
03FB4:  BCF    FF2.7
03FB6:  MOVFF  75A,FAA
03FBA:  MOVFF  759,FA9
03FBE:  MOVFF  75B,FA8
03FC2:  BCF    FA6.6
03FC4:  BCF    FA6.7
03FC6:  BSF    FA6.2
03FC8:  MOVLB  F
03FCA:  MOVLW  55
03FCC:  MOVWF  FA7
03FCE:  MOVLW  AA
03FD0:  MOVWF  FA7
03FD2:  BSF    FA6.1
03FD4:  BTFSC  FA6.1
03FD6:  BRA    3FD4
03FD8:  BCF    FA6.2
03FDA:  MOVF   00,W
03FDC:  IORWF  FF2,F
....................                   break;
03FDE:  BRA    406E
....................                }
03FE0:  BRA    4056
03FE2:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage7[j] = RxD_Buff[i];
03FE4:  MOVLW  4E
03FE6:  ADDWF  x55,W
03FE8:  MOVWF  01
03FEA:  MOVLW  06
03FEC:  ADDWFC x56,W
03FEE:  MOVWF  03
03FF0:  MOVLW  70
03FF2:  ADDWF  x53,W
03FF4:  MOVWF  FE9
03FF6:  MOVLW  01
03FF8:  ADDWFC x54,W
03FFA:  MOVWF  FEA
03FFC:  MOVFF  FEF,75B
04000:  MOVFF  03,FEA
04004:  MOVFF  01,FE9
04008:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0400C:  MOVLW  5D
0400E:  ADDWF  x53,W
04010:  MOVWF  x59
04012:  MOVLW  00
04014:  ADDWFC x54,W
04016:  MOVWF  x5A
04018:  MOVLW  70
0401A:  ADDWF  x53,W
0401C:  MOVWF  FE9
0401E:  MOVLW  01
04020:  ADDWFC x54,W
04022:  MOVWF  FEA
04024:  MOVFF  FEF,75B
04028:  MOVF   FF2,W
0402A:  MOVWF  00
0402C:  BCF    FF2.7
0402E:  MOVFF  75A,FAA
04032:  MOVFF  759,FA9
04036:  MOVFF  75B,FA8
0403A:  BCF    FA6.6
0403C:  BCF    FA6.7
0403E:  BSF    FA6.2
04040:  MOVLB  F
04042:  MOVLW  55
04044:  MOVWF  FA7
04046:  MOVLW  AA
04048:  MOVWF  FA7
0404A:  BSF    FA6.1
0404C:  BTFSC  FA6.1
0404E:  BRA    404C
04050:  BCF    FA6.2
04052:  MOVF   00,W
04054:  IORWF  FF2,F
....................                }
04056:  MOVLB  7
04058:  MOVFF  754,03
0405C:  MOVF   x53,W
0405E:  INCF   x53,F
04060:  BTFSC  FD8.2
04062:  INCF   x54,F
04064:  INCF   x55,F
04066:  BTFSC  FD8.2
04068:  INCF   x56,F
0406A:  BRA    3F76
0406C:  MOVLB  F
....................             }
....................             SMS_Massage7[j] = '\0' ; // end string
0406E:  MOVLW  4E
04070:  MOVLB  7
04072:  ADDWF  x55,W
04074:  MOVWF  FE9
04076:  MOVLW  06
04078:  ADDWFC x56,W
0407A:  MOVWF  FEA
0407C:  CLRF   FEF
....................             
....................             j=0;
0407E:  CLRF   x56
04080:  CLRF   x55
....................             i++;
04082:  INCF   x53,F
04084:  BTFSC  FD8.2
04086:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
04088:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
0408A:  MOVLW  70
0408C:  ADDWF  x53,W
0408E:  MOVWF  FE9
04090:  MOVLW  01
04092:  ADDWFC x54,W
04094:  MOVWF  FEA
04096:  MOVF   FEF,W
04098:  SUBLW  0D
0409A:  BZ    40A6
0409C:  MOVF   x56,F
0409E:  BNZ   40A6
040A0:  MOVF   x55,W
040A2:  SUBLW  1E
040A4:  BC    40F6
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
040A6:  MOVLW  5D
040A8:  ADDWF  x53,W
040AA:  MOVWF  x59
040AC:  MOVLW  00
040AE:  ADDWFC x54,W
040B0:  MOVWF  x5A
040B2:  MOVLW  70
040B4:  ADDWF  x53,W
040B6:  MOVWF  FE9
040B8:  MOVLW  01
040BA:  ADDWFC x54,W
040BC:  MOVWF  FEA
040BE:  MOVFF  FEF,75B
040C2:  MOVF   FF2,W
040C4:  MOVWF  00
040C6:  BCF    FF2.7
040C8:  MOVFF  75A,FAA
040CC:  MOVFF  759,FA9
040D0:  MOVFF  75B,FA8
040D4:  BCF    FA6.6
040D6:  BCF    FA6.7
040D8:  BSF    FA6.2
040DA:  MOVLB  F
040DC:  MOVLW  55
040DE:  MOVWF  FA7
040E0:  MOVLW  AA
040E2:  MOVWF  FA7
040E4:  BSF    FA6.1
040E6:  BTFSC  FA6.1
040E8:  BRA    40E6
040EA:  BCF    FA6.2
040EC:  MOVF   00,W
040EE:  IORWF  FF2,F
....................                   break;
040F0:  BRA    4180
....................                }
040F2:  BRA    4168
040F4:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage8[j] = RxD_Buff[i];
040F6:  MOVLW  6E
040F8:  ADDWF  x55,W
040FA:  MOVWF  01
040FC:  MOVLW  06
040FE:  ADDWFC x56,W
04100:  MOVWF  03
04102:  MOVLW  70
04104:  ADDWF  x53,W
04106:  MOVWF  FE9
04108:  MOVLW  01
0410A:  ADDWFC x54,W
0410C:  MOVWF  FEA
0410E:  MOVFF  FEF,75B
04112:  MOVFF  03,FEA
04116:  MOVFF  01,FE9
0411A:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
0411E:  MOVLW  5D
04120:  ADDWF  x53,W
04122:  MOVWF  x59
04124:  MOVLW  00
04126:  ADDWFC x54,W
04128:  MOVWF  x5A
0412A:  MOVLW  70
0412C:  ADDWF  x53,W
0412E:  MOVWF  FE9
04130:  MOVLW  01
04132:  ADDWFC x54,W
04134:  MOVWF  FEA
04136:  MOVFF  FEF,75B
0413A:  MOVF   FF2,W
0413C:  MOVWF  00
0413E:  BCF    FF2.7
04140:  MOVFF  75A,FAA
04144:  MOVFF  759,FA9
04148:  MOVFF  75B,FA8
0414C:  BCF    FA6.6
0414E:  BCF    FA6.7
04150:  BSF    FA6.2
04152:  MOVLB  F
04154:  MOVLW  55
04156:  MOVWF  FA7
04158:  MOVLW  AA
0415A:  MOVWF  FA7
0415C:  BSF    FA6.1
0415E:  BTFSC  FA6.1
04160:  BRA    415E
04162:  BCF    FA6.2
04164:  MOVF   00,W
04166:  IORWF  FF2,F
....................                }
04168:  MOVLB  7
0416A:  MOVFF  754,03
0416E:  MOVF   x53,W
04170:  INCF   x53,F
04172:  BTFSC  FD8.2
04174:  INCF   x54,F
04176:  INCF   x55,F
04178:  BTFSC  FD8.2
0417A:  INCF   x56,F
0417C:  BRA    4088
0417E:  MOVLB  F
....................             }
....................             SMS_Massage8[j] = '\0' ; // end string
04180:  MOVLW  6E
04182:  MOVLB  7
04184:  ADDWF  x55,W
04186:  MOVWF  FE9
04188:  MOVLW  06
0418A:  ADDWFC x56,W
0418C:  MOVWF  FEA
0418E:  CLRF   FEF
....................             
....................             /////////////////////////////////////////////
....................             j=0;
04190:  CLRF   x56
04192:  CLRF   x55
....................             i++;
04194:  INCF   x53,F
04196:  BTFSC  FD8.2
04198:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
0419A:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
0419C:  MOVLW  70
0419E:  ADDWF  x53,W
041A0:  MOVWF  FE9
041A2:  MOVLW  01
041A4:  ADDWFC x54,W
041A6:  MOVWF  FEA
041A8:  MOVF   FEF,W
041AA:  SUBLW  0D
041AC:  BZ    41B8
041AE:  MOVF   x56,F
041B0:  BNZ   41B8
041B2:  MOVF   x55,W
041B4:  SUBLW  1E
041B6:  BC    4208
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
041B8:  MOVLW  5D
041BA:  ADDWF  x53,W
041BC:  MOVWF  x59
041BE:  MOVLW  00
041C0:  ADDWFC x54,W
041C2:  MOVWF  x5A
041C4:  MOVLW  70
041C6:  ADDWF  x53,W
041C8:  MOVWF  FE9
041CA:  MOVLW  01
041CC:  ADDWFC x54,W
041CE:  MOVWF  FEA
041D0:  MOVFF  FEF,75B
041D4:  MOVF   FF2,W
041D6:  MOVWF  00
041D8:  BCF    FF2.7
041DA:  MOVFF  75A,FAA
041DE:  MOVFF  759,FA9
041E2:  MOVFF  75B,FA8
041E6:  BCF    FA6.6
041E8:  BCF    FA6.7
041EA:  BSF    FA6.2
041EC:  MOVLB  F
041EE:  MOVLW  55
041F0:  MOVWF  FA7
041F2:  MOVLW  AA
041F4:  MOVWF  FA7
041F6:  BSF    FA6.1
041F8:  BTFSC  FA6.1
041FA:  BRA    41F8
041FC:  BCF    FA6.2
041FE:  MOVF   00,W
04200:  IORWF  FF2,F
....................                   break;
04202:  BRA    4292
....................                }
04204:  BRA    427A
04206:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage9[j] = RxD_Buff[i];
04208:  MOVLW  8E
0420A:  ADDWF  x55,W
0420C:  MOVWF  01
0420E:  MOVLW  06
04210:  ADDWFC x56,W
04212:  MOVWF  03
04214:  MOVLW  70
04216:  ADDWF  x53,W
04218:  MOVWF  FE9
0421A:  MOVLW  01
0421C:  ADDWFC x54,W
0421E:  MOVWF  FEA
04220:  MOVFF  FEF,75B
04224:  MOVFF  03,FEA
04228:  MOVFF  01,FE9
0422C:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04230:  MOVLW  5D
04232:  ADDWF  x53,W
04234:  MOVWF  x59
04236:  MOVLW  00
04238:  ADDWFC x54,W
0423A:  MOVWF  x5A
0423C:  MOVLW  70
0423E:  ADDWF  x53,W
04240:  MOVWF  FE9
04242:  MOVLW  01
04244:  ADDWFC x54,W
04246:  MOVWF  FEA
04248:  MOVFF  FEF,75B
0424C:  MOVF   FF2,W
0424E:  MOVWF  00
04250:  BCF    FF2.7
04252:  MOVFF  75A,FAA
04256:  MOVFF  759,FA9
0425A:  MOVFF  75B,FA8
0425E:  BCF    FA6.6
04260:  BCF    FA6.7
04262:  BSF    FA6.2
04264:  MOVLB  F
04266:  MOVLW  55
04268:  MOVWF  FA7
0426A:  MOVLW  AA
0426C:  MOVWF  FA7
0426E:  BSF    FA6.1
04270:  BTFSC  FA6.1
04272:  BRA    4270
04274:  BCF    FA6.2
04276:  MOVF   00,W
04278:  IORWF  FF2,F
....................                }
0427A:  MOVLB  7
0427C:  MOVFF  754,03
04280:  MOVF   x53,W
04282:  INCF   x53,F
04284:  BTFSC  FD8.2
04286:  INCF   x54,F
04288:  INCF   x55,F
0428A:  BTFSC  FD8.2
0428C:  INCF   x56,F
0428E:  BRA    419A
04290:  MOVLB  F
....................             }
....................             SMS_Massage9[j] = '\0' ; // end string
04292:  MOVLW  8E
04294:  MOVLB  7
04296:  ADDWF  x55,W
04298:  MOVWF  FE9
0429A:  MOVLW  06
0429C:  ADDWFC x56,W
0429E:  MOVWF  FEA
042A0:  CLRF   FEF
....................             j=0;
042A2:  CLRF   x56
042A4:  CLRF   x55
....................             i++;
042A6:  INCF   x53,F
042A8:  BTFSC  FD8.2
042AA:  INCF   x54,F
....................             
....................             for(; ; i++,j++)
....................             {
....................                restart_wdt();
042AC:  CLRWDT
....................                if((RxD_Buff[i] == 0x0D) || (j > 30))
042AE:  MOVLW  70
042B0:  ADDWF  x53,W
042B2:  MOVWF  FE9
042B4:  MOVLW  01
042B6:  ADDWFC x54,W
042B8:  MOVWF  FEA
042BA:  MOVF   FEF,W
042BC:  SUBLW  0D
042BE:  BZ    42CA
042C0:  MOVF   x56,F
042C2:  BNZ   42CA
042C4:  MOVF   x55,W
042C6:  SUBLW  1E
042C8:  BC    431A
....................                {
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
042CA:  MOVLW  5D
042CC:  ADDWF  x53,W
042CE:  MOVWF  x59
042D0:  MOVLW  00
042D2:  ADDWFC x54,W
042D4:  MOVWF  x5A
042D6:  MOVLW  70
042D8:  ADDWF  x53,W
042DA:  MOVWF  FE9
042DC:  MOVLW  01
042DE:  ADDWFC x54,W
042E0:  MOVWF  FEA
042E2:  MOVFF  FEF,75B
042E6:  MOVF   FF2,W
042E8:  MOVWF  00
042EA:  BCF    FF2.7
042EC:  MOVFF  75A,FAA
042F0:  MOVFF  759,FA9
042F4:  MOVFF  75B,FA8
042F8:  BCF    FA6.6
042FA:  BCF    FA6.7
042FC:  BSF    FA6.2
042FE:  MOVLB  F
04300:  MOVLW  55
04302:  MOVWF  FA7
04304:  MOVLW  AA
04306:  MOVWF  FA7
04308:  BSF    FA6.1
0430A:  BTFSC  FA6.1
0430C:  BRA    430A
0430E:  BCF    FA6.2
04310:  MOVF   00,W
04312:  IORWF  FF2,F
....................                   break;
04314:  BRA    43A4
....................                }
04316:  BRA    438C
04318:  MOVLB  7
....................                else
....................                {
....................                   SMS_Massage10[j] = RxD_Buff[i];
0431A:  MOVLW  AE
0431C:  ADDWF  x55,W
0431E:  MOVWF  01
04320:  MOVLW  06
04322:  ADDWFC x56,W
04324:  MOVWF  03
04326:  MOVLW  70
04328:  ADDWF  x53,W
0432A:  MOVWF  FE9
0432C:  MOVLW  01
0432E:  ADDWFC x54,W
04330:  MOVWF  FEA
04332:  MOVFF  FEF,75B
04336:  MOVFF  03,FEA
0433A:  MOVFF  01,FE9
0433E:  MOVFF  75B,FEF
....................                   write_eeprom(0x5D+i,RxD_Buff[i]);
04342:  MOVLW  5D
04344:  ADDWF  x53,W
04346:  MOVWF  x59
04348:  MOVLW  00
0434A:  ADDWFC x54,W
0434C:  MOVWF  x5A
0434E:  MOVLW  70
04350:  ADDWF  x53,W
04352:  MOVWF  FE9
04354:  MOVLW  01
04356:  ADDWFC x54,W
04358:  MOVWF  FEA
0435A:  MOVFF  FEF,75B
0435E:  MOVF   FF2,W
04360:  MOVWF  00
04362:  BCF    FF2.7
04364:  MOVFF  75A,FAA
04368:  MOVFF  759,FA9
0436C:  MOVFF  75B,FA8
04370:  BCF    FA6.6
04372:  BCF    FA6.7
04374:  BSF    FA6.2
04376:  MOVLB  F
04378:  MOVLW  55
0437A:  MOVWF  FA7
0437C:  MOVLW  AA
0437E:  MOVWF  FA7
04380:  BSF    FA6.1
04382:  BTFSC  FA6.1
04384:  BRA    4382
04386:  BCF    FA6.2
04388:  MOVF   00,W
0438A:  IORWF  FF2,F
....................                }
0438C:  MOVLB  7
0438E:  MOVFF  754,03
04392:  MOVF   x53,W
04394:  INCF   x53,F
04396:  BTFSC  FD8.2
04398:  INCF   x54,F
0439A:  INCF   x55,F
0439C:  BTFSC  FD8.2
0439E:  INCF   x56,F
043A0:  BRA    42AC
043A2:  MOVLB  F
....................             }
....................             SMS_Massage10[j] = '\0' ; // end string
043A4:  MOVLW  AE
043A6:  MOVLB  7
043A8:  ADDWF  x55,W
043AA:  MOVWF  FE9
043AC:  MOVLW  06
043AE:  ADDWFC x56,W
043B0:  MOVWF  FEA
043B2:  CLRF   FEF
....................             
....................          
....................             TxD_Buff[0] = Address ;         //Address
043B4:  MOVFF  6D,70
....................             TxD_Buff[1] = 0x22 ;            //return function code
043B8:  MOVLW  22
043BA:  MOVLB  0
043BC:  MOVWF  x71
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
043BE:  MOVLB  7
043C0:  CLRF   x5C
043C2:  MOVLW  70
043C4:  MOVWF  x5B
043C6:  MOVLW  02
043C8:  MOVWF  x5D
043CA:  MOVLB  0
043CC:  CALL   2456
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
043D0:  MOVFF  371,72
....................             TxD_Buff[3] = CRC_Lo ;
043D4:  MOVFF  370,73
.................... 
....................             output_bit(P485ctrl,1);
043D8:  BSF    F8A.3
043DA:  BCF    F93.3
....................             delay_ms(10);
043DC:  MOVLW  0A
043DE:  MOVLB  7
043E0:  MOVWF  x59
043E2:  MOVLB  0
043E4:  CALL   0848
.................... 
....................             putc(Txd_Buff[0]);
043E8:  MOVF   x70,W
043EA:  CALL   24AC
....................             putc(Txd_Buff[1]);
043EE:  MOVF   x71,W
043F0:  CALL   24AC
....................             putc(Txd_Buff[2]);
043F4:  MOVF   x72,W
043F6:  CALL   24AC
....................             putc(Txd_Buff[3]);
043FA:  MOVF   x73,W
043FC:  CALL   24AC
.................... 
....................             delay_ms(3);
04400:  MOVLW  03
04402:  MOVLB  7
04404:  MOVWF  x59
04406:  MOVLB  0
04408:  CALL   0848
....................             output_bit(P485ctrl,0);
0440C:  BCF    F8A.3
0440E:  BCF    F93.3
04410:  MOVLB  1
....................          }
....................          /////////////////////////////////////////////////////////////////////////////////////
....................          
....................          if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
04412:  MOVF   x71,W
04414:  SUBLW  03
04416:  BNZ   44A4
....................          {
.................... 
....................             Data_Buff[0] = Input9_10;// dummy data
04418:  MOVFF  4B,379
....................             Data_Buff[1] = Input1_8;
0441C:  MOVFF  4A,37A
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
04420:  MOVFF  6D,70
....................             TxD_Buff[1] = 0x03 ;           //Function Code
04424:  MOVLW  03
04426:  MOVLB  0
04428:  MOVWF  x71
....................             TxD_Buff[2] = 0x02 ;          //Byte Count
0442A:  MOVLW  02
0442C:  MOVWF  x72
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
0442E:  MOVFF  379,73
....................             TxD_Buff[4] = Data_Buff[1];   //first byte Data
04432:  MOVFF  37A,74
.................... 
....................             CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
04436:  MOVLB  7
04438:  CLRF   x5C
0443A:  MOVLW  70
0443C:  MOVWF  x5B
0443E:  MOVLW  05
04440:  MOVWF  x5D
04442:  MOVLB  0
04444:  CALL   2456
.................... 
....................             TxD_Buff[5] = CRC_Hi ;
04448:  MOVFF  371,75
....................             TxD_Buff[6] = CRC_Lo ;
0444C:  MOVFF  370,76
.................... 
....................             output_bit(P485ctrl,1);
04450:  BSF    F8A.3
04452:  BCF    F93.3
....................             restart_wdt();
04454:  CLRWDT
....................             delay_ms(4);
04456:  MOVLW  04
04458:  MOVLB  7
0445A:  MOVWF  x59
0445C:  MOVLB  0
0445E:  CALL   0848
....................             restart_wdt();
04462:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
04464:  MOVF   x70,W
04466:  CALL   24AC
....................             putc(TxD_Buff[1]) ;               //Function Code
0446A:  MOVF   x71,W
0446C:  CALL   24AC
....................             putc(TxD_Buff[2]) ;               //Byte Count
04470:  MOVF   x72,W
04472:  CALL   24AC
....................             putc(TxD_Buff[3]) ;
04476:  MOVF   x73,W
04478:  CALL   24AC
....................             putc(TxD_Buff[4]) ;
0447C:  MOVF   x74,W
0447E:  CALL   24AC
....................             putc(TxD_Buff[5]) ;
04482:  MOVF   x75,W
04484:  CALL   24AC
....................             putc(TxD_Buff[6]) ;
04488:  MOVF   x76,W
0448A:  CALL   24AC
....................             
....................             restart_wdt();
0448E:  CLRWDT
....................             delay_ms(3);
04490:  MOVLW  03
04492:  MOVLB  7
04494:  MOVWF  x59
04496:  MOVLB  0
04498:  CALL   0848
....................             restart_wdt();
0449C:  CLRWDT
....................             output_bit(P485ctrl,0);
0449E:  BCF    F8A.3
044A0:  BCF    F93.3
044A2:  MOVLB  1
....................          }
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
044A4:  MOVLW  01
044A6:  MOVLB  3
044A8:  MOVWF  x73
044AA:  MOVLW  F4
044AC:  MOVWF  x72
....................    }
.................... 
....................    recieve_completed = 0 ;
044AE:  BCF    30.5
....................    sequence = end_sq ;
044B0:  MOVFF  63,6C
....................    T_timeout = 0x00;
044B4:  MOVLB  5
044B6:  CLRF   x7B
....................    RxD_DataLen = 0x00 ;
044B8:  MOVLB  0
044BA:  CLRF   x6F
044BC:  CLRF   x6E
....................    output_bit(P485ctrl,0);
044BE:  BCF    F8A.3
044C0:  BCF    F93.3
044C2:  GOTO   76A2 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................     ///////////////////////--Edit--///////////////////
....................        MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
*
01924:  MOVLB  7
01926:  CLRF   x51
01928:  MOVLB  0
0192A:  RCALL  17F6
0192C:  MOVFF  01,579
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01930:  BTFSS  1A.4
01932:  BRA    193A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
01934:  MOVLB  5
01936:  COMF   x79,F
01938:  MOVLB  0
....................       }
....................       
....................       FaultNow[11] = MCP23s17_Ip_dat;
0193A:  MOVLB  6
0193C:  BCF    xF0.3
0193E:  MOVLB  5
01940:  BTFSS  x79.0
01942:  BRA    194A
01944:  MOVLB  6
01946:  BSF    xF0.3
01948:  MOVLB  5
....................       FaultNow[12] = MCP23s17_Ip_dat >> 1;
0194A:  BCF    FD8.0
0194C:  RRCF   x79,W
0194E:  MOVLB  6
01950:  BCF    xF0.4
01952:  BTFSC  FE8.0
01954:  BSF    xF0.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 2;
01956:  MOVLB  5
01958:  RRCF   x79,W
0195A:  MOVWF  00
0195C:  RRCF   00,F
0195E:  MOVLW  3F
01960:  ANDWF  00,F
01962:  MOVLB  6
01964:  BCF    xF0.5
01966:  BTFSC  00.0
01968:  BSF    xF0.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 3;
0196A:  MOVLB  5
0196C:  RRCF   x79,W
0196E:  MOVWF  00
01970:  RRCF   00,F
01972:  RRCF   00,F
01974:  MOVLW  1F
01976:  ANDWF  00,F
01978:  MOVLB  6
0197A:  BCF    xF0.6
0197C:  BTFSC  00.0
0197E:  BSF    xF0.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 4;
01980:  MOVLB  5
01982:  SWAPF  x79,W
01984:  MOVWF  00
01986:  MOVLW  0F
01988:  ANDWF  00,F
0198A:  MOVLB  6
0198C:  BCF    xF0.7
0198E:  BTFSC  00.0
01990:  BSF    xF0.7
....................       FaultNow[16] = MCP23s17_Ip_dat >> 5;
01992:  MOVLB  5
01994:  SWAPF  x79,W
01996:  MOVWF  00
01998:  RRCF   00,F
0199A:  MOVLW  07
0199C:  ANDWF  00,F
0199E:  MOVLB  6
019A0:  BCF    xF1.0
019A2:  BTFSC  00.0
019A4:  BSF    xF1.0
....................       FaultNow[17] = MCP23s17_Ip_dat >> 6;
019A6:  MOVLB  5
019A8:  SWAPF  x79,W
019AA:  MOVWF  00
019AC:  RRCF   00,F
019AE:  RRCF   00,F
019B0:  MOVLW  03
019B2:  ANDWF  00,F
019B4:  MOVLB  6
019B6:  BCF    xF1.1
019B8:  BTFSC  00.0
019BA:  BSF    xF1.1
....................       FaultNow[18] = MCP23s17_Ip_dat >> 7;
019BC:  CLRF   00
019BE:  MOVLB  5
019C0:  BTFSC  x79.7
019C2:  BSF    00.0
019C4:  MOVLB  6
019C6:  BCF    xF1.2
019C8:  BTFSC  00.0
019CA:  BSF    xF1.2
....................       
....................        MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
019CC:  MOVLB  7
019CE:  CLRF   x51
019D0:  MOVLB  0
019D2:  RCALL  1812
019D4:  MOVFF  01,579
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
019D8:  BTFSS  1A.4
019DA:  BRA    19E2
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
019DC:  MOVLB  5
019DE:  COMF   x79,F
019E0:  MOVLB  0
....................       }
....................       
....................       FaultNow[19] = MCP23s17_Ip_dat;
019E2:  MOVLB  6
019E4:  BCF    xF1.3
019E6:  MOVLB  5
019E8:  BTFSS  x79.0
019EA:  BRA    19F2
019EC:  MOVLB  6
019EE:  BSF    xF1.3
019F0:  MOVLB  5
....................       FaultNow[20] = MCP23s17_Ip_dat >> 1;
019F2:  BCF    FD8.0
019F4:  RRCF   x79,W
019F6:  MOVLB  6
019F8:  BCF    xF1.4
019FA:  BTFSC  FE8.0
019FC:  BSF    xF1.4
....................       
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
019FE:  MOVLW  02
01A00:  MOVLB  7
01A02:  MOVWF  x51
01A04:  MOVLB  0
01A06:  RCALL  17F6
01A08:  MOVFF  01,579
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01A0C:  BTFSS  1A.4
01A0E:  BRA    1A16
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01A10:  MOVLB  5
01A12:  COMF   x79,F
01A14:  MOVLB  0
....................          
....................       }
....................       
....................       FaultNow[1] = MCP23s17_Ip_dat;
01A16:  MOVLB  6
01A18:  BCF    xEF.1
01A1A:  MOVLB  5
01A1C:  BTFSS  x79.0
01A1E:  BRA    1A26
01A20:  MOVLB  6
01A22:  BSF    xEF.1
01A24:  MOVLB  5
....................       FaultNow[2] = MCP23s17_Ip_dat >> 1;
01A26:  BCF    FD8.0
01A28:  RRCF   x79,W
01A2A:  MOVLB  6
01A2C:  BCF    xEF.2
01A2E:  BTFSC  FE8.0
01A30:  BSF    xEF.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 2;
01A32:  MOVLB  5
01A34:  RRCF   x79,W
01A36:  MOVWF  00
01A38:  RRCF   00,F
01A3A:  MOVLW  3F
01A3C:  ANDWF  00,F
01A3E:  MOVLB  6
01A40:  BCF    xEF.3
01A42:  BTFSC  00.0
01A44:  BSF    xEF.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 3;
01A46:  MOVLB  5
01A48:  RRCF   x79,W
01A4A:  MOVWF  00
01A4C:  RRCF   00,F
01A4E:  RRCF   00,F
01A50:  MOVLW  1F
01A52:  ANDWF  00,F
01A54:  MOVLB  6
01A56:  BCF    xEF.4
01A58:  BTFSC  00.0
01A5A:  BSF    xEF.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 4;
01A5C:  MOVLB  5
01A5E:  SWAPF  x79,W
01A60:  MOVWF  00
01A62:  MOVLW  0F
01A64:  ANDWF  00,F
01A66:  MOVLB  6
01A68:  BCF    xEF.5
01A6A:  BTFSC  00.0
01A6C:  BSF    xEF.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 5;
01A6E:  MOVLB  5
01A70:  SWAPF  x79,W
01A72:  MOVWF  00
01A74:  RRCF   00,F
01A76:  MOVLW  07
01A78:  ANDWF  00,F
01A7A:  MOVLB  6
01A7C:  BCF    xEF.6
01A7E:  BTFSC  00.0
01A80:  BSF    xEF.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 6;
01A82:  MOVLB  5
01A84:  SWAPF  x79,W
01A86:  MOVWF  00
01A88:  RRCF   00,F
01A8A:  RRCF   00,F
01A8C:  MOVLW  03
01A8E:  ANDWF  00,F
01A90:  MOVLB  6
01A92:  BCF    xEF.7
01A94:  BTFSC  00.0
01A96:  BSF    xEF.7
....................       FaultNow[8] = MCP23s17_Ip_dat >> 7;
01A98:  CLRF   00
01A9A:  MOVLB  5
01A9C:  BTFSC  x79.7
01A9E:  BSF    00.0
01AA0:  MOVLB  6
01AA2:  BCF    xF0.0
01AA4:  BTFSC  00.0
01AA6:  BSF    xF0.0
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
01AA8:  MOVLW  02
01AAA:  MOVLB  7
01AAC:  MOVWF  x51
01AAE:  MOVLB  0
01AB0:  RCALL  1812
01AB2:  MOVFF  01,579
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
01AB6:  BTFSS  1A.4
01AB8:  BRA    1AC0
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
01ABA:  MOVLB  5
01ABC:  COMF   x79,F
01ABE:  MOVLB  0
....................       }
....................       
....................       FaultNow[9] = MCP23s17_Ip_dat;
01AC0:  MOVLB  6
01AC2:  BCF    xF0.1
01AC4:  MOVLB  5
01AC6:  BTFSS  x79.0
01AC8:  BRA    1AD0
01ACA:  MOVLB  6
01ACC:  BSF    xF0.1
01ACE:  MOVLB  5
....................       FaultNow[10] = MCP23s17_Ip_dat >> 1;
01AD0:  BCF    FD8.0
01AD2:  RRCF   x79,W
01AD4:  MOVLB  6
01AD6:  BCF    xF0.2
01AD8:  BTFSC  FE8.0
01ADA:  BSF    xF0.2
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=10; i++)
01ADC:  MOVLW  01
01ADE:  MOVLB  7
01AE0:  MOVWF  x50
01AE2:  MOVF   x50,W
01AE4:  SUBLW  0A
01AE6:  BTFSS  FD8.0
01AE8:  BRA    2012
....................       {
....................          if(FaultNCNO[i] ==NO)
01AEA:  MOVFF  750,754
01AEE:  MOVLW  07
01AF0:  MOVWF  x56
01AF2:  MOVLW  46
01AF4:  MOVWF  x55
01AF6:  MOVLB  0
01AF8:  RCALL  182E
01AFA:  MOVF   01,W
01AFC:  ANDLW  01
01AFE:  SUBLW  01
01B00:  BTFSS  FD8.2
01B02:  BRA    1D7A
....................          {
....................              if(FaultNow[i]==0)
01B04:  MOVFF  750,754
01B08:  MOVLW  06
01B0A:  MOVLB  7
01B0C:  MOVWF  x56
01B0E:  MOVLW  EF
01B10:  MOVWF  x55
01B12:  MOVLB  0
01B14:  RCALL  182E
01B16:  MOVF   01,W
01B18:  ANDLW  01
01B1A:  BTFSS  FD8.2
01B1C:  BRA    1C4C
....................              {   
....................                if(FaultAgo[i]==0)
01B1E:  MOVFF  750,754
01B22:  MOVLW  06
01B24:  MOVLB  7
01B26:  MOVWF  x56
01B28:  MOVLW  EC
01B2A:  MOVWF  x55
01B2C:  MOVLB  0
01B2E:  RCALL  182E
01B30:  MOVF   01,W
01B32:  ANDLW  01
01B34:  BTFSS  FD8.2
01B36:  BRA    1C30
....................                {
....................                    ReleaseTime[i]++;
01B38:  BCF    FD8.0
01B3A:  MOVLB  7
01B3C:  RLCF   x50,W
01B3E:  CLRF   03
01B40:  ADDLW  F2
01B42:  MOVWF  FE9
01B44:  MOVLW  06
01B46:  ADDWFC 03,W
01B48:  MOVWF  FEA
01B4A:  MOVLW  01
01B4C:  ADDWF  FEE,F
01B4E:  BNC   1B52
01B50:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01B52:  BCF    FD8.0
01B54:  RLCF   x50,W
01B56:  CLRF   03
01B58:  ADDLW  F2
01B5A:  MOVWF  FE9
01B5C:  MOVLW  06
01B5E:  ADDWFC 03,W
01B60:  MOVWF  FEA
01B62:  MOVFF  FEC,752
01B66:  MOVF   FED,F
01B68:  MOVFF  FEF,751
01B6C:  BCF    FD8.0
01B6E:  RLCF   x50,W
01B70:  CLRF   03
01B72:  ADDLW  1C
01B74:  MOVWF  FE9
01B76:  MOVLW  07
01B78:  ADDWFC 03,W
01B7A:  MOVWF  FEA
01B7C:  MOVFF  FEC,756
01B80:  MOVF   FED,F
01B82:  MOVFF  FEF,755
01B86:  CLRF   x58
01B88:  MOVLW  4B
01B8A:  MOVWF  x57
01B8C:  MOVLB  0
01B8E:  RCALL  1864
01B90:  MOVFF  02,754
01B94:  MOVFF  01,753
01B98:  MOVLW  0F
01B9A:  MOVLB  7
01B9C:  ADDWF  01,W
01B9E:  MOVWF  01
01BA0:  MOVLW  00
01BA2:  ADDWFC 02,W
01BA4:  MOVWF  03
01BA6:  MOVF   03,W
01BA8:  SUBWF  x52,W
01BAA:  BNC   1C2C
01BAC:  BNZ   1BB4
01BAE:  MOVF   01,W
01BB0:  SUBWF  x51,W
01BB2:  BNC   1C2C
....................                    {   
....................                      ReleaseTime[i] = 0;
01BB4:  BCF    FD8.0
01BB6:  RLCF   x50,W
01BB8:  CLRF   03
01BBA:  ADDLW  F2
01BBC:  MOVWF  FE9
01BBE:  MOVLW  06
01BC0:  ADDWFC 03,W
01BC2:  MOVWF  FEA
01BC4:  CLRF   FEC
01BC6:  MOVF   FED,F
01BC8:  CLRF   FEF
....................                      switch(i)
01BCA:  MOVLW  01
01BCC:  SUBWF  x50,W
01BCE:  ADDLW  F6
01BD0:  BC    1C2C
01BD2:  ADDLW  0A
01BD4:  MOVLB  0
01BD6:  GOTO   20D6
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01BDA:  MOVLB  6
01BDC:  BCF    xCE.0
....................                         break;
01BDE:  MOVLB  7
01BE0:  BRA    1C2C
....................                         case 2:
....................                            Inputt.B2 = 0; 
01BE2:  MOVLB  6
01BE4:  BCF    xCE.1
....................                         break;
01BE6:  MOVLB  7
01BE8:  BRA    1C2C
....................                         case 3:
....................                            Inputt.B3 = 0; 
01BEA:  MOVLB  6
01BEC:  BCF    xCE.2
....................                         break;
01BEE:  MOVLB  7
01BF0:  BRA    1C2C
....................                         case 4:
....................                            Inputt.B4 = 0; 
01BF2:  MOVLB  6
01BF4:  BCF    xCE.3
....................                         break;
01BF6:  MOVLB  7
01BF8:  BRA    1C2C
....................                         case 5:
....................                            Inputt.B5 = 0; 
01BFA:  MOVLB  6
01BFC:  BCF    xCE.4
....................                         break;
01BFE:  MOVLB  7
01C00:  BRA    1C2C
....................                         case 6:
....................                            Inputt.B6 = 0; 
01C02:  MOVLB  6
01C04:  BCF    xCE.5
....................                         break;
01C06:  MOVLB  7
01C08:  BRA    1C2C
....................                         case 7:
....................                            Inputt.B7 = 0; 
01C0A:  MOVLB  6
01C0C:  BCF    xCE.6
....................                          break;
01C0E:  MOVLB  7
01C10:  BRA    1C2C
....................                          case 8:
....................                            Inputt.B8 = 0; 
01C12:  MOVLB  6
01C14:  BCF    xCE.7
....................                         break;
01C16:  MOVLB  7
01C18:  BRA    1C2C
....................                         case 9:
....................                            Inputt.B9 = 0; 
01C1A:  MOVLB  6
01C1C:  BCF    xCF.0
....................                         break;
01C1E:  MOVLB  7
01C20:  BRA    1C2C
....................                         case 10:
....................                            Inputt.B10 = 0; 
01C22:  MOVLB  6
01C24:  BCF    xCF.1
....................                         break;
01C26:  MOVLB  7
01C28:  BRA    1C2C
01C2A:  MOVLB  7
....................         
....................                      }                 
....................                    }
....................                }
01C2C:  BRA    1C48
01C2E:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01C30:  BCF    FD8.0
01C32:  MOVLB  7
01C34:  RLCF   x50,W
01C36:  CLRF   03
01C38:  ADDLW  F2
01C3A:  MOVWF  FE9
01C3C:  MOVLW  06
01C3E:  ADDWFC 03,W
01C40:  MOVWF  FEA
01C42:  CLRF   FEC
01C44:  MOVF   FED,F
01C46:  CLRF   FEF
....................                }
....................              }
01C48:  BRA    1D78
01C4A:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
01C4C:  MOVFF  750,754
01C50:  MOVLW  06
01C52:  MOVLB  7
01C54:  MOVWF  x56
01C56:  MOVLW  EC
01C58:  MOVWF  x55
01C5A:  MOVLB  0
01C5C:  RCALL  182E
01C5E:  MOVF   01,W
01C60:  ANDLW  01
01C62:  SUBLW  01
01C64:  BTFSS  FD8.2
01C66:  BRA    1D60
....................                {
....................                    ReleaseTime[i]++;
01C68:  BCF    FD8.0
01C6A:  MOVLB  7
01C6C:  RLCF   x50,W
01C6E:  CLRF   03
01C70:  ADDLW  F2
01C72:  MOVWF  FE9
01C74:  MOVLW  06
01C76:  ADDWFC 03,W
01C78:  MOVWF  FEA
01C7A:  MOVLW  01
01C7C:  ADDWF  FEE,F
01C7E:  BNC   1C82
01C80:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01C82:  BCF    FD8.0
01C84:  RLCF   x50,W
01C86:  CLRF   03
01C88:  ADDLW  F2
01C8A:  MOVWF  FE9
01C8C:  MOVLW  06
01C8E:  ADDWFC 03,W
01C90:  MOVWF  FEA
01C92:  MOVFF  FEC,752
01C96:  MOVF   FED,F
01C98:  MOVFF  FEF,751
01C9C:  BCF    FD8.0
01C9E:  RLCF   x50,W
01CA0:  CLRF   03
01CA2:  ADDLW  1C
01CA4:  MOVWF  FE9
01CA6:  MOVLW  07
01CA8:  ADDWFC 03,W
01CAA:  MOVWF  FEA
01CAC:  MOVFF  FEC,756
01CB0:  MOVF   FED,F
01CB2:  MOVFF  FEF,755
01CB6:  CLRF   x58
01CB8:  MOVLW  4B
01CBA:  MOVWF  x57
01CBC:  MOVLB  0
01CBE:  RCALL  1864
01CC0:  MOVFF  02,754
01CC4:  MOVFF  01,753
01CC8:  MOVLW  0F
01CCA:  MOVLB  7
01CCC:  ADDWF  01,W
01CCE:  MOVWF  01
01CD0:  MOVLW  00
01CD2:  ADDWFC 02,W
01CD4:  MOVWF  03
01CD6:  MOVF   03,W
01CD8:  SUBWF  x52,W
01CDA:  BNC   1D5C
01CDC:  BNZ   1CE4
01CDE:  MOVF   01,W
01CE0:  SUBWF  x51,W
01CE2:  BNC   1D5C
....................                    {   
....................                      ReleaseTime[i] = 1;
01CE4:  BCF    FD8.0
01CE6:  RLCF   x50,W
01CE8:  CLRF   03
01CEA:  ADDLW  F2
01CEC:  MOVWF  FE9
01CEE:  MOVLW  06
01CF0:  ADDWFC 03,W
01CF2:  MOVWF  FEA
01CF4:  CLRF   FEC
01CF6:  MOVF   FED,F
01CF8:  MOVLW  01
01CFA:  MOVWF  FEF
....................                      switch(i)
01CFC:  SUBWF  x50,W
01CFE:  ADDLW  F6
01D00:  BC    1D5C
01D02:  ADDLW  0A
01D04:  MOVLB  0
01D06:  GOTO   2104
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01D0A:  MOVLB  6
01D0C:  BSF    xCE.0
....................                         break;
01D0E:  MOVLB  7
01D10:  BRA    1D5C
....................                         case 2:
....................                            Inputt.B2 = 1; 
01D12:  MOVLB  6
01D14:  BSF    xCE.1
....................                         break;
01D16:  MOVLB  7
01D18:  BRA    1D5C
....................                         case 3:
....................                            Inputt.B3 = 1; 
01D1A:  MOVLB  6
01D1C:  BSF    xCE.2
....................                         break;
01D1E:  MOVLB  7
01D20:  BRA    1D5C
....................                         case 4:
....................                            Inputt.B4 = 1; 
01D22:  MOVLB  6
01D24:  BSF    xCE.3
....................                         break;
01D26:  MOVLB  7
01D28:  BRA    1D5C
....................                         case 5:
....................                            Inputt.B5 = 1; 
01D2A:  MOVLB  6
01D2C:  BSF    xCE.4
....................                         break;
01D2E:  MOVLB  7
01D30:  BRA    1D5C
....................                         case 6:
....................                            Inputt.B6 = 1; 
01D32:  MOVLB  6
01D34:  BSF    xCE.5
....................                         break;
01D36:  MOVLB  7
01D38:  BRA    1D5C
....................                         case 7:
....................                            Inputt.B7 = 1; 
01D3A:  MOVLB  6
01D3C:  BSF    xCE.6
....................                          break;
01D3E:  MOVLB  7
01D40:  BRA    1D5C
....................                          case 8:
....................                            Inputt.B8 = 1; 
01D42:  MOVLB  6
01D44:  BSF    xCE.7
....................                         break;
01D46:  MOVLB  7
01D48:  BRA    1D5C
....................                         case 9:
....................                            Inputt.B9 = 1; 
01D4A:  MOVLB  6
01D4C:  BSF    xCF.0
....................                         break;
01D4E:  MOVLB  7
01D50:  BRA    1D5C
....................                         case 10:
....................                            Inputt.B10 = 1; 
01D52:  MOVLB  6
01D54:  BSF    xCF.1
....................                         break;
01D56:  MOVLB  7
01D58:  BRA    1D5C
01D5A:  MOVLB  7
....................          
....................                      }                 
....................                    }
....................                }
01D5C:  BRA    1D78
01D5E:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01D60:  BCF    FD8.0
01D62:  MOVLB  7
01D64:  RLCF   x50,W
01D66:  CLRF   03
01D68:  ADDLW  F2
01D6A:  MOVWF  FE9
01D6C:  MOVLW  06
01D6E:  ADDWFC 03,W
01D70:  MOVWF  FEA
01D72:  CLRF   FEC
01D74:  MOVF   FED,F
01D76:  CLRF   FEF
....................                }
.................... 
....................              }
....................           }
01D78:  BRA    200A
....................           else if(FaultNCNO[i] ==NC)
01D7A:  MOVFF  750,754
01D7E:  MOVLW  07
01D80:  MOVLB  7
01D82:  MOVWF  x56
01D84:  MOVLW  46
01D86:  MOVWF  x55
01D88:  MOVLB  0
01D8A:  RCALL  182E
01D8C:  MOVF   01,W
01D8E:  ANDLW  01
01D90:  BTFSS  FD8.2
01D92:  BRA    200C
....................           {
....................              if(FaultNow[i]==1)
01D94:  MOVFF  750,754
01D98:  MOVLW  06
01D9A:  MOVLB  7
01D9C:  MOVWF  x56
01D9E:  MOVLW  EF
01DA0:  MOVWF  x55
01DA2:  MOVLB  0
01DA4:  RCALL  182E
01DA6:  MOVF   01,W
01DA8:  ANDLW  01
01DAA:  SUBLW  01
01DAC:  BTFSS  FD8.2
01DAE:  BRA    1EE0
....................              {
....................                if(FaultAgo[i]==1)
01DB0:  MOVFF  750,754
01DB4:  MOVLW  06
01DB6:  MOVLB  7
01DB8:  MOVWF  x56
01DBA:  MOVLW  EC
01DBC:  MOVWF  x55
01DBE:  MOVLB  0
01DC0:  RCALL  182E
01DC2:  MOVF   01,W
01DC4:  ANDLW  01
01DC6:  SUBLW  01
01DC8:  BTFSS  FD8.2
01DCA:  BRA    1EC4
....................                {
....................                    ReleaseTime[i]++;
01DCC:  BCF    FD8.0
01DCE:  MOVLB  7
01DD0:  RLCF   x50,W
01DD2:  CLRF   03
01DD4:  ADDLW  F2
01DD6:  MOVWF  FE9
01DD8:  MOVLW  06
01DDA:  ADDWFC 03,W
01DDC:  MOVWF  FEA
01DDE:  MOVLW  01
01DE0:  ADDWF  FEE,F
01DE2:  BNC   1DE6
01DE4:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01DE6:  BCF    FD8.0
01DE8:  RLCF   x50,W
01DEA:  CLRF   03
01DEC:  ADDLW  F2
01DEE:  MOVWF  FE9
01DF0:  MOVLW  06
01DF2:  ADDWFC 03,W
01DF4:  MOVWF  FEA
01DF6:  MOVFF  FEC,752
01DFA:  MOVF   FED,F
01DFC:  MOVFF  FEF,751
01E00:  BCF    FD8.0
01E02:  RLCF   x50,W
01E04:  CLRF   03
01E06:  ADDLW  1C
01E08:  MOVWF  FE9
01E0A:  MOVLW  07
01E0C:  ADDWFC 03,W
01E0E:  MOVWF  FEA
01E10:  MOVFF  FEC,756
01E14:  MOVF   FED,F
01E16:  MOVFF  FEF,755
01E1A:  CLRF   x58
01E1C:  MOVLW  4B
01E1E:  MOVWF  x57
01E20:  MOVLB  0
01E22:  RCALL  1864
01E24:  MOVFF  02,754
01E28:  MOVFF  01,753
01E2C:  MOVLW  0F
01E2E:  MOVLB  7
01E30:  ADDWF  01,W
01E32:  MOVWF  01
01E34:  MOVLW  00
01E36:  ADDWFC 02,W
01E38:  MOVWF  03
01E3A:  MOVF   03,W
01E3C:  SUBWF  x52,W
01E3E:  BNC   1EC0
01E40:  BNZ   1E48
01E42:  MOVF   01,W
01E44:  SUBWF  x51,W
01E46:  BNC   1EC0
....................                    {   
....................                      ReleaseTime[i] = 0;
01E48:  BCF    FD8.0
01E4A:  RLCF   x50,W
01E4C:  CLRF   03
01E4E:  ADDLW  F2
01E50:  MOVWF  FE9
01E52:  MOVLW  06
01E54:  ADDWFC 03,W
01E56:  MOVWF  FEA
01E58:  CLRF   FEC
01E5A:  MOVF   FED,F
01E5C:  CLRF   FEF
....................                      switch(i)
01E5E:  MOVLW  01
01E60:  SUBWF  x50,W
01E62:  ADDLW  F6
01E64:  BC    1EC0
01E66:  ADDLW  0A
01E68:  MOVLB  0
01E6A:  GOTO   2132
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
01E6E:  MOVLB  6
01E70:  BSF    xCE.0
....................                         break;
01E72:  MOVLB  7
01E74:  BRA    1EC0
....................                         case 2:
....................                            Inputt.B2 = 1; 
01E76:  MOVLB  6
01E78:  BSF    xCE.1
....................                         break;
01E7A:  MOVLB  7
01E7C:  BRA    1EC0
....................                         case 3:
....................                            Inputt.B3 = 1; 
01E7E:  MOVLB  6
01E80:  BSF    xCE.2
....................                         break;
01E82:  MOVLB  7
01E84:  BRA    1EC0
....................                         case 4:
....................                            Inputt.B4 = 1; 
01E86:  MOVLB  6
01E88:  BSF    xCE.3
....................                         break;
01E8A:  MOVLB  7
01E8C:  BRA    1EC0
....................                         case 5:
....................                            Inputt.B5 = 1; 
01E8E:  MOVLB  6
01E90:  BSF    xCE.4
....................                         break;
01E92:  MOVLB  7
01E94:  BRA    1EC0
....................                         case 6:
....................                            Inputt.B6 = 1; 
01E96:  MOVLB  6
01E98:  BSF    xCE.5
....................                         break;
01E9A:  MOVLB  7
01E9C:  BRA    1EC0
....................                         case 7:
....................                            Inputt.B7 = 1; 
01E9E:  MOVLB  6
01EA0:  BSF    xCE.6
....................                          break;
01EA2:  MOVLB  7
01EA4:  BRA    1EC0
....................                          case 8:
....................                            Inputt.B8 = 1; 
01EA6:  MOVLB  6
01EA8:  BSF    xCE.7
....................                         break;
01EAA:  MOVLB  7
01EAC:  BRA    1EC0
....................                         case 9:
....................                            Inputt.B9 = 1; 
01EAE:  MOVLB  6
01EB0:  BSF    xCF.0
....................                         break;
01EB2:  MOVLB  7
01EB4:  BRA    1EC0
....................                         case 10:
....................                            Inputt.B10 = 1; 
01EB6:  MOVLB  6
01EB8:  BSF    xCF.1
....................                         break;
01EBA:  MOVLB  7
01EBC:  BRA    1EC0
01EBE:  MOVLB  7
....................                                          
....................                      }                 
....................                   }
....................                }
01EC0:  BRA    1EDC
01EC2:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01EC4:  BCF    FD8.0
01EC6:  MOVLB  7
01EC8:  RLCF   x50,W
01ECA:  CLRF   03
01ECC:  ADDLW  F2
01ECE:  MOVWF  FE9
01ED0:  MOVLW  06
01ED2:  ADDWFC 03,W
01ED4:  MOVWF  FEA
01ED6:  CLRF   FEC
01ED8:  MOVF   FED,F
01EDA:  CLRF   FEF
....................                }
....................              }
01EDC:  BRA    200A
01EDE:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
01EE0:  MOVFF  750,754
01EE4:  MOVLW  06
01EE6:  MOVLB  7
01EE8:  MOVWF  x56
01EEA:  MOVLW  EC
01EEC:  MOVWF  x55
01EEE:  MOVLB  0
01EF0:  RCALL  182E
01EF2:  MOVF   01,W
01EF4:  ANDLW  01
01EF6:  BTFSS  FD8.2
01EF8:  BRA    1FF2
....................                {
....................                    ReleaseTime[i]++;
01EFA:  BCF    FD8.0
01EFC:  MOVLB  7
01EFE:  RLCF   x50,W
01F00:  CLRF   03
01F02:  ADDLW  F2
01F04:  MOVWF  FE9
01F06:  MOVLW  06
01F08:  ADDWFC 03,W
01F0A:  MOVWF  FEA
01F0C:  MOVLW  01
01F0E:  ADDWF  FEE,F
01F10:  BNC   1F14
01F12:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
01F14:  BCF    FD8.0
01F16:  RLCF   x50,W
01F18:  CLRF   03
01F1A:  ADDLW  F2
01F1C:  MOVWF  FE9
01F1E:  MOVLW  06
01F20:  ADDWFC 03,W
01F22:  MOVWF  FEA
01F24:  MOVFF  FEC,752
01F28:  MOVF   FED,F
01F2A:  MOVFF  FEF,751
01F2E:  BCF    FD8.0
01F30:  RLCF   x50,W
01F32:  CLRF   03
01F34:  ADDLW  1C
01F36:  MOVWF  FE9
01F38:  MOVLW  07
01F3A:  ADDWFC 03,W
01F3C:  MOVWF  FEA
01F3E:  MOVFF  FEC,756
01F42:  MOVF   FED,F
01F44:  MOVFF  FEF,755
01F48:  CLRF   x58
01F4A:  MOVLW  4B
01F4C:  MOVWF  x57
01F4E:  MOVLB  0
01F50:  RCALL  1864
01F52:  MOVFF  02,754
01F56:  MOVFF  01,753
01F5A:  MOVLW  0F
01F5C:  MOVLB  7
01F5E:  ADDWF  01,W
01F60:  MOVWF  01
01F62:  MOVLW  00
01F64:  ADDWFC 02,W
01F66:  MOVWF  03
01F68:  MOVF   03,W
01F6A:  SUBWF  x52,W
01F6C:  BNC   1FEE
01F6E:  BNZ   1F76
01F70:  MOVF   01,W
01F72:  SUBWF  x51,W
01F74:  BNC   1FEE
....................                    {   
....................                      ReleaseTime[i] = 0;
01F76:  BCF    FD8.0
01F78:  RLCF   x50,W
01F7A:  CLRF   03
01F7C:  ADDLW  F2
01F7E:  MOVWF  FE9
01F80:  MOVLW  06
01F82:  ADDWFC 03,W
01F84:  MOVWF  FEA
01F86:  CLRF   FEC
01F88:  MOVF   FED,F
01F8A:  CLRF   FEF
....................                      switch(i)
01F8C:  MOVLW  01
01F8E:  SUBWF  x50,W
01F90:  ADDLW  F6
01F92:  BC    1FEE
01F94:  ADDLW  0A
01F96:  MOVLB  0
01F98:  GOTO   2160
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
01F9C:  MOVLB  6
01F9E:  BCF    xCE.0
....................                         break;
01FA0:  MOVLB  7
01FA2:  BRA    1FEE
....................                         case 2:
....................                            Inputt.B2 = 0; 
01FA4:  MOVLB  6
01FA6:  BCF    xCE.1
....................                         break;
01FA8:  MOVLB  7
01FAA:  BRA    1FEE
....................                         case 3:
....................                            Inputt.B3 = 0; 
01FAC:  MOVLB  6
01FAE:  BCF    xCE.2
....................                         break;
01FB0:  MOVLB  7
01FB2:  BRA    1FEE
....................                         case 4:
....................                            Inputt.B4 = 0; 
01FB4:  MOVLB  6
01FB6:  BCF    xCE.3
....................                         break;
01FB8:  MOVLB  7
01FBA:  BRA    1FEE
....................                         case 5:
....................                            Inputt.B5 = 0; 
01FBC:  MOVLB  6
01FBE:  BCF    xCE.4
....................                         break;
01FC0:  MOVLB  7
01FC2:  BRA    1FEE
....................                         case 6:
....................                            Inputt.B6 = 0; 
01FC4:  MOVLB  6
01FC6:  BCF    xCE.5
....................                         break;
01FC8:  MOVLB  7
01FCA:  BRA    1FEE
....................                         case 7:
....................                            Inputt.B7 = 0; 
01FCC:  MOVLB  6
01FCE:  BCF    xCE.6
....................                          break;
01FD0:  MOVLB  7
01FD2:  BRA    1FEE
....................                          case 8:
....................                            Inputt.B8 = 0; 
01FD4:  MOVLB  6
01FD6:  BCF    xCE.7
....................                         break;
01FD8:  MOVLB  7
01FDA:  BRA    1FEE
....................                         case 9:
....................                            Inputt.B9 = 0; 
01FDC:  MOVLB  6
01FDE:  BCF    xCF.0
....................                         break;
01FE0:  MOVLB  7
01FE2:  BRA    1FEE
....................                         case 10:
....................                            Inputt.B10 = 0; 
01FE4:  MOVLB  6
01FE6:  BCF    xCF.1
....................                         break;
01FE8:  MOVLB  7
01FEA:  BRA    1FEE
01FEC:  MOVLB  7
....................          
....................                      }                 
....................                    }
....................                }
01FEE:  BRA    200A
01FF0:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
01FF2:  BCF    FD8.0
01FF4:  MOVLB  7
01FF6:  RLCF   x50,W
01FF8:  CLRF   03
01FFA:  ADDLW  F2
01FFC:  MOVWF  FE9
01FFE:  MOVLW  06
02000:  ADDWFC 03,W
02002:  MOVWF  FEA
02004:  CLRF   FEC
02006:  MOVF   FED,F
02008:  CLRF   FEF
0200A:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
0200C:  MOVLB  7
0200E:  INCF   x50,F
02010:  BRA    1AE2
....................       }
....................         
....................       StoreReleaseFault();
02012:  MOVLB  0
02014:  BRA    18C8
....................    
....................       Input1_8 = 0x00;
02016:  CLRF   4A
....................       Input1_8 = Input1_8 | ~Inputt.B8;
02018:  MOVLW  00
0201A:  MOVLB  6
0201C:  BTFSS  xCE.7
0201E:  MOVLW  01
02020:  IORWF  4A,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
02022:  BCF    FD8.0
02024:  RLCF   4A,W
02026:  MOVLB  7
02028:  MOVWF  x51
0202A:  MOVLW  00
0202C:  MOVLB  6
0202E:  BTFSS  xCE.6
02030:  MOVLW  01
02032:  MOVLB  7
02034:  IORWF  x51,W
02036:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
02038:  BCF    FD8.0
0203A:  RLCF   4A,W
0203C:  MOVWF  x51
0203E:  MOVLW  00
02040:  MOVLB  6
02042:  BTFSS  xCE.5
02044:  MOVLW  01
02046:  MOVLB  7
02048:  IORWF  x51,W
0204A:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
0204C:  BCF    FD8.0
0204E:  RLCF   4A,W
02050:  MOVWF  x51
02052:  MOVLW  00
02054:  MOVLB  6
02056:  BTFSS  xCE.4
02058:  MOVLW  01
0205A:  MOVLB  7
0205C:  IORWF  x51,W
0205E:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
02060:  BCF    FD8.0
02062:  RLCF   4A,W
02064:  MOVWF  x51
02066:  MOVLW  00
02068:  MOVLB  6
0206A:  BTFSS  xCE.3
0206C:  MOVLW  01
0206E:  MOVLB  7
02070:  IORWF  x51,W
02072:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
02074:  BCF    FD8.0
02076:  RLCF   4A,W
02078:  MOVWF  x51
0207A:  MOVLW  00
0207C:  MOVLB  6
0207E:  BTFSS  xCE.2
02080:  MOVLW  01
02082:  MOVLB  7
02084:  IORWF  x51,W
02086:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
02088:  BCF    FD8.0
0208A:  RLCF   4A,W
0208C:  MOVWF  x51
0208E:  MOVLW  00
02090:  MOVLB  6
02092:  BTFSS  xCE.1
02094:  MOVLW  01
02096:  MOVLB  7
02098:  IORWF  x51,W
0209A:  MOVWF  4A
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
0209C:  BCF    FD8.0
0209E:  RLCF   4A,W
020A0:  MOVWF  x51
020A2:  MOVLW  00
020A4:  MOVLB  6
020A6:  BTFSS  xCE.0
020A8:  MOVLW  01
020AA:  MOVLB  7
020AC:  IORWF  x51,W
020AE:  MOVWF  4A
....................     
....................    
.................... 
....................       Input9_10 = 0x00;
020B0:  CLRF   4B
....................       Input9_10 = Input9_10 | ~Inputt.B10;
020B2:  MOVLW  00
020B4:  MOVLB  6
020B6:  BTFSS  xCF.1
020B8:  MOVLW  01
020BA:  IORWF  4B,F
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
020BC:  BCF    FD8.0
020BE:  RLCF   4B,W
020C0:  MOVLB  7
020C2:  MOVWF  x51
020C4:  MOVLW  00
020C6:  MOVLB  6
020C8:  BTFSS  xCF.0
020CA:  MOVLW  01
020CC:  MOVLB  7
020CE:  IORWF  x51,W
020D0:  MOVWF  4B
020D2:  MOVLB  0
020D4:  RETURN 0
....................       
....................   
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Input type 1-8
*
00966:  MOVFF  FF2,75A
0096A:  BCF    FF2.7
0096C:  CLRF   FAA
0096E:  MOVLW  01
00970:  MOVWF  FA9
00972:  BCF    FA6.6
00974:  BCF    FA6.7
00976:  BSF    FA6.0
00978:  MOVF   FA8,W
0097A:  MOVLB  7
0097C:  BTFSC  x5A.7
0097E:  BSF    FF2.7
00980:  MOVWF  3A
....................    InputType1_8 = EEpDat;
00982:  MOVFF  3A,3B
.................... 
....................    InputType.B1 = EEpDat;
00986:  MOVLB  6
00988:  BCF    xD2.0
0098A:  BTFSC  3A.0
0098C:  BSF    xD2.0
....................    InputType.B2 = EEpDat >> 1;
0098E:  BCF    FD8.0
00990:  RRCF   3A,W
00992:  BCF    xD2.1
00994:  BTFSC  FE8.0
00996:  BSF    xD2.1
....................    InputType.B3 = EEpDat >> 2;
00998:  RRCF   3A,W
0099A:  MOVWF  00
0099C:  RRCF   00,F
0099E:  MOVLW  3F
009A0:  ANDWF  00,F
009A2:  BCF    xD2.2
009A4:  BTFSC  00.0
009A6:  BSF    xD2.2
....................    InputType.B4 = EEpDat >> 3;
009A8:  RRCF   3A,W
009AA:  MOVWF  00
009AC:  RRCF   00,F
009AE:  RRCF   00,F
009B0:  MOVLW  1F
009B2:  ANDWF  00,F
009B4:  BCF    xD2.3
009B6:  BTFSC  00.0
009B8:  BSF    xD2.3
....................    InputType.B5 = EEpDat >> 4;
009BA:  SWAPF  3A,W
009BC:  MOVWF  00
009BE:  MOVLW  0F
009C0:  ANDWF  00,F
009C2:  BCF    xD2.4
009C4:  BTFSC  00.0
009C6:  BSF    xD2.4
....................    InputType.B6 = EEpDat >> 5;
009C8:  SWAPF  3A,W
009CA:  MOVWF  00
009CC:  RRCF   00,F
009CE:  MOVLW  07
009D0:  ANDWF  00,F
009D2:  BCF    xD2.5
009D4:  BTFSC  00.0
009D6:  BSF    xD2.5
....................    InputType.B7 = EEpDat >> 6;
009D8:  SWAPF  3A,W
009DA:  MOVWF  00
009DC:  RRCF   00,F
009DE:  RRCF   00,F
009E0:  MOVLW  03
009E2:  ANDWF  00,F
009E4:  BCF    xD2.6
009E6:  BTFSC  00.0
009E8:  BSF    xD2.6
....................    InputType.B8 = EEpDat >> 7;
009EA:  CLRF   00
009EC:  BTFSC  3A.7
009EE:  BSF    00.0
009F0:  BCF    xD2.7
009F2:  BTFSC  00.0
009F4:  BSF    xD2.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Input type 9-16
009F6:  MOVFF  FF2,75A
009FA:  BCF    FF2.7
009FC:  CLRF   FAA
009FE:  MOVLW  02
00A00:  MOVWF  FA9
00A02:  BCF    FA6.6
00A04:  BCF    FA6.7
00A06:  BSF    FA6.0
00A08:  MOVF   FA8,W
00A0A:  MOVLB  7
00A0C:  BTFSC  x5A.7
00A0E:  BSF    FF2.7
00A10:  MOVWF  3A
....................    InputType9_16 = EEpDat;
00A12:  MOVFF  3A,3C
.................... 
....................    InputType.B9 = EEpDat;
00A16:  MOVLB  6
00A18:  BCF    xD3.0
00A1A:  BTFSC  3A.0
00A1C:  BSF    xD3.0
....................    InputType.B10 = EEpDat >> 1;
00A1E:  BCF    FD8.0
00A20:  RRCF   3A,W
00A22:  BCF    xD3.1
00A24:  BTFSC  FE8.0
00A26:  BSF    xD3.1
....................    
....................    FaultNCNO[1] = InputType.B1;
00A28:  MOVLB  7
00A2A:  BCF    x46.1
00A2C:  MOVLB  6
00A2E:  BTFSS  xD2.0
00A30:  BRA    0A38
00A32:  MOVLB  7
00A34:  BSF    x46.1
00A36:  MOVLB  6
....................    FaultNCNO[2] = InputType.B2;
00A38:  MOVLB  7
00A3A:  BCF    x46.2
00A3C:  MOVLB  6
00A3E:  BTFSS  xD2.1
00A40:  BRA    0A48
00A42:  MOVLB  7
00A44:  BSF    x46.2
00A46:  MOVLB  6
....................    FaultNCNO[3] = InputType.B3;
00A48:  MOVLB  7
00A4A:  BCF    x46.3
00A4C:  MOVLB  6
00A4E:  BTFSS  xD2.2
00A50:  BRA    0A58
00A52:  MOVLB  7
00A54:  BSF    x46.3
00A56:  MOVLB  6
....................    FaultNCNO[4] = InputType.B4;
00A58:  MOVLB  7
00A5A:  BCF    x46.4
00A5C:  MOVLB  6
00A5E:  BTFSS  xD2.3
00A60:  BRA    0A68
00A62:  MOVLB  7
00A64:  BSF    x46.4
00A66:  MOVLB  6
....................    FaultNCNO[5] = InputType.B5;
00A68:  MOVLB  7
00A6A:  BCF    x46.5
00A6C:  MOVLB  6
00A6E:  BTFSS  xD2.4
00A70:  BRA    0A78
00A72:  MOVLB  7
00A74:  BSF    x46.5
00A76:  MOVLB  6
....................    FaultNCNO[6] = InputType.B6;
00A78:  MOVLB  7
00A7A:  BCF    x46.6
00A7C:  MOVLB  6
00A7E:  BTFSS  xD2.5
00A80:  BRA    0A88
00A82:  MOVLB  7
00A84:  BSF    x46.6
00A86:  MOVLB  6
....................    FaultNCNO[7] = InputType.B7;
00A88:  MOVLB  7
00A8A:  BCF    x46.7
00A8C:  MOVLB  6
00A8E:  BTFSS  xD2.6
00A90:  BRA    0A98
00A92:  MOVLB  7
00A94:  BSF    x46.7
00A96:  MOVLB  6
....................    FaultNCNO[8] = InputType.B8;
00A98:  MOVLB  7
00A9A:  BCF    x47.0
00A9C:  MOVLB  6
00A9E:  BTFSS  xD2.7
00AA0:  BRA    0AA8
00AA2:  MOVLB  7
00AA4:  BSF    x47.0
00AA6:  MOVLB  6
....................    FaultNCNO[9] = InputType.B9;
00AA8:  MOVLB  7
00AAA:  BCF    x47.1
00AAC:  MOVLB  6
00AAE:  BTFSS  xD3.0
00AB0:  BRA    0AB8
00AB2:  MOVLB  7
00AB4:  BSF    x47.1
00AB6:  MOVLB  6
....................    FaultNCNO[10] = InputType.B10;
00AB8:  MOVLB  7
00ABA:  BCF    x47.2
00ABC:  MOVLB  6
00ABE:  BTFSS  xD3.1
00AC0:  BRA    0AC8
00AC2:  MOVLB  7
00AC4:  BSF    x47.2
00AC6:  MOVLB  6
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00AC8:  MOVFF  FF2,75A
00ACC:  BCF    FF2.7
00ACE:  CLRF   FAA
00AD0:  MOVLW  04
00AD2:  MOVWF  FA9
00AD4:  BCF    FA6.6
00AD6:  BCF    FA6.7
00AD8:  BSF    FA6.0
00ADA:  MOVF   FA8,W
00ADC:  MOVLB  7
00ADE:  BTFSC  x5A.7
00AE0:  BSF    FF2.7
00AE2:  MOVWF  3A
....................    FaultType1_8 = EEpDat;
00AE4:  MOVFF  3A,3E
.................... 
....................    FaultType.B1 = EEpDat;
00AE8:  MOVLB  6
00AEA:  BCF    xD4.0
00AEC:  BTFSC  3A.0
00AEE:  BSF    xD4.0
....................    FaultType.B2 = EEpDat >> 1;
00AF0:  BCF    FD8.0
00AF2:  RRCF   3A,W
00AF4:  BCF    xD4.1
00AF6:  BTFSC  FE8.0
00AF8:  BSF    xD4.1
....................    FaultType.B3 = EEpDat >> 2;
00AFA:  RRCF   3A,W
00AFC:  MOVWF  00
00AFE:  RRCF   00,F
00B00:  MOVLW  3F
00B02:  ANDWF  00,F
00B04:  BCF    xD4.2
00B06:  BTFSC  00.0
00B08:  BSF    xD4.2
....................    FaultType.B4 = EEpDat >> 3;
00B0A:  RRCF   3A,W
00B0C:  MOVWF  00
00B0E:  RRCF   00,F
00B10:  RRCF   00,F
00B12:  MOVLW  1F
00B14:  ANDWF  00,F
00B16:  BCF    xD4.3
00B18:  BTFSC  00.0
00B1A:  BSF    xD4.3
....................    FaultType.B5 = EEpDat >> 4;
00B1C:  SWAPF  3A,W
00B1E:  MOVWF  00
00B20:  MOVLW  0F
00B22:  ANDWF  00,F
00B24:  BCF    xD4.4
00B26:  BTFSC  00.0
00B28:  BSF    xD4.4
....................    FaultType.B6 = EEpDat >> 5;
00B2A:  SWAPF  3A,W
00B2C:  MOVWF  00
00B2E:  RRCF   00,F
00B30:  MOVLW  07
00B32:  ANDWF  00,F
00B34:  BCF    xD4.5
00B36:  BTFSC  00.0
00B38:  BSF    xD4.5
....................    FaultType.B7 = EEpDat >> 6;
00B3A:  SWAPF  3A,W
00B3C:  MOVWF  00
00B3E:  RRCF   00,F
00B40:  RRCF   00,F
00B42:  MOVLW  03
00B44:  ANDWF  00,F
00B46:  BCF    xD4.6
00B48:  BTFSC  00.0
00B4A:  BSF    xD4.6
....................    FaultType.B8 = EEpDat >> 7;
00B4C:  CLRF   00
00B4E:  BTFSC  3A.7
00B50:  BSF    00.0
00B52:  BCF    xD4.7
00B54:  BTFSC  00.0
00B56:  BSF    xD4.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00B58:  MOVFF  FF2,75A
00B5C:  BCF    FF2.7
00B5E:  CLRF   FAA
00B60:  MOVLW  05
00B62:  MOVWF  FA9
00B64:  BCF    FA6.6
00B66:  BCF    FA6.7
00B68:  BSF    FA6.0
00B6A:  MOVF   FA8,W
00B6C:  MOVLB  7
00B6E:  BTFSC  x5A.7
00B70:  BSF    FF2.7
00B72:  MOVWF  3A
....................    FaultType9_16 = EEpDat;
00B74:  MOVFF  3A,3F
.................... 
....................    FaultType.B9 = EEpDat;
00B78:  MOVLB  6
00B7A:  BCF    xD5.0
00B7C:  BTFSC  3A.0
00B7E:  BSF    xD5.0
....................    FaultType.B10 = EEpDat >> 1;
00B80:  BCF    FD8.0
00B82:  RRCF   3A,W
00B84:  BCF    xD5.1
00B86:  BTFSC  FE8.0
00B88:  BSF    xD5.1
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00B8A:  MOVFF  FF2,75A
00B8E:  BCF    FF2.7
00B90:  CLRF   FAA
00B92:  MOVLW  07
00B94:  MOVWF  FA9
00B96:  BCF    FA6.6
00B98:  BCF    FA6.7
00B9A:  BSF    FA6.0
00B9C:  MOVF   FA8,W
00B9E:  MOVLB  7
00BA0:  BTFSC  x5A.7
00BA2:  BSF    FF2.7
00BA4:  MOVWF  3A
....................    OutputType1_8 = EEpDat;
00BA6:  MOVFF  3A,41
.................... 
....................    OutputType.B1 = EEpDat;
00BAA:  MOVLB  6
00BAC:  BCF    xD6.0
00BAE:  BTFSC  3A.0
00BB0:  BSF    xD6.0
....................    OutputType.B2 = EEpDat >> 1;
00BB2:  BCF    FD8.0
00BB4:  RRCF   3A,W
00BB6:  BCF    xD6.1
00BB8:  BTFSC  FE8.0
00BBA:  BSF    xD6.1
....................    OutputType.B3 = EEpDat >> 2;
00BBC:  RRCF   3A,W
00BBE:  MOVWF  00
00BC0:  RRCF   00,F
00BC2:  MOVLW  3F
00BC4:  ANDWF  00,F
00BC6:  BCF    xD6.2
00BC8:  BTFSC  00.0
00BCA:  BSF    xD6.2
....................    OutputType.B4 = EEpDat >> 3;
00BCC:  RRCF   3A,W
00BCE:  MOVWF  00
00BD0:  RRCF   00,F
00BD2:  RRCF   00,F
00BD4:  MOVLW  1F
00BD6:  ANDWF  00,F
00BD8:  BCF    xD6.3
00BDA:  BTFSC  00.0
00BDC:  BSF    xD6.3
....................    OutputType.B5 = EEpDat >> 4;
00BDE:  SWAPF  3A,W
00BE0:  MOVWF  00
00BE2:  MOVLW  0F
00BE4:  ANDWF  00,F
00BE6:  BCF    xD6.4
00BE8:  BTFSC  00.0
00BEA:  BSF    xD6.4
....................    OutputType.B6 = EEpDat >> 5;
00BEC:  SWAPF  3A,W
00BEE:  MOVWF  00
00BF0:  RRCF   00,F
00BF2:  MOVLW  07
00BF4:  ANDWF  00,F
00BF6:  BCF    xD6.5
00BF8:  BTFSC  00.0
00BFA:  BSF    xD6.5
....................    OutputType.B7 = EEpDat >> 6;
00BFC:  SWAPF  3A,W
00BFE:  MOVWF  00
00C00:  RRCF   00,F
00C02:  RRCF   00,F
00C04:  MOVLW  03
00C06:  ANDWF  00,F
00C08:  BCF    xD6.6
00C0A:  BTFSC  00.0
00C0C:  BSF    xD6.6
....................    OutputType.B8 = EEpDat >> 7;
00C0E:  CLRF   00
00C10:  BTFSC  3A.7
00C12:  BSF    00.0
00C14:  BCF    xD6.7
00C16:  BTFSC  00.0
00C18:  BSF    xD6.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00C1A:  MOVFF  FF2,75A
00C1E:  BCF    FF2.7
00C20:  CLRF   FAA
00C22:  MOVLW  08
00C24:  MOVWF  FA9
00C26:  BCF    FA6.6
00C28:  BCF    FA6.7
00C2A:  BSF    FA6.0
00C2C:  MOVF   FA8,W
00C2E:  MOVLB  7
00C30:  BTFSC  x5A.7
00C32:  BSF    FF2.7
00C34:  MOVWF  3A
....................    OutputType9_16 = EEpDat;
00C36:  MOVFF  3A,42
.................... 
....................    OutputType.B9 = EEpDat;
00C3A:  MOVLB  6
00C3C:  BCF    xD7.0
00C3E:  BTFSC  3A.0
00C40:  BSF    xD7.0
....................    OutputType.B10 = EEpDat >> 1;
00C42:  BCF    FD8.0
00C44:  RRCF   3A,W
00C46:  BCF    xD7.1
00C48:  BTFSC  FE8.0
00C4A:  BSF    xD7.1
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00C4C:  MOVFF  FF2,75A
00C50:  BCF    FF2.7
00C52:  CLRF   FAA
00C54:  MOVLW  0A
00C56:  MOVWF  FA9
00C58:  BCF    FA6.6
00C5A:  BCF    FA6.7
00C5C:  BSF    FA6.0
00C5E:  MOVF   FA8,W
00C60:  MOVLB  7
00C62:  BTFSC  x5A.7
00C64:  BSF    FF2.7
00C66:  MOVWF  3A
....................    OutputBoth1_8 = EEpDat;
00C68:  MOVFF  3A,44
.................... 
....................    OutputBoth.B1 = EEpDat;
00C6C:  MOVLB  6
00C6E:  BCF    xD8.0
00C70:  BTFSC  3A.0
00C72:  BSF    xD8.0
....................    OutputBoth.B2 = EEpDat >> 1;
00C74:  BCF    FD8.0
00C76:  RRCF   3A,W
00C78:  BCF    xD8.1
00C7A:  BTFSC  FE8.0
00C7C:  BSF    xD8.1
....................    OutputBoth.B3 = EEpDat >> 2;
00C7E:  RRCF   3A,W
00C80:  MOVWF  00
00C82:  RRCF   00,F
00C84:  MOVLW  3F
00C86:  ANDWF  00,F
00C88:  BCF    xD8.2
00C8A:  BTFSC  00.0
00C8C:  BSF    xD8.2
....................    OutputBoth.B4 = EEpDat >> 3;
00C8E:  RRCF   3A,W
00C90:  MOVWF  00
00C92:  RRCF   00,F
00C94:  RRCF   00,F
00C96:  MOVLW  1F
00C98:  ANDWF  00,F
00C9A:  BCF    xD8.3
00C9C:  BTFSC  00.0
00C9E:  BSF    xD8.3
....................    OutputBoth.B5 = EEpDat >> 4;
00CA0:  SWAPF  3A,W
00CA2:  MOVWF  00
00CA4:  MOVLW  0F
00CA6:  ANDWF  00,F
00CA8:  BCF    xD8.4
00CAA:  BTFSC  00.0
00CAC:  BSF    xD8.4
....................    OutputBoth.B6 = EEpDat >> 5;
00CAE:  SWAPF  3A,W
00CB0:  MOVWF  00
00CB2:  RRCF   00,F
00CB4:  MOVLW  07
00CB6:  ANDWF  00,F
00CB8:  BCF    xD8.5
00CBA:  BTFSC  00.0
00CBC:  BSF    xD8.5
....................    OutputBoth.B7 = EEpDat >> 6;
00CBE:  SWAPF  3A,W
00CC0:  MOVWF  00
00CC2:  RRCF   00,F
00CC4:  RRCF   00,F
00CC6:  MOVLW  03
00CC8:  ANDWF  00,F
00CCA:  BCF    xD8.6
00CCC:  BTFSC  00.0
00CCE:  BSF    xD8.6
....................    OutputBoth.B8 = EEpDat >> 7;
00CD0:  CLRF   00
00CD2:  BTFSC  3A.7
00CD4:  BSF    00.0
00CD6:  BCF    xD8.7
00CD8:  BTFSC  00.0
00CDA:  BSF    xD8.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00CDC:  MOVFF  FF2,75A
00CE0:  BCF    FF2.7
00CE2:  CLRF   FAA
00CE4:  MOVLW  0B
00CE6:  MOVWF  FA9
00CE8:  BCF    FA6.6
00CEA:  BCF    FA6.7
00CEC:  BSF    FA6.0
00CEE:  MOVF   FA8,W
00CF0:  MOVLB  7
00CF2:  BTFSC  x5A.7
00CF4:  BSF    FF2.7
00CF6:  MOVWF  3A
....................    OutputBoth9_16 = EEpDat;
00CF8:  MOVFF  3A,45
.................... 
....................    OutputBoth.B9 = EEpDat;
00CFC:  MOVLB  6
00CFE:  BCF    xD9.0
00D00:  BTFSC  3A.0
00D02:  BSF    xD9.0
....................    OutputBoth.B10 = EEpDat >> 1;
00D04:  BCF    FD8.0
00D06:  RRCF   3A,W
00D08:  BCF    xD9.1
00D0A:  BTFSC  FE8.0
00D0C:  BSF    xD9.1
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00D0E:  MOVFF  FF2,75A
00D12:  BCF    FF2.7
00D14:  CLRF   FAA
00D16:  MOVLW  0D
00D18:  MOVWF  FA9
00D1A:  BCF    FA6.6
00D1C:  BCF    FA6.7
00D1E:  BSF    FA6.0
00D20:  MOVF   FA8,W
00D22:  MOVLB  7
00D24:  BTFSC  x5A.7
00D26:  BSF    FF2.7
00D28:  MOVWF  3A
....................    Alarm_Indicator1_8 = EEpDat;
00D2A:  MOVFF  3A,47
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00D2E:  MOVLB  6
00D30:  BCF    xDA.0
00D32:  BTFSC  3A.0
00D34:  BSF    xDA.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00D36:  BCF    FD8.0
00D38:  RRCF   3A,W
00D3A:  BCF    xDA.1
00D3C:  BTFSC  FE8.0
00D3E:  BSF    xDA.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00D40:  RRCF   3A,W
00D42:  MOVWF  00
00D44:  RRCF   00,F
00D46:  MOVLW  3F
00D48:  ANDWF  00,F
00D4A:  BCF    xDA.2
00D4C:  BTFSC  00.0
00D4E:  BSF    xDA.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00D50:  RRCF   3A,W
00D52:  MOVWF  00
00D54:  RRCF   00,F
00D56:  RRCF   00,F
00D58:  MOVLW  1F
00D5A:  ANDWF  00,F
00D5C:  BCF    xDA.3
00D5E:  BTFSC  00.0
00D60:  BSF    xDA.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00D62:  SWAPF  3A,W
00D64:  MOVWF  00
00D66:  MOVLW  0F
00D68:  ANDWF  00,F
00D6A:  BCF    xDA.4
00D6C:  BTFSC  00.0
00D6E:  BSF    xDA.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00D70:  SWAPF  3A,W
00D72:  MOVWF  00
00D74:  RRCF   00,F
00D76:  MOVLW  07
00D78:  ANDWF  00,F
00D7A:  BCF    xDA.5
00D7C:  BTFSC  00.0
00D7E:  BSF    xDA.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00D80:  SWAPF  3A,W
00D82:  MOVWF  00
00D84:  RRCF   00,F
00D86:  RRCF   00,F
00D88:  MOVLW  03
00D8A:  ANDWF  00,F
00D8C:  BCF    xDA.6
00D8E:  BTFSC  00.0
00D90:  BSF    xDA.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
00D92:  CLRF   00
00D94:  BTFSC  3A.7
00D96:  BSF    00.0
00D98:  BCF    xDA.7
00D9A:  BTFSC  00.0
00D9C:  BSF    xDA.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
00D9E:  MOVFF  FF2,75A
00DA2:  BCF    FF2.7
00DA4:  CLRF   FAA
00DA6:  MOVLW  0E
00DA8:  MOVWF  FA9
00DAA:  BCF    FA6.6
00DAC:  BCF    FA6.7
00DAE:  BSF    FA6.0
00DB0:  MOVF   FA8,W
00DB2:  MOVLB  7
00DB4:  BTFSC  x5A.7
00DB6:  BSF    FF2.7
00DB8:  MOVWF  3A
....................    Alarm_Indicator9_16 = EEpDat;
00DBA:  MOVFF  3A,48
.................... 
....................    AlarmIndicator.B9 = EEpDat;
00DBE:  MOVLB  6
00DC0:  BCF    xDB.0
00DC2:  BTFSC  3A.0
00DC4:  BSF    xDB.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
00DC6:  BCF    FD8.0
00DC8:  RRCF   3A,W
00DCA:  BCF    xDB.1
00DCC:  BTFSC  FE8.0
00DCE:  BSF    xDB.1
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
00DD0:  MOVFF  FF2,75A
00DD4:  BCF    FF2.7
00DD6:  CLRF   FAA
00DD8:  MOVLW  10
00DDA:  MOVWF  FA9
00DDC:  BCF    FA6.6
00DDE:  BCF    FA6.7
00DE0:  BSF    FA6.0
00DE2:  MOVF   FA8,W
00DE4:  MOVLB  7
00DE6:  BTFSC  x5A.7
00DE8:  BSF    FF2.7
00DEA:  MOVWF  3A
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
00DEC:  MOVLB  6
00DEE:  BCF    xE6.0
00DF0:  BTFSC  3A.0
00DF2:  BSF    xE6.0
....................    RED_Colour.B2 = EEpDat >> 1;
00DF4:  BCF    FD8.0
00DF6:  RRCF   3A,W
00DF8:  BCF    xE6.1
00DFA:  BTFSC  FE8.0
00DFC:  BSF    xE6.1
....................    RED_Colour.B3 = EEpDat >> 2;
00DFE:  RRCF   3A,W
00E00:  MOVWF  00
00E02:  RRCF   00,F
00E04:  MOVLW  3F
00E06:  ANDWF  00,F
00E08:  BCF    xE6.2
00E0A:  BTFSC  00.0
00E0C:  BSF    xE6.2
....................    RED_Colour.B4 = EEpDat >> 3;
00E0E:  RRCF   3A,W
00E10:  MOVWF  00
00E12:  RRCF   00,F
00E14:  RRCF   00,F
00E16:  MOVLW  1F
00E18:  ANDWF  00,F
00E1A:  BCF    xE6.3
00E1C:  BTFSC  00.0
00E1E:  BSF    xE6.3
....................    RED_Colour.B5 = EEpDat >> 4;
00E20:  SWAPF  3A,W
00E22:  MOVWF  00
00E24:  MOVLW  0F
00E26:  ANDWF  00,F
00E28:  BCF    xE6.4
00E2A:  BTFSC  00.0
00E2C:  BSF    xE6.4
....................    RED_Colour.B6 = EEpDat >> 5;
00E2E:  SWAPF  3A,W
00E30:  MOVWF  00
00E32:  RRCF   00,F
00E34:  MOVLW  07
00E36:  ANDWF  00,F
00E38:  BCF    xE6.5
00E3A:  BTFSC  00.0
00E3C:  BSF    xE6.5
....................    RED_Colour.B7 = EEpDat >> 6;
00E3E:  SWAPF  3A,W
00E40:  MOVWF  00
00E42:  RRCF   00,F
00E44:  RRCF   00,F
00E46:  MOVLW  03
00E48:  ANDWF  00,F
00E4A:  BCF    xE6.6
00E4C:  BTFSC  00.0
00E4E:  BSF    xE6.6
....................    RED_Colour.B8 = EEpDat >> 7;
00E50:  CLRF   00
00E52:  BTFSC  3A.7
00E54:  BSF    00.0
00E56:  BCF    xE6.7
00E58:  BTFSC  00.0
00E5A:  BSF    xE6.7
....................    
....................    EEpDat = read_eeprom(0x11);
00E5C:  MOVFF  FF2,75A
00E60:  BCF    FF2.7
00E62:  CLRF   FAA
00E64:  MOVLW  11
00E66:  MOVWF  FA9
00E68:  BCF    FA6.6
00E6A:  BCF    FA6.7
00E6C:  BSF    FA6.0
00E6E:  MOVF   FA8,W
00E70:  MOVLB  7
00E72:  BTFSC  x5A.7
00E74:  BSF    FF2.7
00E76:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
00E78:  MOVLB  6
00E7A:  BCF    xE7.0
00E7C:  BTFSC  3A.0
00E7E:  BSF    xE7.0
....................    RED_Colour.B10 = EEpDat >> 1;
00E80:  BCF    FD8.0
00E82:  RRCF   3A,W
00E84:  BCF    xE7.1
00E86:  BTFSC  FE8.0
00E88:  BSF    xE7.1
....................    
....................    EEpDat = read_eeprom(0x14);
00E8A:  MOVFF  FF2,75A
00E8E:  BCF    FF2.7
00E90:  CLRF   FAA
00E92:  MOVLW  14
00E94:  MOVWF  FA9
00E96:  BCF    FA6.6
00E98:  BCF    FA6.7
00E9A:  BSF    FA6.0
00E9C:  MOVF   FA8,W
00E9E:  MOVLB  7
00EA0:  BTFSC  x5A.7
00EA2:  BSF    FF2.7
00EA4:  MOVWF  3A
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
00EA6:  MOVLB  6
00EA8:  BCF    xE8.0
00EAA:  BTFSC  3A.0
00EAC:  BSF    xE8.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
00EAE:  BCF    FD8.0
00EB0:  RRCF   3A,W
00EB2:  BCF    xE8.1
00EB4:  BTFSC  FE8.0
00EB6:  BSF    xE8.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
00EB8:  RRCF   3A,W
00EBA:  MOVWF  00
00EBC:  RRCF   00,F
00EBE:  MOVLW  3F
00EC0:  ANDWF  00,F
00EC2:  BCF    xE8.2
00EC4:  BTFSC  00.0
00EC6:  BSF    xE8.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
00EC8:  RRCF   3A,W
00ECA:  MOVWF  00
00ECC:  RRCF   00,F
00ECE:  RRCF   00,F
00ED0:  MOVLW  1F
00ED2:  ANDWF  00,F
00ED4:  BCF    xE8.3
00ED6:  BTFSC  00.0
00ED8:  BSF    xE8.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
00EDA:  SWAPF  3A,W
00EDC:  MOVWF  00
00EDE:  MOVLW  0F
00EE0:  ANDWF  00,F
00EE2:  BCF    xE8.4
00EE4:  BTFSC  00.0
00EE6:  BSF    xE8.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
00EE8:  SWAPF  3A,W
00EEA:  MOVWF  00
00EEC:  RRCF   00,F
00EEE:  MOVLW  07
00EF0:  ANDWF  00,F
00EF2:  BCF    xE8.5
00EF4:  BTFSC  00.0
00EF6:  BSF    xE8.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
00EF8:  SWAPF  3A,W
00EFA:  MOVWF  00
00EFC:  RRCF   00,F
00EFE:  RRCF   00,F
00F00:  MOVLW  03
00F02:  ANDWF  00,F
00F04:  BCF    xE8.6
00F06:  BTFSC  00.0
00F08:  BSF    xE8.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
00F0A:  CLRF   00
00F0C:  BTFSC  3A.7
00F0E:  BSF    00.0
00F10:  BCF    xE8.7
00F12:  BTFSC  00.0
00F14:  BSF    xE8.7
....................    
....................    EEpDat = read_eeprom(0x15);
00F16:  MOVFF  FF2,75A
00F1A:  BCF    FF2.7
00F1C:  CLRF   FAA
00F1E:  MOVLW  15
00F20:  MOVWF  FA9
00F22:  BCF    FA6.6
00F24:  BCF    FA6.7
00F26:  BSF    FA6.0
00F28:  MOVF   FA8,W
00F2A:  MOVLB  7
00F2C:  BTFSC  x5A.7
00F2E:  BSF    FF2.7
00F30:  MOVWF  3A
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
00F32:  MOVLB  6
00F34:  BCF    xE9.0
00F36:  BTFSC  3A.0
00F38:  BSF    xE9.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
00F3A:  BCF    FD8.0
00F3C:  RRCF   3A,W
00F3E:  BCF    xE9.1
00F40:  BTFSC  FE8.0
00F42:  BSF    xE9.1
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
00F44:  MOVFF  FF2,75A
00F48:  BCF    FF2.7
00F4A:  CLRF   FAA
00F4C:  MOVLW  18
00F4E:  MOVWF  FA9
00F50:  BCF    FA6.6
00F52:  BCF    FA6.7
00F54:  BSF    FA6.0
00F56:  MOVF   FA8,W
00F58:  MOVLB  7
00F5A:  BTFSC  x5A.7
00F5C:  BSF    FF2.7
00F5E:  MOVWF  5E
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
00F60:  MOVFF  FF2,75A
00F64:  BCF    FF2.7
00F66:  CLRF   FAA
00F68:  MOVLW  19
00F6A:  MOVWF  FA9
00F6C:  BCF    FA6.6
00F6E:  BCF    FA6.7
00F70:  BSF    FA6.0
00F72:  MOVF   FA8,W
00F74:  BTFSC  x5A.7
00F76:  BSF    FF2.7
00F78:  MOVWF  5F
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
00F7A:  MOVFF  FF2,75A
00F7E:  BCF    FF2.7
00F80:  CLRF   FAA
00F82:  MOVLW  1A
00F84:  MOVWF  FA9
00F86:  BCF    FA6.6
00F88:  BCF    FA6.7
00F8A:  BSF    FA6.0
00F8C:  MOVF   FA8,W
00F8E:  BTFSC  x5A.7
00F90:  BSF    FF2.7
00F92:  MOVLB  0
00F94:  MOVWF  x60
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
00F96:  MOVFF  FF2,75A
00F9A:  BCF    FF2.7
00F9C:  CLRF   FAA
00F9E:  MOVLW  1B
00FA0:  MOVWF  FA9
00FA2:  BCF    FA6.6
00FA4:  BCF    FA6.7
00FA6:  BSF    FA6.0
00FA8:  MOVF   FA8,W
00FAA:  MOVLB  7
00FAC:  BTFSC  x5A.7
00FAE:  BSF    FF2.7
00FB0:  MOVLB  0
00FB2:  MOVWF  x61
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
00FB4:  MOVFF  FF2,75A
00FB8:  BCF    FF2.7
00FBA:  CLRF   FAA
00FBC:  MOVLW  1C
00FBE:  MOVWF  FA9
00FC0:  BCF    FA6.6
00FC2:  BCF    FA6.7
00FC4:  BSF    FA6.0
00FC6:  MOVF   FA8,W
00FC8:  MOVLB  7
00FCA:  BTFSC  x5A.7
00FCC:  BSF    FF2.7
00FCE:  CLRF   x1D
00FD0:  MOVWF  x1C
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
00FD2:  MOVFF  FF2,75A
00FD6:  BCF    FF2.7
00FD8:  CLRF   FAA
00FDA:  MOVLW  1D
00FDC:  MOVWF  FA9
00FDE:  BCF    FA6.6
00FE0:  BCF    FA6.7
00FE2:  BSF    FA6.0
00FE4:  MOVF   FA8,W
00FE6:  BTFSC  x5A.7
00FE8:  BSF    FF2.7
00FEA:  MOVLB  0
00FEC:  MOVWF  x6D
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
00FEE:  MOVFF  FF2,75A
00FF2:  BCF    FF2.7
00FF4:  CLRF   FAA
00FF6:  MOVLW  1E
00FF8:  MOVWF  FA9
00FFA:  BCF    FA6.6
00FFC:  BCF    FA6.7
00FFE:  BSF    FA6.0
01000:  MOVF   FA8,W
01002:  MOVLB  7
01004:  BTFSC  x5A.7
01006:  BSF    FF2.7
01008:  CLRF   x1F
0100A:  MOVWF  x1E
....................    FaultDelayTime[2] = read_eeprom(0x1F);
0100C:  MOVFF  FF2,75A
01010:  BCF    FF2.7
01012:  CLRF   FAA
01014:  MOVLW  1F
01016:  MOVWF  FA9
01018:  BCF    FA6.6
0101A:  BCF    FA6.7
0101C:  BSF    FA6.0
0101E:  MOVF   FA8,W
01020:  BTFSC  x5A.7
01022:  BSF    FF2.7
01024:  CLRF   x21
01026:  MOVWF  x20
....................    FaultDelayTime[3] = read_eeprom(0x20);
01028:  MOVFF  FF2,75A
0102C:  BCF    FF2.7
0102E:  CLRF   FAA
01030:  MOVLW  20
01032:  MOVWF  FA9
01034:  BCF    FA6.6
01036:  BCF    FA6.7
01038:  BSF    FA6.0
0103A:  MOVF   FA8,W
0103C:  BTFSC  x5A.7
0103E:  BSF    FF2.7
01040:  CLRF   x23
01042:  MOVWF  x22
....................    FaultDelayTime[4] = read_eeprom(0x21);
01044:  MOVFF  FF2,75A
01048:  BCF    FF2.7
0104A:  CLRF   FAA
0104C:  MOVLW  21
0104E:  MOVWF  FA9
01050:  BCF    FA6.6
01052:  BCF    FA6.7
01054:  BSF    FA6.0
01056:  MOVF   FA8,W
01058:  BTFSC  x5A.7
0105A:  BSF    FF2.7
0105C:  CLRF   x25
0105E:  MOVWF  x24
....................    FaultDelayTime[5] = read_eeprom(0x22);
01060:  MOVFF  FF2,75A
01064:  BCF    FF2.7
01066:  CLRF   FAA
01068:  MOVLW  22
0106A:  MOVWF  FA9
0106C:  BCF    FA6.6
0106E:  BCF    FA6.7
01070:  BSF    FA6.0
01072:  MOVF   FA8,W
01074:  BTFSC  x5A.7
01076:  BSF    FF2.7
01078:  CLRF   x27
0107A:  MOVWF  x26
....................    FaultDelayTime[6] = read_eeprom(0x23);
0107C:  MOVFF  FF2,75A
01080:  BCF    FF2.7
01082:  CLRF   FAA
01084:  MOVLW  23
01086:  MOVWF  FA9
01088:  BCF    FA6.6
0108A:  BCF    FA6.7
0108C:  BSF    FA6.0
0108E:  MOVF   FA8,W
01090:  BTFSC  x5A.7
01092:  BSF    FF2.7
01094:  CLRF   x29
01096:  MOVWF  x28
....................    FaultDelayTime[7] = read_eeprom(0x24);
01098:  MOVFF  FF2,75A
0109C:  BCF    FF2.7
0109E:  CLRF   FAA
010A0:  MOVLW  24
010A2:  MOVWF  FA9
010A4:  BCF    FA6.6
010A6:  BCF    FA6.7
010A8:  BSF    FA6.0
010AA:  MOVF   FA8,W
010AC:  BTFSC  x5A.7
010AE:  BSF    FF2.7
010B0:  CLRF   x2B
010B2:  MOVWF  x2A
....................    FaultDelayTime[8] = read_eeprom(0x25);
010B4:  MOVFF  FF2,75A
010B8:  BCF    FF2.7
010BA:  CLRF   FAA
010BC:  MOVLW  25
010BE:  MOVWF  FA9
010C0:  BCF    FA6.6
010C2:  BCF    FA6.7
010C4:  BSF    FA6.0
010C6:  MOVF   FA8,W
010C8:  BTFSC  x5A.7
010CA:  BSF    FF2.7
010CC:  CLRF   x2D
010CE:  MOVWF  x2C
....................    FaultDelayTime[9] = read_eeprom(0x26);
010D0:  MOVFF  FF2,75A
010D4:  BCF    FF2.7
010D6:  CLRF   FAA
010D8:  MOVLW  26
010DA:  MOVWF  FA9
010DC:  BCF    FA6.6
010DE:  BCF    FA6.7
010E0:  BSF    FA6.0
010E2:  MOVF   FA8,W
010E4:  BTFSC  x5A.7
010E6:  BSF    FF2.7
010E8:  CLRF   x2F
010EA:  MOVWF  x2E
....................    FaultDelayTime[10] = read_eeprom(0x27);
010EC:  MOVFF  FF2,75A
010F0:  BCF    FF2.7
010F2:  CLRF   FAA
010F4:  MOVLW  27
010F6:  MOVWF  FA9
010F8:  BCF    FA6.6
010FA:  BCF    FA6.7
010FC:  BSF    FA6.0
010FE:  MOVF   FA8,W
01100:  BTFSC  x5A.7
01102:  BSF    FF2.7
01104:  CLRF   x31
01106:  MOVWF  x30
....................    FaultDelayTime[11] = read_eeprom(0x28);
01108:  MOVFF  FF2,75A
0110C:  BCF    FF2.7
0110E:  CLRF   FAA
01110:  MOVLW  28
01112:  MOVWF  FA9
01114:  BCF    FA6.6
01116:  BCF    FA6.7
01118:  BSF    FA6.0
0111A:  MOVF   FA8,W
0111C:  BTFSC  x5A.7
0111E:  BSF    FF2.7
01120:  CLRF   x33
01122:  MOVWF  x32
....................    FaultDelayTime[12] = read_eeprom(0x29);
01124:  MOVFF  FF2,75A
01128:  BCF    FF2.7
0112A:  CLRF   FAA
0112C:  MOVLW  29
0112E:  MOVWF  FA9
01130:  BCF    FA6.6
01132:  BCF    FA6.7
01134:  BSF    FA6.0
01136:  MOVF   FA8,W
01138:  BTFSC  x5A.7
0113A:  BSF    FF2.7
0113C:  CLRF   x35
0113E:  MOVWF  x34
....................    FaultDelayTime[13] = read_eeprom(0x2A);
01140:  MOVFF  FF2,75A
01144:  BCF    FF2.7
01146:  CLRF   FAA
01148:  MOVLW  2A
0114A:  MOVWF  FA9
0114C:  BCF    FA6.6
0114E:  BCF    FA6.7
01150:  BSF    FA6.0
01152:  MOVF   FA8,W
01154:  BTFSC  x5A.7
01156:  BSF    FF2.7
01158:  CLRF   x37
0115A:  MOVWF  x36
....................    FaultDelayTime[14] = read_eeprom(0x2B);
0115C:  MOVFF  FF2,75A
01160:  BCF    FF2.7
01162:  CLRF   FAA
01164:  MOVLW  2B
01166:  MOVWF  FA9
01168:  BCF    FA6.6
0116A:  BCF    FA6.7
0116C:  BSF    FA6.0
0116E:  MOVF   FA8,W
01170:  BTFSC  x5A.7
01172:  BSF    FF2.7
01174:  CLRF   x39
01176:  MOVWF  x38
....................    FaultDelayTime[15] = read_eeprom(0x2C);
01178:  MOVFF  FF2,75A
0117C:  BCF    FF2.7
0117E:  CLRF   FAA
01180:  MOVLW  2C
01182:  MOVWF  FA9
01184:  BCF    FA6.6
01186:  BCF    FA6.7
01188:  BSF    FA6.0
0118A:  MOVF   FA8,W
0118C:  BTFSC  x5A.7
0118E:  BSF    FF2.7
01190:  CLRF   x3B
01192:  MOVWF  x3A
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01194:  MOVFF  FF2,75A
01198:  BCF    FF2.7
0119A:  CLRF   FAA
0119C:  MOVLW  2D
0119E:  MOVWF  FA9
011A0:  BCF    FA6.6
011A2:  BCF    FA6.7
011A4:  BSF    FA6.0
011A6:  MOVF   FA8,W
011A8:  BTFSC  x5A.7
011AA:  BSF    FF2.7
011AC:  CLRF   x3D
011AE:  MOVWF  x3C
....................    FaultDelayTime[17] = read_eeprom(0x2E);
011B0:  MOVFF  FF2,75A
011B4:  BCF    FF2.7
011B6:  CLRF   FAA
011B8:  MOVLW  2E
011BA:  MOVWF  FA9
011BC:  BCF    FA6.6
011BE:  BCF    FA6.7
011C0:  BSF    FA6.0
011C2:  MOVF   FA8,W
011C4:  BTFSC  x5A.7
011C6:  BSF    FF2.7
011C8:  CLRF   x3F
011CA:  MOVWF  x3E
....................    FaultDelayTime[18] = read_eeprom(0x2F);
011CC:  MOVFF  FF2,75A
011D0:  BCF    FF2.7
011D2:  CLRF   FAA
011D4:  MOVLW  2F
011D6:  MOVWF  FA9
011D8:  BCF    FA6.6
011DA:  BCF    FA6.7
011DC:  BSF    FA6.0
011DE:  MOVF   FA8,W
011E0:  BTFSC  x5A.7
011E2:  BSF    FF2.7
011E4:  CLRF   x41
011E6:  MOVWF  x40
....................    FaultDelayTime[19] = read_eeprom(0x30);
011E8:  MOVFF  FF2,75A
011EC:  BCF    FF2.7
011EE:  CLRF   FAA
011F0:  MOVLW  30
011F2:  MOVWF  FA9
011F4:  BCF    FA6.6
011F6:  BCF    FA6.7
011F8:  BSF    FA6.0
011FA:  MOVF   FA8,W
011FC:  BTFSC  x5A.7
011FE:  BSF    FF2.7
01200:  CLRF   x43
01202:  MOVWF  x42
....................    FaultDelayTime[20] = read_eeprom(0x31);
01204:  MOVFF  FF2,75A
01208:  BCF    FF2.7
0120A:  CLRF   FAA
0120C:  MOVLW  31
0120E:  MOVWF  FA9
01210:  BCF    FA6.6
01212:  BCF    FA6.7
01214:  BSF    FA6.0
01216:  MOVF   FA8,W
01218:  BTFSC  x5A.7
0121A:  BSF    FF2.7
0121C:  CLRF   x45
0121E:  MOVWF  x44
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
01220:  CLRF   x50
....................    for(; ; a++)
....................    {
....................       restart_wdt();
01222:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
01224:  MOVLW  32
01226:  ADDWF  x50,W
01228:  MOVWF  x5A
0122A:  MOVFF  FF2,75B
0122E:  BCF    FF2.7
01230:  CLRF   FAA
01232:  MOVFF  75A,FA9
01236:  BCF    FA6.6
01238:  BCF    FA6.7
0123A:  BSF    FA6.0
0123C:  MOVF   FA8,W
0123E:  BTFSC  x5B.7
01240:  BSF    FF2.7
01242:  MOVWF  x51
....................       if((phonenum == 0x0D) || (a > 15))
01244:  MOVF   x51,W
01246:  SUBLW  0D
01248:  BZ    1250
0124A:  MOVF   x50,W
0124C:  SUBLW  0F
0124E:  BC    1298
....................       {
....................          sms_phonenumber[a] =  '\0';
01250:  CLRF   03
01252:  MOVF   x50,W
01254:  ADDLW  7F
01256:  MOVWF  FE9
01258:  MOVLW  05
0125A:  ADDWFC 03,W
0125C:  MOVWF  FEA
0125E:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
01260:  MOVLW  32
01262:  ADDWF  x50,W
01264:  MOVWF  x5A
01266:  MOVF   FF2,W
01268:  MOVWF  00
0126A:  BCF    FF2.7
0126C:  CLRF   FAA
0126E:  MOVFF  75A,FA9
01272:  MOVFF  751,FA8
01276:  BCF    FA6.6
01278:  BCF    FA6.7
0127A:  BSF    FA6.2
0127C:  MOVLB  F
0127E:  MOVLW  55
01280:  MOVWF  FA7
01282:  MOVLW  AA
01284:  MOVWF  FA7
01286:  BSF    FA6.1
01288:  BTFSC  FA6.1
0128A:  BRA    1288
0128C:  BCF    FA6.2
0128E:  MOVF   00,W
01290:  IORWF  FF2,F
....................          break;
01292:  BRA    12B4
....................       }
01294:  BRA    12AC
01296:  MOVLB  7
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
01298:  CLRF   03
0129A:  MOVF   x50,W
0129C:  ADDLW  7F
0129E:  MOVWF  FE9
012A0:  MOVLW  05
012A2:  ADDWFC 03,W
012A4:  MOVWF  FEA
012A6:  MOVFF  751,FEF
012AA:  MOVLB  F
....................       }
012AC:  MOVLB  7
012AE:  INCF   x50,F
012B0:  BRA    1222
012B2:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
012B4:  MOVLB  7
012B6:  CLRF   x53
012B8:  MOVLW  03
012BA:  MOVWF  x52
012BC:  CLRF   x55
012BE:  CLRF   x54
012C0:  CLRF   x57
012C2:  CLRF   x56
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
012C4:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
012C6:  MOVLW  5D
012C8:  ADDWF  x52,W
012CA:  MOVWF  x5A
012CC:  MOVLW  00
012CE:  ADDWFC x53,W
012D0:  MOVWF  x5B
012D2:  MOVFF  FF2,75C
012D6:  BCF    FF2.7
012D8:  MOVFF  75B,FAA
012DC:  MOVFF  75A,FA9
012E0:  BCF    FA6.6
012E2:  BCF    FA6.7
012E4:  BSF    FA6.0
012E6:  MOVF   FA8,W
012E8:  BTFSC  x5C.7
012EA:  BSF    FF2.7
012EC:  CLRF   x59
012EE:  MOVWF  x58
....................       
....................       if((buff == 0x0D)|| (j>41))
012F0:  MOVF   x58,W
012F2:  SUBLW  0D
012F4:  BNZ   12FA
012F6:  MOVF   x59,F
012F8:  BZ    1304
012FA:  MOVF   x55,F
012FC:  BNZ   1304
012FE:  MOVF   x54,W
01300:  SUBLW  29
01302:  BC    1316
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
01304:  MOVLW  8E
01306:  ADDWF  x54,W
01308:  MOVWF  FE9
0130A:  MOVLW  05
0130C:  ADDWFC x55,W
0130E:  MOVWF  FEA
01310:  CLRF   FEF
....................          break;
01312:  BRA    133A
....................       }
01314:  BRA    1326
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
01316:  MOVLW  8E
01318:  ADDWF  x54,W
0131A:  MOVWF  FE9
0131C:  MOVLW  05
0131E:  ADDWFC x55,W
01320:  MOVWF  FEA
01322:  MOVFF  758,FEF
....................       }
01326:  MOVFF  753,03
0132A:  MOVF   x52,W
0132C:  INCF   x52,F
0132E:  BTFSC  FD8.2
01330:  INCF   x53,F
01332:  INCF   x54,F
01334:  BTFSC  FD8.2
01336:  INCF   x55,F
01338:  BRA    12C4
....................    }
....................    
....................    i++;
0133A:  INCF   x52,F
0133C:  BTFSC  FD8.2
0133E:  INCF   x53,F
....................    j=0;
01340:  CLRF   x55
01342:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01344:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01346:  MOVLW  5D
01348:  ADDWF  x52,W
0134A:  MOVWF  x5A
0134C:  MOVLW  00
0134E:  ADDWFC x53,W
01350:  MOVWF  x5B
01352:  MOVFF  FF2,75C
01356:  BCF    FF2.7
01358:  MOVFF  75B,FAA
0135C:  MOVFF  75A,FA9
01360:  BCF    FA6.6
01362:  BCF    FA6.7
01364:  BSF    FA6.0
01366:  MOVF   FA8,W
01368:  BTFSC  x5C.7
0136A:  BSF    FF2.7
0136C:  CLRF   x59
0136E:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
01370:  MOVF   x58,W
01372:  SUBLW  0D
01374:  BNZ   137A
01376:  MOVF   x59,F
01378:  BZ    1384
0137A:  MOVF   x55,F
0137C:  BNZ   1384
0137E:  MOVF   x54,W
01380:  SUBLW  29
01382:  BC    1396
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01384:  MOVLW  AE
01386:  ADDWF  x54,W
01388:  MOVWF  FE9
0138A:  MOVLW  05
0138C:  ADDWFC x55,W
0138E:  MOVWF  FEA
01390:  CLRF   FEF
....................          break;
01392:  BRA    13BA
....................       }
01394:  BRA    13A6
....................       else
....................       {
....................          SMS_Massage2[j] = buff;
01396:  MOVLW  AE
01398:  ADDWF  x54,W
0139A:  MOVWF  FE9
0139C:  MOVLW  05
0139E:  ADDWFC x55,W
013A0:  MOVWF  FEA
013A2:  MOVFF  758,FEF
....................          
....................       }
013A6:  MOVFF  753,03
013AA:  MOVF   x52,W
013AC:  INCF   x52,F
013AE:  BTFSC  FD8.2
013B0:  INCF   x53,F
013B2:  INCF   x54,F
013B4:  BTFSC  FD8.2
013B6:  INCF   x55,F
013B8:  BRA    1344
....................    }
....................    
....................    i++;
013BA:  INCF   x52,F
013BC:  BTFSC  FD8.2
013BE:  INCF   x53,F
....................    j=0;
013C0:  CLRF   x55
013C2:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
013C4:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
013C6:  MOVLW  5D
013C8:  ADDWF  x52,W
013CA:  MOVWF  x5A
013CC:  MOVLW  00
013CE:  ADDWFC x53,W
013D0:  MOVWF  x5B
013D2:  MOVFF  FF2,75C
013D6:  BCF    FF2.7
013D8:  MOVFF  75B,FAA
013DC:  MOVFF  75A,FA9
013E0:  BCF    FA6.6
013E2:  BCF    FA6.7
013E4:  BSF    FA6.0
013E6:  MOVF   FA8,W
013E8:  BTFSC  x5C.7
013EA:  BSF    FF2.7
013EC:  CLRF   x59
013EE:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
013F0:  MOVF   x58,W
013F2:  SUBLW  0D
013F4:  BNZ   13FA
013F6:  MOVF   x59,F
013F8:  BZ    1404
013FA:  MOVF   x55,F
013FC:  BNZ   1404
013FE:  MOVF   x54,W
01400:  SUBLW  29
01402:  BC    1416
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
01404:  MOVLW  CE
01406:  ADDWF  x54,W
01408:  MOVWF  FE9
0140A:  MOVLW  05
0140C:  ADDWFC x55,W
0140E:  MOVWF  FEA
01410:  CLRF   FEF
....................          break;
01412:  BRA    143A
....................       }
01414:  BRA    1426
....................       else
....................       {
....................          SMS_Massage3[j] = buff;
01416:  MOVLW  CE
01418:  ADDWF  x54,W
0141A:  MOVWF  FE9
0141C:  MOVLW  05
0141E:  ADDWFC x55,W
01420:  MOVWF  FEA
01422:  MOVFF  758,FEF
....................          
....................       }
01426:  MOVFF  753,03
0142A:  MOVF   x52,W
0142C:  INCF   x52,F
0142E:  BTFSC  FD8.2
01430:  INCF   x53,F
01432:  INCF   x54,F
01434:  BTFSC  FD8.2
01436:  INCF   x55,F
01438:  BRA    13C4
....................    }
....................    
....................    i++;
0143A:  INCF   x52,F
0143C:  BTFSC  FD8.2
0143E:  INCF   x53,F
....................    j=0;
01440:  CLRF   x55
01442:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01444:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01446:  MOVLW  5D
01448:  ADDWF  x52,W
0144A:  MOVWF  x5A
0144C:  MOVLW  00
0144E:  ADDWFC x53,W
01450:  MOVWF  x5B
01452:  MOVFF  FF2,75C
01456:  BCF    FF2.7
01458:  MOVFF  75B,FAA
0145C:  MOVFF  75A,FA9
01460:  BCF    FA6.6
01462:  BCF    FA6.7
01464:  BSF    FA6.0
01466:  MOVF   FA8,W
01468:  BTFSC  x5C.7
0146A:  BSF    FF2.7
0146C:  CLRF   x59
0146E:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
01470:  MOVF   x58,W
01472:  SUBLW  0D
01474:  BNZ   147A
01476:  MOVF   x59,F
01478:  BZ    1484
0147A:  MOVF   x55,F
0147C:  BNZ   1484
0147E:  MOVF   x54,W
01480:  SUBLW  29
01482:  BC    1496
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01484:  MOVLW  EE
01486:  ADDWF  x54,W
01488:  MOVWF  FE9
0148A:  MOVLW  05
0148C:  ADDWFC x55,W
0148E:  MOVWF  FEA
01490:  CLRF   FEF
....................          break;
01492:  BRA    14BA
....................       }
01494:  BRA    14A6
....................       else
....................       {
....................          SMS_Massage4[j] = buff;
01496:  MOVLW  EE
01498:  ADDWF  x54,W
0149A:  MOVWF  FE9
0149C:  MOVLW  05
0149E:  ADDWFC x55,W
014A0:  MOVWF  FEA
014A2:  MOVFF  758,FEF
....................          
....................       }
014A6:  MOVFF  753,03
014AA:  MOVF   x52,W
014AC:  INCF   x52,F
014AE:  BTFSC  FD8.2
014B0:  INCF   x53,F
014B2:  INCF   x54,F
014B4:  BTFSC  FD8.2
014B6:  INCF   x55,F
014B8:  BRA    1444
....................    }
....................    
....................    i++;
014BA:  INCF   x52,F
014BC:  BTFSC  FD8.2
014BE:  INCF   x53,F
....................    j=0;
014C0:  CLRF   x55
014C2:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
014C4:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
014C6:  MOVLW  5D
014C8:  ADDWF  x52,W
014CA:  MOVWF  x5A
014CC:  MOVLW  00
014CE:  ADDWFC x53,W
014D0:  MOVWF  x5B
014D2:  MOVFF  FF2,75C
014D6:  BCF    FF2.7
014D8:  MOVFF  75B,FAA
014DC:  MOVFF  75A,FA9
014E0:  BCF    FA6.6
014E2:  BCF    FA6.7
014E4:  BSF    FA6.0
014E6:  MOVF   FA8,W
014E8:  BTFSC  x5C.7
014EA:  BSF    FF2.7
014EC:  CLRF   x59
014EE:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
014F0:  MOVF   x58,W
014F2:  SUBLW  0D
014F4:  BNZ   14FA
014F6:  MOVF   x59,F
014F8:  BZ    1504
014FA:  MOVF   x55,F
014FC:  BNZ   1504
014FE:  MOVF   x54,W
01500:  SUBLW  29
01502:  BC    1516
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
01504:  MOVLW  0E
01506:  ADDWF  x54,W
01508:  MOVWF  FE9
0150A:  MOVLW  06
0150C:  ADDWFC x55,W
0150E:  MOVWF  FEA
01510:  CLRF   FEF
....................          break;
01512:  BRA    153A
....................       }
01514:  BRA    1526
....................       else
....................       {
....................          SMS_Massage5[j] = buff;
01516:  MOVLW  0E
01518:  ADDWF  x54,W
0151A:  MOVWF  FE9
0151C:  MOVLW  06
0151E:  ADDWFC x55,W
01520:  MOVWF  FEA
01522:  MOVFF  758,FEF
....................          
....................       }
01526:  MOVFF  753,03
0152A:  MOVF   x52,W
0152C:  INCF   x52,F
0152E:  BTFSC  FD8.2
01530:  INCF   x53,F
01532:  INCF   x54,F
01534:  BTFSC  FD8.2
01536:  INCF   x55,F
01538:  BRA    14C4
....................    }
....................    
....................    i++;
0153A:  INCF   x52,F
0153C:  BTFSC  FD8.2
0153E:  INCF   x53,F
....................    j=0;
01540:  CLRF   x55
01542:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01544:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01546:  MOVLW  5D
01548:  ADDWF  x52,W
0154A:  MOVWF  x5A
0154C:  MOVLW  00
0154E:  ADDWFC x53,W
01550:  MOVWF  x5B
01552:  MOVFF  FF2,75C
01556:  BCF    FF2.7
01558:  MOVFF  75B,FAA
0155C:  MOVFF  75A,FA9
01560:  BCF    FA6.6
01562:  BCF    FA6.7
01564:  BSF    FA6.0
01566:  MOVF   FA8,W
01568:  BTFSC  x5C.7
0156A:  BSF    FF2.7
0156C:  CLRF   x59
0156E:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
01570:  MOVF   x58,W
01572:  SUBLW  0D
01574:  BNZ   157A
01576:  MOVF   x59,F
01578:  BZ    1584
0157A:  MOVF   x55,F
0157C:  BNZ   1584
0157E:  MOVF   x54,W
01580:  SUBLW  29
01582:  BC    1596
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01584:  MOVLW  2E
01586:  ADDWF  x54,W
01588:  MOVWF  FE9
0158A:  MOVLW  06
0158C:  ADDWFC x55,W
0158E:  MOVWF  FEA
01590:  CLRF   FEF
....................          break;
01592:  BRA    15BA
....................       }
01594:  BRA    15A6
....................       else
....................       {
....................          SMS_Massage6[j] = buff;
01596:  MOVLW  2E
01598:  ADDWF  x54,W
0159A:  MOVWF  FE9
0159C:  MOVLW  06
0159E:  ADDWFC x55,W
015A0:  MOVWF  FEA
015A2:  MOVFF  758,FEF
....................          
....................       }
015A6:  MOVFF  753,03
015AA:  MOVF   x52,W
015AC:  INCF   x52,F
015AE:  BTFSC  FD8.2
015B0:  INCF   x53,F
015B2:  INCF   x54,F
015B4:  BTFSC  FD8.2
015B6:  INCF   x55,F
015B8:  BRA    1544
....................    }
....................    
....................    i++;
015BA:  INCF   x52,F
015BC:  BTFSC  FD8.2
015BE:  INCF   x53,F
....................    j=0;
015C0:  CLRF   x55
015C2:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
015C4:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
015C6:  MOVLW  5D
015C8:  ADDWF  x52,W
015CA:  MOVWF  x5A
015CC:  MOVLW  00
015CE:  ADDWFC x53,W
015D0:  MOVWF  x5B
015D2:  MOVFF  FF2,75C
015D6:  BCF    FF2.7
015D8:  MOVFF  75B,FAA
015DC:  MOVFF  75A,FA9
015E0:  BCF    FA6.6
015E2:  BCF    FA6.7
015E4:  BSF    FA6.0
015E6:  MOVF   FA8,W
015E8:  BTFSC  x5C.7
015EA:  BSF    FF2.7
015EC:  CLRF   x59
015EE:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
015F0:  MOVF   x58,W
015F2:  SUBLW  0D
015F4:  BNZ   15FA
015F6:  MOVF   x59,F
015F8:  BZ    1604
015FA:  MOVF   x55,F
015FC:  BNZ   1604
015FE:  MOVF   x54,W
01600:  SUBLW  29
01602:  BC    1616
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01604:  MOVLW  4E
01606:  ADDWF  x54,W
01608:  MOVWF  FE9
0160A:  MOVLW  06
0160C:  ADDWFC x55,W
0160E:  MOVWF  FEA
01610:  CLRF   FEF
....................          break;
01612:  BRA    163A
....................       }
01614:  BRA    1626
....................       else
....................       {
....................          SMS_Massage7[j] = buff;
01616:  MOVLW  4E
01618:  ADDWF  x54,W
0161A:  MOVWF  FE9
0161C:  MOVLW  06
0161E:  ADDWFC x55,W
01620:  MOVWF  FEA
01622:  MOVFF  758,FEF
....................          
....................       }
01626:  MOVFF  753,03
0162A:  MOVF   x52,W
0162C:  INCF   x52,F
0162E:  BTFSC  FD8.2
01630:  INCF   x53,F
01632:  INCF   x54,F
01634:  BTFSC  FD8.2
01636:  INCF   x55,F
01638:  BRA    15C4
....................    }
....................    
....................    i++;
0163A:  INCF   x52,F
0163C:  BTFSC  FD8.2
0163E:  INCF   x53,F
....................    j=0;
01640:  CLRF   x55
01642:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01644:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01646:  MOVLW  5D
01648:  ADDWF  x52,W
0164A:  MOVWF  x5A
0164C:  MOVLW  00
0164E:  ADDWFC x53,W
01650:  MOVWF  x5B
01652:  MOVFF  FF2,75C
01656:  BCF    FF2.7
01658:  MOVFF  75B,FAA
0165C:  MOVFF  75A,FA9
01660:  BCF    FA6.6
01662:  BCF    FA6.7
01664:  BSF    FA6.0
01666:  MOVF   FA8,W
01668:  BTFSC  x5C.7
0166A:  BSF    FF2.7
0166C:  CLRF   x59
0166E:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
01670:  MOVF   x58,W
01672:  SUBLW  0D
01674:  BNZ   167A
01676:  MOVF   x59,F
01678:  BZ    1684
0167A:  MOVF   x55,F
0167C:  BNZ   1684
0167E:  MOVF   x54,W
01680:  SUBLW  29
01682:  BC    1696
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01684:  MOVLW  6E
01686:  ADDWF  x54,W
01688:  MOVWF  FE9
0168A:  MOVLW  06
0168C:  ADDWFC x55,W
0168E:  MOVWF  FEA
01690:  CLRF   FEF
....................          break;
01692:  BRA    16BA
....................       }
01694:  BRA    16A6
....................       else
....................       {
....................          SMS_Massage8[j] = buff;
01696:  MOVLW  6E
01698:  ADDWF  x54,W
0169A:  MOVWF  FE9
0169C:  MOVLW  06
0169E:  ADDWFC x55,W
016A0:  MOVWF  FEA
016A2:  MOVFF  758,FEF
....................          
....................       }
016A6:  MOVFF  753,03
016AA:  MOVF   x52,W
016AC:  INCF   x52,F
016AE:  BTFSC  FD8.2
016B0:  INCF   x53,F
016B2:  INCF   x54,F
016B4:  BTFSC  FD8.2
016B6:  INCF   x55,F
016B8:  BRA    1644
....................    }
....................    
....................    i++;
016BA:  INCF   x52,F
016BC:  BTFSC  FD8.2
016BE:  INCF   x53,F
....................    j=0;
016C0:  CLRF   x55
016C2:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
016C4:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
016C6:  MOVLW  5D
016C8:  ADDWF  x52,W
016CA:  MOVWF  x5A
016CC:  MOVLW  00
016CE:  ADDWFC x53,W
016D0:  MOVWF  x5B
016D2:  MOVFF  FF2,75C
016D6:  BCF    FF2.7
016D8:  MOVFF  75B,FAA
016DC:  MOVFF  75A,FA9
016E0:  BCF    FA6.6
016E2:  BCF    FA6.7
016E4:  BSF    FA6.0
016E6:  MOVF   FA8,W
016E8:  BTFSC  x5C.7
016EA:  BSF    FF2.7
016EC:  CLRF   x59
016EE:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
016F0:  MOVF   x58,W
016F2:  SUBLW  0D
016F4:  BNZ   16FA
016F6:  MOVF   x59,F
016F8:  BZ    1704
016FA:  MOVF   x55,F
016FC:  BNZ   1704
016FE:  MOVF   x54,W
01700:  SUBLW  29
01702:  BC    1716
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
01704:  MOVLW  8E
01706:  ADDWF  x54,W
01708:  MOVWF  FE9
0170A:  MOVLW  06
0170C:  ADDWFC x55,W
0170E:  MOVWF  FEA
01710:  CLRF   FEF
....................          break;
01712:  BRA    173A
....................       }
01714:  BRA    1726
....................       else
....................       {
....................          SMS_Massage9[j] = buff;
01716:  MOVLW  8E
01718:  ADDWF  x54,W
0171A:  MOVWF  FE9
0171C:  MOVLW  06
0171E:  ADDWFC x55,W
01720:  MOVWF  FEA
01722:  MOVFF  758,FEF
....................          
....................       }
01726:  MOVFF  753,03
0172A:  MOVF   x52,W
0172C:  INCF   x52,F
0172E:  BTFSC  FD8.2
01730:  INCF   x53,F
01732:  INCF   x54,F
01734:  BTFSC  FD8.2
01736:  INCF   x55,F
01738:  BRA    16C4
....................    }
....................    
....................    i++;
0173A:  INCF   x52,F
0173C:  BTFSC  FD8.2
0173E:  INCF   x53,F
....................    j=0;
01740:  CLRF   x55
01742:  CLRF   x54
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01744:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01746:  MOVLW  5D
01748:  ADDWF  x52,W
0174A:  MOVWF  x5A
0174C:  MOVLW  00
0174E:  ADDWFC x53,W
01750:  MOVWF  x5B
01752:  MOVFF  FF2,75C
01756:  BCF    FF2.7
01758:  MOVFF  75B,FAA
0175C:  MOVFF  75A,FA9
01760:  BCF    FA6.6
01762:  BCF    FA6.7
01764:  BSF    FA6.0
01766:  MOVF   FA8,W
01768:  BTFSC  x5C.7
0176A:  BSF    FF2.7
0176C:  CLRF   x59
0176E:  MOVWF  x58
....................       
....................       if((buff == 0x0D) || (j>41))
01770:  MOVF   x58,W
01772:  SUBLW  0D
01774:  BNZ   177A
01776:  MOVF   x59,F
01778:  BZ    1784
0177A:  MOVF   x55,F
0177C:  BNZ   1784
0177E:  MOVF   x54,W
01780:  SUBLW  29
01782:  BC    1796
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01784:  MOVLW  AE
01786:  ADDWF  x54,W
01788:  MOVWF  FE9
0178A:  MOVLW  06
0178C:  ADDWFC x55,W
0178E:  MOVWF  FEA
01790:  CLRF   FEF
....................          break;
01792:  BRA    17BA
....................       }
01794:  BRA    17A6
....................       else
....................       {
....................          SMS_Massage10[j] = buff;
01796:  MOVLW  AE
01798:  ADDWF  x54,W
0179A:  MOVWF  FE9
0179C:  MOVLW  06
0179E:  ADDWFC x55,W
017A0:  MOVWF  FEA
017A2:  MOVFF  758,FEF
....................          
....................       }
017A6:  MOVFF  753,03
017AA:  MOVF   x52,W
017AC:  INCF   x52,F
017AE:  BTFSC  FD8.2
017B0:  INCF   x53,F
017B2:  INCF   x54,F
017B4:  BTFSC  FD8.2
017B6:  INCF   x55,F
017B8:  BRA    1744
....................    }
017BA:  MOVLB  0
017BC:  RETURN 0
....................    
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
....................    SBUF = getc();
*
005A2:  BTFSS  F9E.5
005A4:  BRA    05A2
005A6:  MOVFF  FAE,2E
....................    checkCommand();
005AA:  BRA    02E6
.................... }
005AC:  BCF    F9E.5
005AE:  GOTO   0078
.................... #int_TIMER1
.................... void  TIMER1_isr(void) 
.................... {
....................    //ReadIn_flag =1;
.................... }
.................... 
005B2:  BCF    F9E.0
005B4:  GOTO   0078
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
005B8:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
005BA:  MOVLB  5
005BC:  MOVF   x7B,F
005BE:  BZ    05CE
....................    {
....................       T_timeout--;
005C0:  DECF   x7B,F
....................       if(T_timeout == 0)
005C2:  MOVF   x7B,F
005C4:  BNZ   05CE
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout 
005C6:  MOVFF  63,6C
....................          output_bit(P485ctrl,0);
005CA:  BCF    F8A.3
005CC:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
005CE:  MOVF   1C,F
005D0:  BZ    05EA
....................    {
....................       TimeBase1s--;
005D2:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
005D4:  MOVF   1C,F
005D6:  BNZ   05EA
....................       {
....................          if(AutoAckDelayTime != 0x00)
005D8:  MOVF   1D,F
005DA:  BZ    05E4
....................          {
....................             AutoAckDelayTime--;
005DC:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
005DE:  MOVF   1D,F
005E0:  BNZ   05E4
....................             {
....................                AutoAckFlag = 1 ;
005E2:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005E4:  BSF    30.4
....................          TimeBase1s = 100;
005E6:  MOVLW  64
005E8:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 50)    //500mS
005EA:  MOVF   19,W
005EC:  SUBLW  32
005EE:  BNZ   0618
....................    {
....................       StatusTime = 0;
005F0:  CLRF   19
....................       if(HearthbeatInd == 0)
005F2:  BTFSC  1A.0
005F4:  BRA    05FE
....................       {
....................          HearthbeatInd = 1;
005F6:  BSF    1A.0
....................          output_bit(Pled,1);
005F8:  BSF    F8A.5
005FA:  BCF    F93.5
....................       }
005FC:  BRA    0604
....................       else
....................       {
....................          HearthbeatInd = 0;
005FE:  BCF    1A.0
....................          output_bit(Pled,0);
00600:  BCF    F8A.5
00602:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
00604:  BTFSS  1A.6
00606:  BRA    0616
....................          {
....................              if(T_test > 0x00) T_test --;
00608:  MOVF   2F,F
0060A:  BZ    060E
0060C:  DECF   2F,F
....................              if(T_test == 0x00) Test_fault = 1;
0060E:  MOVF   2F,F
00610:  BNZ   0614
00612:  BSF    1A.5
....................          }
00614:  BRA    0618
....................          else
....................          {
....................              //Test = 0;
....................              T_test = 0x00;
00616:  CLRF   2F
....................          }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
00618:  MOVF   1B,F
0061A:  BZ    0642
....................    {
....................       FlashingRateTime--;
0061C:  DECF   1B,F
....................       if(FlashingRateTime == 0)
0061E:  MOVF   1B,F
00620:  BNZ   0636
....................       {
....................          outmcp23 = 0xff;  
00622:  SETF   x7E
....................          if(SyncStatus == 0)
00624:  BTFSC  30.2
00626:  BRA    0632
....................          {
....................             if(FlashingFlag == 1)
00628:  BTFSS  1A.1
0062A:  BRA    0630
....................             {
....................                FlashingFlag = 0;
0062C:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
0062E:  BRA    0632
....................             else
....................             {
....................                FlashingFlag = 1;
00630:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
00632:  MOVFF  60,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
00636:  MOVF   31,F
00638:  BZ    0642
....................       {
....................          Synctimer--;
0063A:  DECF   31,F
....................          if(Synctimer == 0x00)
0063C:  MOVF   31,F
0063E:  BNZ   0642
....................          {
....................             SyncStatus = 0;
00640:  BCF    30.2
....................          }
....................       }
.................... 
....................    }
....................    
....................    
00642:  BCF    F9E.1
00644:  MOVLB  0
00646:  GOTO   0078
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
04E5A:  MOVLB  6
04E5C:  BTFSS  xDA.0
04E5E:  BRA    4F68
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
04E60:  MOVLW  00
04E62:  BTFSC  xCE.0
04E64:  MOVLW  01
04E66:  MOVLB  7
04E68:  MOVWF  x59
04E6A:  MOVLW  00
04E6C:  MOVLB  6
04E6E:  BTFSC  xD2.0
04E70:  MOVLW  01
04E72:  MOVLB  7
04E74:  XORWF  x59,W
04E76:  SUBLW  01
04E78:  BNZ   4E80
04E7A:  MOVLB  6
04E7C:  BTFSC  xD4.0
04E7E:  BRA    4E86
04E80:  MOVLB  6
04E82:  BTFSS  xDE.0
04E84:  BRA    4F60
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
04E86:  BTFSC  xDC.0
04E88:  BRA    4F5E
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
04E8A:  BTFSC  xDE.0
04E8C:  BRA    4E9C
04E8E:  MOVF   5E,W
04E90:  SUBLW  0F
04E92:  BNZ   4E9C
....................             {
....................                TimeBase1s = 100 ;            //reload again
04E94:  MOVLW  64
04E96:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
04E98:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
04E9C:  BSF    xDE.0
....................             if(FlashingFlag == 0)                                                                                                                                                                                                                                                                
04E9E:  BTFSC  1A.1
04EA0:  BRA    4EA6
....................             {
....................                Output.B1 = 0;           //Flash output1
04EA2:  BCF    xD0.0
....................             }
04EA4:  BRA    4EA8
....................             else
....................             {
....................                Output.B1 = 1;
04EA6:  BSF    xD0.0
....................             }
.................... 
....................             if (~AutoTestFlag)
04EA8:  BTFSC  1A.4
04EAA:  BRA    4EC8
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
04EAC:  BTFSC  xD8.0
04EAE:  BRA    4EBA
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
04EB0:  BSF    F89.4
04EB2:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
04EB4:  BSF    F89.3
04EB6:  BCF    F92.3
....................                }
04EB8:  BRA    4EC8
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
04EBA:  BTFSS  xD6.0
04EBC:  BRA    4EC4
04EBE:  BSF    F89.4
04EC0:  BCF    F92.4
04EC2:  BRA    4EC8
....................                   else output_bit(Pbell,1);                          //Bell
04EC4:  BSF    F89.3
04EC6:  BCF    F92.3
....................                }
....................             }
....................             //////////////////////////////////////////////////////////////////
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04EC8:  BTFSC  xEA.0
04ECA:  BRA    4F5E
04ECC:  BTFSC  30.1
04ECE:  BRA    4F5E
04ED0:  BTFSC  xDC.0
04ED2:  BRA    4F5E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
04ED4:  MOVLW  4A
04ED6:  MOVWF  FF6
04ED8:  MOVLW  06
04EDA:  MOVWF  FF7
04EDC:  MOVLB  0
04EDE:  CALL   2436
....................                putc('\n',CH2);
04EE2:  MOVLW  0A
04EE4:  MOVLB  7
04EE6:  MOVWF  x5A
04EE8:  MOVLB  0
04EEA:  CALL   23F0
....................                delay_ms(10);
04EEE:  MOVLW  0A
04EF0:  MOVLB  7
04EF2:  MOVWF  x59
04EF4:  MOVLB  0
04EF6:  CALL   0848
....................             
....................                SendSMS.B1 =1;
04EFA:  MOVLB  6
04EFC:  BSF    xEA.0
....................                fprintf(CH2,"AT+CMGS=\"");
04EFE:  MOVLW  54
04F00:  MOVWF  FF6
04F02:  MOVLW  06
04F04:  MOVWF  FF7
04F06:  MOVLB  0
04F08:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
04F0C:  MOVLW  05
04F0E:  MOVWF  FEA
04F10:  MOVLW  7F
04F12:  MOVWF  FE9
04F14:  RCALL  47EC
....................                
....................                fprintf(CH2,"\"");
04F16:  MOVLW  22
04F18:  MOVLB  7
04F1A:  MOVWF  x5A
04F1C:  MOVLB  0
04F1E:  CALL   23F0
....................                putc('\n',CH2);
04F22:  MOVLW  0A
04F24:  MOVLB  7
04F26:  MOVWF  x5A
04F28:  MOVLB  0
04F2A:  CALL   23F0
....................                delay_ms(50);
04F2E:  MOVLW  32
04F30:  MOVLB  7
04F32:  MOVWF  x59
04F34:  MOVLB  0
04F36:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage1);
04F3A:  MOVLW  05
04F3C:  MOVWF  FEA
04F3E:  MOVLW  8E
04F40:  MOVWF  FE9
04F42:  RCALL  47EC
....................               putc('\n',CH2);
04F44:  MOVLW  0A
04F46:  MOVLB  7
04F48:  MOVWF  x5A
04F4A:  MOVLB  0
04F4C:  CALL   23F0
....................               putc(26,CH2);
04F50:  MOVLW  1A
04F52:  MOVLB  7
04F54:  MOVWF  x5A
04F56:  MOVLB  0
04F58:  CALL   23F0
04F5C:  MOVLB  6
....................             }
....................             //////////////////////////////////////////////////////////////////
....................         }
....................       }
04F5E:  BRA    4F66
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
04F60:  BTFSS  xD4.0
04F62:  BRA    4F66
04F64:  BCF    xDC.0
....................    }
04F66:  BRA    502A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
04F68:  MOVLW  00
04F6A:  BTFSC  xCE.0
04F6C:  MOVLW  01
04F6E:  MOVLB  7
04F70:  MOVWF  x59
04F72:  MOVLW  00
04F74:  MOVLB  6
04F76:  BTFSC  xD2.0
04F78:  MOVLW  01
04F7A:  MOVLB  7
04F7C:  XORWF  x59,W
04F7E:  SUBLW  01
04F80:  BNZ   5022
....................       {
....................          Output.B1 = 0;
04F82:  MOVLB  6
04F84:  BCF    xD0.0
....................          // SMS Sending   
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
04F86:  BTFSC  xEA.0
04F88:  BRA    501E
04F8A:  BTFSC  30.1
04F8C:  BRA    501E
04F8E:  BTFSC  xDC.0
04F90:  BRA    501E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
04F92:  MOVLW  5E
04F94:  MOVWF  FF6
04F96:  MOVLW  06
04F98:  MOVWF  FF7
04F9A:  MOVLB  0
04F9C:  CALL   2436
....................             putc('\n',CH2);
04FA0:  MOVLW  0A
04FA2:  MOVLB  7
04FA4:  MOVWF  x5A
04FA6:  MOVLB  0
04FA8:  CALL   23F0
....................             delay_ms(10);
04FAC:  MOVLW  0A
04FAE:  MOVLB  7
04FB0:  MOVWF  x59
04FB2:  MOVLB  0
04FB4:  CALL   0848
....................             
....................             SendSMS.B1 =1;
04FB8:  MOVLB  6
04FBA:  BSF    xEA.0
....................             fprintf(CH2,"AT+CMGS=\"");
04FBC:  MOVLW  68
04FBE:  MOVWF  FF6
04FC0:  MOVLW  06
04FC2:  MOVWF  FF7
04FC4:  MOVLB  0
04FC6:  CALL   2436
....................             fprintf(CH2,sms_phonenumber);
04FCA:  MOVLW  05
04FCC:  MOVWF  FEA
04FCE:  MOVLW  7F
04FD0:  MOVWF  FE9
04FD2:  RCALL  47EC
....................             
....................             fprintf(CH2,"\"");
04FD4:  MOVLW  22
04FD6:  MOVLB  7
04FD8:  MOVWF  x5A
04FDA:  MOVLB  0
04FDC:  CALL   23F0
....................             putc('\n',CH2);
04FE0:  MOVLW  0A
04FE2:  MOVLB  7
04FE4:  MOVWF  x5A
04FE6:  MOVLB  0
04FE8:  CALL   23F0
....................             delay_ms(50);
04FEC:  MOVLW  32
04FEE:  MOVLB  7
04FF0:  MOVWF  x59
04FF2:  MOVLB  0
04FF4:  CALL   0848
....................            
....................            fprintf(CH2,SMS_Massage1);
04FF8:  MOVLW  05
04FFA:  MOVWF  FEA
04FFC:  MOVLW  8E
04FFE:  MOVWF  FE9
05000:  CALL   47EC
....................            putc('\n',CH2);
05004:  MOVLW  0A
05006:  MOVLB  7
05008:  MOVWF  x5A
0500A:  MOVLB  0
0500C:  CALL   23F0
....................           putc(26,CH2);
05010:  MOVLW  1A
05012:  MOVLB  7
05014:  MOVWF  x5A
05016:  MOVLB  0
05018:  CALL   23F0
0501C:  MOVLB  6
....................          }
....................       }
0501E:  BRA    502A
05020:  MOVLB  7
....................       else
....................       {
....................          Output.B1 = 1;
05022:  MOVLB  6
05024:  BSF    xD0.0
....................          
....................          SendSMS.B1 =0;
05026:  BCF    xEA.0
....................          functointest_f =0;
05028:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
0502A:  BTFSS  xDA.1
0502C:  BRA    513A
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
0502E:  MOVLW  00
05030:  BTFSC  xCE.1
05032:  MOVLW  01
05034:  MOVLB  7
05036:  MOVWF  x59
05038:  MOVLW  00
0503A:  MOVLB  6
0503C:  BTFSC  xD2.1
0503E:  MOVLW  01
05040:  MOVLB  7
05042:  XORWF  x59,W
05044:  SUBLW  01
05046:  BNZ   504E
05048:  MOVLB  6
0504A:  BTFSC  xD4.1
0504C:  BRA    5054
0504E:  MOVLB  6
05050:  BTFSS  xDE.1
05052:  BRA    5132
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
05054:  BTFSC  xDC.1
05056:  BRA    5130
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05058:  BTFSC  xDE.1
0505A:  BRA    506A
0505C:  MOVF   5E,W
0505E:  SUBLW  0F
05060:  BNZ   506A
....................             {
....................                TimeBase1s = 100 ;            //reload again
05062:  MOVLW  64
05064:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05066:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
0506A:  BSF    xDE.1
....................             if(FlashingFlag == 0)
0506C:  BTFSC  1A.1
0506E:  BRA    5074
....................             {
....................                Output.B2 = 0;           //Flash output1
05070:  BCF    xD0.1
....................             }
05072:  BRA    5076
....................             else
....................             {
....................                Output.B2 = 1;
05074:  BSF    xD0.1
....................             }
.................... 
....................             if (~AutoTestFlag)
05076:  BTFSC  1A.4
05078:  BRA    5096
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
0507A:  BTFSC  xD8.1
0507C:  BRA    5088
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
0507E:  BSF    F89.4
05080:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05082:  BSF    F89.3
05084:  BCF    F92.3
....................                }
05086:  BRA    5096
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
05088:  BTFSS  xD6.1
0508A:  BRA    5092
0508C:  BSF    F89.4
0508E:  BCF    F92.4
05090:  BRA    5096
....................                   else output_bit(Pbell,1);                          //Bell
05092:  BSF    F89.3
05094:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
05096:  BTFSC  xEA.1
05098:  BRA    5130
0509A:  BTFSC  30.1
0509C:  BRA    5130
0509E:  BTFSC  xDC.1
050A0:  BRA    5130
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
050A2:  MOVLW  72
050A4:  MOVWF  FF6
050A6:  MOVLW  06
050A8:  MOVWF  FF7
050AA:  MOVLB  0
050AC:  CALL   2436
....................                putc('\n',CH2);
050B0:  MOVLW  0A
050B2:  MOVLB  7
050B4:  MOVWF  x5A
050B6:  MOVLB  0
050B8:  CALL   23F0
....................                delay_ms(10);
050BC:  MOVLW  0A
050BE:  MOVLB  7
050C0:  MOVWF  x59
050C2:  MOVLB  0
050C4:  CALL   0848
....................                 
....................                SendSMS.B2 =1;
050C8:  MOVLB  6
050CA:  BSF    xEA.1
....................                fprintf(CH2,"AT+CMGS=\"");
050CC:  MOVLW  7C
050CE:  MOVWF  FF6
050D0:  MOVLW  06
050D2:  MOVWF  FF7
050D4:  MOVLB  0
050D6:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
050DA:  MOVLW  05
050DC:  MOVWF  FEA
050DE:  MOVLW  7F
050E0:  MOVWF  FE9
050E2:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
050E6:  MOVLW  22
050E8:  MOVLB  7
050EA:  MOVWF  x5A
050EC:  MOVLB  0
050EE:  CALL   23F0
....................                putc('\n',CH2);
050F2:  MOVLW  0A
050F4:  MOVLB  7
050F6:  MOVWF  x5A
050F8:  MOVLB  0
050FA:  CALL   23F0
....................                delay_ms(50);
050FE:  MOVLW  32
05100:  MOVLB  7
05102:  MOVWF  x59
05104:  MOVLB  0
05106:  CALL   0848
....................                
....................               fprintf(CH2,SMS_Massage2);
0510A:  MOVLW  05
0510C:  MOVWF  FEA
0510E:  MOVLW  AE
05110:  MOVWF  FE9
05112:  CALL   47EC
....................               putc('\n',CH2);
05116:  MOVLW  0A
05118:  MOVLB  7
0511A:  MOVWF  x5A
0511C:  MOVLB  0
0511E:  CALL   23F0
....................              putc(26,CH2);
05122:  MOVLW  1A
05124:  MOVLB  7
05126:  MOVWF  x5A
05128:  MOVLB  0
0512A:  CALL   23F0
0512E:  MOVLB  6
....................             } 
....................           }
.................... 
....................       }
05130:  BRA    5138
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
05132:  BTFSS  xD4.1
05134:  BRA    5138
05136:  BCF    xDC.1
....................    }
05138:  BRA    51FE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
0513A:  MOVLW  00
0513C:  BTFSC  xCE.1
0513E:  MOVLW  01
05140:  MOVLB  7
05142:  MOVWF  x59
05144:  MOVLW  00
05146:  MOVLB  6
05148:  BTFSC  xD2.1
0514A:  MOVLW  01
0514C:  MOVLB  7
0514E:  XORWF  x59,W
05150:  SUBLW  01
05152:  BNZ   51F6
....................       {
....................          Output.B2 = 0;
05154:  MOVLB  6
05156:  BCF    xD0.1
....................          // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
05158:  BTFSC  xEA.1
0515A:  BRA    51F2
0515C:  BTFSC  30.1
0515E:  BRA    51F2
05160:  BTFSC  xDC.1
05162:  BRA    51F2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05164:  MOVLW  86
05166:  MOVWF  FF6
05168:  MOVLW  06
0516A:  MOVWF  FF7
0516C:  MOVLB  0
0516E:  CALL   2436
....................                putc('\n',CH2);
05172:  MOVLW  0A
05174:  MOVLB  7
05176:  MOVWF  x5A
05178:  MOVLB  0
0517A:  CALL   23F0
....................                delay_ms(10);
0517E:  MOVLW  0A
05180:  MOVLB  7
05182:  MOVWF  x59
05184:  MOVLB  0
05186:  CALL   0848
....................                 
....................                SendSMS.B2 =1;
0518A:  MOVLB  6
0518C:  BSF    xEA.1
....................                fprintf(CH2,"AT+CMGS=\"");
0518E:  MOVLW  90
05190:  MOVWF  FF6
05192:  MOVLW  06
05194:  MOVWF  FF7
05196:  MOVLB  0
05198:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
0519C:  MOVLW  05
0519E:  MOVWF  FEA
051A0:  MOVLW  7F
051A2:  MOVWF  FE9
051A4:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
051A8:  MOVLW  22
051AA:  MOVLB  7
051AC:  MOVWF  x5A
051AE:  MOVLB  0
051B0:  CALL   23F0
....................                putc('\n',CH2);
051B4:  MOVLW  0A
051B6:  MOVLB  7
051B8:  MOVWF  x5A
051BA:  MOVLB  0
051BC:  CALL   23F0
....................                delay_ms(50);
051C0:  MOVLW  32
051C2:  MOVLB  7
051C4:  MOVWF  x59
051C6:  MOVLB  0
051C8:  CALL   0848
....................                
....................               fprintf(CH2,SMS_Massage2);
051CC:  MOVLW  05
051CE:  MOVWF  FEA
051D0:  MOVLW  AE
051D2:  MOVWF  FE9
051D4:  CALL   47EC
....................               putc('\n',CH2);
051D8:  MOVLW  0A
051DA:  MOVLB  7
051DC:  MOVWF  x5A
051DE:  MOVLB  0
051E0:  CALL   23F0
....................              putc(26,CH2);
051E4:  MOVLW  1A
051E6:  MOVLB  7
051E8:  MOVWF  x5A
051EA:  MOVLB  0
051EC:  CALL   23F0
051F0:  MOVLB  6
....................             } 
....................       }
051F2:  BRA    51FE
051F4:  MOVLB  7
....................       else
....................       {
....................          Output.B2 = 1;
051F6:  MOVLB  6
051F8:  BSF    xD0.1
....................          SendSMS.B2 =0;
051FA:  BCF    xEA.1
....................          functointest_f =0;
051FC:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
051FE:  BTFSS  xDA.2
05200:  BRA    530E
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
05202:  MOVLW  00
05204:  BTFSC  xCE.2
05206:  MOVLW  01
05208:  MOVLB  7
0520A:  MOVWF  x59
0520C:  MOVLW  00
0520E:  MOVLB  6
05210:  BTFSC  xD2.2
05212:  MOVLW  01
05214:  MOVLB  7
05216:  XORWF  x59,W
05218:  SUBLW  01
0521A:  BNZ   5222
0521C:  MOVLB  6
0521E:  BTFSC  xD4.2
05220:  BRA    5228
05222:  MOVLB  6
05224:  BTFSS  xDE.2
05226:  BRA    5306
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
05228:  BTFSC  xDC.2
0522A:  BRA    5304
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0522C:  BTFSC  xDE.2
0522E:  BRA    523E
05230:  MOVF   5E,W
05232:  SUBLW  0F
05234:  BNZ   523E
....................             {
....................                TimeBase1s = 100 ;            //reload again
05236:  MOVLW  64
05238:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0523A:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
0523E:  BSF    xDE.2
....................             if(FlashingFlag == 0)
05240:  BTFSC  1A.1
05242:  BRA    5248
....................             {
....................                Output.B3 = 0;           //Flash output1
05244:  BCF    xD0.2
....................             }
05246:  BRA    524A
....................             else
....................             {
....................                Output.B3 = 1;
05248:  BSF    xD0.2
....................             }
.................... 
....................             if (~AutoTestFlag)
0524A:  BTFSC  1A.4
0524C:  BRA    526A
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
0524E:  BTFSC  xD8.2
05250:  BRA    525C
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05252:  BSF    F89.4
05254:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05256:  BSF    F89.3
05258:  BCF    F92.3
....................                }
0525A:  BRA    526A
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
0525C:  BTFSS  xD6.2
0525E:  BRA    5266
05260:  BSF    F89.4
05262:  BCF    F92.4
05264:  BRA    526A
....................                   else output_bit(Pbell,1);                          //Bell
05266:  BSF    F89.3
05268:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
0526A:  BTFSC  xEA.2
0526C:  BRA    5304
0526E:  BTFSC  30.1
05270:  BRA    5304
05272:  BTFSC  xDC.2
05274:  BRA    5304
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05276:  MOVLW  9A
05278:  MOVWF  FF6
0527A:  MOVLW  06
0527C:  MOVWF  FF7
0527E:  MOVLB  0
05280:  CALL   2436
....................                putc('\n',CH2);
05284:  MOVLW  0A
05286:  MOVLB  7
05288:  MOVWF  x5A
0528A:  MOVLB  0
0528C:  CALL   23F0
....................                delay_ms(10);
05290:  MOVLW  0A
05292:  MOVLB  7
05294:  MOVWF  x59
05296:  MOVLB  0
05298:  CALL   0848
....................                
....................                SendSMS.B3 =1;
0529C:  MOVLB  6
0529E:  BSF    xEA.2
....................                fprintf(CH2,"AT+CMGS=\"");
052A0:  MOVLW  A4
052A2:  MOVWF  FF6
052A4:  MOVLW  06
052A6:  MOVWF  FF7
052A8:  MOVLB  0
052AA:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
052AE:  MOVLW  05
052B0:  MOVWF  FEA
052B2:  MOVLW  7F
052B4:  MOVWF  FE9
052B6:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
052BA:  MOVLW  22
052BC:  MOVLB  7
052BE:  MOVWF  x5A
052C0:  MOVLB  0
052C2:  CALL   23F0
....................                putc('\n',CH2);
052C6:  MOVLW  0A
052C8:  MOVLB  7
052CA:  MOVWF  x5A
052CC:  MOVLB  0
052CE:  CALL   23F0
....................                delay_ms(50);
052D2:  MOVLW  32
052D4:  MOVLB  7
052D6:  MOVWF  x59
052D8:  MOVLB  0
052DA:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage3);
052DE:  MOVLW  05
052E0:  MOVWF  FEA
052E2:  MOVLW  CE
052E4:  MOVWF  FE9
052E6:  CALL   47EC
....................               putc('\n',CH2);
052EA:  MOVLW  0A
052EC:  MOVLB  7
052EE:  MOVWF  x5A
052F0:  MOVLB  0
052F2:  CALL   23F0
....................              putc(26,CH2);
052F6:  MOVLW  1A
052F8:  MOVLB  7
052FA:  MOVWF  x5A
052FC:  MOVLB  0
052FE:  CALL   23F0
05302:  MOVLB  6
....................             }
....................             
....................             
....................           }
.................... 
....................       }
05304:  BRA    530C
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
05306:  BTFSS  xD4.2
05308:  BRA    530C
0530A:  BCF    xDC.2
....................    }
0530C:  BRA    53D2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
0530E:  MOVLW  00
05310:  BTFSC  xCE.2
05312:  MOVLW  01
05314:  MOVLB  7
05316:  MOVWF  x59
05318:  MOVLW  00
0531A:  MOVLB  6
0531C:  BTFSC  xD2.2
0531E:  MOVLW  01
05320:  MOVLB  7
05322:  XORWF  x59,W
05324:  SUBLW  01
05326:  BNZ   53CA
....................       {
....................          Output.B3 = 0;
05328:  MOVLB  6
0532A:  BCF    xD0.2
....................          // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
0532C:  BTFSC  xEA.2
0532E:  BRA    53C6
05330:  BTFSC  30.1
05332:  BRA    53C6
05334:  BTFSC  xDC.2
05336:  BRA    53C6
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05338:  MOVLW  AE
0533A:  MOVWF  FF6
0533C:  MOVLW  06
0533E:  MOVWF  FF7
05340:  MOVLB  0
05342:  CALL   2436
....................                putc('\n',CH2);
05346:  MOVLW  0A
05348:  MOVLB  7
0534A:  MOVWF  x5A
0534C:  MOVLB  0
0534E:  CALL   23F0
....................                delay_ms(10);
05352:  MOVLW  0A
05354:  MOVLB  7
05356:  MOVWF  x59
05358:  MOVLB  0
0535A:  CALL   0848
....................                
....................                SendSMS.B3 =1;
0535E:  MOVLB  6
05360:  BSF    xEA.2
....................                fprintf(CH2,"AT+CMGS=\"");
05362:  MOVLW  B8
05364:  MOVWF  FF6
05366:  MOVLW  06
05368:  MOVWF  FF7
0536A:  MOVLB  0
0536C:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05370:  MOVLW  05
05372:  MOVWF  FEA
05374:  MOVLW  7F
05376:  MOVWF  FE9
05378:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
0537C:  MOVLW  22
0537E:  MOVLB  7
05380:  MOVWF  x5A
05382:  MOVLB  0
05384:  CALL   23F0
....................                putc('\n',CH2);
05388:  MOVLW  0A
0538A:  MOVLB  7
0538C:  MOVWF  x5A
0538E:  MOVLB  0
05390:  CALL   23F0
....................                delay_ms(50);
05394:  MOVLW  32
05396:  MOVLB  7
05398:  MOVWF  x59
0539A:  MOVLB  0
0539C:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage3);
053A0:  MOVLW  05
053A2:  MOVWF  FEA
053A4:  MOVLW  CE
053A6:  MOVWF  FE9
053A8:  CALL   47EC
....................               putc('\n',CH2);
053AC:  MOVLW  0A
053AE:  MOVLB  7
053B0:  MOVWF  x5A
053B2:  MOVLB  0
053B4:  CALL   23F0
....................              putc(26,CH2);
053B8:  MOVLW  1A
053BA:  MOVLB  7
053BC:  MOVWF  x5A
053BE:  MOVLB  0
053C0:  CALL   23F0
053C4:  MOVLB  6
....................             }
....................       }
053C6:  BRA    53D2
053C8:  MOVLB  7
....................       else
....................       {
....................          Output.B3 = 1;
053CA:  MOVLB  6
053CC:  BSF    xD0.2
....................          SendSMS.B5 =0;
053CE:  BCF    xEA.4
....................          functointest_f =0;
053D0:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
053D2:  BTFSS  xDA.3
053D4:  BRA    54E2
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
053D6:  MOVLW  00
053D8:  BTFSC  xCE.3
053DA:  MOVLW  01
053DC:  MOVLB  7
053DE:  MOVWF  x59
053E0:  MOVLW  00
053E2:  MOVLB  6
053E4:  BTFSC  xD2.3
053E6:  MOVLW  01
053E8:  MOVLB  7
053EA:  XORWF  x59,W
053EC:  SUBLW  01
053EE:  BNZ   53F6
053F0:  MOVLB  6
053F2:  BTFSC  xD4.3
053F4:  BRA    53FC
053F6:  MOVLB  6
053F8:  BTFSS  xDE.3
053FA:  BRA    54DA
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
053FC:  BTFSC  xDC.3
053FE:  BRA    54D8
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05400:  BTFSC  xDE.3
05402:  BRA    5412
05404:  MOVF   5E,W
05406:  SUBLW  0F
05408:  BNZ   5412
....................             {
....................                TimeBase1s = 100 ;            //reload again
0540A:  MOVLW  64
0540C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0540E:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
05412:  BSF    xDE.3
....................             if(FlashingFlag == 0)
05414:  BTFSC  1A.1
05416:  BRA    541C
....................             {
....................                Output.B4 = 0;           //Flash output1
05418:  BCF    xD0.3
....................             }
0541A:  BRA    541E
....................             else
....................             {
....................                Output.B4 = 1;
0541C:  BSF    xD0.3
....................             }
.................... 
....................             if (~AutoTestFlag)
0541E:  BTFSC  1A.4
05420:  BRA    543E
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
05422:  BTFSC  xD8.3
05424:  BRA    5430
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05426:  BSF    F89.4
05428:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
0542A:  BSF    F89.3
0542C:  BCF    F92.3
....................                }
0542E:  BRA    543E
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
05430:  BTFSS  xD6.3
05432:  BRA    543A
05434:  BSF    F89.4
05436:  BCF    F92.4
05438:  BRA    543E
....................                   else output_bit(Pbell,1);                          //Bell
0543A:  BSF    F89.3
0543C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
0543E:  BTFSC  xEA.3
05440:  BRA    54D8
05442:  BTFSC  30.1
05444:  BRA    54D8
05446:  BTFSC  xDC.3
05448:  BRA    54D8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0544A:  MOVLW  C2
0544C:  MOVWF  FF6
0544E:  MOVLW  06
05450:  MOVWF  FF7
05452:  MOVLB  0
05454:  CALL   2436
....................                putc('\n',CH2);
05458:  MOVLW  0A
0545A:  MOVLB  7
0545C:  MOVWF  x5A
0545E:  MOVLB  0
05460:  CALL   23F0
....................                delay_ms(10);
05464:  MOVLW  0A
05466:  MOVLB  7
05468:  MOVWF  x59
0546A:  MOVLB  0
0546C:  CALL   0848
....................                
....................                SendSMS.B4 =1;
05470:  MOVLB  6
05472:  BSF    xEA.3
....................                fprintf(CH2,"AT+CMGS=\"");
05474:  MOVLW  CC
05476:  MOVWF  FF6
05478:  MOVLW  06
0547A:  MOVWF  FF7
0547C:  MOVLB  0
0547E:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05482:  MOVLW  05
05484:  MOVWF  FEA
05486:  MOVLW  7F
05488:  MOVWF  FE9
0548A:  CALL   47EC
....................             
....................                fprintf(CH2,"\"");
0548E:  MOVLW  22
05490:  MOVLB  7
05492:  MOVWF  x5A
05494:  MOVLB  0
05496:  CALL   23F0
....................                putc('\n',CH2);
0549A:  MOVLW  0A
0549C:  MOVLB  7
0549E:  MOVWF  x5A
054A0:  MOVLB  0
054A2:  CALL   23F0
....................                delay_ms(50);
054A6:  MOVLW  32
054A8:  MOVLB  7
054AA:  MOVWF  x59
054AC:  MOVLB  0
054AE:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage4);
054B2:  MOVLW  05
054B4:  MOVWF  FEA
054B6:  MOVLW  EE
054B8:  MOVWF  FE9
054BA:  CALL   47EC
....................               putc('\n',CH2);
054BE:  MOVLW  0A
054C0:  MOVLB  7
054C2:  MOVWF  x5A
054C4:  MOVLB  0
054C6:  CALL   23F0
....................              putc(26,CH2);
054CA:  MOVLW  1A
054CC:  MOVLB  7
054CE:  MOVWF  x5A
054D0:  MOVLB  0
054D2:  CALL   23F0
054D6:  MOVLB  6
....................             }
....................           }
.................... 
....................       }
054D8:  BRA    54E0
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
054DA:  BTFSS  xD4.3
054DC:  BRA    54E0
054DE:  BCF    xDC.3
....................    }
054E0:  BRA    55A6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
054E2:  MOVLW  00
054E4:  BTFSC  xCE.3
054E6:  MOVLW  01
054E8:  MOVLB  7
054EA:  MOVWF  x59
054EC:  MOVLW  00
054EE:  MOVLB  6
054F0:  BTFSC  xD2.3
054F2:  MOVLW  01
054F4:  MOVLB  7
054F6:  XORWF  x59,W
054F8:  SUBLW  01
054FA:  BNZ   559E
....................       {
....................          Output.B4 = 0;
054FC:  MOVLB  6
054FE:  BCF    xD0.3
....................          // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
05500:  BTFSC  xEA.3
05502:  BRA    559A
05504:  BTFSC  30.1
05506:  BRA    559A
05508:  BTFSC  xDC.3
0550A:  BRA    559A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0550C:  MOVLW  D6
0550E:  MOVWF  FF6
05510:  MOVLW  06
05512:  MOVWF  FF7
05514:  MOVLB  0
05516:  CALL   2436
....................                putc('\n',CH2);
0551A:  MOVLW  0A
0551C:  MOVLB  7
0551E:  MOVWF  x5A
05520:  MOVLB  0
05522:  CALL   23F0
....................                delay_ms(10);
05526:  MOVLW  0A
05528:  MOVLB  7
0552A:  MOVWF  x59
0552C:  MOVLB  0
0552E:  CALL   0848
....................                
....................                SendSMS.B4 =1;
05532:  MOVLB  6
05534:  BSF    xEA.3
....................                fprintf(CH2,"AT+CMGS=\"");
05536:  MOVLW  E0
05538:  MOVWF  FF6
0553A:  MOVLW  06
0553C:  MOVWF  FF7
0553E:  MOVLB  0
05540:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05544:  MOVLW  05
05546:  MOVWF  FEA
05548:  MOVLW  7F
0554A:  MOVWF  FE9
0554C:  CALL   47EC
....................             
....................                fprintf(CH2,"\"");
05550:  MOVLW  22
05552:  MOVLB  7
05554:  MOVWF  x5A
05556:  MOVLB  0
05558:  CALL   23F0
....................                putc('\n',CH2);
0555C:  MOVLW  0A
0555E:  MOVLB  7
05560:  MOVWF  x5A
05562:  MOVLB  0
05564:  CALL   23F0
....................                delay_ms(50);
05568:  MOVLW  32
0556A:  MOVLB  7
0556C:  MOVWF  x59
0556E:  MOVLB  0
05570:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage4);
05574:  MOVLW  05
05576:  MOVWF  FEA
05578:  MOVLW  EE
0557A:  MOVWF  FE9
0557C:  CALL   47EC
....................               putc('\n',CH2);
05580:  MOVLW  0A
05582:  MOVLB  7
05584:  MOVWF  x5A
05586:  MOVLB  0
05588:  CALL   23F0
....................              putc(26,CH2);
0558C:  MOVLW  1A
0558E:  MOVLB  7
05590:  MOVWF  x5A
05592:  MOVLB  0
05594:  CALL   23F0
05598:  MOVLB  6
....................             }
....................       }
0559A:  BRA    55A6
0559C:  MOVLB  7
....................       else
....................       {
....................          Output.B4 = 1;
0559E:  MOVLB  6
055A0:  BSF    xD0.3
....................          SendSMS.B4 =0;
055A2:  BCF    xEA.3
....................          functointest_f =0;
055A4:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
055A6:  BTFSS  xDA.4
055A8:  BRA    56B6
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
055AA:  MOVLW  00
055AC:  BTFSC  xCE.4
055AE:  MOVLW  01
055B0:  MOVLB  7
055B2:  MOVWF  x59
055B4:  MOVLW  00
055B6:  MOVLB  6
055B8:  BTFSC  xD2.4
055BA:  MOVLW  01
055BC:  MOVLB  7
055BE:  XORWF  x59,W
055C0:  SUBLW  01
055C2:  BNZ   55CA
055C4:  MOVLB  6
055C6:  BTFSC  xD4.4
055C8:  BRA    55D0
055CA:  MOVLB  6
055CC:  BTFSS  xDE.4
055CE:  BRA    56AE
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
055D0:  BTFSC  xDC.4
055D2:  BRA    56AC
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
055D4:  BTFSC  xDE.4
055D6:  BRA    55E6
055D8:  MOVF   5E,W
055DA:  SUBLW  0F
055DC:  BNZ   55E6
....................             {
....................                TimeBase1s = 100 ;            //reload again
055DE:  MOVLW  64
055E0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
055E2:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
055E6:  BSF    xDE.4
....................             if(FlashingFlag == 0)
055E8:  BTFSC  1A.1
055EA:  BRA    55F0
....................             {
....................                Output.B5 = 0;           //Flash output1
055EC:  BCF    xD0.4
....................             }
055EE:  BRA    55F2
....................             else
....................             {
....................                Output.B5 = 1;
055F0:  BSF    xD0.4
....................             }
.................... 
....................             if (~AutoTestFlag)
055F2:  BTFSC  1A.4
055F4:  BRA    5612
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
055F6:  BTFSC  xD8.4
055F8:  BRA    5604
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
055FA:  BSF    F89.4
055FC:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
055FE:  BSF    F89.3
05600:  BCF    F92.3
....................                }
05602:  BRA    5612
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
05604:  BTFSS  xD6.4
05606:  BRA    560E
05608:  BSF    F89.4
0560A:  BCF    F92.4
0560C:  BRA    5612
....................                   else output_bit(Pbell,1);                          //Bell
0560E:  BSF    F89.3
05610:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
05612:  BTFSC  xEA.4
05614:  BRA    56AC
05616:  BTFSC  30.1
05618:  BRA    56AC
0561A:  BTFSC  xDC.4
0561C:  BRA    56AC
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0561E:  MOVLW  EA
05620:  MOVWF  FF6
05622:  MOVLW  06
05624:  MOVWF  FF7
05626:  MOVLB  0
05628:  CALL   2436
....................                putc('\n',CH2);
0562C:  MOVLW  0A
0562E:  MOVLB  7
05630:  MOVWF  x5A
05632:  MOVLB  0
05634:  CALL   23F0
....................                delay_ms(10);
05638:  MOVLW  0A
0563A:  MOVLB  7
0563C:  MOVWF  x59
0563E:  MOVLB  0
05640:  CALL   0848
....................                
....................                SendSMS.B5 =1;
05644:  MOVLB  6
05646:  BSF    xEA.4
....................                fprintf(CH2,"AT+CMGS=\"");
05648:  MOVLW  F4
0564A:  MOVWF  FF6
0564C:  MOVLW  06
0564E:  MOVWF  FF7
05650:  MOVLB  0
05652:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05656:  MOVLW  05
05658:  MOVWF  FEA
0565A:  MOVLW  7F
0565C:  MOVWF  FE9
0565E:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
05662:  MOVLW  22
05664:  MOVLB  7
05666:  MOVWF  x5A
05668:  MOVLB  0
0566A:  CALL   23F0
....................                putc('\n',CH2);
0566E:  MOVLW  0A
05670:  MOVLB  7
05672:  MOVWF  x5A
05674:  MOVLB  0
05676:  CALL   23F0
....................                delay_ms(50);
0567A:  MOVLW  32
0567C:  MOVLB  7
0567E:  MOVWF  x59
05680:  MOVLB  0
05682:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage5);
05686:  MOVLW  06
05688:  MOVWF  FEA
0568A:  MOVLW  0E
0568C:  MOVWF  FE9
0568E:  CALL   47EC
....................               putc('\n',CH2);
05692:  MOVLW  0A
05694:  MOVLB  7
05696:  MOVWF  x5A
05698:  MOVLB  0
0569A:  CALL   23F0
....................              putc(26,CH2);
0569E:  MOVLW  1A
056A0:  MOVLB  7
056A2:  MOVWF  x5A
056A4:  MOVLB  0
056A6:  CALL   23F0
056AA:  MOVLB  6
....................             }
....................           }
.................... 
....................       }
056AC:  BRA    56B4
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
056AE:  BTFSS  xD4.4
056B0:  BRA    56B4
056B2:  BCF    xDC.4
....................    }
056B4:  BRA    577A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
056B6:  MOVLW  00
056B8:  BTFSC  xCE.4
056BA:  MOVLW  01
056BC:  MOVLB  7
056BE:  MOVWF  x59
056C0:  MOVLW  00
056C2:  MOVLB  6
056C4:  BTFSC  xD2.4
056C6:  MOVLW  01
056C8:  MOVLB  7
056CA:  XORWF  x59,W
056CC:  SUBLW  01
056CE:  BNZ   5772
....................       {
....................          Output.B5 = 0;
056D0:  MOVLB  6
056D2:  BCF    xD0.4
....................          // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
056D4:  BTFSC  xEA.4
056D6:  BRA    576E
056D8:  BTFSC  30.1
056DA:  BRA    576E
056DC:  BTFSC  xDC.4
056DE:  BRA    576E
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
056E0:  MOVLW  FE
056E2:  MOVWF  FF6
056E4:  MOVLW  06
056E6:  MOVWF  FF7
056E8:  MOVLB  0
056EA:  CALL   2436
....................                putc('\n',CH2);
056EE:  MOVLW  0A
056F0:  MOVLB  7
056F2:  MOVWF  x5A
056F4:  MOVLB  0
056F6:  CALL   23F0
....................                delay_ms(10);
056FA:  MOVLW  0A
056FC:  MOVLB  7
056FE:  MOVWF  x59
05700:  MOVLB  0
05702:  CALL   0848
....................                
....................                SendSMS.B5 =1;
05706:  MOVLB  6
05708:  BSF    xEA.4
....................                fprintf(CH2,"AT+CMGS=\"");
0570A:  MOVLW  08
0570C:  MOVWF  FF6
0570E:  MOVLW  07
05710:  MOVWF  FF7
05712:  MOVLB  0
05714:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05718:  MOVLW  05
0571A:  MOVWF  FEA
0571C:  MOVLW  7F
0571E:  MOVWF  FE9
05720:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
05724:  MOVLW  22
05726:  MOVLB  7
05728:  MOVWF  x5A
0572A:  MOVLB  0
0572C:  CALL   23F0
....................                putc('\n',CH2);
05730:  MOVLW  0A
05732:  MOVLB  7
05734:  MOVWF  x5A
05736:  MOVLB  0
05738:  CALL   23F0
....................                delay_ms(50);
0573C:  MOVLW  32
0573E:  MOVLB  7
05740:  MOVWF  x59
05742:  MOVLB  0
05744:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage5);
05748:  MOVLW  06
0574A:  MOVWF  FEA
0574C:  MOVLW  0E
0574E:  MOVWF  FE9
05750:  CALL   47EC
....................               putc('\n',CH2);
05754:  MOVLW  0A
05756:  MOVLB  7
05758:  MOVWF  x5A
0575A:  MOVLB  0
0575C:  CALL   23F0
....................              putc(26,CH2);
05760:  MOVLW  1A
05762:  MOVLB  7
05764:  MOVWF  x5A
05766:  MOVLB  0
05768:  CALL   23F0
0576C:  MOVLB  6
....................             }
....................       }
0576E:  BRA    577A
05770:  MOVLB  7
....................       else
....................       {
....................          Output.B5 = 1;
05772:  MOVLB  6
05774:  BSF    xD0.4
....................          SendSMS.B5 =0;
05776:  BCF    xEA.4
....................          functointest_f =0;
05778:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
0577A:  BTFSS  xDA.5
0577C:  BRA    588A
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
0577E:  MOVLW  00
05780:  BTFSC  xCE.5
05782:  MOVLW  01
05784:  MOVLB  7
05786:  MOVWF  x59
05788:  MOVLW  00
0578A:  MOVLB  6
0578C:  BTFSC  xD2.5
0578E:  MOVLW  01
05790:  MOVLB  7
05792:  XORWF  x59,W
05794:  SUBLW  01
05796:  BNZ   579E
05798:  MOVLB  6
0579A:  BTFSC  xD4.5
0579C:  BRA    57A4
0579E:  MOVLB  6
057A0:  BTFSS  xDE.5
057A2:  BRA    5882
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
057A4:  BTFSC  xDC.5
057A6:  BRA    5880
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
057A8:  BTFSC  xDE.5
057AA:  BRA    57BA
057AC:  MOVF   5E,W
057AE:  SUBLW  0F
057B0:  BNZ   57BA
....................             {
....................                TimeBase1s = 100 ;            //reload again
057B2:  MOVLW  64
057B4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
057B6:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
057BA:  BSF    xDE.5
....................             if(FlashingFlag == 0)
057BC:  BTFSC  1A.1
057BE:  BRA    57C4
....................             {
....................                Output.B6 = 0;           //Flash output1
057C0:  BCF    xD0.5
....................             }
057C2:  BRA    57C6
....................             else
....................             {
....................                Output.B6 = 1;
057C4:  BSF    xD0.5
....................             }
.................... 
....................             if (~AutoTestFlag)
057C6:  BTFSC  1A.4
057C8:  BRA    57E6
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
057CA:  BTFSC  xD8.5
057CC:  BRA    57D8
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
057CE:  BSF    F89.4
057D0:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
057D2:  BSF    F89.3
057D4:  BCF    F92.3
....................                }
057D6:  BRA    57E6
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
057D8:  BTFSS  xD6.5
057DA:  BRA    57E2
057DC:  BSF    F89.4
057DE:  BCF    F92.4
057E0:  BRA    57E6
....................                   else output_bit(Pbell,1);                          //Bell
057E2:  BSF    F89.3
057E4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
057E6:  BTFSC  xEA.5
057E8:  BRA    5880
057EA:  BTFSC  30.1
057EC:  BRA    5880
057EE:  BTFSC  xDC.5
057F0:  BRA    5880
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
057F2:  MOVLW  12
057F4:  MOVWF  FF6
057F6:  MOVLW  07
057F8:  MOVWF  FF7
057FA:  MOVLB  0
057FC:  CALL   2436
....................                putc('\n',CH2);
05800:  MOVLW  0A
05802:  MOVLB  7
05804:  MOVWF  x5A
05806:  MOVLB  0
05808:  CALL   23F0
....................                delay_ms(10);
0580C:  MOVLW  0A
0580E:  MOVLB  7
05810:  MOVWF  x59
05812:  MOVLB  0
05814:  CALL   0848
....................                
....................                SendSMS.B6 =1;
05818:  MOVLB  6
0581A:  BSF    xEA.5
....................                fprintf(CH2,"AT+CMGS=\"");
0581C:  MOVLW  1C
0581E:  MOVWF  FF6
05820:  MOVLW  07
05822:  MOVWF  FF7
05824:  MOVLB  0
05826:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
0582A:  MOVLW  05
0582C:  MOVWF  FEA
0582E:  MOVLW  7F
05830:  MOVWF  FE9
05832:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
05836:  MOVLW  22
05838:  MOVLB  7
0583A:  MOVWF  x5A
0583C:  MOVLB  0
0583E:  CALL   23F0
....................                putc('\n',CH2);
05842:  MOVLW  0A
05844:  MOVLB  7
05846:  MOVWF  x5A
05848:  MOVLB  0
0584A:  CALL   23F0
....................                delay_ms(50);
0584E:  MOVLW  32
05850:  MOVLB  7
05852:  MOVWF  x59
05854:  MOVLB  0
05856:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage6);
0585A:  MOVLW  06
0585C:  MOVWF  FEA
0585E:  MOVLW  2E
05860:  MOVWF  FE9
05862:  CALL   47EC
....................               putc('\n',CH2);
05866:  MOVLW  0A
05868:  MOVLB  7
0586A:  MOVWF  x5A
0586C:  MOVLB  0
0586E:  CALL   23F0
....................              putc(26,CH2);
05872:  MOVLW  1A
05874:  MOVLB  7
05876:  MOVWF  x5A
05878:  MOVLB  0
0587A:  CALL   23F0
0587E:  MOVLB  6
....................             }
....................           }
.................... 
....................       }
05880:  BRA    5888
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
05882:  BTFSS  xD4.5
05884:  BRA    5888
05886:  BCF    xDC.5
....................    }
05888:  BRA    594E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
0588A:  MOVLW  00
0588C:  BTFSC  xCE.5
0588E:  MOVLW  01
05890:  MOVLB  7
05892:  MOVWF  x59
05894:  MOVLW  00
05896:  MOVLB  6
05898:  BTFSC  xD2.5
0589A:  MOVLW  01
0589C:  MOVLB  7
0589E:  XORWF  x59,W
058A0:  SUBLW  01
058A2:  BNZ   5946
....................       {
....................          Output.B6 = 0;
058A4:  MOVLB  6
058A6:  BCF    xD0.5
....................          // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
058A8:  BTFSC  xEA.5
058AA:  BRA    5942
058AC:  BTFSC  30.1
058AE:  BRA    5942
058B0:  BTFSC  xDC.5
058B2:  BRA    5942
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
058B4:  MOVLW  26
058B6:  MOVWF  FF6
058B8:  MOVLW  07
058BA:  MOVWF  FF7
058BC:  MOVLB  0
058BE:  CALL   2436
....................                putc('\n',CH2);
058C2:  MOVLW  0A
058C4:  MOVLB  7
058C6:  MOVWF  x5A
058C8:  MOVLB  0
058CA:  CALL   23F0
....................                delay_ms(10);
058CE:  MOVLW  0A
058D0:  MOVLB  7
058D2:  MOVWF  x59
058D4:  MOVLB  0
058D6:  CALL   0848
....................                
....................                SendSMS.B6 =1;
058DA:  MOVLB  6
058DC:  BSF    xEA.5
....................                fprintf(CH2,"AT+CMGS=\"");
058DE:  MOVLW  30
058E0:  MOVWF  FF6
058E2:  MOVLW  07
058E4:  MOVWF  FF7
058E6:  MOVLB  0
058E8:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
058EC:  MOVLW  05
058EE:  MOVWF  FEA
058F0:  MOVLW  7F
058F2:  MOVWF  FE9
058F4:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
058F8:  MOVLW  22
058FA:  MOVLB  7
058FC:  MOVWF  x5A
058FE:  MOVLB  0
05900:  CALL   23F0
....................                putc('\n',CH2);
05904:  MOVLW  0A
05906:  MOVLB  7
05908:  MOVWF  x5A
0590A:  MOVLB  0
0590C:  CALL   23F0
....................                delay_ms(50);
05910:  MOVLW  32
05912:  MOVLB  7
05914:  MOVWF  x59
05916:  MOVLB  0
05918:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage6);
0591C:  MOVLW  06
0591E:  MOVWF  FEA
05920:  MOVLW  2E
05922:  MOVWF  FE9
05924:  CALL   47EC
....................               putc('\n',CH2);
05928:  MOVLW  0A
0592A:  MOVLB  7
0592C:  MOVWF  x5A
0592E:  MOVLB  0
05930:  CALL   23F0
....................              putc(26,CH2);
05934:  MOVLW  1A
05936:  MOVLB  7
05938:  MOVWF  x5A
0593A:  MOVLB  0
0593C:  CALL   23F0
05940:  MOVLB  6
....................             }
....................       }
05942:  BRA    594E
05944:  MOVLB  7
....................       else
....................       {
....................          Output.B6 = 1;
05946:  MOVLB  6
05948:  BSF    xD0.5
....................          SendSMS.B6 =0;
0594A:  BCF    xEA.5
....................          functointest_f =0;
0594C:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
0594E:  BTFSS  xDA.6
05950:  BRA    5A5E
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
05952:  MOVLW  00
05954:  BTFSC  xCE.6
05956:  MOVLW  01
05958:  MOVLB  7
0595A:  MOVWF  x59
0595C:  MOVLW  00
0595E:  MOVLB  6
05960:  BTFSC  xD2.6
05962:  MOVLW  01
05964:  MOVLB  7
05966:  XORWF  x59,W
05968:  SUBLW  01
0596A:  BNZ   5972
0596C:  MOVLB  6
0596E:  BTFSC  xD4.6
05970:  BRA    5978
05972:  MOVLB  6
05974:  BTFSS  xDE.6
05976:  BRA    5A56
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
05978:  BTFSC  xDC.6
0597A:  BRA    5A54
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0597C:  BTFSC  xDE.6
0597E:  BRA    598E
05980:  MOVF   5E,W
05982:  SUBLW  0F
05984:  BNZ   598E
....................             {
....................                TimeBase1s = 100 ;            //reload again
05986:  MOVLW  64
05988:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0598A:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
0598E:  BSF    xDE.6
....................             if(FlashingFlag == 0)
05990:  BTFSC  1A.1
05992:  BRA    5998
....................             {
....................                Output.B7 = 0;           //Flash output1
05994:  BCF    xD0.6
....................             }
05996:  BRA    599A
....................             else
....................             {
....................                Output.B7 = 1;
05998:  BSF    xD0.6
....................             }
.................... 
....................             if (~AutoTestFlag)
0599A:  BTFSC  1A.4
0599C:  BRA    59BA
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
0599E:  BTFSC  xD8.6
059A0:  BRA    59AC
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
059A2:  BSF    F89.4
059A4:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
059A6:  BSF    F89.3
059A8:  BCF    F92.3
....................                }
059AA:  BRA    59BA
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
059AC:  BTFSS  xD6.6
059AE:  BRA    59B6
059B0:  BSF    F89.4
059B2:  BCF    F92.4
059B4:  BRA    59BA
....................                   else output_bit(Pbell,1);                          //Bell
059B6:  BSF    F89.3
059B8:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
059BA:  BTFSC  xEA.6
059BC:  BRA    5A54
059BE:  BTFSC  30.1
059C0:  BRA    5A54
059C2:  BTFSC  xDC.6
059C4:  BRA    5A54
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
059C6:  MOVLW  3A
059C8:  MOVWF  FF6
059CA:  MOVLW  07
059CC:  MOVWF  FF7
059CE:  MOVLB  0
059D0:  CALL   2436
....................                putc('\n',CH2);
059D4:  MOVLW  0A
059D6:  MOVLB  7
059D8:  MOVWF  x5A
059DA:  MOVLB  0
059DC:  CALL   23F0
....................                delay_ms(10);
059E0:  MOVLW  0A
059E2:  MOVLB  7
059E4:  MOVWF  x59
059E6:  MOVLB  0
059E8:  CALL   0848
....................                
....................                SendSMS.B7 =1;
059EC:  MOVLB  6
059EE:  BSF    xEA.6
....................                fprintf(CH2,"AT+CMGS=\"");
059F0:  MOVLW  44
059F2:  MOVWF  FF6
059F4:  MOVLW  07
059F6:  MOVWF  FF7
059F8:  MOVLB  0
059FA:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
059FE:  MOVLW  05
05A00:  MOVWF  FEA
05A02:  MOVLW  7F
05A04:  MOVWF  FE9
05A06:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
05A0A:  MOVLW  22
05A0C:  MOVLB  7
05A0E:  MOVWF  x5A
05A10:  MOVLB  0
05A12:  CALL   23F0
....................                putc('\n',CH2);
05A16:  MOVLW  0A
05A18:  MOVLB  7
05A1A:  MOVWF  x5A
05A1C:  MOVLB  0
05A1E:  CALL   23F0
....................                delay_ms(50);
05A22:  MOVLW  32
05A24:  MOVLB  7
05A26:  MOVWF  x59
05A28:  MOVLB  0
05A2A:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage7);  
05A2E:  MOVLW  06
05A30:  MOVWF  FEA
05A32:  MOVLW  4E
05A34:  MOVWF  FE9
05A36:  CALL   47EC
....................               putc('\n',CH2);
05A3A:  MOVLW  0A
05A3C:  MOVLB  7
05A3E:  MOVWF  x5A
05A40:  MOVLB  0
05A42:  CALL   23F0
....................              putc(26,CH2);
05A46:  MOVLW  1A
05A48:  MOVLB  7
05A4A:  MOVWF  x5A
05A4C:  MOVLB  0
05A4E:  CALL   23F0
05A52:  MOVLB  6
....................             }
....................           }
.................... 
....................       }
05A54:  BRA    5A5C
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
05A56:  BTFSS  xD4.6
05A58:  BRA    5A5C
05A5A:  BCF    xDC.6
....................    }
05A5C:  BRA    5B22
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
05A5E:  MOVLW  00
05A60:  BTFSC  xCE.6
05A62:  MOVLW  01
05A64:  MOVLB  7
05A66:  MOVWF  x59
05A68:  MOVLW  00
05A6A:  MOVLB  6
05A6C:  BTFSC  xD2.6
05A6E:  MOVLW  01
05A70:  MOVLB  7
05A72:  XORWF  x59,W
05A74:  SUBLW  01
05A76:  BNZ   5B1A
....................       {
....................          Output.B7 = 0;
05A78:  MOVLB  6
05A7A:  BCF    xD0.6
....................          // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
05A7C:  BTFSC  xEA.6
05A7E:  BRA    5B16
05A80:  BTFSC  30.1
05A82:  BRA    5B16
05A84:  BTFSC  xDC.6
05A86:  BRA    5B16
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05A88:  MOVLW  4E
05A8A:  MOVWF  FF6
05A8C:  MOVLW  07
05A8E:  MOVWF  FF7
05A90:  MOVLB  0
05A92:  CALL   2436
....................                putc('\n',CH2);
05A96:  MOVLW  0A
05A98:  MOVLB  7
05A9A:  MOVWF  x5A
05A9C:  MOVLB  0
05A9E:  CALL   23F0
....................                delay_ms(10);
05AA2:  MOVLW  0A
05AA4:  MOVLB  7
05AA6:  MOVWF  x59
05AA8:  MOVLB  0
05AAA:  CALL   0848
....................                
....................                SendSMS.B7 =1;
05AAE:  MOVLB  6
05AB0:  BSF    xEA.6
....................                fprintf(CH2,"AT+CMGS=\"");
05AB2:  MOVLW  58
05AB4:  MOVWF  FF6
05AB6:  MOVLW  07
05AB8:  MOVWF  FF7
05ABA:  MOVLB  0
05ABC:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05AC0:  MOVLW  05
05AC2:  MOVWF  FEA
05AC4:  MOVLW  7F
05AC6:  MOVWF  FE9
05AC8:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
05ACC:  MOVLW  22
05ACE:  MOVLB  7
05AD0:  MOVWF  x5A
05AD2:  MOVLB  0
05AD4:  CALL   23F0
....................                putc('\n',CH2);
05AD8:  MOVLW  0A
05ADA:  MOVLB  7
05ADC:  MOVWF  x5A
05ADE:  MOVLB  0
05AE0:  CALL   23F0
....................                delay_ms(50);
05AE4:  MOVLW  32
05AE6:  MOVLB  7
05AE8:  MOVWF  x59
05AEA:  MOVLB  0
05AEC:  CALL   0848
....................               
....................               fprintf(CH2,SMS_Massage7);  
05AF0:  MOVLW  06
05AF2:  MOVWF  FEA
05AF4:  MOVLW  4E
05AF6:  MOVWF  FE9
05AF8:  CALL   47EC
....................               putc('\n',CH2);
05AFC:  MOVLW  0A
05AFE:  MOVLB  7
05B00:  MOVWF  x5A
05B02:  MOVLB  0
05B04:  CALL   23F0
....................              putc(26,CH2);
05B08:  MOVLW  1A
05B0A:  MOVLB  7
05B0C:  MOVWF  x5A
05B0E:  MOVLB  0
05B10:  CALL   23F0
05B14:  MOVLB  6
....................             }
....................       }
05B16:  BRA    5B22
05B18:  MOVLB  7
....................       else
....................       {
....................          Output.B7 = 1;
05B1A:  MOVLB  6
05B1C:  BSF    xD0.6
....................          SendSMS.B7 =0;
05B1E:  BCF    xEA.6
....................          functointest_f =0;
05B20:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
05B22:  BTFSS  xDA.7
05B24:  BRA    5C32
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
05B26:  MOVLW  00
05B28:  BTFSC  xCE.7
05B2A:  MOVLW  01
05B2C:  MOVLB  7
05B2E:  MOVWF  x59
05B30:  MOVLW  00
05B32:  MOVLB  6
05B34:  BTFSC  xD2.7
05B36:  MOVLW  01
05B38:  MOVLB  7
05B3A:  XORWF  x59,W
05B3C:  SUBLW  01
05B3E:  BNZ   5B46
05B40:  MOVLB  6
05B42:  BTFSC  xD4.7
05B44:  BRA    5B4C
05B46:  MOVLB  6
05B48:  BTFSS  xDE.7
05B4A:  BRA    5C2A
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
05B4C:  BTFSC  xDC.7
05B4E:  BRA    5C28
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05B50:  BTFSC  xDE.7
05B52:  BRA    5B62
05B54:  MOVF   5E,W
05B56:  SUBLW  0F
05B58:  BNZ   5B62
....................             {
....................                TimeBase1s = 100 ;            //reload again
05B5A:  MOVLW  64
05B5C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05B5E:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
05B62:  BSF    xDE.7
....................             if(FlashingFlag == 0)
05B64:  BTFSC  1A.1
05B66:  BRA    5B6C
....................             {
....................                Output.B8 = 0;           //Flash output1
05B68:  BCF    xD0.7
....................             }
05B6A:  BRA    5B6E
....................             else
....................             {
....................                Output.B8 = 1;
05B6C:  BSF    xD0.7
....................             }
.................... 
....................             if (~AutoTestFlag)
05B6E:  BTFSC  1A.4
05B70:  BRA    5B8E
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
05B72:  BTFSC  xD8.7
05B74:  BRA    5B80
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05B76:  BSF    F89.4
05B78:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05B7A:  BSF    F89.3
05B7C:  BCF    F92.3
....................                }
05B7E:  BRA    5B8E
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
05B80:  BTFSS  xD6.7
05B82:  BRA    5B8A
05B84:  BSF    F89.4
05B86:  BCF    F92.4
05B88:  BRA    5B8E
....................                   else output_bit(Pbell,1);                          //Bell
05B8A:  BSF    F89.3
05B8C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05B8E:  BTFSC  xEA.7
05B90:  BRA    5C28
05B92:  BTFSC  30.1
05B94:  BRA    5C28
05B96:  BTFSC  xDC.7
05B98:  BRA    5C28
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05B9A:  MOVLW  62
05B9C:  MOVWF  FF6
05B9E:  MOVLW  07
05BA0:  MOVWF  FF7
05BA2:  MOVLB  0
05BA4:  CALL   2436
....................             putc('\n',CH2);
05BA8:  MOVLW  0A
05BAA:  MOVLB  7
05BAC:  MOVWF  x5A
05BAE:  MOVLB  0
05BB0:  CALL   23F0
....................             delay_ms(10);
05BB4:  MOVLW  0A
05BB6:  MOVLB  7
05BB8:  MOVWF  x59
05BBA:  MOVLB  0
05BBC:  CALL   0848
....................             
....................             SendSMS.B8 =1;
05BC0:  MOVLB  6
05BC2:  BSF    xEA.7
....................             fprintf(CH2,"AT+CMGS=\"");
05BC4:  MOVLW  6C
05BC6:  MOVWF  FF6
05BC8:  MOVLW  07
05BCA:  MOVWF  FF7
05BCC:  MOVLB  0
05BCE:  CALL   2436
....................             fprintf(CH2,sms_phonenumber);
05BD2:  MOVLW  05
05BD4:  MOVWF  FEA
05BD6:  MOVLW  7F
05BD8:  MOVWF  FE9
05BDA:  CALL   47EC
....................             
....................             fprintf(CH2,"\"");
05BDE:  MOVLW  22
05BE0:  MOVLB  7
05BE2:  MOVWF  x5A
05BE4:  MOVLB  0
05BE6:  CALL   23F0
....................             putc('\n',CH2);
05BEA:  MOVLW  0A
05BEC:  MOVLB  7
05BEE:  MOVWF  x5A
05BF0:  MOVLB  0
05BF2:  CALL   23F0
....................             delay_ms(50);
05BF6:  MOVLW  32
05BF8:  MOVLB  7
05BFA:  MOVWF  x59
05BFC:  MOVLB  0
05BFE:  CALL   0848
....................            
....................            printf(SMS_Massage8);  
05C02:  MOVLW  06
05C04:  MOVWF  FEA
05C06:  MOVLW  6E
05C08:  MOVWF  FE9
05C0A:  CALL   47EC
....................            putc('\n',CH2);
05C0E:  MOVLW  0A
05C10:  MOVLB  7
05C12:  MOVWF  x5A
05C14:  MOVLB  0
05C16:  CALL   23F0
....................           putc(26,CH2);
05C1A:  MOVLW  1A
05C1C:  MOVLB  7
05C1E:  MOVWF  x5A
05C20:  MOVLB  0
05C22:  CALL   23F0
05C26:  MOVLB  6
....................          }
....................        }
.................... 
....................       }
05C28:  BRA    5C30
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
05C2A:  BTFSS  xD4.7
05C2C:  BRA    5C30
05C2E:  BCF    xDC.7
....................    }
05C30:  BRA    5CF6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
05C32:  MOVLW  00
05C34:  BTFSC  xCE.7
05C36:  MOVLW  01
05C38:  MOVLB  7
05C3A:  MOVWF  x59
05C3C:  MOVLW  00
05C3E:  MOVLB  6
05C40:  BTFSC  xD2.7
05C42:  MOVLW  01
05C44:  MOVLB  7
05C46:  XORWF  x59,W
05C48:  SUBLW  01
05C4A:  BNZ   5CEE
....................       {
....................          Output.B8 = 0;
05C4C:  MOVLB  6
05C4E:  BCF    xD0.7
....................          // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
05C50:  BTFSC  xEA.7
05C52:  BRA    5CEA
05C54:  BTFSC  30.1
05C56:  BRA    5CEA
05C58:  BTFSC  xDC.7
05C5A:  BRA    5CEA
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05C5C:  MOVLW  76
05C5E:  MOVWF  FF6
05C60:  MOVLW  07
05C62:  MOVWF  FF7
05C64:  MOVLB  0
05C66:  CALL   2436
....................             putc('\n',CH2);
05C6A:  MOVLW  0A
05C6C:  MOVLB  7
05C6E:  MOVWF  x5A
05C70:  MOVLB  0
05C72:  CALL   23F0
....................             delay_ms(10);
05C76:  MOVLW  0A
05C78:  MOVLB  7
05C7A:  MOVWF  x59
05C7C:  MOVLB  0
05C7E:  CALL   0848
....................             
....................             SendSMS.B8 =1;
05C82:  MOVLB  6
05C84:  BSF    xEA.7
....................             fprintf(CH2,"AT+CMGS=\"");
05C86:  MOVLW  80
05C88:  MOVWF  FF6
05C8A:  MOVLW  07
05C8C:  MOVWF  FF7
05C8E:  MOVLB  0
05C90:  CALL   2436
....................             fprintf(CH2,sms_phonenumber);
05C94:  MOVLW  05
05C96:  MOVWF  FEA
05C98:  MOVLW  7F
05C9A:  MOVWF  FE9
05C9C:  CALL   47EC
....................             
....................             fprintf(CH2,"\"");
05CA0:  MOVLW  22
05CA2:  MOVLB  7
05CA4:  MOVWF  x5A
05CA6:  MOVLB  0
05CA8:  CALL   23F0
....................             putc('\n',CH2);
05CAC:  MOVLW  0A
05CAE:  MOVLB  7
05CB0:  MOVWF  x5A
05CB2:  MOVLB  0
05CB4:  CALL   23F0
....................             delay_ms(50);
05CB8:  MOVLW  32
05CBA:  MOVLB  7
05CBC:  MOVWF  x59
05CBE:  MOVLB  0
05CC0:  CALL   0848
....................            
....................            printf(SMS_Massage8);  
05CC4:  MOVLW  06
05CC6:  MOVWF  FEA
05CC8:  MOVLW  6E
05CCA:  MOVWF  FE9
05CCC:  CALL   47EC
....................            putc('\n',CH2);
05CD0:  MOVLW  0A
05CD2:  MOVLB  7
05CD4:  MOVWF  x5A
05CD6:  MOVLB  0
05CD8:  CALL   23F0
....................           putc(26,CH2);
05CDC:  MOVLW  1A
05CDE:  MOVLB  7
05CE0:  MOVWF  x5A
05CE2:  MOVLB  0
05CE4:  CALL   23F0
05CE8:  MOVLB  6
....................          }
....................       }
05CEA:  BRA    5CF6
05CEC:  MOVLB  7
....................       else
....................       {
....................          Output.B8 = 1;
05CEE:  MOVLB  6
05CF0:  BSF    xD0.7
....................          SendSMS.B8 =0;
05CF2:  BCF    xEA.7
....................          functointest_f =0;
05CF4:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
05CF6:  BTFSS  xDB.0
05CF8:  BRA    5E06
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
05CFA:  MOVLW  00
05CFC:  BTFSC  xCF.0
05CFE:  MOVLW  01
05D00:  MOVLB  7
05D02:  MOVWF  x59
05D04:  MOVLW  00
05D06:  MOVLB  6
05D08:  BTFSC  xD3.0
05D0A:  MOVLW  01
05D0C:  MOVLB  7
05D0E:  XORWF  x59,W
05D10:  SUBLW  01
05D12:  BNZ   5D1A
05D14:  MOVLB  6
05D16:  BTFSC  xD5.0
05D18:  BRA    5D20
05D1A:  MOVLB  6
05D1C:  BTFSS  xDF.0
05D1E:  BRA    5DFE
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
05D20:  BTFSC  xDD.0
05D22:  BRA    5DFC
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05D24:  BTFSC  xDF.0
05D26:  BRA    5D36
05D28:  MOVF   5E,W
05D2A:  SUBLW  0F
05D2C:  BNZ   5D36
....................             {
....................                TimeBase1s = 100 ;            //reload again
05D2E:  MOVLW  64
05D30:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05D32:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
05D36:  BSF    xDF.0
....................             if(FlashingFlag == 0)
05D38:  BTFSC  1A.1
05D3A:  BRA    5D40
....................             {
....................                Output.B9 = 0;           //Flash output1
05D3C:  BCF    xD1.0
....................             }
05D3E:  BRA    5D42
....................             else
....................             {
....................                Output.B9 = 1;
05D40:  BSF    xD1.0
....................             }
.................... 
....................             if (~AutoTestFlag)
05D42:  BTFSC  1A.4
05D44:  BRA    5D62
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
05D46:  BTFSC  xD9.0
05D48:  BRA    5D54
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05D4A:  BSF    F89.4
05D4C:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05D4E:  BSF    F89.3
05D50:  BCF    F92.3
....................                }
05D52:  BRA    5D62
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
05D54:  BTFSS  xD7.0
05D56:  BRA    5D5E
05D58:  BSF    F89.4
05D5A:  BCF    F92.4
05D5C:  BRA    5D62
....................                   else output_bit(Pbell,1);                          //Bell
05D5E:  BSF    F89.3
05D60:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
05D62:  BTFSC  xEB.0
05D64:  BRA    5DFC
05D66:  BTFSC  30.1
05D68:  BRA    5DFC
05D6A:  BTFSC  xDD.0
05D6C:  BRA    5DFC
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05D6E:  MOVLW  8A
05D70:  MOVWF  FF6
05D72:  MOVLW  07
05D74:  MOVWF  FF7
05D76:  MOVLB  0
05D78:  CALL   2436
....................                putc('\n',CH2);
05D7C:  MOVLW  0A
05D7E:  MOVLB  7
05D80:  MOVWF  x5A
05D82:  MOVLB  0
05D84:  CALL   23F0
....................                delay_ms(10);
05D88:  MOVLW  0A
05D8A:  MOVLB  7
05D8C:  MOVWF  x59
05D8E:  MOVLB  0
05D90:  CALL   0848
....................                
....................                SendSMS.B9 =1;
05D94:  MOVLB  6
05D96:  BSF    xEB.0
....................                fprintf(CH2,"AT+CMGS=\"");
05D98:  MOVLW  94
05D9A:  MOVWF  FF6
05D9C:  MOVLW  07
05D9E:  MOVWF  FF7
05DA0:  MOVLB  0
05DA2:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05DA6:  MOVLW  05
05DA8:  MOVWF  FEA
05DAA:  MOVLW  7F
05DAC:  MOVWF  FE9
05DAE:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
05DB2:  MOVLW  22
05DB4:  MOVLB  7
05DB6:  MOVWF  x5A
05DB8:  MOVLB  0
05DBA:  CALL   23F0
....................                putc('\n',CH2);
05DBE:  MOVLW  0A
05DC0:  MOVLB  7
05DC2:  MOVWF  x5A
05DC4:  MOVLB  0
05DC6:  CALL   23F0
....................                delay_ms(50);
05DCA:  MOVLW  32
05DCC:  MOVLB  7
05DCE:  MOVWF  x59
05DD0:  MOVLB  0
05DD2:  CALL   0848
....................               
....................               printf(SMS_Massage9);  
05DD6:  MOVLW  06
05DD8:  MOVWF  FEA
05DDA:  MOVLW  8E
05DDC:  MOVWF  FE9
05DDE:  CALL   47EC
....................               putc('\n',CH2);
05DE2:  MOVLW  0A
05DE4:  MOVLB  7
05DE6:  MOVWF  x5A
05DE8:  MOVLB  0
05DEA:  CALL   23F0
....................               putc(26,CH2);
05DEE:  MOVLW  1A
05DF0:  MOVLB  7
05DF2:  MOVWF  x5A
05DF4:  MOVLB  0
05DF6:  CALL   23F0
05DFA:  MOVLB  6
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
05DFC:  BRA    5E04
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
05DFE:  BTFSS  xD5.0
05E00:  BRA    5E04
05E02:  BCF    xDD.0
....................    }
05E04:  BRA    5ECA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
05E06:  MOVLW  00
05E08:  BTFSC  xCF.0
05E0A:  MOVLW  01
05E0C:  MOVLB  7
05E0E:  MOVWF  x59
05E10:  MOVLW  00
05E12:  MOVLB  6
05E14:  BTFSC  xD3.0
05E16:  MOVLW  01
05E18:  MOVLB  7
05E1A:  XORWF  x59,W
05E1C:  SUBLW  01
05E1E:  BNZ   5EC2
....................       {
....................          Output.B9 = 0;
05E20:  MOVLB  6
05E22:  BCF    xD1.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
05E24:  BTFSC  xEB.0
05E26:  BRA    5EBE
05E28:  BTFSC  30.1
05E2A:  BRA    5EBE
05E2C:  BTFSC  xDD.0
05E2E:  BRA    5EBE
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
05E30:  MOVLW  9E
05E32:  MOVWF  FF6
05E34:  MOVLW  07
05E36:  MOVWF  FF7
05E38:  MOVLB  0
05E3A:  CALL   2436
....................             putc('\n',CH2);
05E3E:  MOVLW  0A
05E40:  MOVLB  7
05E42:  MOVWF  x5A
05E44:  MOVLB  0
05E46:  CALL   23F0
....................             delay_ms(10);
05E4A:  MOVLW  0A
05E4C:  MOVLB  7
05E4E:  MOVWF  x59
05E50:  MOVLB  0
05E52:  CALL   0848
....................             
....................             SendSMS.B9 =1;
05E56:  MOVLB  6
05E58:  BSF    xEB.0
....................             fprintf(CH2,"AT+CMGS=\"");
05E5A:  MOVLW  A8
05E5C:  MOVWF  FF6
05E5E:  MOVLW  07
05E60:  MOVWF  FF7
05E62:  MOVLB  0
05E64:  CALL   2436
....................             fprintf(CH2,sms_phonenumber);
05E68:  MOVLW  05
05E6A:  MOVWF  FEA
05E6C:  MOVLW  7F
05E6E:  MOVWF  FE9
05E70:  CALL   47EC
....................             
....................             fprintf(CH2,"\"");
05E74:  MOVLW  22
05E76:  MOVLB  7
05E78:  MOVWF  x5A
05E7A:  MOVLB  0
05E7C:  CALL   23F0
....................             putc('\n',CH2);
05E80:  MOVLW  0A
05E82:  MOVLB  7
05E84:  MOVWF  x5A
05E86:  MOVLB  0
05E88:  CALL   23F0
....................             delay_ms(50);
05E8C:  MOVLW  32
05E8E:  MOVLB  7
05E90:  MOVWF  x59
05E92:  MOVLB  0
05E94:  CALL   0848
....................            
....................            printf(SMS_Massage9);  
05E98:  MOVLW  06
05E9A:  MOVWF  FEA
05E9C:  MOVLW  8E
05E9E:  MOVWF  FE9
05EA0:  CALL   47EC
....................            putc('\n',CH2);
05EA4:  MOVLW  0A
05EA6:  MOVLB  7
05EA8:  MOVWF  x5A
05EAA:  MOVLB  0
05EAC:  CALL   23F0
....................            putc(26,CH2);
05EB0:  MOVLW  1A
05EB2:  MOVLB  7
05EB4:  MOVWF  x5A
05EB6:  MOVLB  0
05EB8:  CALL   23F0
05EBC:  MOVLB  6
....................          }
....................          ///////////////////////////////////
....................       }
05EBE:  BRA    5ECA
05EC0:  MOVLB  7
....................       else
....................       {
....................          Output.B9 = 1;
05EC2:  MOVLB  6
05EC4:  BSF    xD1.0
....................          SendSMS.B9 =0;
05EC6:  BCF    xEB.0
....................          functointest_f =0;
05EC8:  BCF    30.1
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
05ECA:  BTFSS  xDB.1
05ECC:  BRA    5FDA
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
05ECE:  MOVLW  00
05ED0:  BTFSC  xCF.1
05ED2:  MOVLW  01
05ED4:  MOVLB  7
05ED6:  MOVWF  x59
05ED8:  MOVLW  00
05EDA:  MOVLB  6
05EDC:  BTFSC  xD3.1
05EDE:  MOVLW  01
05EE0:  MOVLB  7
05EE2:  XORWF  x59,W
05EE4:  SUBLW  01
05EE6:  BNZ   5EEE
05EE8:  MOVLB  6
05EEA:  BTFSC  xD5.1
05EEC:  BRA    5EF4
05EEE:  MOVLB  6
05EF0:  BTFSS  xDF.1
05EF2:  BRA    5FD2
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
05EF4:  BTFSC  xDD.1
05EF6:  BRA    5FD0
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
05EF8:  BTFSC  xDF.1
05EFA:  BRA    5F0A
05EFC:  MOVF   5E,W
05EFE:  SUBLW  0F
05F00:  BNZ   5F0A
....................             {
....................                TimeBase1s = 100 ;            //reload again
05F02:  MOVLW  64
05F04:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
05F06:  MOVFF  5F,1D
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
05F0A:  BSF    xDF.1
....................             if(FlashingFlag == 0)
05F0C:  BTFSC  1A.1
05F0E:  BRA    5F14
....................             {
....................                Output.B10 = 0;           //Flash output1
05F10:  BCF    xD1.1
....................             }
05F12:  BRA    5F16
....................             else
....................             {
....................                Output.B10 = 1;
05F14:  BSF    xD1.1
....................             }
.................... 
....................             if (~AutoTestFlag)
05F16:  BTFSC  1A.4
05F18:  BRA    5F36
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
05F1A:  BTFSC  xD9.1
05F1C:  BRA    5F28
....................                {
....................                   output_bit(Pbuzzer,1);   //Buzzer
05F1E:  BSF    F89.4
05F20:  BCF    F92.4
....................                   output_bit(Pbell,1);     //Bell
05F22:  BSF    F89.3
05F24:  BCF    F92.3
....................                }
05F26:  BRA    5F36
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
05F28:  BTFSS  xD7.1
05F2A:  BRA    5F32
05F2C:  BSF    F89.4
05F2E:  BCF    F92.4
05F30:  BRA    5F36
....................                   else output_bit(Pbell,1);                          //Bell
05F32:  BSF    F89.3
05F34:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
05F36:  BTFSC  xEB.1
05F38:  BRA    5FD0
05F3A:  BTFSC  30.1
05F3C:  BRA    5FD0
05F3E:  BTFSC  xDD.1
05F40:  BRA    5FD0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
05F42:  MOVLW  B2
05F44:  MOVWF  FF6
05F46:  MOVLW  07
05F48:  MOVWF  FF7
05F4A:  MOVLB  0
05F4C:  CALL   2436
....................                putc('\n',CH2);
05F50:  MOVLW  0A
05F52:  MOVLB  7
05F54:  MOVWF  x5A
05F56:  MOVLB  0
05F58:  CALL   23F0
....................                delay_ms(10);
05F5C:  MOVLW  0A
05F5E:  MOVLB  7
05F60:  MOVWF  x59
05F62:  MOVLB  0
05F64:  CALL   0848
....................                
....................                SendSMS.B10 =1;
05F68:  MOVLB  6
05F6A:  BSF    xEB.1
....................                fprintf(CH2,"AT+CMGS=\"");
05F6C:  MOVLW  BC
05F6E:  MOVWF  FF6
05F70:  MOVLW  07
05F72:  MOVWF  FF7
05F74:  MOVLB  0
05F76:  CALL   2436
....................                fprintf(CH2,sms_phonenumber);
05F7A:  MOVLW  05
05F7C:  MOVWF  FEA
05F7E:  MOVLW  7F
05F80:  MOVWF  FE9
05F82:  CALL   47EC
....................                
....................                fprintf(CH2,"\"");
05F86:  MOVLW  22
05F88:  MOVLB  7
05F8A:  MOVWF  x5A
05F8C:  MOVLB  0
05F8E:  CALL   23F0
....................                putc('\n',CH2);
05F92:  MOVLW  0A
05F94:  MOVLB  7
05F96:  MOVWF  x5A
05F98:  MOVLB  0
05F9A:  CALL   23F0
....................                delay_ms(50);
05F9E:  MOVLW  32
05FA0:  MOVLB  7
05FA2:  MOVWF  x59
05FA4:  MOVLB  0
05FA6:  CALL   0848
....................               
....................               printf(SMS_Massage10);  
05FAA:  MOVLW  06
05FAC:  MOVWF  FEA
05FAE:  MOVLW  AE
05FB0:  MOVWF  FE9
05FB2:  CALL   47EC
....................               putc('\n',CH2);
05FB6:  MOVLW  0A
05FB8:  MOVLB  7
05FBA:  MOVWF  x5A
05FBC:  MOVLB  0
05FBE:  CALL   23F0
....................               putc(26,CH2);
05FC2:  MOVLW  1A
05FC4:  MOVLB  7
05FC6:  MOVWF  x5A
05FC8:  MOVLB  0
05FCA:  CALL   23F0
05FCE:  MOVLB  6
....................             }
....................             ///////////////////////////////////
....................           }
.................... 
....................       }
05FD0:  BRA    5FD8
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
05FD2:  BTFSS  xD5.1
05FD4:  BRA    5FD8
05FD6:  BCF    xDD.1
....................    }
05FD8:  BRA    609E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
05FDA:  MOVLW  00
05FDC:  BTFSC  xCF.1
05FDE:  MOVLW  01
05FE0:  MOVLB  7
05FE2:  MOVWF  x59
05FE4:  MOVLW  00
05FE6:  MOVLB  6
05FE8:  BTFSC  xD3.1
05FEA:  MOVLW  01
05FEC:  MOVLB  7
05FEE:  XORWF  x59,W
05FF0:  SUBLW  01
05FF2:  BNZ   6096
....................       {
....................          Output.B10 = 0;
05FF4:  MOVLB  6
05FF6:  BCF    xD1.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
05FF8:  BTFSC  xEB.1
05FFA:  BRA    6092
05FFC:  BTFSC  30.1
05FFE:  BRA    6092
06000:  BTFSC  xDD.1
06002:  BRA    6092
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
06004:  MOVLW  C6
06006:  MOVWF  FF6
06008:  MOVLW  07
0600A:  MOVWF  FF7
0600C:  MOVLB  0
0600E:  CALL   2436
....................             putc('\n',CH2);
06012:  MOVLW  0A
06014:  MOVLB  7
06016:  MOVWF  x5A
06018:  MOVLB  0
0601A:  CALL   23F0
....................             delay_ms(10);
0601E:  MOVLW  0A
06020:  MOVLB  7
06022:  MOVWF  x59
06024:  MOVLB  0
06026:  CALL   0848
....................             
....................             SendSMS.B10 =1;
0602A:  MOVLB  6
0602C:  BSF    xEB.1
....................             fprintf(CH2,"AT+CMGS=\"");
0602E:  MOVLW  D0
06030:  MOVWF  FF6
06032:  MOVLW  07
06034:  MOVWF  FF7
06036:  MOVLB  0
06038:  CALL   2436
....................             fprintf(CH2,sms_phonenumber);
0603C:  MOVLW  05
0603E:  MOVWF  FEA
06040:  MOVLW  7F
06042:  MOVWF  FE9
06044:  CALL   47EC
....................             
....................             fprintf(CH2,"\"");
06048:  MOVLW  22
0604A:  MOVLB  7
0604C:  MOVWF  x5A
0604E:  MOVLB  0
06050:  CALL   23F0
....................             putc('\n',CH2);
06054:  MOVLW  0A
06056:  MOVLB  7
06058:  MOVWF  x5A
0605A:  MOVLB  0
0605C:  CALL   23F0
....................             delay_ms(50);
06060:  MOVLW  32
06062:  MOVLB  7
06064:  MOVWF  x59
06066:  MOVLB  0
06068:  CALL   0848
....................            
....................            printf(SMS_Massage10);  
0606C:  MOVLW  06
0606E:  MOVWF  FEA
06070:  MOVLW  AE
06072:  MOVWF  FE9
06074:  CALL   47EC
....................            putc('\n',CH2);
06078:  MOVLW  0A
0607A:  MOVLB  7
0607C:  MOVWF  x5A
0607E:  MOVLB  0
06080:  CALL   23F0
....................            putc(26,CH2);
06084:  MOVLW  1A
06086:  MOVLB  7
06088:  MOVWF  x5A
0608A:  MOVLB  0
0608C:  CALL   23F0
06090:  MOVLB  6
....................          }
....................          ///////////////////////////////////
....................       }
06092:  BRA    609E
06094:  MOVLB  7
....................       else
....................       {
....................          Output.B10 = 1;
06096:  MOVLB  6
06098:  BSF    xD1.1
....................          SendSMS.B10 =0;
0609A:  BCF    xEB.1
....................          functointest_f =0;
0609C:  BCF    30.1
....................       }
....................    }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... ////////////////////////////// AUTO RESET ///////////////////////////////////
.................... /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0609E:  MOVLW  00
060A0:  BTFSC  xCE.0
060A2:  MOVLW  01
060A4:  MOVLB  7
060A6:  MOVWF  x59
060A8:  MOVLW  00
060AA:  MOVLB  6
060AC:  BTFSC  xD2.0
060AE:  MOVLW  01
060B0:  MOVLB  7
060B2:  XORWF  x59,W
060B4:  SUBLW  01
060B6:  BNZ   60C0
060B8:  MOVLB  6
060BA:  BTFSS  xD4.0
060BC:  BRA    60C6
060BE:  MOVLB  7
060C0:  BTFSS  1A.5
060C2:  BRA    6188
060C4:  MOVLB  6
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
060C6:  BTFSC  xE0.0
060C8:  BRA    60DC
060CA:  MOVF   5E,W
060CC:  SUBLW  0F
060CE:  BNZ   60DC
060D0:  BTFSC  xDC.0
060D2:  BRA    60DC
....................       {
....................             TimeBase1s = 100 ;            //reload again
060D4:  MOVLW  64
060D6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
060D8:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B1 = 1;
060DC:  BSF    xE0.0
....................       if(Ack.B1 == 0)
060DE:  BTFSC  xDC.0
060E0:  BRA    610C
....................       {
....................          if(FlashingFlag == 0)
060E2:  BTFSC  1A.1
060E4:  BRA    60EA
....................          {
....................             Output.B1 = 0;           //Flash output1
060E6:  BCF    xD0.0
....................          }
060E8:  BRA    60EC
....................          else
....................          {
....................             Output.B1 = 1;
060EA:  BSF    xD0.0
....................          }
....................          if (~AutoTestFlag)
060EC:  BTFSC  1A.4
060EE:  BRA    610C
....................          {
....................              if(OutputBoth.B1 == 0)        //Both output
060F0:  BTFSC  xD8.0
060F2:  BRA    60FE
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
060F4:  BSF    F89.4
060F6:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
060F8:  BSF    F89.3
060FA:  BCF    F92.3
....................              }
060FC:  BRA    610C
....................              else
....................              {
....................                if(OutputType.B1 == 1) output_bit(Pbuzzer,1);     //Buzzer
060FE:  BTFSS  xD6.0
06100:  BRA    6108
06102:  BSF    F89.4
06104:  BCF    F92.4
06106:  BRA    610C
....................                else output_bit(Pbell,1);                          //Bell
06108:  BSF    F89.3
0610A:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
0610C:  MOVLW  01
0610E:  MOVLB  7
06110:  MOVWF  x4C
....................       // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
06112:  MOVLB  6
06114:  BTFSC  xEA.0
06116:  BRA    6186
06118:  BTFSC  30.1
0611A:  BRA    6186
0611C:  BTFSC  xDC.0
0611E:  BRA    6186
....................       {
....................          SendSMS.B1 =1;
06120:  BSF    xEA.0
....................          fprintf(CH2,"AT+CMGS=\"");
06122:  MOVLW  DA
06124:  MOVWF  FF6
06126:  MOVLW  07
06128:  MOVWF  FF7
0612A:  MOVLB  0
0612C:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
06130:  MOVLW  05
06132:  MOVWF  FEA
06134:  MOVLW  7F
06136:  MOVWF  FE9
06138:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
0613C:  MOVLW  22
0613E:  MOVLB  7
06140:  MOVWF  x5A
06142:  MOVLB  0
06144:  CALL   23F0
....................          putc('\n',CH2);
06148:  MOVLW  0A
0614A:  MOVLB  7
0614C:  MOVWF  x5A
0614E:  MOVLB  0
06150:  CALL   23F0
....................          delay_ms(50);
06154:  MOVLW  32
06156:  MOVLB  7
06158:  MOVWF  x59
0615A:  MOVLB  0
0615C:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage1);   
06160:  MOVLW  05
06162:  MOVWF  FEA
06164:  MOVLW  8E
06166:  MOVWF  FE9
06168:  CALL   47EC
....................         putc('\n',CH2);
0616C:  MOVLW  0A
0616E:  MOVLB  7
06170:  MOVWF  x5A
06172:  MOVLB  0
06174:  CALL   23F0
....................        putc(26,CH2);
06178:  MOVLW  1A
0617A:  MOVLB  7
0617C:  MOVWF  x5A
0617E:  MOVLB  0
06180:  CALL   23F0
06184:  MOVLB  6
....................       }
....................    }
06186:  BRA    621A
....................    else if(FaultType.B1 == 0)
06188:  MOVLB  6
0618A:  BTFSC  xD4.0
0618C:  BRA    621A
....................    {
....................       In2.B1 = 0x00;
0618E:  BCF    xE0.0
....................       Ack.B1 = 0;
06190:  BCF    xDC.0
....................       Output.B1 = 1;      //Off LED
06192:  BSF    xD0.0
....................       
....................       SendSMS.B1 =0;// Clear SMS
06194:  BCF    xEA.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0)&& inputflag ==0)       //If Buzzer or Both
06196:  BTFSC  xD6.0
06198:  BRA    619E
0619A:  BTFSC  xD8.0
0619C:  BRA    61C0
0619E:  MOVLB  7
061A0:  MOVF   x4C,F
061A2:  BTFSC  FD8.2
061A4:  BRA    61AA
061A6:  MOVLB  6
061A8:  BRA    61C0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
061AA:  MOVLW  01
061AC:  MOVWF  x58
061AE:  MOVLB  0
061B0:  CALL   4812
061B4:  DECFSZ 01,W
061B6:  BRA    61BA
061B8:  BRA    61BE
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
061BA:  BCF    F89.4
061BC:  BCF    F92.4
061BE:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0)&& inputflag ==0)   //If Bell or Both
061C0:  BTFSS  xD6.0
061C2:  BRA    61C8
061C4:  BTFSC  xD8.0
061C6:  BRA    61EA
061C8:  MOVLB  7
061CA:  MOVF   x4C,F
061CC:  BTFSC  FD8.2
061CE:  BRA    61D4
061D0:  MOVLB  6
061D2:  BRA    61EA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
061D4:  MOVLW  02
061D6:  MOVWF  x58
061D8:  MOVLB  0
061DA:  CALL   4812
061DE:  DECFSZ 01,W
061E0:  BRA    61E4
061E2:  BRA    61E8
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
061E4:  BCF    F89.3
061E6:  BCF    F92.3
061E8:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
061EA:  BTFSC  xE0.0
061EC:  BRA    621A
061EE:  BTFSC  xE0.1
061F0:  BRA    621A
061F2:  BTFSC  xE0.2
061F4:  BRA    621A
061F6:  BTFSC  xE0.3
061F8:  BRA    621A
061FA:  BTFSC  xE0.4
061FC:  BRA    621A
061FE:  BTFSC  xE0.5
06200:  BRA    621A
06202:  BTFSC  xE0.6
06204:  BRA    621A
06206:  BTFSC  xE0.7
06208:  BRA    621A
0620A:  BTFSC  xE1.0
0620C:  BRA    621A
0620E:  BTFSC  xE1.1
06210:  BRA    621A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06212:  BCF    F89.3
06214:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06216:  BCF    F89.4
06218:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0621A:  MOVLW  00
0621C:  BTFSC  xCE.1
0621E:  MOVLW  01
06220:  MOVLB  7
06222:  MOVWF  x59
06224:  MOVLW  00
06226:  MOVLB  6
06228:  BTFSC  xD2.1
0622A:  MOVLW  01
0622C:  MOVLB  7
0622E:  XORWF  x59,W
06230:  SUBLW  01
06232:  BNZ   623C
06234:  MOVLB  6
06236:  BTFSS  xD4.1
06238:  BRA    6242
0623A:  MOVLB  7
0623C:  BTFSS  1A.5
0623E:  BRA    6304
06240:  MOVLB  6
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
06242:  BTFSC  xE0.1
06244:  BRA    6258
06246:  MOVF   5E,W
06248:  SUBLW  0F
0624A:  BNZ   6258
0624C:  BTFSC  xDC.1
0624E:  BRA    6258
....................       {
....................             TimeBase1s = 100 ;            //reload again
06250:  MOVLW  64
06252:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06254:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B2 = 1;
06258:  BSF    xE0.1
....................       if(Ack.B2 == 0)
0625A:  BTFSC  xDC.1
0625C:  BRA    6288
....................       {
....................          if(FlashingFlag == 0)
0625E:  BTFSC  1A.1
06260:  BRA    6266
....................             {
....................                Output.B2 = 0;           //Flash output1
06262:  BCF    xD0.1
....................             }
06264:  BRA    6268
....................             else
....................             {
....................                Output.B2 = 1;
06266:  BSF    xD0.1
....................             }
....................          if (~AutoTestFlag)
06268:  BTFSC  1A.4
0626A:  BRA    6288
....................          {
....................              if(OutputBoth.B2 == 0)        //Both output
0626C:  BTFSC  xD8.1
0626E:  BRA    627A
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06270:  BSF    F89.4
06272:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06274:  BSF    F89.3
06276:  BCF    F92.3
....................              }
06278:  BRA    6288
....................              else
....................              {
....................                if(OutputType.B2 == 1) output_bit(Pbuzzer,1);     //Buzzer
0627A:  BTFSS  xD6.1
0627C:  BRA    6284
0627E:  BSF    F89.4
06280:  BCF    F92.4
06282:  BRA    6288
....................                else output_bit(Pbell,1);                          //Bell
06284:  BSF    F89.3
06286:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06288:  MOVLW  01
0628A:  MOVLB  7
0628C:  MOVWF  x4C
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
0628E:  MOVLB  6
06290:  BTFSC  xEA.1
06292:  BRA    6302
06294:  BTFSC  30.1
06296:  BRA    6302
06298:  BTFSC  xDC.1
0629A:  BRA    6302
....................       {
....................          SendSMS.B2 =1;
0629C:  BSF    xEA.1
....................          fprintf(CH2,"AT+CMGS=\"");
0629E:  MOVLW  E4
062A0:  MOVWF  FF6
062A2:  MOVLW  07
062A4:  MOVWF  FF7
062A6:  MOVLB  0
062A8:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
062AC:  MOVLW  05
062AE:  MOVWF  FEA
062B0:  MOVLW  7F
062B2:  MOVWF  FE9
062B4:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
062B8:  MOVLW  22
062BA:  MOVLB  7
062BC:  MOVWF  x5A
062BE:  MOVLB  0
062C0:  CALL   23F0
....................          putc('\n',CH2);
062C4:  MOVLW  0A
062C6:  MOVLB  7
062C8:  MOVWF  x5A
062CA:  MOVLB  0
062CC:  CALL   23F0
....................          delay_ms(50);
062D0:  MOVLW  32
062D2:  MOVLB  7
062D4:  MOVWF  x59
062D6:  MOVLB  0
062D8:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage2); 
062DC:  MOVLW  05
062DE:  MOVWF  FEA
062E0:  MOVLW  AE
062E2:  MOVWF  FE9
062E4:  CALL   47EC
....................         putc('\n',CH2);
062E8:  MOVLW  0A
062EA:  MOVLB  7
062EC:  MOVWF  x5A
062EE:  MOVLB  0
062F0:  CALL   23F0
....................        putc(26,CH2);
062F4:  MOVLW  1A
062F6:  MOVLB  7
062F8:  MOVWF  x5A
062FA:  MOVLB  0
062FC:  CALL   23F0
06300:  MOVLB  6
....................       }
....................    }
06302:  BRA    6396
....................    else if(FaultType.B2 == 0)
06304:  MOVLB  6
06306:  BTFSC  xD4.1
06308:  BRA    6396
....................    {
....................       In2.B2 = 0x00;
0630A:  BCF    xE0.1
....................       Ack.B2 = 0;
0630C:  BCF    xDC.1
....................       Output.B2 = 1;      //Off LED
0630E:  BSF    xD0.1
....................       
....................       SendSMS.B2 =0;// Clear SMS
06310:  BCF    xEA.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0)&& inputflag ==0)       //If Buzzer or Both
06312:  BTFSC  xD6.1
06314:  BRA    631A
06316:  BTFSC  xD8.1
06318:  BRA    633C
0631A:  MOVLB  7
0631C:  MOVF   x4C,F
0631E:  BTFSC  FD8.2
06320:  BRA    6326
06322:  MOVLB  6
06324:  BRA    633C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06326:  MOVLW  01
06328:  MOVWF  x58
0632A:  MOVLB  0
0632C:  CALL   4812
06330:  DECFSZ 01,W
06332:  BRA    6336
06334:  BRA    633A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06336:  BCF    F89.4
06338:  BCF    F92.4
0633A:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0)&& inputflag ==0)   //If Bell or Both
0633C:  BTFSS  xD6.1
0633E:  BRA    6344
06340:  BTFSC  xD8.1
06342:  BRA    6366
06344:  MOVLB  7
06346:  MOVF   x4C,F
06348:  BTFSC  FD8.2
0634A:  BRA    6350
0634C:  MOVLB  6
0634E:  BRA    6366
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06350:  MOVLW  02
06352:  MOVWF  x58
06354:  MOVLB  0
06356:  CALL   4812
0635A:  DECFSZ 01,W
0635C:  BRA    6360
0635E:  BRA    6364
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06360:  BCF    F89.3
06362:  BCF    F92.3
06364:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06366:  BTFSC  xE0.0
06368:  BRA    6396
0636A:  BTFSC  xE0.1
0636C:  BRA    6396
0636E:  BTFSC  xE0.2
06370:  BRA    6396
06372:  BTFSC  xE0.3
06374:  BRA    6396
06376:  BTFSC  xE0.4
06378:  BRA    6396
0637A:  BTFSC  xE0.5
0637C:  BRA    6396
0637E:  BTFSC  xE0.6
06380:  BRA    6396
06382:  BTFSC  xE0.7
06384:  BRA    6396
06386:  BTFSC  xE1.0
06388:  BRA    6396
0638A:  BTFSC  xE1.1
0638C:  BRA    6396
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0638E:  BCF    F89.3
06390:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06392:  BCF    F89.4
06394:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06396:  MOVLW  00
06398:  BTFSC  xCE.2
0639A:  MOVLW  01
0639C:  MOVLB  7
0639E:  MOVWF  x59
063A0:  MOVLW  00
063A2:  MOVLB  6
063A4:  BTFSC  xD2.2
063A6:  MOVLW  01
063A8:  MOVLB  7
063AA:  XORWF  x59,W
063AC:  SUBLW  01
063AE:  BNZ   63B8
063B0:  MOVLB  6
063B2:  BTFSS  xD4.2
063B4:  BRA    63BE
063B6:  MOVLB  7
063B8:  BTFSS  1A.5
063BA:  BRA    6480
063BC:  MOVLB  6
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
063BE:  BTFSC  xE0.2
063C0:  BRA    63D4
063C2:  MOVF   5E,W
063C4:  SUBLW  0F
063C6:  BNZ   63D4
063C8:  BTFSC  xDC.2
063CA:  BRA    63D4
....................       {
....................             TimeBase1s = 100 ;            //reload again
063CC:  MOVLW  64
063CE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
063D0:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B3 = 1;
063D4:  BSF    xE0.2
....................       if(Ack.B3 == 0)
063D6:  BTFSC  xDC.2
063D8:  BRA    6404
....................       {
....................          if(FlashingFlag == 0)
063DA:  BTFSC  1A.1
063DC:  BRA    63E2
....................             {
....................                Output.B3 = 0;           //Flash output1
063DE:  BCF    xD0.2
....................             }
063E0:  BRA    63E4
....................             else
....................             {
....................                Output.B3 = 1;
063E2:  BSF    xD0.2
....................             }
....................          if (~AutoTestFlag)
063E4:  BTFSC  1A.4
063E6:  BRA    6404
....................          {
....................              if(OutputBoth.B3 == 0)        //Both output
063E8:  BTFSC  xD8.2
063EA:  BRA    63F6
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
063EC:  BSF    F89.4
063EE:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
063F0:  BSF    F89.3
063F2:  BCF    F92.3
....................              }
063F4:  BRA    6404
....................              else
....................              {
....................                if(OutputType.B3 == 1) output_bit(Pbuzzer,1);     //Buzzer
063F6:  BTFSS  xD6.2
063F8:  BRA    6400
063FA:  BSF    F89.4
063FC:  BCF    F92.4
063FE:  BRA    6404
....................                else output_bit(Pbell,1);                          //Bell
06400:  BSF    F89.3
06402:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06404:  MOVLW  01
06406:  MOVLB  7
06408:  MOVWF  x4C
....................       
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
0640A:  MOVLB  6
0640C:  BTFSC  xEA.2
0640E:  BRA    647E
06410:  BTFSC  30.1
06412:  BRA    647E
06414:  BTFSC  xDC.2
06416:  BRA    647E
....................       {
....................          SendSMS.B3 =1;
06418:  BSF    xEA.2
....................          fprintf(CH2,"AT+CMGS=\"");
0641A:  MOVLW  EE
0641C:  MOVWF  FF6
0641E:  MOVLW  07
06420:  MOVWF  FF7
06422:  MOVLB  0
06424:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
06428:  MOVLW  05
0642A:  MOVWF  FEA
0642C:  MOVLW  7F
0642E:  MOVWF  FE9
06430:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
06434:  MOVLW  22
06436:  MOVLB  7
06438:  MOVWF  x5A
0643A:  MOVLB  0
0643C:  CALL   23F0
....................          putc('\n',CH2);
06440:  MOVLW  0A
06442:  MOVLB  7
06444:  MOVWF  x5A
06446:  MOVLB  0
06448:  CALL   23F0
....................          delay_ms(50);
0644C:  MOVLW  32
0644E:  MOVLB  7
06450:  MOVWF  x59
06452:  MOVLB  0
06454:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage3); 
06458:  MOVLW  05
0645A:  MOVWF  FEA
0645C:  MOVLW  CE
0645E:  MOVWF  FE9
06460:  CALL   47EC
....................         putc('\n',CH2);
06464:  MOVLW  0A
06466:  MOVLB  7
06468:  MOVWF  x5A
0646A:  MOVLB  0
0646C:  CALL   23F0
....................        putc(26,CH2);
06470:  MOVLW  1A
06472:  MOVLB  7
06474:  MOVWF  x5A
06476:  MOVLB  0
06478:  CALL   23F0
0647C:  MOVLB  6
....................       }
....................    }
0647E:  BRA    6512
....................    else if(FaultType.B3 == 0)
06480:  MOVLB  6
06482:  BTFSC  xD4.2
06484:  BRA    6512
....................    {
....................       In2.B3 = 0x00;
06486:  BCF    xE0.2
....................       Ack.B3 = 0;
06488:  BCF    xDC.2
....................       Output.B3 = 1;      //Off LED
0648A:  BSF    xD0.2
....................       
....................       SendSMS.B3 =0;// Clear SMS
0648C:  BCF    xEA.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0)&& inputflag ==0)       //If Buzzer or Both
0648E:  BTFSC  xD6.2
06490:  BRA    6496
06492:  BTFSC  xD8.2
06494:  BRA    64B8
06496:  MOVLB  7
06498:  MOVF   x4C,F
0649A:  BTFSC  FD8.2
0649C:  BRA    64A2
0649E:  MOVLB  6
064A0:  BRA    64B8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
064A2:  MOVLW  01
064A4:  MOVWF  x58
064A6:  MOVLB  0
064A8:  CALL   4812
064AC:  DECFSZ 01,W
064AE:  BRA    64B2
064B0:  BRA    64B6
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
064B2:  BCF    F89.4
064B4:  BCF    F92.4
064B6:  MOVLB  6
....................          }
....................       }
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0)&& inputflag ==0)   //If Bell or Both
064B8:  BTFSS  xD6.2
064BA:  BRA    64C0
064BC:  BTFSC  xD8.2
064BE:  BRA    64E2
064C0:  MOVLB  7
064C2:  MOVF   x4C,F
064C4:  BTFSC  FD8.2
064C6:  BRA    64CC
064C8:  MOVLB  6
064CA:  BRA    64E2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
064CC:  MOVLW  02
064CE:  MOVWF  x58
064D0:  MOVLB  0
064D2:  CALL   4812
064D6:  DECFSZ 01,W
064D8:  BRA    64DC
064DA:  BRA    64E0
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
064DC:  BCF    F89.3
064DE:  BCF    F92.3
064E0:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
064E2:  BTFSC  xE0.0
064E4:  BRA    6512
064E6:  BTFSC  xE0.1
064E8:  BRA    6512
064EA:  BTFSC  xE0.2
064EC:  BRA    6512
064EE:  BTFSC  xE0.3
064F0:  BRA    6512
064F2:  BTFSC  xE0.4
064F4:  BRA    6512
064F6:  BTFSC  xE0.5
064F8:  BRA    6512
064FA:  BTFSC  xE0.6
064FC:  BRA    6512
064FE:  BTFSC  xE0.7
06500:  BRA    6512
06502:  BTFSC  xE1.0
06504:  BRA    6512
06506:  BTFSC  xE1.1
06508:  BRA    6512
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0650A:  BCF    F89.3
0650C:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0650E:  BCF    F89.4
06510:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06512:  MOVLW  00
06514:  BTFSC  xCE.3
06516:  MOVLW  01
06518:  MOVLB  7
0651A:  MOVWF  x59
0651C:  MOVLW  00
0651E:  MOVLB  6
06520:  BTFSC  xD2.3
06522:  MOVLW  01
06524:  MOVLB  7
06526:  XORWF  x59,W
06528:  SUBLW  01
0652A:  BNZ   6534
0652C:  MOVLB  6
0652E:  BTFSS  xD4.3
06530:  BRA    653A
06532:  MOVLB  7
06534:  BTFSS  1A.5
06536:  BRA    65FC
06538:  MOVLB  6
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
0653A:  BTFSC  xE0.3
0653C:  BRA    6550
0653E:  MOVF   5E,W
06540:  SUBLW  0F
06542:  BNZ   6550
06544:  BTFSC  xDC.3
06546:  BRA    6550
....................       {
....................             TimeBase1s = 100 ;            //reload again
06548:  MOVLW  64
0654A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0654C:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B4 = 1;
06550:  BSF    xE0.3
....................       if(Ack.B4 == 0)
06552:  BTFSC  xDC.3
06554:  BRA    6580
....................       {
....................          if(FlashingFlag == 0)
06556:  BTFSC  1A.1
06558:  BRA    655E
....................             {
....................                Output.B4 = 0;           //Flash output1
0655A:  BCF    xD0.3
....................             }
0655C:  BRA    6560
....................             else
....................             {
....................                Output.B4 = 1;
0655E:  BSF    xD0.3
....................             }
....................          if (~AutoTestFlag)
06560:  BTFSC  1A.4
06562:  BRA    6580
....................          {
....................              if(OutputBoth.B4 == 0)        //Both output
06564:  BTFSC  xD8.3
06566:  BRA    6572
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06568:  BSF    F89.4
0656A:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
0656C:  BSF    F89.3
0656E:  BCF    F92.3
....................              }
06570:  BRA    6580
....................              else
....................              {
....................                if(OutputType.B4 == 1) output_bit(Pbuzzer,1);     //Buzzer
06572:  BTFSS  xD6.3
06574:  BRA    657C
06576:  BSF    F89.4
06578:  BCF    F92.4
0657A:  BRA    6580
....................                else output_bit(Pbell,1);                          //Bell
0657C:  BSF    F89.3
0657E:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06580:  MOVLW  01
06582:  MOVLB  7
06584:  MOVWF  x4C
....................       
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
06586:  MOVLB  6
06588:  BTFSC  xEA.3
0658A:  BRA    65FA
0658C:  BTFSC  30.1
0658E:  BRA    65FA
06590:  BTFSC  xDC.3
06592:  BRA    65FA
....................       {
....................          SendSMS.B4 =1;
06594:  BSF    xEA.3
....................          fprintf(CH2,"AT+CMGS=\"");
06596:  MOVLW  F8
06598:  MOVWF  FF6
0659A:  MOVLW  07
0659C:  MOVWF  FF7
0659E:  MOVLB  0
065A0:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
065A4:  MOVLW  05
065A6:  MOVWF  FEA
065A8:  MOVLW  7F
065AA:  MOVWF  FE9
065AC:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
065B0:  MOVLW  22
065B2:  MOVLB  7
065B4:  MOVWF  x5A
065B6:  MOVLB  0
065B8:  CALL   23F0
....................          putc('\n',CH2);
065BC:  MOVLW  0A
065BE:  MOVLB  7
065C0:  MOVWF  x5A
065C2:  MOVLB  0
065C4:  CALL   23F0
....................          delay_ms(50);
065C8:  MOVLW  32
065CA:  MOVLB  7
065CC:  MOVWF  x59
065CE:  MOVLB  0
065D0:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage4); 
065D4:  MOVLW  05
065D6:  MOVWF  FEA
065D8:  MOVLW  EE
065DA:  MOVWF  FE9
065DC:  CALL   47EC
....................         putc('\n',CH2);
065E0:  MOVLW  0A
065E2:  MOVLB  7
065E4:  MOVWF  x5A
065E6:  MOVLB  0
065E8:  CALL   23F0
....................        putc(26,CH2);
065EC:  MOVLW  1A
065EE:  MOVLB  7
065F0:  MOVWF  x5A
065F2:  MOVLB  0
065F4:  CALL   23F0
065F8:  MOVLB  6
....................       }
....................    }
065FA:  BRA    668E
....................    else if(FaultType.B4 == 0)
065FC:  MOVLB  6
065FE:  BTFSC  xD4.3
06600:  BRA    668E
....................    {
....................       In2.B4 = 0x00;
06602:  BCF    xE0.3
....................       Ack.B4 = 0;
06604:  BCF    xDC.3
....................       Output.B4 = 1;      //Off LED
06606:  BSF    xD0.3
....................       
....................       SendSMS.B4 =0;// Clear SMS
06608:  BCF    xEA.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0)&& inputflag ==0)       //If Buzzer or Both
0660A:  BTFSC  xD6.3
0660C:  BRA    6612
0660E:  BTFSC  xD8.3
06610:  BRA    6634
06612:  MOVLB  7
06614:  MOVF   x4C,F
06616:  BTFSC  FD8.2
06618:  BRA    661E
0661A:  MOVLB  6
0661C:  BRA    6634
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0661E:  MOVLW  01
06620:  MOVWF  x58
06622:  MOVLB  0
06624:  CALL   4812
06628:  DECFSZ 01,W
0662A:  BRA    662E
0662C:  BRA    6632
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
0662E:  BCF    F89.4
06630:  BCF    F92.4
06632:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0)&& inputflag ==0)   //If Bell or Both
06634:  BTFSS  xD6.3
06636:  BRA    663C
06638:  BTFSC  xD8.3
0663A:  BRA    665E
0663C:  MOVLB  7
0663E:  MOVF   x4C,F
06640:  BTFSC  FD8.2
06642:  BRA    6648
06644:  MOVLB  6
06646:  BRA    665E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06648:  MOVLW  02
0664A:  MOVWF  x58
0664C:  MOVLB  0
0664E:  CALL   4812
06652:  DECFSZ 01,W
06654:  BRA    6658
06656:  BRA    665C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06658:  BCF    F89.3
0665A:  BCF    F92.3
0665C:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
0665E:  BTFSC  xE0.0
06660:  BRA    668E
06662:  BTFSC  xE0.1
06664:  BRA    668E
06666:  BTFSC  xE0.2
06668:  BRA    668E
0666A:  BTFSC  xE0.3
0666C:  BRA    668E
0666E:  BTFSC  xE0.4
06670:  BRA    668E
06672:  BTFSC  xE0.5
06674:  BRA    668E
06676:  BTFSC  xE0.6
06678:  BRA    668E
0667A:  BTFSC  xE0.7
0667C:  BRA    668E
0667E:  BTFSC  xE1.0
06680:  BRA    668E
06682:  BTFSC  xE1.1
06684:  BRA    668E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06686:  BCF    F89.3
06688:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
0668A:  BCF    F89.4
0668C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0668E:  MOVLW  00
06690:  BTFSC  xCE.4
06692:  MOVLW  01
06694:  MOVLB  7
06696:  MOVWF  x59
06698:  MOVLW  00
0669A:  MOVLB  6
0669C:  BTFSC  xD2.4
0669E:  MOVLW  01
066A0:  MOVLB  7
066A2:  XORWF  x59,W
066A4:  SUBLW  01
066A6:  BNZ   66B0
066A8:  MOVLB  6
066AA:  BTFSS  xD4.4
066AC:  BRA    66B6
066AE:  MOVLB  7
066B0:  BTFSS  1A.5
066B2:  BRA    6778
066B4:  MOVLB  6
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
066B6:  BTFSC  xE0.4
066B8:  BRA    66CC
066BA:  MOVF   5E,W
066BC:  SUBLW  0F
066BE:  BNZ   66CC
066C0:  BTFSC  xDC.4
066C2:  BRA    66CC
....................       {
....................             TimeBase1s = 100 ;            //reload again
066C4:  MOVLW  64
066C6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
066C8:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B5 = 1;
066CC:  BSF    xE0.4
....................       if(Ack.B5 == 0)
066CE:  BTFSC  xDC.4
066D0:  BRA    66FC
....................       {
....................          if(FlashingFlag == 0)
066D2:  BTFSC  1A.1
066D4:  BRA    66DA
....................             {
....................                Output.B5 = 0;           //Flash output1
066D6:  BCF    xD0.4
....................             }
066D8:  BRA    66DC
....................             else
....................             {
....................                Output.B5 = 1;
066DA:  BSF    xD0.4
....................             }
....................          if (~AutoTestFlag)
066DC:  BTFSC  1A.4
066DE:  BRA    66FC
....................          {
....................              if(OutputBoth.B5 == 0)        //Both output
066E0:  BTFSC  xD8.4
066E2:  BRA    66EE
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
066E4:  BSF    F89.4
066E6:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
066E8:  BSF    F89.3
066EA:  BCF    F92.3
....................              }
066EC:  BRA    66FC
....................              else
....................              {
....................                if(OutputType.B5 == 1) output_bit(Pbuzzer,1);     //Buzzer
066EE:  BTFSS  xD6.4
066F0:  BRA    66F8
066F2:  BSF    F89.4
066F4:  BCF    F92.4
066F6:  BRA    66FC
....................                else output_bit(Pbell,1);                          //Bell
066F8:  BSF    F89.3
066FA:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
066FC:  MOVLW  01
066FE:  MOVLB  7
06700:  MOVWF  x4C
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
06702:  MOVLB  6
06704:  BTFSC  xEA.4
06706:  BRA    6776
06708:  BTFSC  30.1
0670A:  BRA    6776
0670C:  BTFSC  xDC.4
0670E:  BRA    6776
....................       {
....................          SendSMS.B5 =1;
06710:  BSF    xEA.4
....................          fprintf(CH2,"AT+CMGS=\"");
06712:  MOVLW  02
06714:  MOVWF  FF6
06716:  MOVLW  08
06718:  MOVWF  FF7
0671A:  MOVLB  0
0671C:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
06720:  MOVLW  05
06722:  MOVWF  FEA
06724:  MOVLW  7F
06726:  MOVWF  FE9
06728:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
0672C:  MOVLW  22
0672E:  MOVLB  7
06730:  MOVWF  x5A
06732:  MOVLB  0
06734:  CALL   23F0
....................          putc('\n',CH2);
06738:  MOVLW  0A
0673A:  MOVLB  7
0673C:  MOVWF  x5A
0673E:  MOVLB  0
06740:  CALL   23F0
....................          delay_ms(50);
06744:  MOVLW  32
06746:  MOVLB  7
06748:  MOVWF  x59
0674A:  MOVLB  0
0674C:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage5); 
06750:  MOVLW  06
06752:  MOVWF  FEA
06754:  MOVLW  0E
06756:  MOVWF  FE9
06758:  CALL   47EC
....................         putc('\n',CH2);
0675C:  MOVLW  0A
0675E:  MOVLB  7
06760:  MOVWF  x5A
06762:  MOVLB  0
06764:  CALL   23F0
....................        putc(26,CH2);
06768:  MOVLW  1A
0676A:  MOVLB  7
0676C:  MOVWF  x5A
0676E:  MOVLB  0
06770:  CALL   23F0
06774:  MOVLB  6
....................       }
....................    }
06776:  BRA    680A
....................    else if(FaultType.B5 == 0)
06778:  MOVLB  6
0677A:  BTFSC  xD4.4
0677C:  BRA    680A
....................    {
....................       In2.B5 = 0x00;
0677E:  BCF    xE0.4
....................       Ack.B5 = 0;
06780:  BCF    xDC.4
....................       Output.B5 = 1;      //Off LED
06782:  BSF    xD0.4
....................       
....................       SendSMS.B5 =0;// Clear SMS
06784:  BCF    xEA.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0)&& inputflag ==0)       //If Buzzer or Both
06786:  BTFSC  xD6.4
06788:  BRA    678E
0678A:  BTFSC  xD8.4
0678C:  BRA    67B0
0678E:  MOVLB  7
06790:  MOVF   x4C,F
06792:  BTFSC  FD8.2
06794:  BRA    679A
06796:  MOVLB  6
06798:  BRA    67B0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
0679A:  MOVLW  01
0679C:  MOVWF  x58
0679E:  MOVLB  0
067A0:  CALL   4812
067A4:  DECFSZ 01,W
067A6:  BRA    67AA
067A8:  BRA    67AE
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
067AA:  BCF    F89.4
067AC:  BCF    F92.4
067AE:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0)&& inputflag ==0)   //If Bell or Both
067B0:  BTFSS  xD6.4
067B2:  BRA    67B8
067B4:  BTFSC  xD8.4
067B6:  BRA    67DA
067B8:  MOVLB  7
067BA:  MOVF   x4C,F
067BC:  BTFSC  FD8.2
067BE:  BRA    67C4
067C0:  MOVLB  6
067C2:  BRA    67DA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
067C4:  MOVLW  02
067C6:  MOVWF  x58
067C8:  MOVLB  0
067CA:  CALL   4812
067CE:  DECFSZ 01,W
067D0:  BRA    67D4
067D2:  BRA    67D8
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
067D4:  BCF    F89.3
067D6:  BCF    F92.3
067D8:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
067DA:  BTFSC  xE0.0
067DC:  BRA    680A
067DE:  BTFSC  xE0.1
067E0:  BRA    680A
067E2:  BTFSC  xE0.2
067E4:  BRA    680A
067E6:  BTFSC  xE0.3
067E8:  BRA    680A
067EA:  BTFSC  xE0.4
067EC:  BRA    680A
067EE:  BTFSC  xE0.5
067F0:  BRA    680A
067F2:  BTFSC  xE0.6
067F4:  BRA    680A
067F6:  BTFSC  xE0.7
067F8:  BRA    680A
067FA:  BTFSC  xE1.0
067FC:  BRA    680A
067FE:  BTFSC  xE1.1
06800:  BRA    680A
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06802:  BCF    F89.3
06804:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06806:  BCF    F89.4
06808:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0680A:  MOVLW  00
0680C:  BTFSC  xCE.5
0680E:  MOVLW  01
06810:  MOVLB  7
06812:  MOVWF  x59
06814:  MOVLW  00
06816:  MOVLB  6
06818:  BTFSC  xD2.5
0681A:  MOVLW  01
0681C:  MOVLB  7
0681E:  XORWF  x59,W
06820:  SUBLW  01
06822:  BNZ   682C
06824:  MOVLB  6
06826:  BTFSS  xD4.5
06828:  BRA    6832
0682A:  MOVLB  7
0682C:  BTFSS  1A.5
0682E:  BRA    68F4
06830:  MOVLB  6
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
06832:  BTFSC  xE0.5
06834:  BRA    6848
06836:  MOVF   5E,W
06838:  SUBLW  0F
0683A:  BNZ   6848
0683C:  BTFSC  xDC.5
0683E:  BRA    6848
....................       {
....................             TimeBase1s = 100 ;            //reload again
06840:  MOVLW  64
06842:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06844:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B6 = 1;
06848:  BSF    xE0.5
....................       if(Ack.B6 == 0)
0684A:  BTFSC  xDC.5
0684C:  BRA    6878
....................       {
....................          if(FlashingFlag == 0)
0684E:  BTFSC  1A.1
06850:  BRA    6856
....................             {
....................                Output.B6 = 0;           //Flash output1
06852:  BCF    xD0.5
....................             }
06854:  BRA    6858
....................             else
....................             {
....................                Output.B6 = 1;
06856:  BSF    xD0.5
....................             }
....................          if (~AutoTestFlag)
06858:  BTFSC  1A.4
0685A:  BRA    6878
....................          {
....................              if(OutputBoth.B6 == 0)        //Both output
0685C:  BTFSC  xD8.5
0685E:  BRA    686A
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06860:  BSF    F89.4
06862:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06864:  BSF    F89.3
06866:  BCF    F92.3
....................              }
06868:  BRA    6878
....................              else
....................              {
....................                if(OutputType.B6 == 1) output_bit(Pbuzzer,1);     //Buzzer
0686A:  BTFSS  xD6.5
0686C:  BRA    6874
0686E:  BSF    F89.4
06870:  BCF    F92.4
06872:  BRA    6878
....................                else output_bit(Pbell,1);                          //Bell
06874:  BSF    F89.3
06876:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06878:  MOVLW  01
0687A:  MOVLB  7
0687C:  MOVWF  x4C
....................       
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0687E:  MOVLB  6
06880:  BTFSC  xEA.5
06882:  BRA    68F2
06884:  BTFSC  30.1
06886:  BRA    68F2
06888:  BTFSC  xDC.5
0688A:  BRA    68F2
....................       {
....................          SendSMS.B6 =1;
0688C:  BSF    xEA.5
....................          fprintf(CH2,"AT+CMGS=\"");
0688E:  MOVLW  0C
06890:  MOVWF  FF6
06892:  MOVLW  08
06894:  MOVWF  FF7
06896:  MOVLB  0
06898:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
0689C:  MOVLW  05
0689E:  MOVWF  FEA
068A0:  MOVLW  7F
068A2:  MOVWF  FE9
068A4:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
068A8:  MOVLW  22
068AA:  MOVLB  7
068AC:  MOVWF  x5A
068AE:  MOVLB  0
068B0:  CALL   23F0
....................          putc('\n',CH2);
068B4:  MOVLW  0A
068B6:  MOVLB  7
068B8:  MOVWF  x5A
068BA:  MOVLB  0
068BC:  CALL   23F0
....................          delay_ms(50);
068C0:  MOVLW  32
068C2:  MOVLB  7
068C4:  MOVWF  x59
068C6:  MOVLB  0
068C8:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage6);  
068CC:  MOVLW  06
068CE:  MOVWF  FEA
068D0:  MOVLW  2E
068D2:  MOVWF  FE9
068D4:  CALL   47EC
....................         putc('\n',CH2);
068D8:  MOVLW  0A
068DA:  MOVLB  7
068DC:  MOVWF  x5A
068DE:  MOVLB  0
068E0:  CALL   23F0
....................        putc(26,CH2);
068E4:  MOVLW  1A
068E6:  MOVLB  7
068E8:  MOVWF  x5A
068EA:  MOVLB  0
068EC:  CALL   23F0
068F0:  MOVLB  6
....................       }
....................    }
068F2:  BRA    6986
....................    else if(FaultType.B6 == 0)
068F4:  MOVLB  6
068F6:  BTFSC  xD4.5
068F8:  BRA    6986
....................    {
....................       In2.B6 = 0x00;
068FA:  BCF    xE0.5
....................       Ack.B6 = 0;
068FC:  BCF    xDC.5
....................       Output.B6 = 1;      //Off LED
068FE:  BSF    xD0.5
....................       
....................       SendSMS.B6 =0;// Clear SMS
06900:  BCF    xEA.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)       //If Buzzer or Both
06902:  BTFSC  xD6.5
06904:  BRA    690A
06906:  BTFSC  xD8.5
06908:  BRA    692C
0690A:  MOVLB  7
0690C:  MOVF   x4C,F
0690E:  BTFSC  FD8.2
06910:  BRA    6916
06912:  MOVLB  6
06914:  BRA    692C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06916:  MOVLW  01
06918:  MOVWF  x58
0691A:  MOVLB  0
0691C:  CALL   4812
06920:  DECFSZ 01,W
06922:  BRA    6926
06924:  BRA    692A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06926:  BCF    F89.4
06928:  BCF    F92.4
0692A:  MOVLB  6
....................          }
....................       }
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)   //If Bell or Both
0692C:  BTFSS  xD6.5
0692E:  BRA    6934
06930:  BTFSC  xD8.5
06932:  BRA    6956
06934:  MOVLB  7
06936:  MOVF   x4C,F
06938:  BTFSC  FD8.2
0693A:  BRA    6940
0693C:  MOVLB  6
0693E:  BRA    6956
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06940:  MOVLW  02
06942:  MOVWF  x58
06944:  MOVLB  0
06946:  CALL   4812
0694A:  DECFSZ 01,W
0694C:  BRA    6950
0694E:  BRA    6954
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06950:  BCF    F89.3
06952:  BCF    F92.3
06954:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06956:  BTFSC  xE0.0
06958:  BRA    6986
0695A:  BTFSC  xE0.1
0695C:  BRA    6986
0695E:  BTFSC  xE0.2
06960:  BRA    6986
06962:  BTFSC  xE0.3
06964:  BRA    6986
06966:  BTFSC  xE0.4
06968:  BRA    6986
0696A:  BTFSC  xE0.5
0696C:  BRA    6986
0696E:  BTFSC  xE0.6
06970:  BRA    6986
06972:  BTFSC  xE0.7
06974:  BRA    6986
06976:  BTFSC  xE1.0
06978:  BRA    6986
0697A:  BTFSC  xE1.1
0697C:  BRA    6986
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
0697E:  BCF    F89.3
06980:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06982:  BCF    F89.4
06984:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06986:  MOVLW  00
06988:  BTFSC  xCE.6
0698A:  MOVLW  01
0698C:  MOVLB  7
0698E:  MOVWF  x59
06990:  MOVLW  00
06992:  MOVLB  6
06994:  BTFSC  xD2.6
06996:  MOVLW  01
06998:  MOVLB  7
0699A:  XORWF  x59,W
0699C:  SUBLW  01
0699E:  BNZ   69A8
069A0:  MOVLB  6
069A2:  BTFSS  xD4.6
069A4:  BRA    69AE
069A6:  MOVLB  7
069A8:  BTFSS  1A.5
069AA:  BRA    6A70
069AC:  MOVLB  6
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
069AE:  BTFSC  xE0.6
069B0:  BRA    69C4
069B2:  MOVF   5E,W
069B4:  SUBLW  0F
069B6:  BNZ   69C4
069B8:  BTFSC  xDC.6
069BA:  BRA    69C4
....................       {
....................             TimeBase1s = 100 ;            //reload again
069BC:  MOVLW  64
069BE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
069C0:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B7 = 1;
069C4:  BSF    xE0.6
....................       if(Ack.B7 == 0)
069C6:  BTFSC  xDC.6
069C8:  BRA    69F4
....................       {
....................          if(FlashingFlag == 0)
069CA:  BTFSC  1A.1
069CC:  BRA    69D2
....................             {
....................                Output.B7 = 0;           //Flash output1
069CE:  BCF    xD0.6
....................             }
069D0:  BRA    69D4
....................             else
....................             {
....................                Output.B7 = 1;
069D2:  BSF    xD0.6
....................             }
....................          if (~AutoTestFlag)
069D4:  BTFSC  1A.4
069D6:  BRA    69F4
....................          {
....................              if(OutputBoth.B7 == 0)        //Both output
069D8:  BTFSC  xD8.6
069DA:  BRA    69E6
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
069DC:  BSF    F89.4
069DE:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
069E0:  BSF    F89.3
069E2:  BCF    F92.3
....................              }
069E4:  BRA    69F4
....................              else
....................              {
....................                if(OutputType.B7 == 1) output_bit(Pbuzzer,1);     //Buzzer
069E6:  BTFSS  xD6.6
069E8:  BRA    69F0
069EA:  BSF    F89.4
069EC:  BCF    F92.4
069EE:  BRA    69F4
....................                else output_bit(Pbell,1);                          //Bell
069F0:  BSF    F89.3
069F2:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
069F4:  MOVLW  01
069F6:  MOVLB  7
069F8:  MOVWF  x4C
....................       
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
069FA:  MOVLB  6
069FC:  BTFSC  xEA.6
069FE:  BRA    6A6E
06A00:  BTFSC  30.1
06A02:  BRA    6A6E
06A04:  BTFSC  xDC.6
06A06:  BRA    6A6E
....................       {
....................          SendSMS.B7 =1;
06A08:  BSF    xEA.6
....................          fprintf(CH2,"AT+CMGS=\"");
06A0A:  MOVLW  16
06A0C:  MOVWF  FF6
06A0E:  MOVLW  08
06A10:  MOVWF  FF7
06A12:  MOVLB  0
06A14:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
06A18:  MOVLW  05
06A1A:  MOVWF  FEA
06A1C:  MOVLW  7F
06A1E:  MOVWF  FE9
06A20:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
06A24:  MOVLW  22
06A26:  MOVLB  7
06A28:  MOVWF  x5A
06A2A:  MOVLB  0
06A2C:  CALL   23F0
....................          putc('\n',CH2);
06A30:  MOVLW  0A
06A32:  MOVLB  7
06A34:  MOVWF  x5A
06A36:  MOVLB  0
06A38:  CALL   23F0
....................          delay_ms(50);
06A3C:  MOVLW  32
06A3E:  MOVLB  7
06A40:  MOVWF  x59
06A42:  MOVLB  0
06A44:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage7);  
06A48:  MOVLW  06
06A4A:  MOVWF  FEA
06A4C:  MOVLW  4E
06A4E:  MOVWF  FE9
06A50:  CALL   47EC
....................         putc('\n',CH2);
06A54:  MOVLW  0A
06A56:  MOVLB  7
06A58:  MOVWF  x5A
06A5A:  MOVLB  0
06A5C:  CALL   23F0
....................        putc(26,CH2);
06A60:  MOVLW  1A
06A62:  MOVLB  7
06A64:  MOVWF  x5A
06A66:  MOVLB  0
06A68:  CALL   23F0
06A6C:  MOVLB  6
....................       }
....................    }
06A6E:  BRA    6B02
....................    else if(FaultType.B7 == 0)
06A70:  MOVLB  6
06A72:  BTFSC  xD4.6
06A74:  BRA    6B02
....................    {
....................       In2.B7 = 0x00;
06A76:  BCF    xE0.6
....................       Ack.B7 = 0;
06A78:  BCF    xDC.6
....................       Output.B7 = 1;      //Off LED
06A7A:  BSF    xD0.6
....................       
....................       SendSMS.B7 =0;// Clear SMS
06A7C:  BCF    xEA.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)       //If Buzzer or Both
06A7E:  BTFSC  xD6.6
06A80:  BRA    6A86
06A82:  BTFSC  xD8.6
06A84:  BRA    6AA8
06A86:  MOVLB  7
06A88:  MOVF   x4C,F
06A8A:  BTFSC  FD8.2
06A8C:  BRA    6A92
06A8E:  MOVLB  6
06A90:  BRA    6AA8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06A92:  MOVLW  01
06A94:  MOVWF  x58
06A96:  MOVLB  0
06A98:  CALL   4812
06A9C:  DECFSZ 01,W
06A9E:  BRA    6AA2
06AA0:  BRA    6AA6
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06AA2:  BCF    F89.4
06AA4:  BCF    F92.4
06AA6:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)   //If Bell or Both
06AA8:  BTFSS  xD6.6
06AAA:  BRA    6AB0
06AAC:  BTFSC  xD8.6
06AAE:  BRA    6AD2
06AB0:  MOVLB  7
06AB2:  MOVF   x4C,F
06AB4:  BTFSC  FD8.2
06AB6:  BRA    6ABC
06AB8:  MOVLB  6
06ABA:  BRA    6AD2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06ABC:  MOVLW  02
06ABE:  MOVWF  x58
06AC0:  MOVLB  0
06AC2:  CALL   4812
06AC6:  DECFSZ 01,W
06AC8:  BRA    6ACC
06ACA:  BRA    6AD0
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06ACC:  BCF    F89.3
06ACE:  BCF    F92.3
06AD0:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06AD2:  BTFSC  xE0.0
06AD4:  BRA    6B02
06AD6:  BTFSC  xE0.1
06AD8:  BRA    6B02
06ADA:  BTFSC  xE0.2
06ADC:  BRA    6B02
06ADE:  BTFSC  xE0.3
06AE0:  BRA    6B02
06AE2:  BTFSC  xE0.4
06AE4:  BRA    6B02
06AE6:  BTFSC  xE0.5
06AE8:  BRA    6B02
06AEA:  BTFSC  xE0.6
06AEC:  BRA    6B02
06AEE:  BTFSC  xE0.7
06AF0:  BRA    6B02
06AF2:  BTFSC  xE1.0
06AF4:  BRA    6B02
06AF6:  BTFSC  xE1.1
06AF8:  BRA    6B02
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06AFA:  BCF    F89.3
06AFC:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06AFE:  BCF    F89.4
06B00:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06B02:  MOVLW  00
06B04:  BTFSC  xCE.7
06B06:  MOVLW  01
06B08:  MOVLB  7
06B0A:  MOVWF  x59
06B0C:  MOVLW  00
06B0E:  MOVLB  6
06B10:  BTFSC  xD2.7
06B12:  MOVLW  01
06B14:  MOVLB  7
06B16:  XORWF  x59,W
06B18:  SUBLW  01
06B1A:  BNZ   6B24
06B1C:  MOVLB  6
06B1E:  BTFSS  xD4.7
06B20:  BRA    6B2A
06B22:  MOVLB  7
06B24:  BTFSS  1A.5
06B26:  BRA    6BEC
06B28:  MOVLB  6
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
06B2A:  BTFSC  xE0.7
06B2C:  BRA    6B40
06B2E:  MOVF   5E,W
06B30:  SUBLW  0F
06B32:  BNZ   6B40
06B34:  BTFSC  xDC.7
06B36:  BRA    6B40
....................       {
....................             TimeBase1s = 100 ;            //reload again
06B38:  MOVLW  64
06B3A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06B3C:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B8 = 1;
06B40:  BSF    xE0.7
....................       if(Ack.B8 == 0)
06B42:  BTFSC  xDC.7
06B44:  BRA    6B70
....................       {
....................          if(FlashingFlag == 0)
06B46:  BTFSC  1A.1
06B48:  BRA    6B4E
....................             {
....................                Output.B8 = 0;           //Flash output1
06B4A:  BCF    xD0.7
....................             }
06B4C:  BRA    6B50
....................             else
....................             {
....................                Output.B8 = 1;
06B4E:  BSF    xD0.7
....................             }
....................          if (~AutoTestFlag)
06B50:  BTFSC  1A.4
06B52:  BRA    6B70
....................          {
....................              if(OutputBoth.B8 == 0)        //Both output
06B54:  BTFSC  xD8.7
06B56:  BRA    6B62
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06B58:  BSF    F89.4
06B5A:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06B5C:  BSF    F89.3
06B5E:  BCF    F92.3
....................              }
06B60:  BRA    6B70
....................              else
....................              {
....................                if(OutputType.B8 == 1) output_bit(Pbuzzer,1);     //Buzzer
06B62:  BTFSS  xD6.7
06B64:  BRA    6B6C
06B66:  BSF    F89.4
06B68:  BCF    F92.4
06B6A:  BRA    6B70
....................                else output_bit(Pbell,1);                          //Bell
06B6C:  BSF    F89.3
06B6E:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06B70:  MOVLW  01
06B72:  MOVLB  7
06B74:  MOVWF  x4C
....................       
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
06B76:  MOVLB  6
06B78:  BTFSC  xEA.7
06B7A:  BRA    6BEA
06B7C:  BTFSC  30.1
06B7E:  BRA    6BEA
06B80:  BTFSC  xDC.7
06B82:  BRA    6BEA
....................       {
....................          SendSMS.B8 =1;
06B84:  BSF    xEA.7
....................          fprintf(CH2,"AT+CMGS=\"");
06B86:  MOVLW  20
06B88:  MOVWF  FF6
06B8A:  MOVLW  08
06B8C:  MOVWF  FF7
06B8E:  MOVLB  0
06B90:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
06B94:  MOVLW  05
06B96:  MOVWF  FEA
06B98:  MOVLW  7F
06B9A:  MOVWF  FE9
06B9C:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
06BA0:  MOVLW  22
06BA2:  MOVLB  7
06BA4:  MOVWF  x5A
06BA6:  MOVLB  0
06BA8:  CALL   23F0
....................          putc('\n',CH2);
06BAC:  MOVLW  0A
06BAE:  MOVLB  7
06BB0:  MOVWF  x5A
06BB2:  MOVLB  0
06BB4:  CALL   23F0
....................          delay_ms(50);
06BB8:  MOVLW  32
06BBA:  MOVLB  7
06BBC:  MOVWF  x59
06BBE:  MOVLB  0
06BC0:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage8);   
06BC4:  MOVLW  06
06BC6:  MOVWF  FEA
06BC8:  MOVLW  6E
06BCA:  MOVWF  FE9
06BCC:  CALL   47EC
....................         putc('\n',CH2);
06BD0:  MOVLW  0A
06BD2:  MOVLB  7
06BD4:  MOVWF  x5A
06BD6:  MOVLB  0
06BD8:  CALL   23F0
....................         putc(26,CH2);
06BDC:  MOVLW  1A
06BDE:  MOVLB  7
06BE0:  MOVWF  x5A
06BE2:  MOVLB  0
06BE4:  CALL   23F0
06BE8:  MOVLB  6
....................       }
....................    }
06BEA:  BRA    6C7E
....................    else if(FaultType.B8 == 0)
06BEC:  MOVLB  6
06BEE:  BTFSC  xD4.7
06BF0:  BRA    6C7E
....................    {
....................       In2.B8 = 0x00;
06BF2:  BCF    xE0.7
....................       Ack.B8 = 0;
06BF4:  BCF    xDC.7
....................       Output.B8 = 1;      //Off LED
06BF6:  BSF    xD0.7
....................       
....................       SendSMS.B8 =0;// Clear SMS
06BF8:  BCF    xEA.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)       //If Buzzer or Both
06BFA:  BTFSC  xD6.7
06BFC:  BRA    6C02
06BFE:  BTFSC  xD8.7
06C00:  BRA    6C24
06C02:  MOVLB  7
06C04:  MOVF   x4C,F
06C06:  BTFSC  FD8.2
06C08:  BRA    6C0E
06C0A:  MOVLB  6
06C0C:  BRA    6C24
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06C0E:  MOVLW  01
06C10:  MOVWF  x58
06C12:  MOVLB  0
06C14:  CALL   4812
06C18:  DECFSZ 01,W
06C1A:  BRA    6C1E
06C1C:  BRA    6C22
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06C1E:  BCF    F89.4
06C20:  BCF    F92.4
06C22:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)   //If Bell or Both
06C24:  BTFSS  xD6.7
06C26:  BRA    6C2C
06C28:  BTFSC  xD8.7
06C2A:  BRA    6C4E
06C2C:  MOVLB  7
06C2E:  MOVF   x4C,F
06C30:  BTFSC  FD8.2
06C32:  BRA    6C38
06C34:  MOVLB  6
06C36:  BRA    6C4E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06C38:  MOVLW  02
06C3A:  MOVWF  x58
06C3C:  MOVLB  0
06C3E:  CALL   4812
06C42:  DECFSZ 01,W
06C44:  BRA    6C48
06C46:  BRA    6C4C
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06C48:  BCF    F89.3
06C4A:  BCF    F92.3
06C4C:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06C4E:  BTFSC  xE0.0
06C50:  BRA    6C7E
06C52:  BTFSC  xE0.1
06C54:  BRA    6C7E
06C56:  BTFSC  xE0.2
06C58:  BRA    6C7E
06C5A:  BTFSC  xE0.3
06C5C:  BRA    6C7E
06C5E:  BTFSC  xE0.4
06C60:  BRA    6C7E
06C62:  BTFSC  xE0.5
06C64:  BRA    6C7E
06C66:  BTFSC  xE0.6
06C68:  BRA    6C7E
06C6A:  BTFSC  xE0.7
06C6C:  BRA    6C7E
06C6E:  BTFSC  xE1.0
06C70:  BRA    6C7E
06C72:  BTFSC  xE1.1
06C74:  BRA    6C7E
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06C76:  BCF    F89.3
06C78:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06C7A:  BCF    F89.4
06C7C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06C7E:  MOVLW  00
06C80:  BTFSC  xCF.0
06C82:  MOVLW  01
06C84:  MOVLB  7
06C86:  MOVWF  x59
06C88:  MOVLW  00
06C8A:  MOVLB  6
06C8C:  BTFSC  xD3.0
06C8E:  MOVLW  01
06C90:  MOVLB  7
06C92:  XORWF  x59,W
06C94:  SUBLW  01
06C96:  BNZ   6CA0
06C98:  MOVLB  6
06C9A:  BTFSS  xD5.0
06C9C:  BRA    6CA6
06C9E:  MOVLB  7
06CA0:  BTFSS  1A.5
06CA2:  BRA    6D68
06CA4:  MOVLB  6
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
06CA6:  BTFSC  xE1.0
06CA8:  BRA    6CBC
06CAA:  MOVF   5E,W
06CAC:  SUBLW  0F
06CAE:  BNZ   6CBC
06CB0:  BTFSC  xDD.0
06CB2:  BRA    6CBC
....................       {
....................             TimeBase1s = 100 ;            //reload again
06CB4:  MOVLW  64
06CB6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06CB8:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B9 = 1;
06CBC:  BSF    xE1.0
....................       if(Ack.B9 == 0)
06CBE:  BTFSC  xDD.0
06CC0:  BRA    6CEC
....................       {
....................          if(FlashingFlag == 0)
06CC2:  BTFSC  1A.1
06CC4:  BRA    6CCA
....................             {
....................                Output.B9 = 0;           //Flash output1
06CC6:  BCF    xD1.0
....................             }
06CC8:  BRA    6CCC
....................             else
....................             {
....................                Output.B9 = 1;
06CCA:  BSF    xD1.0
....................             }
....................          if (~AutoTestFlag)
06CCC:  BTFSC  1A.4
06CCE:  BRA    6CEC
....................          {
....................              if(OutputBoth.B9 == 0)        //Both output
06CD0:  BTFSC  xD9.0
06CD2:  BRA    6CDE
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06CD4:  BSF    F89.4
06CD6:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06CD8:  BSF    F89.3
06CDA:  BCF    F92.3
....................              }
06CDC:  BRA    6CEC
....................              else
....................              {
....................                if(OutputType.B9 == 1) output_bit(Pbuzzer,1);     //Buzzer
06CDE:  BTFSS  xD7.0
06CE0:  BRA    6CE8
06CE2:  BSF    F89.4
06CE4:  BCF    F92.4
06CE6:  BRA    6CEC
....................                else output_bit(Pbell,1);                          //Bell
06CE8:  BSF    F89.3
06CEA:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06CEC:  MOVLW  01
06CEE:  MOVLB  7
06CF0:  MOVWF  x4C
....................       
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
06CF2:  MOVLB  6
06CF4:  BTFSC  xEB.0
06CF6:  BRA    6D66
06CF8:  BTFSC  30.1
06CFA:  BRA    6D66
06CFC:  BTFSC  xDD.0
06CFE:  BRA    6D66
....................       {
....................          SendSMS.B9 =1;
06D00:  BSF    xEB.0
....................          fprintf(CH2,"AT+CMGS=\"");
06D02:  MOVLW  2A
06D04:  MOVWF  FF6
06D06:  MOVLW  08
06D08:  MOVWF  FF7
06D0A:  MOVLB  0
06D0C:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
06D10:  MOVLW  05
06D12:  MOVWF  FEA
06D14:  MOVLW  7F
06D16:  MOVWF  FE9
06D18:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
06D1C:  MOVLW  22
06D1E:  MOVLB  7
06D20:  MOVWF  x5A
06D22:  MOVLB  0
06D24:  CALL   23F0
....................          putc('\n',CH2);
06D28:  MOVLW  0A
06D2A:  MOVLB  7
06D2C:  MOVWF  x5A
06D2E:  MOVLB  0
06D30:  CALL   23F0
....................          delay_ms(50);
06D34:  MOVLW  32
06D36:  MOVLB  7
06D38:  MOVWF  x59
06D3A:  MOVLB  0
06D3C:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage9);   
06D40:  MOVLW  06
06D42:  MOVWF  FEA
06D44:  MOVLW  8E
06D46:  MOVWF  FE9
06D48:  CALL   47EC
....................         putc('\n',CH2);
06D4C:  MOVLW  0A
06D4E:  MOVLB  7
06D50:  MOVWF  x5A
06D52:  MOVLB  0
06D54:  CALL   23F0
....................         putc(26,CH2);
06D58:  MOVLW  1A
06D5A:  MOVLB  7
06D5C:  MOVWF  x5A
06D5E:  MOVLB  0
06D60:  CALL   23F0
06D64:  MOVLB  6
....................       }
....................    }
06D66:  BRA    6DFA
....................    else if(FaultType.B9 == 0)
06D68:  MOVLB  6
06D6A:  BTFSC  xD5.0
06D6C:  BRA    6DFA
....................    {
....................       In2.B9 = 0x00;
06D6E:  BCF    xE1.0
....................       Ack.B9 = 0;
06D70:  BCF    xDD.0
....................       Output.B9 = 1;      //Off LED
06D72:  BSF    xD1.0
....................       
....................       SendSMS.B9 =0;// Clear SMS
06D74:  BCF    xEB.0
.................... 
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)       //If Buzzer or Both
06D76:  BTFSC  xD7.0
06D78:  BRA    6D7E
06D7A:  BTFSC  xD9.0
06D7C:  BRA    6DA0
06D7E:  MOVLB  7
06D80:  MOVF   x4C,F
06D82:  BTFSC  FD8.2
06D84:  BRA    6D8A
06D86:  MOVLB  6
06D88:  BRA    6DA0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06D8A:  MOVLW  01
06D8C:  MOVWF  x58
06D8E:  MOVLB  0
06D90:  CALL   4812
06D94:  DECFSZ 01,W
06D96:  BRA    6D9A
06D98:  BRA    6D9E
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06D9A:  BCF    F89.4
06D9C:  BCF    F92.4
06D9E:  MOVLB  6
....................          }
....................       }
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)   //If Bell or Both
06DA0:  BTFSS  xD7.0
06DA2:  BRA    6DA8
06DA4:  BTFSC  xD9.0
06DA6:  BRA    6DCA
06DA8:  MOVLB  7
06DAA:  MOVF   x4C,F
06DAC:  BTFSC  FD8.2
06DAE:  BRA    6DB4
06DB0:  MOVLB  6
06DB2:  BRA    6DCA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06DB4:  MOVLW  02
06DB6:  MOVWF  x58
06DB8:  MOVLB  0
06DBA:  CALL   4812
06DBE:  DECFSZ 01,W
06DC0:  BRA    6DC4
06DC2:  BRA    6DC8
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06DC4:  BCF    F89.3
06DC6:  BCF    F92.3
06DC8:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06DCA:  BTFSC  xE0.0
06DCC:  BRA    6DFA
06DCE:  BTFSC  xE0.1
06DD0:  BRA    6DFA
06DD2:  BTFSC  xE0.2
06DD4:  BRA    6DFA
06DD6:  BTFSC  xE0.3
06DD8:  BRA    6DFA
06DDA:  BTFSC  xE0.4
06DDC:  BRA    6DFA
06DDE:  BTFSC  xE0.5
06DE0:  BRA    6DFA
06DE2:  BTFSC  xE0.6
06DE4:  BRA    6DFA
06DE6:  BTFSC  xE0.7
06DE8:  BRA    6DFA
06DEA:  BTFSC  xE1.0
06DEC:  BRA    6DFA
06DEE:  BTFSC  xE1.1
06DF0:  BRA    6DFA
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06DF2:  BCF    F89.3
06DF4:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06DF6:  BCF    F89.4
06DF8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
06DFA:  MOVLW  00
06DFC:  BTFSC  xCF.1
06DFE:  MOVLW  01
06E00:  MOVLB  7
06E02:  MOVWF  x59
06E04:  MOVLW  00
06E06:  MOVLB  6
06E08:  BTFSC  xD3.1
06E0A:  MOVLW  01
06E0C:  MOVLB  7
06E0E:  XORWF  x59,W
06E10:  SUBLW  01
06E12:  BNZ   6E1C
06E14:  MOVLB  6
06E16:  BTFSS  xD5.1
06E18:  BRA    6E22
06E1A:  MOVLB  7
06E1C:  BTFSS  1A.5
06E1E:  BRA    6EE4
06E20:  MOVLB  6
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
06E22:  BTFSC  xE1.1
06E24:  BRA    6E38
06E26:  MOVF   5E,W
06E28:  SUBLW  0F
06E2A:  BNZ   6E38
06E2C:  BTFSC  xDD.1
06E2E:  BRA    6E38
....................       {
....................             TimeBase1s = 100 ;            //reload again
06E30:  MOVLW  64
06E32:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
06E34:  MOVFF  5F,1D
....................       }
.................... 
....................       In2.B10 = 1;
06E38:  BSF    xE1.1
....................       if(Ack.B10 == 0)
06E3A:  BTFSC  xDD.1
06E3C:  BRA    6E68
....................       {
....................          if(FlashingFlag == 0)
06E3E:  BTFSC  1A.1
06E40:  BRA    6E46
....................          {
....................             Output.B10 = 0;           //Flash output1
06E42:  BCF    xD1.1
....................          }
06E44:  BRA    6E48
....................          else
....................          {
....................             Output.B10 = 1;
06E46:  BSF    xD1.1
....................          }
....................          if (~AutoTestFlag)
06E48:  BTFSC  1A.4
06E4A:  BRA    6E68
....................          {
....................              if(OutputBoth.B10 == 0)        //Both output
06E4C:  BTFSC  xD9.1
06E4E:  BRA    6E5A
....................              {
....................                output_bit(Pbuzzer,1);   //Buzzer
06E50:  BSF    F89.4
06E52:  BCF    F92.4
....................                output_bit(Pbell,1);     //Bell
06E54:  BSF    F89.3
06E56:  BCF    F92.3
....................              }
06E58:  BRA    6E68
....................              else
....................              {
....................                if(OutputType.B10 == 1) output_bit(Pbuzzer,1);     //Buzzer
06E5A:  BTFSS  xD7.1
06E5C:  BRA    6E64
06E5E:  BSF    F89.4
06E60:  BCF    F92.4
06E62:  BRA    6E68
....................                else output_bit(Pbell,1);                          //Bell
06E64:  BSF    F89.3
06E66:  BCF    F92.3
....................              }
....................          }
....................        }
....................       inputflag =1;
06E68:  MOVLW  01
06E6A:  MOVLB  7
06E6C:  MOVWF  x4C
....................       
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
06E6E:  MOVLB  6
06E70:  BTFSC  xEB.1
06E72:  BRA    6EE2
06E74:  BTFSC  30.1
06E76:  BRA    6EE2
06E78:  BTFSC  xDD.1
06E7A:  BRA    6EE2
....................       {
....................          SendSMS.B10 =1;
06E7C:  BSF    xEB.1
....................          fprintf(CH2,"AT+CMGS=\"");
06E7E:  MOVLW  34
06E80:  MOVWF  FF6
06E82:  MOVLW  08
06E84:  MOVWF  FF7
06E86:  MOVLB  0
06E88:  CALL   2436
....................          fprintf(CH2,sms_phonenumber);
06E8C:  MOVLW  05
06E8E:  MOVWF  FEA
06E90:  MOVLW  7F
06E92:  MOVWF  FE9
06E94:  CALL   47EC
....................          
....................          fprintf(CH2,"\"");
06E98:  MOVLW  22
06E9A:  MOVLB  7
06E9C:  MOVWF  x5A
06E9E:  MOVLB  0
06EA0:  CALL   23F0
....................          putc('\n',CH2);
06EA4:  MOVLW  0A
06EA6:  MOVLB  7
06EA8:  MOVWF  x5A
06EAA:  MOVLB  0
06EAC:  CALL   23F0
....................          delay_ms(50);
06EB0:  MOVLW  32
06EB2:  MOVLB  7
06EB4:  MOVWF  x59
06EB6:  MOVLB  0
06EB8:  CALL   0848
....................         
....................         fprintf(CH2,SMS_Massage10);   
06EBC:  MOVLW  06
06EBE:  MOVWF  FEA
06EC0:  MOVLW  AE
06EC2:  MOVWF  FE9
06EC4:  CALL   47EC
....................         putc('\n',CH2);
06EC8:  MOVLW  0A
06ECA:  MOVLB  7
06ECC:  MOVWF  x5A
06ECE:  MOVLB  0
06ED0:  CALL   23F0
....................         putc(26,CH2);
06ED4:  MOVLW  1A
06ED6:  MOVLB  7
06ED8:  MOVWF  x5A
06EDA:  MOVLB  0
06EDC:  CALL   23F0
06EE0:  MOVLB  6
....................       }
....................    }
06EE2:  BRA    6F76
....................    else if(FaultType.B10 == 0)
06EE4:  MOVLB  6
06EE6:  BTFSC  xD5.1
06EE8:  BRA    6F76
....................    {
....................       In2.B10 = 0x00;
06EEA:  BCF    xE1.1
....................       Ack.B10 = 0;
06EEC:  BCF    xDD.1
....................       Output.B10 = 1;      //Off LED
06EEE:  BSF    xD1.1
....................       
....................       SendSMS.B10 =0;// Clear SMS
06EF0:  BCF    xEB.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)       //If Buzzer or Both
06EF2:  BTFSC  xD7.1
06EF4:  BRA    6EFA
06EF6:  BTFSC  xD9.1
06EF8:  BRA    6F1C
06EFA:  MOVLB  7
06EFC:  MOVF   x4C,F
06EFE:  BTFSC  FD8.2
06F00:  BRA    6F06
06F02:  MOVLB  6
06F04:  BRA    6F1C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Input "Ack" or not if not,do nothing
06F06:  MOVLW  01
06F08:  MOVWF  x58
06F0A:  MOVLB  0
06F0C:  CALL   4812
06F10:  DECFSZ 01,W
06F12:  BRA    6F16
06F14:  BRA    6F1A
....................          else
....................          {
....................             output_bit(Pbuzzer,0);   //Clear Buzzer
06F16:  BCF    F89.4
06F18:  BCF    F92.4
06F1A:  MOVLB  6
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)   //If Bell or Both
06F1C:  BTFSS  xD7.1
06F1E:  BRA    6F24
06F20:  BTFSC  xD9.1
06F22:  BRA    6F46
06F24:  MOVLB  7
06F26:  MOVF   x4C,F
06F28:  BTFSC  FD8.2
06F2A:  BRA    6F30
06F2C:  MOVLB  6
06F2E:  BRA    6F46
....................       {
....................          if(CheckAutoReset(0x02) == 1);
06F30:  MOVLW  02
06F32:  MOVWF  x58
06F34:  MOVLB  0
06F36:  CALL   4812
06F3A:  DECFSZ 01,W
06F3C:  BRA    6F40
06F3E:  BRA    6F44
....................          else
....................          {
....................             output_bit(Pbell,0);      //Clear Bell
06F40:  BCF    F89.3
06F42:  BCF    F92.3
06F44:  MOVLB  6
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0)
06F46:  BTFSC  xE0.0
06F48:  BRA    6F76
06F4A:  BTFSC  xE0.1
06F4C:  BRA    6F76
06F4E:  BTFSC  xE0.2
06F50:  BRA    6F76
06F52:  BTFSC  xE0.3
06F54:  BRA    6F76
06F56:  BTFSC  xE0.4
06F58:  BRA    6F76
06F5A:  BTFSC  xE0.5
06F5C:  BRA    6F76
06F5E:  BTFSC  xE0.6
06F60:  BRA    6F76
06F62:  BTFSC  xE0.7
06F64:  BRA    6F76
06F66:  BTFSC  xE1.0
06F68:  BRA    6F76
06F6A:  BTFSC  xE1.1
06F6C:  BRA    6F76
....................       {
....................          output_bit(Pbell,0);      //Clear Bell
06F6E:  BCF    F89.3
06F70:  BCF    F92.3
....................          output_bit(Pbuzzer,0);   //Clear Buzzer
06F72:  BCF    F89.4
06F74:  BCF    F92.4
....................       }
....................    }
06F76:  MOVLB  0
06F78:  RETURN 0
....................    
.................... 
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Send_Ouput(void)
.................... {
.................... 
....................    if(T_test == 0x00)
*
021BA:  MOVF   2F,F
021BC:  BTFSS  FD8.2
021BE:  BRA    23EE
....................    {
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
021C0:  MOVLB  6
021C2:  BTFSS  xD0.0
021C4:  BRA    21CC
....................            {
....................              bit_clear(Green1_8,0); bit_clear(Red1_8,0);
021C6:  BCF    52.0
021C8:  BCF    4E.0
....................            }
021CA:  BRA    21F4
....................            else
....................            {
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
021CC:  BTFSS  xE6.0
021CE:  BRA    21DA
021D0:  BTFSC  xE8.0
021D2:  BRA    21DA
....................              {
....................                bit_set(Red1_8,0); bit_clear(Green1_8,0);
021D4:  BSF    4E.0
021D6:  BCF    52.0
....................              }
021D8:  BRA    21F4
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
021DA:  BTFSC  xE6.0
021DC:  BRA    21E8
021DE:  BTFSS  xE8.0
021E0:  BRA    21E8
....................              {
....................                bit_clear(Red1_8,0); bit_set(Green1_8,0); 
021E2:  BCF    4E.0
021E4:  BSF    52.0
....................              }
021E6:  BRA    21F4
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
021E8:  BTFSS  xE6.0
021EA:  BRA    21F4
021EC:  BTFSS  xE8.0
021EE:  BRA    21F4
....................              {
....................                bit_set(Red1_8,0); bit_set(Green1_8,0) ; 
021F0:  BSF    4E.0
021F2:  BSF    52.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
021F4:  BTFSS  xD0.1
021F6:  BRA    21FE
....................            {
....................              bit_clear(Green1_8,1); bit_clear(Red1_8,1);
021F8:  BCF    52.1
021FA:  BCF    4E.1
....................            }
021FC:  BRA    2226
....................            else
....................            {
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
021FE:  BTFSS  xE6.1
02200:  BRA    220C
02202:  BTFSC  xE8.1
02204:  BRA    220C
....................              {
....................                bit_set(Red1_8,1); bit_clear(Green1_8,1);
02206:  BSF    4E.1
02208:  BCF    52.1
....................              }
0220A:  BRA    2226
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
0220C:  BTFSC  xE6.1
0220E:  BRA    221A
02210:  BTFSS  xE8.1
02212:  BRA    221A
....................              {
....................                bit_clear(Red1_8,1); bit_set(Green1_8,1); 
02214:  BCF    4E.1
02216:  BSF    52.1
....................              }
02218:  BRA    2226
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
0221A:  BTFSS  xE6.1
0221C:  BRA    2226
0221E:  BTFSS  xE8.1
02220:  BRA    2226
....................              {
....................                bit_set(Red1_8,1); bit_set(Green1_8,1) ; 
02222:  BSF    4E.1
02224:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
02226:  BTFSS  xD0.2
02228:  BRA    2230
....................            {
....................              bit_clear(Green1_8,2); bit_clear(Red1_8,2);
0222A:  BCF    52.2
0222C:  BCF    4E.2
....................            }
0222E:  BRA    2258
....................            else
....................            {
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
02230:  BTFSS  xE6.2
02232:  BRA    223E
02234:  BTFSC  xE8.2
02236:  BRA    223E
....................              {
....................                bit_set(Red1_8,2); bit_clear(Green1_8,2);
02238:  BSF    4E.2
0223A:  BCF    52.2
....................              }
0223C:  BRA    2258
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
0223E:  BTFSC  xE6.2
02240:  BRA    224C
02242:  BTFSS  xE8.2
02244:  BRA    224C
....................              {
....................                bit_clear(Red1_8,2); bit_set(Green1_8,2); 
02246:  BCF    4E.2
02248:  BSF    52.2
....................              }
0224A:  BRA    2258
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
0224C:  BTFSS  xE6.2
0224E:  BRA    2258
02250:  BTFSS  xE8.2
02252:  BRA    2258
....................              {
....................                bit_set(Red1_8,2); bit_set(Green1_8,2) ; 
02254:  BSF    4E.2
02256:  BSF    52.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
02258:  BTFSS  xD0.3
0225A:  BRA    2262
....................            {
....................              bit_clear(Green1_8,3); bit_clear(Red1_8,3);
0225C:  BCF    52.3
0225E:  BCF    4E.3
....................            }
02260:  BRA    228A
....................            else
....................            {
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
02262:  BTFSS  xE6.3
02264:  BRA    2270
02266:  BTFSC  xE8.3
02268:  BRA    2270
....................              {
....................                bit_set(Red1_8,3); bit_clear(Green1_8,3);
0226A:  BSF    4E.3
0226C:  BCF    52.3
....................              }
0226E:  BRA    228A
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
02270:  BTFSC  xE6.3
02272:  BRA    227E
02274:  BTFSS  xE8.3
02276:  BRA    227E
....................              {
....................                bit_clear(Red1_8,3); bit_set(Green1_8,3); 
02278:  BCF    4E.3
0227A:  BSF    52.3
....................              }
0227C:  BRA    228A
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
0227E:  BTFSS  xE6.3
02280:  BRA    228A
02282:  BTFSS  xE8.3
02284:  BRA    228A
....................              {
....................                bit_set(Red1_8,3); bit_set(Green1_8,3) ; 
02286:  BSF    4E.3
02288:  BSF    52.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
0228A:  BTFSS  xD0.4
0228C:  BRA    2294
....................            {
....................              bit_clear(Green1_8,4); bit_clear(Red1_8,4);
0228E:  BCF    52.4
02290:  BCF    4E.4
....................            }
02292:  BRA    22BC
....................            else
....................            {
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
02294:  BTFSS  xE6.4
02296:  BRA    22A2
02298:  BTFSC  xE8.4
0229A:  BRA    22A2
....................              {
....................                bit_set(Red1_8,4); bit_clear(Green1_8,4);
0229C:  BSF    4E.4
0229E:  BCF    52.4
....................              }
022A0:  BRA    22BC
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
022A2:  BTFSC  xE6.4
022A4:  BRA    22B0
022A6:  BTFSS  xE8.4
022A8:  BRA    22B0
....................              {
....................                bit_clear(Red1_8,4); bit_set(Green1_8,4); 
022AA:  BCF    4E.4
022AC:  BSF    52.4
....................              }
022AE:  BRA    22BC
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
022B0:  BTFSS  xE6.4
022B2:  BRA    22BC
022B4:  BTFSS  xE8.4
022B6:  BRA    22BC
....................              {
....................                bit_set(Red1_8,4); bit_set(Green1_8,4) ; 
022B8:  BSF    4E.4
022BA:  BSF    52.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
022BC:  BTFSS  xD0.5
022BE:  BRA    22C6
....................            {
....................              bit_clear(Green1_8,5); bit_clear(Red1_8,5);
022C0:  BCF    52.5
022C2:  BCF    4E.5
....................            }
022C4:  BRA    22EE
....................            else
....................            {
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
022C6:  BTFSS  xE6.5
022C8:  BRA    22D4
022CA:  BTFSC  xE8.5
022CC:  BRA    22D4
....................              {
....................                bit_set(Red1_8,5); bit_clear(Green1_8,5);
022CE:  BSF    4E.5
022D0:  BCF    52.5
....................              }
022D2:  BRA    22EE
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
022D4:  BTFSC  xE6.5
022D6:  BRA    22E2
022D8:  BTFSS  xE8.5
022DA:  BRA    22E2
....................              {
....................                bit_clear(Red1_8,5); bit_set(Green1_8,5); 
022DC:  BCF    4E.5
022DE:  BSF    52.5
....................              }
022E0:  BRA    22EE
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
022E2:  BTFSS  xE6.5
022E4:  BRA    22EE
022E6:  BTFSS  xE8.5
022E8:  BRA    22EE
....................              {
....................                bit_set(Red1_8,5); bit_set(Green1_8,5) ; 
022EA:  BSF    4E.5
022EC:  BSF    52.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
022EE:  BTFSS  xD0.6
022F0:  BRA    22F8
....................            {
....................              bit_clear(Green1_8,6); bit_clear(Red1_8,6);
022F2:  BCF    52.6
022F4:  BCF    4E.6
....................            }
022F6:  BRA    2320
....................            else
....................            {
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
022F8:  BTFSS  xE6.6
022FA:  BRA    2306
022FC:  BTFSC  xE8.6
022FE:  BRA    2306
....................              {
....................                bit_set(Red1_8,6); bit_clear(Green1_8,6);
02300:  BSF    4E.6
02302:  BCF    52.6
....................              }
02304:  BRA    2320
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
02306:  BTFSC  xE6.6
02308:  BRA    2314
0230A:  BTFSS  xE8.6
0230C:  BRA    2314
....................              {
....................                bit_clear(Red1_8,6); bit_set(Green1_8,6); 
0230E:  BCF    4E.6
02310:  BSF    52.6
....................              }
02312:  BRA    2320
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
02314:  BTFSS  xE6.6
02316:  BRA    2320
02318:  BTFSS  xE8.6
0231A:  BRA    2320
....................              {
....................                bit_set(Red1_8,6); bit_set(Green
0231C:  BSF    4E.6
0231E:  BSF    52.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
02320:  BTFSS  xD0.7
02322:  BRA    232A
....................            {
....................              bit_clear(Green1_8,7); bit_clear(Red1_8,7);
02324:  BCF    52.7
02326:  BCF    4E.7
....................            }
02328:  BRA    2352
....................            else
....................            {
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
0232A:  BTFSS  xE6.7
0232C:  BRA    2338
0232E:  BTFSC  xE8.7
02330:  BRA    2338
....................              {
....................                bit_set(Red1_8,7); bit_clear(Green1_8,7);
02332:  BSF    4E.7
02334:  BCF    52.7
....................              }
02336:  BRA    2352
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
02338:  BTFSC  xE6.7
0233A:  BRA    2346
0233C:  BTFSS  xE8.7
0233E:  BRA    2346
....................              {
....................                bit_clear(Red1_8,7); bit_set(Green1_8,7); 
02340:  BCF    4E.7
02342:  BSF    52.7
....................              }
02344:  BRA    2352
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
02346:  BTFSS  xE6.7
02348:  BRA    2352
0234A:  BTFSS  xE8.7
0234C:  BRA    2352
....................              {
....................                bit_set(Red1_8,7); bit_set(Green1_8,7) ; 
0234E:  BSF    4E.7
02350:  BSF    52.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
02352:  BTFSS  xD1.0
02354:  BRA    235C
....................            {
....................              bit_clear(Green9_10,0); bit_clear(Red9_10,0);
02356:  BCF    53.0
02358:  BCF    4F.0
....................            }
0235A:  BRA    2384
....................            else
....................            {
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
0235C:  BTFSS  xE7.0
0235E:  BRA    236A
02360:  BTFSC  xE9.0
02362:  BRA    236A
....................              {
....................                bit_set(Red9_10,0); bit_clear(Green9_10,0);
02364:  BSF    4F.0
02366:  BCF    53.0
....................              }
02368:  BRA    2384
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
0236A:  BTFSC  xE7.0
0236C:  BRA    2378
0236E:  BTFSS  xE9.0
02370:  BRA    2378
....................              {
....................                bit_clear(Red9_10,0); bit_set(Green9_10,0); 
02372:  BCF    4F.0
02374:  BSF    53.0
....................              }
02376:  BRA    2384
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
02378:  BTFSS  xE7.0
0237A:  BRA    2384
0237C:  BTFSS  xE9.0
0237E:  BRA    2384
....................              {
....................                bit_set(Red9_10,0); bit_set(Green9_10,0) ; 
02380:  BSF    4F.0
02382:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
02384:  BTFSS  xD1.1
02386:  BRA    238E
....................            {
....................              bit_clear(Green9_10,1); bit_clear(Red9_10,1);
02388:  BCF    53.1
0238A:  BCF    4F.1
....................            }
0238C:  BRA    23B6
....................            else
....................            {
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
0238E:  BTFSS  xE7.1
02390:  BRA    239C
02392:  BTFSC  xE9.1
02394:  BRA    239C
....................              {
....................                bit_set(Red9_10,1); bit_clear(Green9_10,1);
02396:  BSF    4F.1
02398:  BCF    53.1
....................              }
0239A:  BRA    23B6
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
0239C:  BTFSC  xE7.1
0239E:  BRA    23AA
023A0:  BTFSS  xE9.1
023A2:  BRA    23AA
....................              {
....................                bit_clear(Red9_10,1); bit_set(Green9_10,1); 
023A4:  BCF    4F.1
023A6:  BSF    53.1
....................              }
023A8:  BRA    23B6
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
023AA:  BTFSS  xE7.1
023AC:  BRA    23B6
023AE:  BTFSS  xE9.1
023B0:  BRA    23B6
....................              {
....................                bit_set(Red9_10,1); bit_set(Green9_10,1) ; 
023B2:  BSF    4F.1
023B4:  BSF    53.1
....................              }  
....................            }
....................              
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_8);
023B6:  MOVLW  04
023B8:  MOVLB  7
023BA:  MOVWF  x50
023BC:  MOVFF  4E,751
023C0:  MOVLB  0
023C2:  RCALL  218E
....................            IO_OUTPUT_B(IO_DEVICE_2, Red9_10);
023C4:  MOVLW  04
023C6:  MOVLB  7
023C8:  MOVWF  x50
023CA:  MOVFF  4F,751
023CE:  MOVLB  0
023D0:  RCALL  21A4
....................                    
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_8);
023D2:  MOVLW  06
023D4:  MOVLB  7
023D6:  MOVWF  x50
023D8:  MOVFF  52,751
023DC:  MOVLB  0
023DE:  RCALL  218E
....................            IO_OUTPUT_B(IO_DEVICE_3, Green9_10);                                             
023E0:  MOVLW  06
023E2:  MOVLB  7
023E4:  MOVWF  x50
023E6:  MOVFF  53,751
023EA:  MOVLB  0
023EC:  RCALL  21A4
....................    }
023EE:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint == 10)
*
0478A:  MOVF   x61,W
0478C:  SUBLW  0A
0478E:  BNZ   47D0
....................    {
....................       Inputt.B1 = ~InputType.B1;
04790:  MOVLB  6
04792:  BCF    xCE.0
04794:  BTFSS  xD2.0
04796:  BSF    xCE.0
....................       Inputt.B2 = ~InputType.B2;
04798:  BCF    xCE.1
0479A:  BTFSS  xD2.1
0479C:  BSF    xCE.1
....................       Inputt.B3 = ~InputType.B3;
0479E:  BCF    xCE.2
047A0:  BTFSS  xD2.2
047A2:  BSF    xCE.2
....................       Inputt.B4 = ~InputType.B4;
047A4:  BCF    xCE.3
047A6:  BTFSS  xD2.3
047A8:  BSF    xCE.3
....................       Inputt.B5 = ~InputType.B5;
047AA:  BCF    xCE.4
047AC:  BTFSS  xD2.4
047AE:  BSF    xCE.4
....................       Inputt.B6 = ~InputType.B6;
047B0:  BCF    xCE.5
047B2:  BTFSS  xD2.5
047B4:  BSF    xCE.5
....................       Inputt.B7 = ~InputType.B7;
047B6:  BCF    xCE.6
047B8:  BTFSS  xD2.6
047BA:  BSF    xCE.6
....................       Inputt.B8 = ~InputType.B8;
047BC:  BCF    xCE.7
047BE:  BTFSS  xD2.7
047C0:  BSF    xCE.7
....................       Inputt.B9 = ~InputType.B9;
047C2:  BCF    xCF.0
047C4:  BTFSS  xD3.0
047C6:  BSF    xCF.0
....................       Inputt.B10 = ~InputType.B10;
047C8:  BCF    xCF.1
047CA:  BTFSS  xD3.1
047CC:  BSF    xCF.1
047CE:  MOVLB  0
....................    } 
.................... 
....................    Ack.B1 = 0;
047D0:  MOVLB  6
047D2:  BCF    xDC.0
....................    Ack.B2 = 0;
047D4:  BCF    xDC.1
....................    Ack.B3 = 0;
047D6:  BCF    xDC.2
....................    Ack.B4 = 0;
047D8:  BCF    xDC.3
....................    Ack.B5 = 0;
047DA:  BCF    xDC.4
....................    Ack.B6 = 0;
047DC:  BCF    xDC.5
....................    Ack.B7 = 0;
047DE:  BCF    xDC.6
....................    Ack.B8 = 0;
047E0:  BCF    xDC.7
....................    Ack.B9 = 0;
047E2:  BCF    xDD.0
....................    Ack.B10 = 0;
047E4:  BCF    xDD.1
047E6:  MOVLB  0
047E8:  GOTO   6FDE (RETURN)
.................... 
.................... }
.................... 
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
06F7A:  MOVFF  33,750
....................    output_temp[1] = output9_16;
06F7E:  MOVFF  34,751
.................... 
.................... 
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
06F82:  BSF    F94.2
06F84:  BTFSC  F82.2
06F86:  BRA    6F8C
06F88:  BTFSS  1A.6
06F8A:  BRA    6F90
06F8C:  BTFSS  1A.4
06F8E:  BRA    6F9C
06F90:  MOVLW  32
06F92:  MOVLB  7
06F94:  MOVWF  x59
06F96:  MOVLB  0
06F98:  CALL   0848
....................        if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
06F9C:  BSF    F94.2
06F9E:  BTFSC  F82.2
06FA0:  BRA    6FA6
06FA2:  BTFSS  1A.6
06FA4:  BRA    6FAA
06FA6:  BTFSS  1A.4
06FA8:  BRA    6FC6
....................        {
....................            if((input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
06FAA:  BSF    F94.2
06FAC:  BTFSC  F82.2
06FAE:  BRA    6FB4
06FB0:  BTFSS  1A.6
06FB2:  BRA    6FB8
06FB4:  BTFSS  1A.4
06FB6:  BRA    6FC4
....................            {
....................              restart_wdt();
06FB8:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
06FBA:  MOVF   2F,F
06FBC:  BNZ   6FC2
06FBE:  MOVLW  06
06FC0:  MOVWF  2F
....................               Test = 1;
06FC2:  BSF    1A.6
....................              
....................            }
....................        }
06FC4:  BRA    6FD6
....................        else if(input(Ptest) == 1 && Test == 1)
06FC6:  BSF    F94.2
06FC8:  BTFSS  F82.2
06FCA:  BRA    6FD6
06FCC:  BTFSS  1A.6
06FCE:  BRA    6FD6
....................        {
....................            T_test = 0x00;
06FD0:  CLRF   2F
....................            Test = 0;
06FD2:  BCF    1A.6
....................            Test_fault = 0;
06FD4:  BCF    1A.5
....................        }
.................... 
.................... 
....................        if(Test_fault == 1)
06FD6:  BTFSS  1A.5
06FD8:  BRA    6FEC
....................        {
....................           ForceAllAlarm();
06FDA:  GOTO   478A
....................           Anal_Function();
06FDE:  CALL   4E5A
....................           //Test_fault = 0;
....................           if(Input(Ptest) == 1)
06FE2:  BSF    F94.2
06FE4:  BTFSS  F82.2
06FE6:  BRA    6FEA
....................           {
....................             Test_fault = 0;
06FE8:  BCF    1A.5
....................           }
....................        }
06FEA:  BRA    7002
....................        else if(input(Ptest) == 1 && Test == 1)
06FEC:  BSF    F94.2
06FEE:  BTFSS  F82.2
06FF0:  BRA    7002
06FF2:  BTFSS  1A.6
06FF4:  BRA    7002
....................        {
....................           if(NoOfPoint >= 16)
06FF6:  MOVF   x61,W
06FF8:  SUBLW  0F
06FFA:  BC    6FFC
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
06FFC:  CLRF   2F
....................           Test = 0;
06FFE:  BCF    1A.6
....................           Test_fault = 0;
07000:  BCF    1A.5
....................        }
07002:  GOTO   76AE (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
044C6:  BSF    F94.0
044C8:  BTFSC  F82.0
044CA:  BRA    44D0
044CC:  BTFSS  1A.7
044CE:  BRA    44D4
044D0:  BTFSS  1A.2
044D2:  BRA    44E0
044D4:  MOVLW  32
044D6:  MOVLB  7
044D8:  MOVWF  x59
044DA:  MOVLB  0
044DC:  CALL   0848
....................    if((input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
044E0:  BSF    F94.0
044E2:  BTFSC  F82.0
044E4:  BRA    44EA
044E6:  BTFSS  1A.7
044E8:  BRA    44EE
044EA:  BTFSS  1A.2
044EC:  BRA    45A2
....................    {
....................             AutoAckFlag = 0;
044EE:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
044F0:  CLRF   1D
....................       
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
044F2:  MOVLB  6
044F4:  BTFSC  xDE.0
044F6:  BRA    44FC
044F8:  BTFSS  xE0.0
044FA:  BRA    4504
....................            {
....................              Ack.B1 = 1;
044FC:  BSF    xDC.0
....................              In.B1 = 0;
044FE:  BCF    xDE.0
....................              In2.B1 = 0;      //for auto reset
04500:  BCF    xE0.0
....................              Output.B1 = 0;
04502:  BCF    xD0.0
....................            }
.................... 
....................            if((In.B2 == 1)||(In2.B2 == 1))
04504:  BTFSC  xDE.1
04506:  BRA    450C
04508:  BTFSS  xE0.1
0450A:  BRA    4514
....................            {
....................              Ack.B2 = 1;
0450C:  BSF    xDC.1
....................              In.B2 = 0;
0450E:  BCF    xDE.1
....................              In2.B2 = 0;      //for auto reset
04510:  BCF    xE0.1
....................              Output.B2 = 0;
04512:  BCF    xD0.1
....................            }
.................... 
....................            if((In.B3 == 1)||(In2.B3 == 1))
04514:  BTFSC  xDE.2
04516:  BRA    451C
04518:  BTFSS  xE0.2
0451A:  BRA    4524
....................            {
....................              Ack.B3 = 1;
0451C:  BSF    xDC.2
....................              In.B3 = 0;
0451E:  BCF    xDE.2
....................              In2.B3 = 0;      //for auto reset
04520:  BCF    xE0.2
....................              Output.B3 = 0;
04522:  BCF    xD0.2
....................            }
.................... 
....................            if((In.B4 == 1)||(In2.B4 == 1))
04524:  BTFSC  xDE.3
04526:  BRA    452C
04528:  BTFSS  xE0.3
0452A:  BRA    4534
....................            {
....................              Ack.B4 = 1;
0452C:  BSF    xDC.3
....................              In.B4 = 0;
0452E:  BCF    xDE.3
....................              In2.B4 = 0;      //for auto reset
04530:  BCF    xE0.3
....................              Output.B4 = 0;
04532:  BCF    xD0.3
....................            }
.................... 
....................            if((In.B5 == 1)||(In2.B5 == 1))
04534:  BTFSC  xDE.4
04536:  BRA    453C
04538:  BTFSS  xE0.4
0453A:  BRA    4544
....................            {
....................              Ack.B5 = 1;
0453C:  BSF    xDC.4
....................              In.B5 = 0;
0453E:  BCF    xDE.4
....................              In2.B5 = 0;      //for auto reset
04540:  BCF    xE0.4
....................              Output.B5 = 0;
04542:  BCF    xD0.4
....................            }
.................... 
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
04544:  BTFSC  xDE.5
04546:  BRA    454C
04548:  BTFSS  xE0.5
0454A:  BRA    4554
....................            {
....................              Ack.B6 = 1;
0454C:  BSF    xDC.5
....................              In.B6 = 0;
0454E:  BCF    xDE.5
....................              In2.B6 = 0;      //for auto reset
04550:  BCF    xE0.5
....................              Output.B6 = 0;
04552:  BCF    xD0.5
....................            }
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
04554:  BTFSC  xDE.6
04556:  BRA    455C
04558:  BTFSS  xE0.6
0455A:  BRA    4564
....................            {
....................              Ack.B7 = 1;
0455C:  BSF    xDC.6
....................              In.B7 = 0;
0455E:  BCF    xDE.6
....................              In2.B7 = 0;      //for auto reset
04560:  BCF    xE0.6
....................              Output.B7 = 0;
04562:  BCF    xD0.6
....................            }
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
04564:  BTFSC  xDE.7
04566:  BRA    456C
04568:  BTFSS  xE0.7
0456A:  BRA    4574
....................            {
....................              Ack.B8 = 1;
0456C:  BSF    xDC.7
....................              In.B8 = 0;
0456E:  BCF    xDE.7
....................              In2.B8 = 0;      //for auto reset
04570:  BCF    xE0.7
....................              Output.B8 = 0;
04572:  BCF    xD0.7
....................            }
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
04574:  BTFSC  xDF.0
04576:  BRA    457C
04578:  BTFSS  xE1.0
0457A:  BRA    4584
....................            {
....................              Ack.B9 = 1;
0457C:  BSF    xDD.0
....................              In.B9 = 0;
0457E:  BCF    xDF.0
....................              In2.B9 = 0;      //for auto reset
04580:  BCF    xE1.0
....................              Output.B9 = 0;
04582:  BCF    xD1.0
....................            }
....................            if((In.B10 == 1)||(In2.B10 == 1))
04584:  BTFSC  xDF.1
04586:  BRA    458C
04588:  BTFSS  xE1.1
0458A:  BRA    4594
....................            {
....................              Ack.B10 = 1;
0458C:  BSF    xDD.1
....................              In.B10 = 0;
0458E:  BCF    xDF.1
....................              In2.B10 = 0;      //for auto reset
04590:  BCF    xE1.1
....................              Output.B10 = 0;
04592:  BCF    xD1.1
....................            }
....................           
....................             Ack_F = 1;
04594:  BSF    1A.7
....................             output_bit(Pbuzzer,0);   //Buzzer
04596:  BCF    F89.4
04598:  BCF    F92.4
....................             output_bit(Pbell,0);     //Bell
0459A:  BCF    F89.3
0459C:  BCF    F92.3
....................    }
0459E:  BRA    45B0
045A0:  MOVLB  0
....................    else if(input(Pack) == 1 && Ack_F == 1)
045A2:  BSF    F94.0
045A4:  BTFSS  F82.0
045A6:  BRA    45AE
045A8:  BTFSS  1A.7
045AA:  BRA    45AE
....................    {
....................       Ack_F = 0;
045AC:  BCF    1A.7
045AE:  MOVLB  6
....................    }
045B0:  MOVLB  0
045B2:  GOTO   76A8 (RETURN)
.................... 
.................... }
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
045B6:  BSF    F94.1
045B8:  BTFSC  F82.1
045BA:  BRA    45C0
045BC:  BTFSS  30.0
045BE:  BRA    45C4
045C0:  BTFSS  1A.3
045C2:  BRA    45D0
045C4:  MOVLW  32
045C6:  MOVLB  7
045C8:  MOVWF  x59
045CA:  MOVLB  0
045CC:  CALL   0848
....................     if((input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
045D0:  BSF    F94.1
045D2:  BTFSC  F82.1
045D4:  BRA    45DA
045D6:  BTFSS  30.0
045D8:  BRA    45DE
045DA:  BTFSS  1A.3
045DC:  BRA    4776
....................     {
....................        AutoResetFlag = 0;
045DE:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
045E0:  MOVLW  00
045E2:  MOVLB  6
045E4:  BTFSC  xCE.0
045E6:  MOVLW  01
045E8:  MOVLB  7
045EA:  MOVWF  x51
045EC:  MOVLW  00
045EE:  MOVLB  6
045F0:  BTFSC  xD2.0
045F2:  MOVLW  01
045F4:  MOVLB  7
045F6:  XORWF  x51,W
045F8:  BNZ   4608
045FA:  MOVLB  6
045FC:  BTFSS  xDE.0
045FE:  BRA    4604
04600:  MOVLB  7
04602:  BRA    4608
04604:  BSF    xD0.0
04606:  MOVLB  7
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
04608:  MOVLW  00
0460A:  MOVLB  6
0460C:  BTFSC  xCE.1
0460E:  MOVLW  01
04610:  MOVLB  7
04612:  MOVWF  x51
04614:  MOVLW  00
04616:  MOVLB  6
04618:  BTFSC  xD2.1
0461A:  MOVLW  01
0461C:  MOVLB  7
0461E:  XORWF  x51,W
04620:  BNZ   4630
04622:  MOVLB  6
04624:  BTFSS  xDE.1
04626:  BRA    462C
04628:  MOVLB  7
0462A:  BRA    4630
0462C:  BSF    xD0.1
0462E:  MOVLB  7
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
04630:  MOVLW  00
04632:  MOVLB  6
04634:  BTFSC  xCE.2
04636:  MOVLW  01
04638:  MOVLB  7
0463A:  MOVWF  x51
0463C:  MOVLW  00
0463E:  MOVLB  6
04640:  BTFSC  xD2.2
04642:  MOVLW  01
04644:  MOVLB  7
04646:  XORWF  x51,W
04648:  BNZ   4658
0464A:  MOVLB  6
0464C:  BTFSS  xDE.2
0464E:  BRA    4654
04650:  MOVLB  7
04652:  BRA    4658
04654:  BSF    xD0.2
04656:  MOVLB  7
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
04658:  MOVLW  00
0465A:  MOVLB  6
0465C:  BTFSC  xCE.3
0465E:  MOVLW  01
04660:  MOVLB  7
04662:  MOVWF  x51
04664:  MOVLW  00
04666:  MOVLB  6
04668:  BTFSC  xD2.3
0466A:  MOVLW  01
0466C:  MOVLB  7
0466E:  XORWF  x51,W
04670:  BNZ   4680
04672:  MOVLB  6
04674:  BTFSS  xDE.3
04676:  BRA    467C
04678:  MOVLB  7
0467A:  BRA    4680
0467C:  BSF    xD0.3
0467E:  MOVLB  7
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
04680:  MOVLW  00
04682:  MOVLB  6
04684:  BTFSC  xCE.4
04686:  MOVLW  01
04688:  MOVLB  7
0468A:  MOVWF  x51
0468C:  MOVLW  00
0468E:  MOVLB  6
04690:  BTFSC  xD2.4
04692:  MOVLW  01
04694:  MOVLB  7
04696:  XORWF  x51,W
04698:  BNZ   46A8
0469A:  MOVLB  6
0469C:  BTFSS  xDE.4
0469E:  BRA    46A4
046A0:  MOVLB  7
046A2:  BRA    46A8
046A4:  BSF    xD0.4
046A6:  MOVLB  7
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
046A8:  MOVLW  00
046AA:  MOVLB  6
046AC:  BTFSC  xCE.5
046AE:  MOVLW  01
046B0:  MOVLB  7
046B2:  MOVWF  x51
046B4:  MOVLW  00
046B6:  MOVLB  6
046B8:  BTFSC  xD2.5
046BA:  MOVLW  01
046BC:  MOVLB  7
046BE:  XORWF  x51,W
046C0:  BNZ   46D0
046C2:  MOVLB  6
046C4:  BTFSS  xDE.5
046C6:  BRA    46CC
046C8:  MOVLB  7
046CA:  BRA    46D0
046CC:  BSF    xD0.5
046CE:  MOVLB  7
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
046D0:  MOVLW  00
046D2:  MOVLB  6
046D4:  BTFSC  xCE.6
046D6:  MOVLW  01
046D8:  MOVLB  7
046DA:  MOVWF  x51
046DC:  MOVLW  00
046DE:  MOVLB  6
046E0:  BTFSC  xD2.6
046E2:  MOVLW  01
046E4:  MOVLB  7
046E6:  XORWF  x51,W
046E8:  BNZ   46F8
046EA:  MOVLB  6
046EC:  BTFSS  xDE.6
046EE:  BRA    46F4
046F0:  MOVLB  7
046F2:  BRA    46F8
046F4:  BSF    xD0.6
046F6:  MOVLB  7
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
046F8:  MOVLW  00
046FA:  MOVLB  6
046FC:  BTFSC  xCE.7
046FE:  MOVLW  01
04700:  MOVLB  7
04702:  MOVWF  x51
04704:  MOVLW  00
04706:  MOVLB  6
04708:  BTFSC  xD2.7
0470A:  MOVLW  01
0470C:  MOVLB  7
0470E:  XORWF  x51,W
04710:  BNZ   4720
04712:  MOVLB  6
04714:  BTFSS  xDE.7
04716:  BRA    471C
04718:  MOVLB  7
0471A:  BRA    4720
0471C:  BSF    xD0.7
0471E:  MOVLB  7
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
04720:  MOVLW  00
04722:  MOVLB  6
04724:  BTFSC  xCF.0
04726:  MOVLW  01
04728:  MOVLB  7
0472A:  MOVWF  x51
0472C:  MOVLW  00
0472E:  MOVLB  6
04730:  BTFSC  xD3.0
04732:  MOVLW  01
04734:  MOVLB  7
04736:  XORWF  x51,W
04738:  BNZ   4748
0473A:  MOVLB  6
0473C:  BTFSS  xDF.0
0473E:  BRA    4744
04740:  MOVLB  7
04742:  BRA    4748
04744:  BSF    xD1.0
04746:  MOVLB  7
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
04748:  MOVLW  00
0474A:  MOVLB  6
0474C:  BTFSC  xCF.1
0474E:  MOVLW  01
04750:  MOVLB  7
04752:  MOVWF  x51
04754:  MOVLW  00
04756:  MOVLB  6
04758:  BTFSC  xD3.1
0475A:  MOVLW  01
0475C:  MOVLB  7
0475E:  XORWF  x51,W
04760:  BNZ   4770
04762:  MOVLB  6
04764:  BTFSS  xDF.1
04766:  BRA    476C
04768:  MOVLB  7
0476A:  BRA    4770
0476C:  BSF    xD1.1
0476E:  MOVLB  7
.................... 
....................        Reset_F = 1;
04770:  BSF    30.0
....................     }
04772:  BRA    4784
04774:  MOVLB  0
....................     else if(input(Preset) == 1 && Reset_F == 1)
04776:  BSF    F94.1
04778:  BTFSS  F82.1
0477A:  BRA    4782
0477C:  BTFSS  30.0
0477E:  BRA    4782
....................     {
....................        Reset_F = 0;
04780:  BCF    30.0
04782:  MOVLB  7
....................     }
04784:  MOVLB  0
04786:  GOTO   76AC (RETURN)
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
04812:  MOVLB  7
04814:  DECFSZ x58,W
04816:  BRA    4B30
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
04818:  MOVLW  00
0481A:  MOVLB  6
0481C:  BTFSC  xDE.0
0481E:  MOVLW  01
04820:  MOVLB  7
04822:  MOVWF  x5B
04824:  MOVLW  00
04826:  MOVLB  6
04828:  BTFSC  xE0.0
0482A:  MOVLW  01
0482C:  MOVLB  7
0482E:  IORWF  x5B,W
04830:  MOVWF  x5A
04832:  MOVLW  00
04834:  MOVLB  6
04836:  BTFSS  xDC.0
04838:  MOVLW  01
0483A:  MOVLB  7
0483C:  ANDWF  x5A,F
0483E:  MOVLW  00
04840:  MOVLB  6
04842:  BTFSC  xD6.0
04844:  MOVLW  01
04846:  MOVLB  7
04848:  MOVWF  x5D
0484A:  MOVLW  00
0484C:  MOVLB  6
0484E:  BTFSC  xD8.0
04850:  MOVLW  01
04852:  MOVLB  7
04854:  IORWF  x5D,W
04856:  ANDWF  x5A,W
04858:  BCF    x59.0
0485A:  BTFSC  FE8.0
0485C:  BSF    x59.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
0485E:  MOVLW  00
04860:  BTFSC  x59.0
04862:  MOVLW  01
04864:  MOVWF  x5A
04866:  MOVLW  00
04868:  MOVLB  6
0486A:  BTFSC  xDE.1
0486C:  MOVLW  01
0486E:  MOVLB  7
04870:  MOVWF  x5C
04872:  MOVLW  00
04874:  MOVLB  6
04876:  BTFSC  xE0.1
04878:  MOVLW  01
0487A:  MOVLB  7
0487C:  IORWF  x5C,W
0487E:  MOVWF  x5B
04880:  MOVLW  00
04882:  MOVLB  6
04884:  BTFSS  xDC.1
04886:  MOVLW  01
04888:  MOVLB  7
0488A:  ANDWF  x5B,F
0488C:  MOVLW  00
0488E:  MOVLB  6
04890:  BTFSC  xD6.1
04892:  MOVLW  01
04894:  MOVLB  7
04896:  MOVWF  x5E
04898:  MOVLW  00
0489A:  MOVLB  6
0489C:  BTFSC  xD8.1
0489E:  MOVLW  01
048A0:  MOVLB  7
048A2:  IORWF  x5E,W
048A4:  ANDWF  x5B,W
048A6:  IORWF  x5A,W
048A8:  BCF    x59.0
048AA:  BTFSC  FE8.0
048AC:  BSF    x59.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
048AE:  MOVLW  00
048B0:  BTFSC  x59.0
048B2:  MOVLW  01
048B4:  MOVWF  x5A
048B6:  MOVLW  00
048B8:  MOVLB  6
048BA:  BTFSC  xDE.2
048BC:  MOVLW  01
048BE:  MOVLB  7
048C0:  MOVWF  x5C
048C2:  MOVLW  00
048C4:  MOVLB  6
048C6:  BTFSC  xE0.2
048C8:  MOVLW  01
048CA:  MOVLB  7
048CC:  IORWF  x5C,W
048CE:  MOVWF  x5B
048D0:  MOVLW  00
048D2:  MOVLB  6
048D4:  BTFSS  xDC.2
048D6:  MOVLW  01
048D8:  MOVLB  7
048DA:  ANDWF  x5B,F
048DC:  MOVLW  00
048DE:  MOVLB  6
048E0:  BTFSC  xD6.2
048E2:  MOVLW  01
048E4:  MOVLB  7
048E6:  MOVWF  x5E
048E8:  MOVLW  00
048EA:  MOVLB  6
048EC:  BTFSC  xD8.2
048EE:  MOVLW  01
048F0:  MOVLB  7
048F2:  IORWF  x5E,W
048F4:  ANDWF  x5B,W
048F6:  IORWF  x5A,W
048F8:  BCF    x59.0
048FA:  BTFSC  FE8.0
048FC:  BSF    x59.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
048FE:  MOVLW  00
04900:  BTFSC  x59.0
04902:  MOVLW  01
04904:  MOVWF  x5A
04906:  MOVLW  00
04908:  MOVLB  6
0490A:  BTFSC  xDE.3
0490C:  MOVLW  01
0490E:  MOVLB  7
04910:  MOVWF  x5C
04912:  MOVLW  00
04914:  MOVLB  6
04916:  BTFSC  xE0.3
04918:  MOVLW  01
0491A:  MOVLB  7
0491C:  IORWF  x5C,W
0491E:  MOVWF  x5B
04920:  MOVLW  00
04922:  MOVLB  6
04924:  BTFSS  xDC.3
04926:  MOVLW  01
04928:  MOVLB  7
0492A:  ANDWF  x5B,F
0492C:  MOVLW  00
0492E:  MOVLB  6
04930:  BTFSC  xD6.3
04932:  MOVLW  01
04934:  MOVLB  7
04936:  MOVWF  x5E
04938:  MOVLW  00
0493A:  MOVLB  6
0493C:  BTFSC  xD8.3
0493E:  MOVLW  01
04940:  MOVLB  7
04942:  IORWF  x5E,W
04944:  ANDWF  x5B,W
04946:  IORWF  x5A,W
04948:  BCF    x59.0
0494A:  BTFSC  FE8.0
0494C:  BSF    x59.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
0494E:  MOVLW  00
04950:  BTFSC  x59.0
04952:  MOVLW  01
04954:  MOVWF  x5A
04956:  MOVLW  00
04958:  MOVLB  6
0495A:  BTFSC  xDE.4
0495C:  MOVLW  01
0495E:  MOVLB  7
04960:  MOVWF  x5C
04962:  MOVLW  00
04964:  MOVLB  6
04966:  BTFSC  xE0.4
04968:  MOVLW  01
0496A:  MOVLB  7
0496C:  IORWF  x5C,W
0496E:  MOVWF  x5B
04970:  MOVLW  00
04972:  MOVLB  6
04974:  BTFSS  xDC.4
04976:  MOVLW  01
04978:  MOVLB  7
0497A:  ANDWF  x5B,F
0497C:  MOVLW  00
0497E:  MOVLB  6
04980:  BTFSC  xD6.4
04982:  MOVLW  01
04984:  MOVLB  7
04986:  MOVWF  x5E
04988:  MOVLW  00
0498A:  MOVLB  6
0498C:  BTFSC  xD8.4
0498E:  MOVLW  01
04990:  MOVLB  7
04992:  IORWF  x5E,W
04994:  ANDWF  x5B,W
04996:  IORWF  x5A,W
04998:  BCF    x59.0
0499A:  BTFSC  FE8.0
0499C:  BSF    x59.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
0499E:  MOVLW  00
049A0:  BTFSC  x59.0
049A2:  MOVLW  01
049A4:  MOVWF  x5A
049A6:  MOVLW  00
049A8:  MOVLB  6
049AA:  BTFSC  xDE.5
049AC:  MOVLW  01
049AE:  MOVLB  7
049B0:  MOVWF  x5C
049B2:  MOVLW  00
049B4:  MOVLB  6
049B6:  BTFSC  xE0.5
049B8:  MOVLW  01
049BA:  MOVLB  7
049BC:  IORWF  x5C,W
049BE:  MOVWF  x5B
049C0:  MOVLW  00
049C2:  MOVLB  6
049C4:  BTFSS  xDC.5
049C6:  MOVLW  01
049C8:  MOVLB  7
049CA:  ANDWF  x5B,F
049CC:  MOVLW  00
049CE:  MOVLB  6
049D0:  BTFSC  xD6.5
049D2:  MOVLW  01
049D4:  MOVLB  7
049D6:  MOVWF  x5E
049D8:  MOVLW  00
049DA:  MOVLB  6
049DC:  BTFSC  xD8.5
049DE:  MOVLW  01
049E0:  MOVLB  7
049E2:  IORWF  x5E,W
049E4:  ANDWF  x5B,W
049E6:  IORWF  x5A,W
049E8:  BCF    x59.0
049EA:  BTFSC  FE8.0
049EC:  BSF    x59.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
049EE:  MOVLW  00
049F0:  BTFSC  x59.0
049F2:  MOVLW  01
049F4:  MOVWF  x5A
049F6:  MOVLW  00
049F8:  MOVLB  6
049FA:  BTFSC  xDE.6
049FC:  MOVLW  01
049FE:  MOVLB  7
04A00:  MOVWF  x5C
04A02:  MOVLW  00
04A04:  MOVLB  6
04A06:  BTFSC  xE0.6
04A08:  MOVLW  01
04A0A:  MOVLB  7
04A0C:  IORWF  x5C,W
04A0E:  MOVWF  x5B
04A10:  MOVLW  00
04A12:  MOVLB  6
04A14:  BTFSS  xDC.6
04A16:  MOVLW  01
04A18:  MOVLB  7
04A1A:  ANDWF  x5B,F
04A1C:  MOVLW  00
04A1E:  MOVLB  6
04A20:  BTFSC  xD6.6
04A22:  MOVLW  01
04A24:  MOVLB  7
04A26:  MOVWF  x5E
04A28:  MOVLW  00
04A2A:  MOVLB  6
04A2C:  BTFSC  xD8.6
04A2E:  MOVLW  01
04A30:  MOVLB  7
04A32:  IORWF  x5E,W
04A34:  ANDWF  x5B,W
04A36:  IORWF  x5A,W
04A38:  BCF    x59.0
04A3A:  BTFSC  FE8.0
04A3C:  BSF    x59.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
04A3E:  MOVLW  00
04A40:  BTFSC  x59.0
04A42:  MOVLW  01
04A44:  MOVWF  x5A
04A46:  MOVLW  00
04A48:  MOVLB  6
04A4A:  BTFSC  xDE.7
04A4C:  MOVLW  01
04A4E:  MOVLB  7
04A50:  MOVWF  x5C
04A52:  MOVLW  00
04A54:  MOVLB  6
04A56:  BTFSC  xE0.7
04A58:  MOVLW  01
04A5A:  MOVLB  7
04A5C:  IORWF  x5C,W
04A5E:  MOVWF  x5B
04A60:  MOVLW  00
04A62:  MOVLB  6
04A64:  BTFSS  xDC.7
04A66:  MOVLW  01
04A68:  MOVLB  7
04A6A:  ANDWF  x5B,F
04A6C:  MOVLW  00
04A6E:  MOVLB  6
04A70:  BTFSC  xD6.7
04A72:  MOVLW  01
04A74:  MOVLB  7
04A76:  MOVWF  x5E
04A78:  MOVLW  00
04A7A:  MOVLB  6
04A7C:  BTFSC  xD8.7
04A7E:  MOVLW  01
04A80:  MOVLB  7
04A82:  IORWF  x5E,W
04A84:  ANDWF  x5B,W
04A86:  IORWF  x5A,W
04A88:  BCF    x59.0
04A8A:  BTFSC  FE8.0
04A8C:  BSF    x59.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
04A8E:  MOVLW  00
04A90:  BTFSC  x59.0
04A92:  MOVLW  01
04A94:  MOVWF  x5A
04A96:  MOVLW  00
04A98:  MOVLB  6
04A9A:  BTFSC  xDF.0
04A9C:  MOVLW  01
04A9E:  MOVLB  7
04AA0:  MOVWF  x5C
04AA2:  MOVLW  00
04AA4:  MOVLB  6
04AA6:  BTFSC  xE1.0
04AA8:  MOVLW  01
04AAA:  MOVLB  7
04AAC:  IORWF  x5C,W
04AAE:  MOVWF  x5B
04AB0:  MOVLW  00
04AB2:  MOVLB  6
04AB4:  BTFSS  xDD.0
04AB6:  MOVLW  01
04AB8:  MOVLB  7
04ABA:  ANDWF  x5B,F
04ABC:  MOVLW  00
04ABE:  MOVLB  6
04AC0:  BTFSC  xD7.0
04AC2:  MOVLW  01
04AC4:  MOVLB  7
04AC6:  MOVWF  x5E
04AC8:  MOVLW  00
04ACA:  MOVLB  6
04ACC:  BTFSC  xD9.0
04ACE:  MOVLW  01
04AD0:  MOVLB  7
04AD2:  IORWF  x5E,W
04AD4:  ANDWF  x5B,W
04AD6:  IORWF  x5A,W
04AD8:  BCF    x59.0
04ADA:  BTFSC  FE8.0
04ADC:  BSF    x59.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
04ADE:  MOVLW  00
04AE0:  BTFSC  x59.0
04AE2:  MOVLW  01
04AE4:  MOVWF  x5A
04AE6:  MOVLW  00
04AE8:  MOVLB  6
04AEA:  BTFSC  xDF.1
04AEC:  MOVLW  01
04AEE:  MOVLB  7
04AF0:  MOVWF  x5C
04AF2:  MOVLW  00
04AF4:  MOVLB  6
04AF6:  BTFSC  xE1.1
04AF8:  MOVLW  01
04AFA:  MOVLB  7
04AFC:  IORWF  x5C,W
04AFE:  MOVWF  x5B
04B00:  MOVLW  00
04B02:  MOVLB  6
04B04:  BTFSS  xDD.1
04B06:  MOVLW  01
04B08:  MOVLB  7
04B0A:  ANDWF  x5B,F
04B0C:  MOVLW  00
04B0E:  MOVLB  6
04B10:  BTFSC  xD7.1
04B12:  MOVLW  01
04B14:  MOVLB  7
04B16:  MOVWF  x5E
04B18:  MOVLW  00
04B1A:  MOVLB  6
04B1C:  BTFSC  xD9.1
04B1E:  MOVLW  01
04B20:  MOVLB  7
04B22:  IORWF  x5E,W
04B24:  ANDWF  x5B,W
04B26:  IORWF  x5A,W
04B28:  BCF    x59.0
04B2A:  BTFSC  FE8.0
04B2C:  BSF    x59.0
.................... 
....................    }
04B2E:  BRA    4E4E
....................    else if(DatType == 0x02)             //Bell
04B30:  MOVF   x58,W
04B32:  SUBLW  02
04B34:  BTFSS  FD8.2
04B36:  BRA    4E4E
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
04B38:  MOVLW  00
04B3A:  MOVLB  6
04B3C:  BTFSC  xDE.0
04B3E:  MOVLW  01
04B40:  MOVLB  7
04B42:  MOVWF  x5B
04B44:  MOVLW  00
04B46:  MOVLB  6
04B48:  BTFSC  xE0.0
04B4A:  MOVLW  01
04B4C:  MOVLB  7
04B4E:  IORWF  x5B,W
04B50:  MOVWF  x5A
04B52:  MOVLW  00
04B54:  MOVLB  6
04B56:  BTFSS  xDC.0
04B58:  MOVLW  01
04B5A:  MOVLB  7
04B5C:  ANDWF  x5A,F
04B5E:  MOVLW  00
04B60:  MOVLB  6
04B62:  BTFSS  xD6.0
04B64:  MOVLW  01
04B66:  MOVLB  7
04B68:  MOVWF  x5D
04B6A:  MOVLW  00
04B6C:  MOVLB  6
04B6E:  BTFSC  xD8.0
04B70:  MOVLW  01
04B72:  MOVLB  7
04B74:  IORWF  x5D,W
04B76:  ANDWF  x5A,W
04B78:  BCF    x59.0
04B7A:  BTFSC  FE8.0
04B7C:  BSF    x59.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
04B7E:  MOVLW  00
04B80:  BTFSC  x59.0
04B82:  MOVLW  01
04B84:  MOVWF  x5A
04B86:  MOVLW  00
04B88:  MOVLB  6
04B8A:  BTFSC  xDE.1
04B8C:  MOVLW  01
04B8E:  MOVLB  7
04B90:  MOVWF  x5C
04B92:  MOVLW  00
04B94:  MOVLB  6
04B96:  BTFSC  xE0.1
04B98:  MOVLW  01
04B9A:  MOVLB  7
04B9C:  IORWF  x5C,W
04B9E:  MOVWF  x5B
04BA0:  MOVLW  00
04BA2:  MOVLB  6
04BA4:  BTFSS  xDC.1
04BA6:  MOVLW  01
04BA8:  MOVLB  7
04BAA:  ANDWF  x5B,F
04BAC:  MOVLW  00
04BAE:  MOVLB  6
04BB0:  BTFSS  xD6.1
04BB2:  MOVLW  01
04BB4:  MOVLB  7
04BB6:  MOVWF  x5E
04BB8:  MOVLW  00
04BBA:  MOVLB  6
04BBC:  BTFSC  xD8.1
04BBE:  MOVLW  01
04BC0:  MOVLB  7
04BC2:  IORWF  x5E,W
04BC4:  ANDWF  x5B,W
04BC6:  IORWF  x5A,W
04BC8:  BCF    x59.0
04BCA:  BTFSC  FE8.0
04BCC:  BSF    x59.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
04BCE:  MOVLW  00
04BD0:  BTFSC  x59.0
04BD2:  MOVLW  01
04BD4:  MOVWF  x5A
04BD6:  MOVLW  00
04BD8:  MOVLB  6
04BDA:  BTFSC  xDE.2
04BDC:  MOVLW  01
04BDE:  MOVLB  7
04BE0:  MOVWF  x5C
04BE2:  MOVLW  00
04BE4:  MOVLB  6
04BE6:  BTFSC  xE0.2
04BE8:  MOVLW  01
04BEA:  MOVLB  7
04BEC:  IORWF  x5C,W
04BEE:  MOVWF  x5B
04BF0:  MOVLW  00
04BF2:  MOVLB  6
04BF4:  BTFSS  xDC.2
04BF6:  MOVLW  01
04BF8:  MOVLB  7
04BFA:  ANDWF  x5B,F
04BFC:  MOVLW  00
04BFE:  MOVLB  6
04C00:  BTFSS  xD6.2
04C02:  MOVLW  01
04C04:  MOVLB  7
04C06:  MOVWF  x5E
04C08:  MOVLW  00
04C0A:  MOVLB  6
04C0C:  BTFSC  xD8.2
04C0E:  MOVLW  01
04C10:  MOVLB  7
04C12:  IORWF  x5E,W
04C14:  ANDWF  x5B,W
04C16:  IORWF  x5A,W
04C18:  BCF    x59.0
04C1A:  BTFSC  FE8.0
04C1C:  BSF    x59.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
04C1E:  MOVLW  00
04C20:  BTFSC  x59.0
04C22:  MOVLW  01
04C24:  MOVWF  x5A
04C26:  MOVLW  00
04C28:  MOVLB  6
04C2A:  BTFSC  xDE.3
04C2C:  MOVLW  01
04C2E:  MOVLB  7
04C30:  MOVWF  x5C
04C32:  MOVLW  00
04C34:  MOVLB  6
04C36:  BTFSC  xE0.3
04C38:  MOVLW  01
04C3A:  MOVLB  7
04C3C:  IORWF  x5C,W
04C3E:  MOVWF  x5B
04C40:  MOVLW  00
04C42:  MOVLB  6
04C44:  BTFSS  xDC.3
04C46:  MOVLW  01
04C48:  MOVLB  7
04C4A:  ANDWF  x5B,F
04C4C:  MOVLW  00
04C4E:  MOVLB  6
04C50:  BTFSS  xD6.3
04C52:  MOVLW  01
04C54:  MOVLB  7
04C56:  MOVWF  x5E
04C58:  MOVLW  00
04C5A:  MOVLB  6
04C5C:  BTFSC  xD8.3
04C5E:  MOVLW  01
04C60:  MOVLB  7
04C62:  IORWF  x5E,W
04C64:  ANDWF  x5B,W
04C66:  IORWF  x5A,W
04C68:  BCF    x59.0
04C6A:  BTFSC  FE8.0
04C6C:  BSF    x59.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
04C6E:  MOVLW  00
04C70:  BTFSC  x59.0
04C72:  MOVLW  01
04C74:  MOVWF  x5A
04C76:  MOVLW  00
04C78:  MOVLB  6
04C7A:  BTFSC  xDE.4
04C7C:  MOVLW  01
04C7E:  MOVLB  7
04C80:  MOVWF  x5C
04C82:  MOVLW  00
04C84:  MOVLB  6
04C86:  BTFSC  xE0.4
04C88:  MOVLW  01
04C8A:  MOVLB  7
04C8C:  IORWF  x5C,W
04C8E:  MOVWF  x5B
04C90:  MOVLW  00
04C92:  MOVLB  6
04C94:  BTFSS  xDC.4
04C96:  MOVLW  01
04C98:  MOVLB  7
04C9A:  ANDWF  x5B,F
04C9C:  MOVLW  00
04C9E:  MOVLB  6
04CA0:  BTFSS  xD6.4
04CA2:  MOVLW  01
04CA4:  MOVLB  7
04CA6:  MOVWF  x5E
04CA8:  MOVLW  00
04CAA:  MOVLB  6
04CAC:  BTFSC  xD8.4
04CAE:  MOVLW  01
04CB0:  MOVLB  7
04CB2:  IORWF  x5E,W
04CB4:  ANDWF  x5B,W
04CB6:  IORWF  x5A,W
04CB8:  BCF    x59.0
04CBA:  BTFSC  FE8.0
04CBC:  BSF    x59.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
04CBE:  MOVLW  00
04CC0:  BTFSC  x59.0
04CC2:  MOVLW  01
04CC4:  MOVWF  x5A
04CC6:  MOVLW  00
04CC8:  MOVLB  6
04CCA:  BTFSC  xDE.5
04CCC:  MOVLW  01
04CCE:  MOVLB  7
04CD0:  MOVWF  x5C
04CD2:  MOVLW  00
04CD4:  MOVLB  6
04CD6:  BTFSC  xE0.5
04CD8:  MOVLW  01
04CDA:  MOVLB  7
04CDC:  IORWF  x5C,W
04CDE:  MOVWF  x5B
04CE0:  MOVLW  00
04CE2:  MOVLB  6
04CE4:  BTFSS  xDC.5
04CE6:  MOVLW  01
04CE8:  MOVLB  7
04CEA:  ANDWF  x5B,F
04CEC:  MOVLW  00
04CEE:  MOVLB  6
04CF0:  BTFSS  xD6.5
04CF2:  MOVLW  01
04CF4:  MOVLB  7
04CF6:  MOVWF  x5E
04CF8:  MOVLW  00
04CFA:  MOVLB  6
04CFC:  BTFSC  xD8.5
04CFE:  MOVLW  01
04D00:  MOVLB  7
04D02:  IORWF  x5E,W
04D04:  ANDWF  x5B,W
04D06:  IORWF  x5A,W
04D08:  BCF    x59.0
04D0A:  BTFSC  FE8.0
04D0C:  BSF    x59.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
04D0E:  MOVLW  00
04D10:  BTFSC  x59.0
04D12:  MOVLW  01
04D14:  MOVWF  x5A
04D16:  MOVLW  00
04D18:  MOVLB  6
04D1A:  BTFSC  xDE.6
04D1C:  MOVLW  01
04D1E:  MOVLB  7
04D20:  MOVWF  x5C
04D22:  MOVLW  00
04D24:  MOVLB  6
04D26:  BTFSC  xE0.6
04D28:  MOVLW  01
04D2A:  MOVLB  7
04D2C:  IORWF  x5C,W
04D2E:  MOVWF  x5B
04D30:  MOVLW  00
04D32:  MOVLB  6
04D34:  BTFSS  xDC.6
04D36:  MOVLW  01
04D38:  MOVLB  7
04D3A:  ANDWF  x5B,F
04D3C:  MOVLW  00
04D3E:  MOVLB  6
04D40:  BTFSS  xD6.6
04D42:  MOVLW  01
04D44:  MOVLB  7
04D46:  MOVWF  x5E
04D48:  MOVLW  00
04D4A:  MOVLB  6
04D4C:  BTFSC  xD8.6
04D4E:  MOVLW  01
04D50:  MOVLB  7
04D52:  IORWF  x5E,W
04D54:  ANDWF  x5B,W
04D56:  IORWF  x5A,W
04D58:  BCF    x59.0
04D5A:  BTFSC  FE8.0
04D5C:  BSF    x59.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
04D5E:  MOVLW  00
04D60:  BTFSC  x59.0
04D62:  MOVLW  01
04D64:  MOVWF  x5A
04D66:  MOVLW  00
04D68:  MOVLB  6
04D6A:  BTFSC  xDE.7
04D6C:  MOVLW  01
04D6E:  MOVLB  7
04D70:  MOVWF  x5C
04D72:  MOVLW  00
04D74:  MOVLB  6
04D76:  BTFSC  xE0.7
04D78:  MOVLW  01
04D7A:  MOVLB  7
04D7C:  IORWF  x5C,W
04D7E:  MOVWF  x5B
04D80:  MOVLW  00
04D82:  MOVLB  6
04D84:  BTFSS  xDC.7
04D86:  MOVLW  01
04D88:  MOVLB  7
04D8A:  ANDWF  x5B,F
04D8C:  MOVLW  00
04D8E:  MOVLB  6
04D90:  BTFSS  xD6.7
04D92:  MOVLW  01
04D94:  MOVLB  7
04D96:  MOVWF  x5E
04D98:  MOVLW  00
04D9A:  MOVLB  6
04D9C:  BTFSC  xD8.7
04D9E:  MOVLW  01
04DA0:  MOVLB  7
04DA2:  IORWF  x5E,W
04DA4:  ANDWF  x5B,W
04DA6:  IORWF  x5A,W
04DA8:  BCF    x59.0
04DAA:  BTFSC  FE8.0
04DAC:  BSF    x59.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
04DAE:  MOVLW  00
04DB0:  BTFSC  x59.0
04DB2:  MOVLW  01
04DB4:  MOVWF  x5A
04DB6:  MOVLW  00
04DB8:  MOVLB  6
04DBA:  BTFSC  xDF.0
04DBC:  MOVLW  01
04DBE:  MOVLB  7
04DC0:  MOVWF  x5C
04DC2:  MOVLW  00
04DC4:  MOVLB  6
04DC6:  BTFSC  xE1.0
04DC8:  MOVLW  01
04DCA:  MOVLB  7
04DCC:  IORWF  x5C,W
04DCE:  MOVWF  x5B
04DD0:  MOVLW  00
04DD2:  MOVLB  6
04DD4:  BTFSS  xDD.0
04DD6:  MOVLW  01
04DD8:  MOVLB  7
04DDA:  ANDWF  x5B,F
04DDC:  MOVLW  00
04DDE:  MOVLB  6
04DE0:  BTFSS  xD7.0
04DE2:  MOVLW  01
04DE4:  MOVLB  7
04DE6:  MOVWF  x5E
04DE8:  MOVLW  00
04DEA:  MOVLB  6
04DEC:  BTFSC  xD9.0
04DEE:  MOVLW  01
04DF0:  MOVLB  7
04DF2:  IORWF  x5E,W
04DF4:  ANDWF  x5B,W
04DF6:  IORWF  x5A,W
04DF8:  BCF    x59.0
04DFA:  BTFSC  FE8.0
04DFC:  BSF    x59.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
04DFE:  MOVLW  00
04E00:  BTFSC  x59.0
04E02:  MOVLW  01
04E04:  MOVWF  x5A
04E06:  MOVLW  00
04E08:  MOVLB  6
04E0A:  BTFSC  xDF.1
04E0C:  MOVLW  01
04E0E:  MOVLB  7
04E10:  MOVWF  x5C
04E12:  MOVLW  00
04E14:  MOVLB  6
04E16:  BTFSC  xE1.1
04E18:  MOVLW  01
04E1A:  MOVLB  7
04E1C:  IORWF  x5C,W
04E1E:  MOVWF  x5B
04E20:  MOVLW  00
04E22:  MOVLB  6
04E24:  BTFSS  xDD.1
04E26:  MOVLW  01
04E28:  MOVLB  7
04E2A:  ANDWF  x5B,F
04E2C:  MOVLW  00
04E2E:  MOVLB  6
04E30:  BTFSS  xD7.1
04E32:  MOVLW  01
04E34:  MOVLB  7
04E36:  MOVWF  x5E
04E38:  MOVLW  00
04E3A:  MOVLB  6
04E3C:  BTFSC  xD9.1
04E3E:  MOVLW  01
04E40:  MOVLB  7
04E42:  IORWF  x5E,W
04E44:  ANDWF  x5B,W
04E46:  IORWF  x5A,W
04E48:  BCF    x59.0
04E4A:  BTFSC  FE8.0
04E4C:  BSF    x59.0
.................... 
....................    }
....................    return(check);
04E4E:  MOVLW  00
04E50:  BTFSC  x59.0
04E52:  MOVLW  01
04E54:  MOVWF  01
04E56:  MOVLB  0
04E58:  RETURN 0
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void main()
*
07006:  CLRF   FF8
07008:  BCF    FD0.7
0700A:  BSF    07.7
0700C:  MOVLW  70
0700E:  MOVWF  FD3
07010:  BCF    F9B.6
07012:  BCF    F9B.7
07014:  BSF    FB8.3
07016:  MOVLW  A0
07018:  MOVWF  FAF
0701A:  MOVLW  01
0701C:  MOVWF  FB0
0701E:  MOVLW  A6
07020:  MOVWF  FAC
07022:  MOVLW  90
07024:  MOVWF  FAB
07026:  BCF    F93.0
07028:  BSF    F8A.0
0702A:  CLRF   19
0702C:  BCF    1A.0
0702E:  MOVLW  19
07030:  MOVWF  1B
07032:  BCF    1A.1
07034:  MOVLW  64
07036:  MOVWF  1C
07038:  CLRF   1D
0703A:  BCF    1A.2
0703C:  BCF    1A.3
0703E:  BCF    1A.4
07040:  CLRF   2E
07042:  BCF    1A.5
07044:  CLRF   2F
07046:  BCF    1A.6
07048:  BCF    1A.7
0704A:  BCF    30.0
0704C:  BCF    30.1
0704E:  BCF    30.2
07050:  BCF    30.3
07052:  CLRF   31
07054:  BCF    30.4
07056:  MOVLW  11
07058:  MOVWF  x63
0705A:  MOVLW  12
0705C:  MOVWF  x64
0705E:  MOVLW  13
07060:  MOVWF  x65
07062:  MOVLW  14
07064:  MOVWF  x66
07066:  MOVLW  16
07068:  MOVWF  x67
0706A:  MOVLW  17
0706C:  MOVWF  x68
0706E:  MOVLW  18
07070:  MOVWF  x69
07072:  MOVLW  19
07074:  MOVWF  x6A
07076:  MOVLW  20
07078:  MOVWF  x6B
0707A:  BCF    30.5
0707C:  CLRF   x6F
0707E:  CLRF   x6E
07080:  MOVLW  01
07082:  MOVLB  3
07084:  MOVWF  x73
07086:  MOVLW  F4
07088:  MOVWF  x72
0708A:  CLRF   x75
0708C:  CLRF   x74
0708E:  CLRF   x77
07090:  CLRF   x76
07092:  CLRF   x78
07094:  MOVLB  5
07096:  CLRF   x7D
07098:  CLRF   x7C
0709A:  CLRF   x7E
0709C:  MOVLB  7
0709E:  CLRF   x4B
070A0:  CLRF   x4A
070A2:  MOVLB  F
070A4:  CLRF   x38
070A6:  CLRF   x39
070A8:  CLRF   x3A
070AA:  CLRF   F77
070AC:  CLRF   F78
070AE:  CLRF   F79
070B0:  MOVLB  7
070B2:  CLRF   x49
070B4:  CLRF   x4C
.................... {
....................    
....................    
....................    delay_ms(50);
070B6:  MOVLW  32
070B8:  MOVWF  x59
070BA:  MOVLB  0
070BC:  CALL   0848
....................    output_bit(Pled,0);   //power on watchdog signal
070C0:  BCF    F8A.5
070C2:  BCF    F93.5
.................... 
....................    //jj
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD);
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0);
....................    
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
070C4:  MOVLW  80
070C6:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
070C8:  MOVLW  78
070CA:  IORLW  06
070CC:  MOVWF  FBA
070CE:  MOVLW  C4
070D0:  MOVWF  FBB
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);    //104ms
070D2:  MOVLW  37
070D4:  MOVWF  FCD
070D6:  CLRF   FCC
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................   // enable_interrupts(INT_TIMER1);
....................    enable_interrupts(INT_TIMER2);
070D8:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
070DA:  BSF    F9D.5
.................... 
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1
070DC:  BCF    FC6.5
070DE:  BCF    F94.5
070E0:  BSF    F94.4
070E2:  BCF    F94.3
070E4:  MOVLW  20
070E6:  MOVWF  FC6
070E8:  MOVLW  40
070EA:  MOVWF  FC7
....................  
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
070EC:  GOTO   08AA
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
070F0:  MOVLB  7
070F2:  CLRF   x50
070F4:  SETF   x51
070F6:  MOVLB  0
070F8:  CALL   0940
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
070FC:  MOVLB  7
070FE:  CLRF   x50
07100:  SETF   x51
07102:  MOVLB  0
07104:  CALL   0952
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
07108:  MOVLW  02
0710A:  MOVLB  7
0710C:  MOVWF  x50
0710E:  SETF   x51
07110:  MOVLB  0
07112:  CALL   0940
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
07116:  MOVLW  02
07118:  MOVLB  7
0711A:  MOVWF  x50
0711C:  SETF   x51
0711E:  MOVLB  0
07120:  CALL   0952
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
07124:  MOVLB  7
07126:  CLRF   x52
07128:  MOVLW  06
0712A:  MOVWF  x53
0712C:  SETF   x54
0712E:  MOVLB  0
07130:  CALL   0878
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
07134:  MOVLB  7
07136:  CLRF   x52
07138:  MOVLW  16
0713A:  MOVWF  x53
0713C:  SETF   x54
0713E:  MOVLB  0
07140:  CALL   0878
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
07144:  MOVLW  02
07146:  MOVLB  7
07148:  MOVWF  x52
0714A:  MOVLW  06
0714C:  MOVWF  x53
0714E:  SETF   x54
07150:  MOVLB  0
07152:  CALL   0878
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
07156:  MOVLW  02
07158:  MOVLB  7
0715A:  MOVWF  x52
0715C:  MOVLW  16
0715E:  MOVWF  x53
07160:  SETF   x54
07162:  MOVLB  0
07164:  CALL   0878
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
07168:  MOVLW  04
0716A:  MOVLB  7
0716C:  MOVWF  x50
0716E:  CLRF   x51
07170:  MOVLB  0
07172:  CALL   0940
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
07176:  MOVLW  04
07178:  MOVLB  7
0717A:  MOVWF  x50
0717C:  CLRF   x51
0717E:  MOVLB  0
07180:  CALL   0952
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
07184:  MOVLW  06
07186:  MOVLB  7
07188:  MOVWF  x50
0718A:  CLRF   x51
0718C:  MOVLB  0
0718E:  CALL   0940
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
07192:  MOVLW  06
07194:  MOVLB  7
07196:  MOVWF  x50
07198:  CLRF   x51
0719A:  MOVLB  0
0719C:  CALL   0952
....................    
....................    
....................    FlashingFlag = 1;
071A0:  BSF    1A.1
....................    sequence = end_sq;
071A2:  MOVFF  63,6C
....................    Address = 1;
071A6:  MOVLW  01
071A8:  MOVWF  x6D
.................... 
....................    Output.B1 = 1;
071AA:  MOVLB  6
071AC:  BSF    xD0.0
....................    Output.B2 = 1;
071AE:  BSF    xD0.1
....................    Output.B3 = 1;
071B0:  BSF    xD0.2
....................    Output.B4 = 1;
071B2:  BSF    xD0.3
....................    Output.B5 = 1;
071B4:  BSF    xD0.4
....................    Output.B6 = 1;
071B6:  BSF    xD0.5
....................    Output.B7 = 1;
071B8:  BSF    xD0.6
....................    Output.B8 = 1;
071BA:  BSF    xD0.7
....................    Output.B9 = 1;
071BC:  BSF    xD1.0
....................    Output.B10 = 1;
071BE:  BSF    xD1.1
.................... 
....................    ////////////////////
....................    In.B1 = 0;
071C0:  BCF    xDE.0
....................    In.B2 = 0;
071C2:  BCF    xDE.1
....................    In.B3 = 0;
071C4:  BCF    xDE.2
....................    In.B4 = 0;
071C6:  BCF    xDE.3
....................    In.B5 = 0;
071C8:  BCF    xDE.4
....................    In.B6 = 0;
071CA:  BCF    xDE.5
....................    In.B7 = 0;
071CC:  BCF    xDE.6
....................    In.B8 = 0;
071CE:  BCF    xDE.7
....................    In.B9 = 0;
071D0:  BCF    xDF.0
....................    In.B10 = 0;
071D2:  BCF    xDF.1
.................... 
....................    ////////////////////////
....................    Ack.B1 = 0;
071D4:  BCF    xDC.0
....................    Ack.B2 = 0;
071D6:  BCF    xDC.1
....................    Ack.B3 = 0;
071D8:  BCF    xDC.2
....................    Ack.B4 = 0;
071DA:  BCF    xDC.3
....................    Ack.B5 = 0;
071DC:  BCF    xDC.4
....................    Ack.B6 = 0;
071DE:  BCF    xDC.5
....................    Ack.B7 = 0;
071E0:  BCF    xDC.6
....................    Ack.B8 = 0;
071E2:  BCF    xDC.7
....................    Ack.B9 = 0;
071E4:  BCF    xDD.0
....................    Ack.B10 = 0;
071E6:  BCF    xDD.1
.................... 
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
071E8:  MOVFF  FF2,750
071EC:  BCF    FF2.7
071EE:  CLRF   FAA
071F0:  CLRF   FA9
071F2:  BCF    FA6.6
071F4:  BCF    FA6.7
071F6:  BSF    FA6.0
071F8:  MOVF   FA8,W
071FA:  MOVLB  7
071FC:  BTFSC  x50.7
071FE:  BSF    FF2.7
07200:  SUBLW  0F
07202:  BNZ   720E
....................    {
....................       Read_Config();
07204:  MOVLB  0
07206:  CALL   0966
....................    }
0720A:  BRA    7446
0720C:  MOVLB  7
....................    else
....................    {
....................       FlashingRateTime = 25;
0720E:  MOVLW  19
07210:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
07212:  MOVLW  F0
07214:  MOVWF  5E
....................       Address = 0x01;
07216:  MOVLW  01
07218:  MOVLB  0
0721A:  MOVWF  x6D
.................... 
....................       AutoAckTime = 5;
0721C:  MOVLW  05
0721E:  MOVWF  5F
....................       FlashingRate = 25;
07220:  MOVLW  19
07222:  MOVWF  x60
....................       NoOfPoint = 10;
07224:  MOVLW  0A
07226:  MOVWF  x61
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
07228:  MOVLB  7
0722A:  CLRF   x4D
0722C:  MOVF   x4D,W
0722E:  MOVLB  0
07230:  SUBWF  x61,W
07232:  BNC   7252
....................       {
....................          FaultDelayTime[i] = 0;
07234:  BCF    FD8.0
07236:  MOVLB  7
07238:  RLCF   x4D,W
0723A:  CLRF   03
0723C:  ADDLW  1C
0723E:  MOVWF  FE9
07240:  MOVLW  07
07242:  ADDWFC 03,W
07244:  MOVWF  FEA
07246:  CLRF   FEC
07248:  MOVF   FED,F
0724A:  CLRF   FEF
0724C:  INCF   x4D,F
0724E:  BRA    722C
07250:  MOVLB  0
....................       }
.................... 
....................       InputType.B1 = 1;
07252:  MOVLB  6
07254:  BSF    xD2.0
....................       InputType.B2 = 1;
07256:  BSF    xD2.1
....................       InputType.B3 = 1;
07258:  BSF    xD2.2
....................       InputType.B4 = 1;
0725A:  BSF    xD2.3
....................       InputType.B5 = 1;
0725C:  BSF    xD2.4
....................       InputType.B6 = 1;
0725E:  BSF    xD2.5
....................       InputType.B7 = 1;
07260:  BSF    xD2.6
....................       InputType.B8 = 1;
07262:  BSF    xD2.7
....................       InputType.B9 = 1;
07264:  BSF    xD3.0
....................       InputType.B10 = 1;
07266:  BSF    xD3.1
.................... 
....................       FaultNCNO[1] = 1;
07268:  MOVLB  7
0726A:  BSF    x46.1
....................       FaultNCNO[2] = 1;
0726C:  BSF    x46.2
....................       FaultNCNO[3] = 1;
0726E:  BSF    x46.3
....................       FaultNCNO[4] = 1;
07270:  BSF    x46.4
....................       FaultNCNO[5] = 1;
07272:  BSF    x46.5
....................       FaultNCNO[6] = 1;
07274:  BSF    x46.6
....................       FaultNCNO[7] = 1;
07276:  BSF    x46.7
....................       FaultNCNO[8] = 1;
07278:  BSF    x47.0
....................       FaultNCNO[9] = 1;
0727A:  BSF    x47.1
....................       FaultNCNO[10] = 1;
0727C:  BSF    x47.2
....................       
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0727E:  MOVLB  6
07280:  BSF    xD4.0
....................       FaultType.B2= 1;
07282:  BSF    xD4.1
....................       FaultType.B3 = 1;
07284:  BSF    xD4.2
....................       FaultType.B4 = 1;
07286:  BSF    xD4.3
....................       FaultType.B5 = 1;
07288:  BSF    xD4.4
....................       FaultType.B6 = 1;
0728A:  BSF    xD4.5
....................       FaultType.B7 = 1;
0728C:  BSF    xD4.6
....................       FaultType.B8 = 1;
0728E:  BSF    xD4.7
....................       FaultType.B9 = 1;
07290:  BSF    xD5.0
....................       FaultType.B10 = 1;
07292:  BSF    xD5.1
.................... 
....................       ////////////////////////////
....................       OutputType.B1 = 1;
07294:  BSF    xD6.0
....................       OutputType.B2 = 1;
07296:  BSF    xD6.1
....................       OutputType.B3 = 1;
07298:  BSF    xD6.2
....................       OutputType.B4 = 1;
0729A:  BSF    xD6.3
....................       OutputType.B5 = 1;
0729C:  BSF    xD6.4
....................       OutputType.B6 = 1;
0729E:  BSF    xD6.5
....................       OutputType.B7 = 1;
072A0:  BSF    xD6.6
....................       OutputType.B8 = 1;
072A2:  BSF    xD6.7
....................       OutputType.B9 = 1;
072A4:  BSF    xD7.0
....................       OutputType.B10 = 1;
072A6:  BSF    xD7.1
.................... 
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
072A8:  BSF    xD8.0
....................       OutputBoth.B2 = 1;
072AA:  BSF    xD8.1
....................       OutputBoth.B3 = 1;
072AC:  BSF    xD8.2
....................       OutputBoth.B4 = 1;
072AE:  BSF    xD8.3
....................       OutputBoth.B5 = 1;
072B0:  BSF    xD8.4
....................       OutputBoth.B6 = 1;
072B2:  BSF    xD8.5
....................       OutputBoth.B7 = 1;
072B4:  BSF    xD8.6
....................       OutputBoth.B8 = 1;
072B6:  BSF    xD8.7
....................       OutputBoth.B9 = 1;
072B8:  BSF    xD9.0
....................       OutputBoth.B10 = 1;
072BA:  BSF    xD9.1
.................... 
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
072BC:  BSF    xDA.0
....................       AlarmIndicator.B2 = 1;
072BE:  BSF    xDA.1
....................       AlarmIndicator.B3 = 1;
072C0:  BSF    xDA.2
....................       AlarmIndicator.B4 = 1;
072C2:  BSF    xDA.3
....................       AlarmIndicator.B5 = 1;
072C4:  BSF    xDA.4
....................       AlarmIndicator.B6 = 1;
072C6:  BSF    xDA.5
....................       AlarmIndicator.B7 = 1;
072C8:  BSF    xDA.6
....................       AlarmIndicator.B8 = 1;
072CA:  BSF    xDA.7
....................       AlarmIndicator.B9 = 1;
072CC:  BSF    xDB.0
....................       AlarmIndicator.B10 = 1;
072CE:  BSF    xDB.1
.................... 
....................       ///////////// JACK///////////////////
....................       EEpDat = read_eeprom(0x10);
072D0:  MOVFF  FF2,750
072D4:  BCF    FF2.7
072D6:  CLRF   FAA
072D8:  MOVLW  10
072DA:  MOVWF  FA9
072DC:  BCF    FA6.6
072DE:  BCF    FA6.7
072E0:  BSF    FA6.0
072E2:  MOVF   FA8,W
072E4:  MOVLB  7
072E6:  BTFSC  x50.7
072E8:  BSF    FF2.7
072EA:  MOVWF  3A
....................       //Red1_8 = EEpDat;
....................       RED_Colour.B1 = EEpDat;
072EC:  MOVLB  6
072EE:  BCF    xE6.0
072F0:  BTFSC  3A.0
072F2:  BSF    xE6.0
....................       RED_Colour.B2 = EEpDat >> 1;
072F4:  BCF    FD8.0
072F6:  RRCF   3A,W
072F8:  BCF    xE6.1
072FA:  BTFSC  FE8.0
072FC:  BSF    xE6.1
....................       RED_Colour.B3 = EEpDat >> 2;
072FE:  RRCF   3A,W
07300:  MOVWF  00
07302:  RRCF   00,F
07304:  MOVLW  3F
07306:  ANDWF  00,F
07308:  BCF    xE6.2
0730A:  BTFSC  00.0
0730C:  BSF    xE6.2
....................       RED_Colour.B4 = EEpDat >> 3;
0730E:  RRCF   3A,W
07310:  MOVWF  00
07312:  RRCF   00,F
07314:  RRCF   00,F
07316:  MOVLW  1F
07318:  ANDWF  00,F
0731A:  BCF    xE6.3
0731C:  BTFSC  00.0
0731E:  BSF    xE6.3
....................       RED_Colour.B5 = EEpDat >> 4;
07320:  SWAPF  3A,W
07322:  MOVWF  00
07324:  MOVLW  0F
07326:  ANDWF  00,F
07328:  BCF    xE6.4
0732A:  BTFSC  00.0
0732C:  BSF    xE6.4
....................       RED_Colour.B6 = EEpDat >> 5;
0732E:  SWAPF  3A,W
07330:  MOVWF  00
07332:  RRCF   00,F
07334:  MOVLW  07
07336:  ANDWF  00,F
07338:  BCF    xE6.5
0733A:  BTFSC  00.0
0733C:  BSF    xE6.5
....................       RED_Colour.B7 = EEpDat >> 6;
0733E:  SWAPF  3A,W
07340:  MOVWF  00
07342:  RRCF   00,F
07344:  RRCF   00,F
07346:  MOVLW  03
07348:  ANDWF  00,F
0734A:  BCF    xE6.6
0734C:  BTFSC  00.0
0734E:  BSF    xE6.6
....................       RED_Colour.B8 = EEpDat >> 7;
07350:  CLRF   00
07352:  BTFSC  3A.7
07354:  BSF    00.0
07356:  BCF    xE6.7
07358:  BTFSC  00.0
0735A:  BSF    xE6.7
....................       
....................       EEpDat = read_eeprom(0x11);
0735C:  MOVFF  FF2,750
07360:  BCF    FF2.7
07362:  CLRF   FAA
07364:  MOVLW  11
07366:  MOVWF  FA9
07368:  BCF    FA6.6
0736A:  BCF    FA6.7
0736C:  BSF    FA6.0
0736E:  MOVF   FA8,W
07370:  MOVLB  7
07372:  BTFSC  x50.7
07374:  BSF    FF2.7
07376:  MOVWF  3A
....................       //Green9_10 = EEpDat;
....................       RED_Colour.B9 = EEpDat;
07378:  MOVLB  6
0737A:  BCF    xE7.0
0737C:  BTFSC  3A.0
0737E:  BSF    xE7.0
....................       RED_Colour.B10 = EEpDat >> 1;
07380:  BCF    FD8.0
07382:  RRCF   3A,W
07384:  BCF    xE7.1
07386:  BTFSC  FE8.0
07388:  BSF    xE7.1
....................           
....................       EEpDat = read_eeprom(0x14);
0738A:  MOVFF  FF2,750
0738E:  BCF    FF2.7
07390:  CLRF   FAA
07392:  MOVLW  14
07394:  MOVWF  FA9
07396:  BCF    FA6.6
07398:  BCF    FA6.7
0739A:  BSF    FA6.0
0739C:  MOVF   FA8,W
0739E:  MOVLB  7
073A0:  BTFSC  x50.7
073A2:  BSF    FF2.7
073A4:  MOVWF  3A
....................       //Green1_8 = EEpDat;
....................       GREEN_Colour.B1 = EEpDat;
073A6:  MOVLB  6
073A8:  BCF    xE8.0
073AA:  BTFSC  3A.0
073AC:  BSF    xE8.0
....................       GREEN_Colour.B2 = EEpDat >> 1;
073AE:  BCF    FD8.0
073B0:  RRCF   3A,W
073B2:  BCF    xE8.1
073B4:  BTFSC  FE8.0
073B6:  BSF    xE8.1
....................       GREEN_Colour.B3 = EEpDat >> 2;
073B8:  RRCF   3A,W
073BA:  MOVWF  00
073BC:  RRCF   00,F
073BE:  MOVLW  3F
073C0:  ANDWF  00,F
073C2:  BCF    xE8.2
073C4:  BTFSC  00.0
073C6:  BSF    xE8.2
....................       GREEN_Colour.B4 = EEpDat >> 3;
073C8:  RRCF   3A,W
073CA:  MOVWF  00
073CC:  RRCF   00,F
073CE:  RRCF   00,F
073D0:  MOVLW  1F
073D2:  ANDWF  00,F
073D4:  BCF    xE8.3
073D6:  BTFSC  00.0
073D8:  BSF    xE8.3
....................       GREEN_Colour.B5 = EEpDat >> 4;
073DA:  SWAPF  3A,W
073DC:  MOVWF  00
073DE:  MOVLW  0F
073E0:  ANDWF  00,F
073E2:  BCF    xE8.4
073E4:  BTFSC  00.0
073E6:  BSF    xE8.4
....................       GREEN_Colour.B6 = EEpDat >> 5;
073E8:  SWAPF  3A,W
073EA:  MOVWF  00
073EC:  RRCF   00,F
073EE:  MOVLW  07
073F0:  ANDWF  00,F
073F2:  BCF    xE8.5
073F4:  BTFSC  00.0
073F6:  BSF    xE8.5
....................       GREEN_Colour.B7 = EEpDat >> 6;
073F8:  SWAPF  3A,W
073FA:  MOVWF  00
073FC:  RRCF   00,F
073FE:  RRCF   00,F
07400:  MOVLW  03
07402:  ANDWF  00,F
07404:  BCF    xE8.6
07406:  BTFSC  00.0
07408:  BSF    xE8.6
....................       GREEN_Colour.B8 = EEpDat >> 7;
0740A:  CLRF   00
0740C:  BTFSC  3A.7
0740E:  BSF    00.0
07410:  BCF    xE8.7
07412:  BTFSC  00.0
07414:  BSF    xE8.7
....................       
....................       EEpDat = read_eeprom(0x15);
07416:  MOVFF  FF2,750
0741A:  BCF    FF2.7
0741C:  CLRF   FAA
0741E:  MOVLW  15
07420:  MOVWF  FA9
07422:  BCF    FA6.6
07424:  BCF    FA6.7
07426:  BSF    FA6.0
07428:  MOVF   FA8,W
0742A:  MOVLB  7
0742C:  BTFSC  x50.7
0742E:  BSF    FF2.7
07430:  MOVWF  3A
....................       //Green9_10 = EEpDat;
....................       GREEN_Colour.B9 = EEpDat;
07432:  MOVLB  6
07434:  BCF    xE9.0
07436:  BTFSC  3A.0
07438:  BSF    xE9.0
....................       GREEN_Colour.B10 = EEpDat >> 1;
0743A:  BCF    FD8.0
0743C:  RRCF   3A,W
0743E:  BCF    xE9.1
07440:  BTFSC  FE8.0
07442:  BSF    xE9.1
07444:  MOVLB  0
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
....................    
....................   
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
07446:  MOVLW  00
07448:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
0744A:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
0744C:  MOVLW  C0
0744E:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
07450:  BSF    FD1.0
....................    Read_input(); restart_wdt();
07452:  CALL   1924
07456:  CLRWDT
....................    output_bit(Pbuzzer,0);   //Clear Buzzer
07458:  BCF    F89.4
0745A:  BCF    F92.4
....................    output_bit(Pbell,0);     //Clear Bell
0745C:  BCF    F89.3
0745E:  BCF    F92.3
....................    output_bit(P485ctrl,0);
07460:  BCF    F8A.3
07462:  BCF    F93.3
....................    output_bit(PIN_B4,1); //jj
07464:  BSF    F8A.4
07466:  BCF    F93.4
....................    Send_Ouput();
07468:  CALL   21BA
....................    
....................    delay_ms(500);
0746C:  MOVLW  02
0746E:  MOVLB  7
07470:  MOVWF  x50
07472:  MOVLW  FA
07474:  MOVWF  x59
07476:  MOVLB  0
07478:  CALL   0848
0747C:  MOVLB  7
0747E:  DECFSZ x50,F
07480:  BRA    7472
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=10;i++)
07482:  MOVLW  01
07484:  MOVWF  x4E
07486:  MOVF   x4E,W
07488:  SUBLW  0A
0748A:  BTFSS  FD8.0
0748C:  BRA    75BA
....................    {
....................       FaultAgo[i] = 0;
0748E:  MOVFF  74E,754
07492:  CLRF   x55
07494:  MOVLW  06
07496:  MOVWF  x57
07498:  MOVLW  EC
0749A:  MOVWF  x56
0749C:  MOVLB  0
0749E:  CALL   1886
....................       FaultNow[i] = 0;
074A2:  MOVFF  74E,754
074A6:  MOVLB  7
074A8:  CLRF   x55
074AA:  MOVLW  06
074AC:  MOVWF  x57
074AE:  MOVLW  EF
074B0:  MOVWF  x56
074B2:  MOVLB  0
074B4:  CALL   1886
....................       ReleaseTime[i] = 0;
074B8:  BCF    FD8.0
074BA:  MOVLB  7
074BC:  RLCF   x4E,W
074BE:  CLRF   03
074C0:  ADDLW  F2
074C2:  MOVWF  FE9
074C4:  MOVLW  06
074C6:  ADDWFC 03,W
074C8:  MOVWF  FEA
074CA:  CLRF   FEC
074CC:  MOVF   FED,F
074CE:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
074D0:  MOVFF  74E,754
074D4:  MOVLW  07
074D6:  MOVWF  x56
074D8:  MOVLW  46
074DA:  MOVWF  x55
074DC:  MOVLB  0
074DE:  CALL   182E
074E2:  MOVF   01,W
074E4:  ANDLW  01
074E6:  SUBLW  01
074E8:  BNZ   7552
....................       {
....................          switch(i)
074EA:  MOVLW  01
074EC:  MOVLB  7
074EE:  SUBWF  x4E,W
074F0:  ADDLW  F6
074F2:  BC    754E
074F4:  ADDLW  0A
074F6:  MOVLB  0
074F8:  GOTO   77BE
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
074FC:  MOVLB  6
074FE:  BSF    xCE.0
....................             break;
07500:  MOVLB  7
07502:  BRA    754E
....................             case 2:
....................                Inputt.B2 = 1; 
07504:  MOVLB  6
07506:  BSF    xCE.1
....................             break;
07508:  MOVLB  7
0750A:  BRA    754E
....................             case 3:
....................                Inputt.B3 = 1; 
0750C:  MOVLB  6
0750E:  BSF    xCE.2
....................             break;
07510:  MOVLB  7
07512:  BRA    754E
....................             case 4:
....................                Inputt.B4 = 1; 
07514:  MOVLB  6
07516:  BSF    xCE.3
....................             break;
07518:  MOVLB  7
0751A:  BRA    754E
....................             case 5:
....................                Inputt.B5 = 1; 
0751C:  MOVLB  6
0751E:  BSF    xCE.4
....................             break;
07520:  MOVLB  7
07522:  BRA    754E
....................             case 6:
....................                Inputt.B6 = 1; 
07524:  MOVLB  6
07526:  BSF    xCE.5
....................             break;
07528:  MOVLB  7
0752A:  BRA    754E
....................             case 7:
....................                Inputt.B7 = 1; 
0752C:  MOVLB  6
0752E:  BSF    xCE.6
....................              break;
07530:  MOVLB  7
07532:  BRA    754E
....................              case 8:
....................                Inputt.B8 = 1; 
07534:  MOVLB  6
07536:  BSF    xCE.7
....................             break;
07538:  MOVLB  7
0753A:  BRA    754E
....................             case 9:
....................                Inputt.B9 = 1; 
0753C:  MOVLB  6
0753E:  BSF    xCF.0
....................             break;
07540:  MOVLB  7
07542:  BRA    754E
....................             case 10:
....................                Inputt.B10 = 1; 
07544:  MOVLB  6
07546:  BSF    xCF.1
....................             break;
07548:  MOVLB  7
0754A:  BRA    754E
0754C:  MOVLB  7
....................           
....................          }                 
....................       }
0754E:  BRA    75B6
07550:  MOVLB  0
....................       else
....................       {
....................          switch(i)
07552:  MOVLW  01
07554:  MOVLB  7
07556:  SUBWF  x4E,W
07558:  ADDLW  F6
0755A:  BC    75B6
0755C:  ADDLW  0A
0755E:  MOVLB  0
07560:  GOTO   77EC
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
07564:  MOVLB  6
07566:  BCF    xCE.0
....................             break;
07568:  MOVLB  7
0756A:  BRA    75B6
....................             case 2:
....................                Inputt.B2 = 0; 
0756C:  MOVLB  6
0756E:  BCF    xCE.1
....................             break;
07570:  MOVLB  7
07572:  BRA    75B6
....................             case 3:
....................                Inputt.B3 = 0; 
07574:  MOVLB  6
07576:  BCF    xCE.2
....................             break;
07578:  MOVLB  7
0757A:  BRA    75B6
....................             case 4:
....................                Inputt.B4 = 0; 
0757C:  MOVLB  6
0757E:  BCF    xCE.3
....................             break;
07580:  MOVLB  7
07582:  BRA    75B6
....................             case 5:
....................                Inputt.B5 = 0; 
07584:  MOVLB  6
07586:  BCF    xCE.4
....................             break;
07588:  MOVLB  7
0758A:  BRA    75B6
....................             case 6:
....................                Inputt.B6 = 0; 
0758C:  MOVLB  6
0758E:  BCF    xCE.5
....................             break;
07590:  MOVLB  7
07592:  BRA    75B6
....................             case 7:
....................                Inputt.B7 = 0; 
07594:  MOVLB  6
07596:  BCF    xCE.6
....................              break;
07598:  MOVLB  7
0759A:  BRA    75B6
....................              case 8:
....................                Inputt.B8 = 0; 
0759C:  MOVLB  6
0759E:  BCF    xCE.7
....................             break;
075A0:  MOVLB  7
075A2:  BRA    75B6
....................             case 9:
....................                Inputt.B9 = 0; 
075A4:  MOVLB  6
075A6:  BCF    xCF.0
....................             break;
075A8:  MOVLB  7
075AA:  BRA    75B6
....................             case 10:
....................                Inputt.B10 = 0; 
075AC:  MOVLB  6
075AE:  BCF    xCF.1
....................             break;
075B0:  MOVLB  7
075B2:  BRA    75B6
075B4:  MOVLB  7
....................        
....................          }                 
....................       } 
075B6:  INCF   x4E,F
075B8:  BRA    7486
....................    }
....................    
....................       //GSM SIM900 Init
....................    delay_ms(1000);
075BA:  MOVLW  04
075BC:  MOVWF  x50
075BE:  MOVLW  FA
075C0:  MOVWF  x59
075C2:  MOVLB  0
075C4:  CALL   0848
075C8:  MOVLB  7
075CA:  DECFSZ x50,F
075CC:  BRA    75BE
....................    fprintf(CH2,"AT+CMGF=1"); 
075CE:  MOVLW  3E
075D0:  MOVWF  FF6
075D2:  MOVLW  08
075D4:  MOVWF  FF7
075D6:  MOVLB  0
075D8:  CALL   2436
....................    putc('\n',CH2);
075DC:  MOVLW  0A
075DE:  MOVLB  7
075E0:  MOVWF  x5A
075E2:  MOVLB  0
075E4:  CALL   23F0
....................    delay_ms(50);
075E8:  MOVLW  32
075EA:  MOVLB  7
075EC:  MOVWF  x59
075EE:  MOVLB  0
075F0:  CALL   0848
....................    
....................    SendSMS.B1 =0;
075F4:  MOVLB  6
075F6:  BCF    xEA.0
....................    SendSMS.B2 =0;
075F8:  BCF    xEA.1
....................    SendSMS.B3 =0;
075FA:  BCF    xEA.2
....................    SendSMS.B4 =0;
075FC:  BCF    xEA.3
....................    SendSMS.B5 =0;
075FE:  BCF    xEA.4
....................    SendSMS.B6 =0;
07600:  BCF    xEA.5
....................    SendSMS.B7 =0;
07602:  BCF    xEA.6
....................    SendSMS.B8 =0;
07604:  BCF    xEA.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
07606:  MOVLB  7
07608:  CLRF   x4F
0760A:  MOVF   x4F,W
0760C:  SUBLW  09
0760E:  BNC   7642
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
07610:  CLRF   03
07612:  MOVF   x4F,W
07614:  ADDLW  7F
07616:  MOVWF  FE9
07618:  MOVLW  05
0761A:  ADDWFC 03,W
0761C:  MOVWF  FEA
0761E:  MOVLW  32
07620:  ADDWF  x4F,W
07622:  MOVWF  x52
07624:  MOVFF  FF2,753
07628:  BCF    FF2.7
0762A:  CLRF   FAA
0762C:  MOVFF  752,FA9
07630:  BCF    FA6.6
07632:  BCF    FA6.7
07634:  BSF    FA6.0
07636:  MOVF   FA8,W
07638:  BTFSC  x53.7
0763A:  BSF    FF2.7
0763C:  MOVWF  FEF
0763E:  INCF   x4F,F
07640:  BRA    760A
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
07642:  CLRF   03
07644:  MOVF   x4F,W
07646:  ADDLW  7F
07648:  MOVWF  FE9
0764A:  MOVLW  05
0764C:  ADDWFC 03,W
0764E:  MOVWF  FEA
07650:  CLRF   FEF
.................... 
....................    delay_ms(500);
07652:  MOVLW  02
07654:  MOVWF  x50
07656:  MOVLW  FA
07658:  MOVWF  x59
0765A:  MOVLB  0
0765C:  CALL   0848
07660:  MOVLB  7
07662:  DECFSZ x50,F
07664:  BRA    7656
....................    
....................    while(TRUE)
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
07666:  CLRF   x50
07668:  SETF   x51
0766A:  MOVLB  0
0766C:  CALL   218E
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
07670:  MOVLB  7
07672:  CLRF   x50
07674:  SETF   x51
07676:  MOVLB  0
07678:  CALL   21A4
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
0767C:  MOVLW  02
0767E:  MOVLB  7
07680:  MOVWF  x50
07682:  SETF   x51
07684:  MOVLB  0
07686:  CALL   218E
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
0768A:  MOVLW  02
0768C:  MOVLB  7
0768E:  MOVWF  x50
07690:  SETF   x51
07692:  MOVLB  0
07694:  CALL   21A4
....................       restart_wdt();
07698:  CLRWDT
.................... 
....................       if(recieve_completed == 1)
0769A:  BTFSS  30.5
0769C:  BRA    76A4
....................       {
....................          Modbus_Function();
0769E:  GOTO   26BE
....................          recieve_completed = 0 ;
076A2:  BCF    30.5
....................       }
....................       
....................    
....................       check_ack();
076A4:  GOTO   44C6
....................       check_reset();
076A8:  GOTO   45B6
....................       check_test();
076AC:  BRA    6F7A
....................       
....................       restart_wdt();
076AE:  CLRWDT
....................       
....................       
....................       Read_input(); restart_wdt();//Must be first
076B0:  CALL   1924
076B4:  CLRWDT
....................       Anal_Function(); restart_wdt();
076B6:  CALL   4E5A
076BA:  CLRWDT
....................       Send_Ouput(); restart_wdt();
076BC:  CALL   21BA
076C0:  CLRWDT
....................       //Driver595(); restart_wdt();
....................       
....................       
....................       output_toggle(PIN_A0);
076C2:  BCF    F92.0
076C4:  BTG    F89.0
....................       
....................       if(RefreshConfigData)
076C6:  BTFSS  30.4
076C8:  BRA    77B8
....................       {
....................          RefreshConfigData =0;
076CA:  BCF    30.4
....................          Read_Config();
076CC:  CALL   0966
....................          //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................   
....................          IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
076D0:  MOVLB  7
076D2:  CLRF   x50
076D4:  SETF   x51
076D6:  MOVLB  0
076D8:  CALL   0940
....................          IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
076DC:  MOVLB  7
076DE:  CLRF   x50
076E0:  SETF   x51
076E2:  MOVLB  0
076E4:  CALL   0952
....................          IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
076E8:  MOVLW  02
076EA:  MOVLB  7
076EC:  MOVWF  x50
076EE:  SETF   x51
076F0:  MOVLB  0
076F2:  CALL   0940
....................          IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
076F6:  MOVLW  02
076F8:  MOVLB  7
076FA:  MOVWF  x50
076FC:  SETF   x51
076FE:  MOVLB  0
07700:  CALL   0952
....................          //  jj
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
07704:  MOVLB  7
07706:  CLRF   x52
07708:  MOVLW  06
0770A:  MOVWF  x53
0770C:  SETF   x54
0770E:  MOVLB  0
07710:  CALL   0878
....................          IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
07714:  MOVLB  7
07716:  CLRF   x52
07718:  MOVLW  16
0771A:  MOVWF  x53
0771C:  SETF   x54
0771E:  MOVLB  0
07720:  CALL   0878
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
07724:  MOVLW  02
07726:  MOVLB  7
07728:  MOVWF  x52
0772A:  MOVLW  06
0772C:  MOVWF  x53
0772E:  SETF   x54
07730:  MOVLB  0
07732:  CALL   0878
....................          IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
07736:  MOVLW  02
07738:  MOVLB  7
0773A:  MOVWF  x52
0773C:  MOVLW  16
0773E:  MOVWF  x53
07740:  SETF   x54
07742:  MOVLB  0
07744:  CALL   0878
....................          //  jj
....................          IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
07748:  MOVLW  04
0774A:  MOVLB  7
0774C:  MOVWF  x50
0774E:  CLRF   x51
07750:  MOVLB  0
07752:  CALL   0940
....................          IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
07756:  MOVLW  04
07758:  MOVLB  7
0775A:  MOVWF  x50
0775C:  CLRF   x51
0775E:  MOVLB  0
07760:  CALL   0952
....................          IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
07764:  MOVLW  06
07766:  MOVLB  7
07768:  MOVWF  x50
0776A:  CLRF   x51
0776C:  MOVLB  0
0776E:  CALL   0940
....................          IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
07772:  MOVLW  06
07774:  MOVLB  7
07776:  MOVWF  x50
07778:  CLRF   x51
0777A:  MOVLB  0
0777C:  CALL   0952
....................          IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
07780:  MOVLW  08
07782:  MOVLB  7
07784:  MOVWF  x50
07786:  CLRF   x51
07788:  MOVLB  0
0778A:  CALL   0940
....................          IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0778E:  MOVLW  08
07790:  MOVLB  7
07792:  MOVWF  x50
07794:  CLRF   x51
07796:  MOVLB  0
07798:  CALL   0952
....................          IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0779C:  MOVLW  0A
0779E:  MOVLB  7
077A0:  MOVWF  x50
077A2:  CLRF   x51
077A4:  MOVLB  0
077A6:  CALL   0940
....................          IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
077AA:  MOVLW  0A
077AC:  MOVLB  7
077AE:  MOVWF  x50
077B0:  CLRF   x51
077B2:  MOVLB  0
077B4:  CALL   0952
....................       }
077B8:  MOVLB  7
077BA:  BRA    7666
....................       
....................    }
....................    
.................... }
077BC:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
